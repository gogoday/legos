function escapeUserInput(str){
  return (str+'').replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
};
function $addClass(ids,cName){
	$setClass(ids,cName,"add");	
}
function $addEvent(obj, type, handle) {
	if(!obj || !type || !handle) {
		return;
	}
	if( obj instanceof Array) {
		for(var i = 0, len = obj.length; i < len; i++) {$addEvent(obj[i], type, handle);
		}
		return;
	}
	if( type instanceof Array) {
		for(var i = 0, len = type.length; i < len; i++) {$addEvent(obj, type[i], handle);
		}
		return;
	}
	function createDelegate(handle, context) {
		return function() {
			return handle.apply(context, arguments);
		};
	};

	if(window.addEventListener) {
		obj.addEventListener(type, createDelegate(handle, obj), false);
	} else if(window.attachEvent) {
		obj.attachEvent("on" + type, createDelegate(handle, obj));
	} else {
		obj["on" + type] = handle;
	}
}
function $addf(a,b) {
	var len1=(a+".").split(".")[1].length,
		len2=(b+".").split(".")[1].length,
		n=Math.max(len1,len2),
		m=Math.pow(10,n);
	return (a*m+b*m)/m;
}
function $addFlash(showId,flashSrc,flashW,flashH){
//显示flash
	$id(showId).innerHTML='<embed src="'+flashSrc+'" height="'+flashH+'" width="'+flashW+'" wmode="transparent" type="application/x-shockwave-flash"></embed>';
}
function $addHover(obj){
//标签后的箭头加上hover弹出下拉框效果
	var option = {
		outLiID:"",
		downListID:"",
		hoverSpanID:""
	}
	for(var i in obj){
		option[i] = obj[i];
	}
	var	oHover=$id(option.outLiID),
		oList=$id(option.downListID),
		oBind=option.hoverSpanID===""?oHover:$id(option.hoverSpanID);
	$mouseover(oBind,function(){
		oList.className = "now";
	});
	$mouseout(oHover,function(){
		oList.className = "now h";
	});
}
function $addSelect(e,t,v){		
	//新增一个下拉框
	var o = new Option(t, v);
	e.options[e.options.length]=o;
	return o;
}
//type标识请求的方式,ls表loadscript，j132标识jquery，j126标识base，lk标识普通链接,fr标识form表单,ow打开新窗口
function $addToken(url,type){
    var token=$getToken();
    //只支持http和https协议
    if(url=="" || url.indexOf("http")!=0){
        return url;
    }
	if(url.indexOf("#")!=-1){
		var f1=url.match(/\?.+\#/);
		 if(f1){
			var t=f1[0].split("#"),newPara=[t[0],"&g_tk=",token,"&g_ty=",type,"#",t[1]].join("");
			return url.replace(f1[0],newPara);
		 }else{
			var t=url.split("#");
			return [t[0],"?g_tk=",token,"&g_ty=",type,"#",t[1]].join("");
		 }
	 }
    return token==""?url:url+(url.indexOf("?")!=-1?"&":"?")+"g_tk="+token+"&g_ty="+type;
}
function $addZero(v,size){
	for(var i=0,len=size-(v+"").length;i<len;i++){
		v="0"+v;
	};
	return v;
}
function $ajax(opt) {
	/*本函数基于QZFL.XHR实现*/
	var o = {
		url : '', //请求地址
		method : 'GET', //发送方式，除非指明POST，否则全部为GET
		data : null, //hashTable形式的字典
		type : "text", //返回类型,text/xml/json
		cache : false, //是否缓存，默认不缓存
		autoToken : true, //是否自动为请求加上token
		onSuccess : $empty(),
		onError : $empty(),
		onComplete : $empty(),
		beforeSend : $empty(),//发送请求前所执行的函数,一般用于修改header，参数是XMLHttpRequest对象
		isFilter:true	//是否开启过滤，默认开启
	};
	//合并参数
	for(var key in opt) {
		o[key] = opt[key]
	};

	o.method = ( typeof (o.method) != "string" || o.method.toUpperCase() != "POST") ? "GET" : "POST";
	o.data = $makeUrl(o.data);

	if(o.method == 'POST' && o.data == null) {
		return false;
	}

	if(o.method == 'GET' && o.data) {
		o.url += (o.url.indexOf("?") < 0 ? "?" : "&") + o.data;
	}

	o.xhr = $xhrMaker();

	if(o.xhr === null) {
		return false;
	}

	if(o.autoToken) {
		o.url = $addToken(o.url, "ajax");
	}

	try {
		o.xhr.open(o.method, o.url, true);
	}
	catch (e) {
		return false;
	}

	if(o.method == 'POST') {
		o.xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
	}

	if(!o.cache) {
		o.xhr.setRequestHeader('If-Modified-Since', 'Thu, 1 Jan 1970 00:00:00 GMT');
		o.xhr.setRequestHeader('Cache-Control', 'no-cache');
	}

	o.xhr.onreadystatechange = function() {
		try {
			if(o.xhr.readyState == 4) {
				if(o.xhr.status >= 200 && o.xhr.status < 300) {
					var backData = o.xhr.responseText;
					o.isFilter && (backData=backData.replace(/<!--.*-->/g, ''));
					switch(o.type) {
					case 'text':
						o.onSuccess(backData);
						break;
					case "json":
						var parsed = true;
						try {
							backData = (new Function("return (" + backData + ")"))();
						}
						catch(e) {
							o.onError(o.xhr.status, e, backData);
							parsed = false;
						}
						if(parsed) {
							o.onSuccess(backData);
						}
						break;
					case "xml":
						o.onSuccess(o.xhr.responseXML);
						break;
					}
				}
				else {
					o.onError(o.xhr.status);
				}
				o.onComplete(o.xhr.status);
				delete o.xhr;
			}
		}
		catch (e) {
		}
	};

	o.beforeSend(o.xhr);

	o.xhr.send(o.method == 'POST' ? o.data : null);
}
function $appendStyle(cssText){
    var elStyle = document.createElement("style");
    elStyle.setAttribute("type", "text/css");
    if(elStyle.styleSheet){// IE
        elStyle.styleSheet.cssText = cssText;
    } else {// w3c
        var tmpText = document.createTextNode(cssText);
        elStyle.appendChild(tmpText);
    }
    document.getElementsByTagName("head")[0].appendChild(elStyle);
}
//添加tr的html代码
function $appendTR(tbody, html) {
    var div = document.createElement("DIV"), frag = document.createDocumentFragment();
    div.innerHTML = "<table><tbody>" + html + "</tbody></table>";
    var trAs = div.getElementsByTagName("TR"), len = trAs.length;
    if (len > 0) {
        for (var i = 0; i < len; i++) {
            frag.appendChild(trAs[i].cloneNode(true));
        }
    }
    tbody.appendChild(frag);
    div = null;
    return tbody;
}
/**
 * 复制数组元素
 * @param {Array} source 要复制的数组
 * @param {Array} target 目标数组
 * @param {Number} start 起始索引
 * @param {Number} end 结束索引,不含该元素
 */
function $arrayCopy(source, target, start, end){
	
    var first, //起始索引
    len=source.length,
	last;
        first=(!start||isNaN(start)||start>=source.length||start<0)?0:start;	
	last=(!end||isNaN(end)||end>=source.length||end<1)?len:end;
		
    for (; first < last; ++first) {
        target.push(source[first]);
    }
}
function $arrayEach(arr,func){
    return $$.each(arr,func);
}
function $arrayFind(arr,item){
	for (var i=0;i<arr.length;i++){
		if(arr[i]===item){
			return i;
		}
	};
	return -1;
}
function $arrayFlatten(a){
    if(!a.push){return a;}
    for(var i=0;i<a.length;i++){      
        if(a[i].constructor==Array){
            var obj=a[i];
            obj.unshift(i+1,0);
            [].splice.apply(a,obj);
            a.splice(i,1);
            i--;
        }
    }
    return a;
}
/**
 * 删除数组中的特定值对象
 * @param {Array} source 目标数组
 * @param {Object} target 要删除的对象
 * @return {Number} count 删除的数量
 */
function $arrayRemove(source, target){
    var count = 0,  len = source.length;
    for (var c = 0; c < len; c++) {
        if (source[c] === target) {
            source.splice(c--, 1);
            count++;
        }
    }
    return count;
}
//删除数组元素,返回删除特定元素后的新的数组
//index参数为数组索引，从0开始算起。
function $arrayRm(arr,index) {
  if(index<0 || index > arr.length-1)  //如果index非法，则不进行任何操作。
    return arr;
  else
    return arr.slice(0,index).concat(arr.slice(index+1,arr.length));
}
function $arraySelect(arr, iterator){
    var res = []; 
    $each(arr, function(value, index){
        if (iterator(value, index)){
	    res.push(value);
	}
    }); 
    return res; 
}
function $arrayUniq(arr){
	var returnArr=[];
	for (var i=0,len=arr.length;i<len;i++){
		((","+returnArr+",").indexOf(","+arr[i]+",")<0)?returnArr.push(arr[i]):'';
	};
	return returnArr;	
}
function $attr(attr,val,node){
	var results=[],
		node=node||document.body;
		
	walk(node,function(n){
		var actual=n.nodeType===1&&(attr==="class"?n.className:n.getAttribute(attr));
		if(typeof actual === 'string' && (actual === val || typeof val !== 'string')){
				results.push(n);
		}
	});
	
	return results;

	function walk(n,func){
		func(n);
		n=n.firstChild;
		while(n){
			walk(n,func);
			n=n.nextSibling;
		}
	}
}
function $batchAddEvent(elements,types,handle){
	if(!elements instanceof Array){
		elements=[elements];
	}
	if(!types instanceof Array){
		types=[types];
	}
	for(var i=0,len1=elements.length;i<len1;i++){
		for(j=0,len2=types.length;j<len2;j++){
			$addEvent($id(elements[i]),types[j],handle);
		}
	}
}
function $bindEvent(name,type,handle){
	//专用于批量绑定名字相同的事件,单独绑定直接写onclick等
	var objs=document.getElementsByName(name);
	for(var i=0,len=objs.length;i<len;i++){
		$addEvent(objs[i],type,handle);
	}
}
function $birthday(opt){
	var option={
		yearDom:"",
		monthDom:"",
		dayDom:"",
		//最多岁数
		maxAge:100,
		//最小岁数，年单位
		minAge:0,
		//最小岁数，天单位，与minAge 2选1使用
		minAgeDay:0,
		valueChanged:$empty(),
		getValue:function(obj){
			var val=option.yearDom.value+'-'+option.monthDom.value+'-'+option.dayDom.value;
			return val;
		},
		getAge:function(){
			var age=0;
			if(option.check()){
				var y=Number(option.yearDom.value);
				var m=Number(option.monthDom.value);
				var d=Number(option.dayDom.value);
				var v=m*100+d*1;
				var now=new Date();
				var ny=now.getFullYear();
				var nm=now.getMonth();
				var nd=now.getDate();
				age=ny==y?0:(ny-y+(nm*100+nd>=v?0:-1));
			}
			return age;
		},
		setValue:function(val,noFire){
			val=val.replace(/^ +/,'').replace(/ +$/,'');
			var b=val.split('-');
			var yearDom=option.yearDom;
			var monthDom=option.monthDom;
			var dayDom=option.dayDom;
			yearDom.value=b[0];
			yearDom.onchange();
			monthDom.value=b[1];
			monthDom.onchange();
			dayDom.value=b[2];
			option.value=val;
			if(!noFire){
				option.valueChanged();
			}
		},
		check:function(){
			return option.yearDom.value&&option.monthDom.value&&option.dayDom.value;
		},
		init:function(){
			var maxAge=option.maxAge;
			var minAge=option.minAge;
			var minAgeDay=option.minAgeDay;
			if(!maxAge){
				maxAge=70;
			}
			if(!minAge){
				minAge=0;
			}
			if(!minAgeDay){
				minAgeDay=0;
			}
			maxAge=parseInt(maxAge);
			minAge=parseInt(minAge);
			minAgeDay=parseInt(minAgeDay);
			
			var now=new Date();
			now.setHours(0);
			now.setMinutes(0);
			now.setSeconds(0);
			now.setMilliseconds(0);
			
			var nowYear=now.getFullYear();
			var nowMonth=now.getMonth()+1;
			var nowDay=now.getDate();
			//偏移minAgeDay天，提供对最小岁数是天单位的支持
			var maxDate=new Date(now.valueOf()-minAgeDay*86400000);
			var maxDateYear=maxDate.getFullYear()-minAge;
			var maxDateMonth=maxDate.getMonth()+1;
			var maxDateDay=maxDate.getDate();
			
			var minYear=nowYear-maxAge;
			
			//var maxYear=nowYear-minAge;
			var yearDom=option.yearDom;
			var monthDom=option.monthDom;
			var dayDom=option.dayDom;
			yearDom.options.length=0;
			yearDom.options.add(new Option('-','-'));
			for(var i=maxDateYear;i>=minYear;i--){
				yearDom.options.add(new Option(i,i));
			}
			yearDom.value='-';
			yearDom.onchange=function(){
				var selectedYear=parseInt(this.value);
				var maxMonth=selectedYear<maxDateYear?12:maxDateMonth;
				var minMonth=selectedYear>minYear?1:nowMonth;
				var month=monthDom.value;
				monthDom.options.length=0;
				monthDom.options.add(new Option('-',''));
				for(var i=minMonth;i<=maxMonth;i++){
					monthDom.options.add(new Option(i,i<10?'0'+i:i));
				}
				monthDom.value=month;
				monthDom.onchange();
			}
			monthDom.onchange=function(){
				var selectedYear=parseInt(yearDom.value);
				var selectedMonth=parseInt(Number(this.value));
				var dayMap=[1,31,selectedYear%400==0||(selectedYear%100!=0&&selectedYear%4==0)?29:28,31,30,31,30,31,31,30,31,30,31];
				var maxDay=maxDateYear==selectedYear&&selectedMonth==maxDateMonth?maxDateDay:dayMap[selectedMonth];
				var minDay=minYear==selectedYear&&selectedMonth==nowMonth?nowDay:1;
				var day=dayDom.value;
				dayDom.options.length=0;
				dayDom.options.add(new Option('-',''));
				for(var i=minDay;i<=maxDay;i++){
					dayDom.options.add(new Option(i,i<10?'0'+i:i));
				}
				dayDom.value=day;
				if(dayDom.value){
					option.valueChanged();
				}
			}
			dayDom.onchange=function(){
				option.valueChanged();
			}
		}
	}
	for(var i in opt){
		option[i]=opt[i];

	}
	option.init();
	return option;
}
$break=window["$break"]||function(t){return t===window["$break"];}
/*		
“日历选择组件”的相关代码
--------------------------------------------
修订记录：
20110531 brianliu change相关时间修正，兼容大月份切换到小月份的bug
20110527 brianliu	支持onchanging,onchanged事件，且可通过onchanging返回false阻止用户的选择日期,不可以调用$calendar使用此特性，需要直接调用PP.calendar()
20100909 aidenli    录入legos平台
20100909 brianliu   迁移到新平台
20100420 brianliu	支持初始化设置时分
20100107 robinshen	
20081021 kpxu		创建本模块js框架
*/
//创建命名空间：PP.calendar
$namespace("PP.calendar");
///////////////需求描述定义区域//////////////////////////////////
//页面初始化的相关方法
function $calendar(opt) {
    var option = {
        it: null,
        zero: true,
        hour: '',
        showTime: false
    }
    option = $extend(option, opt);
    if (!option.showTime) {
        PP.calendar.easy(option.it, option.zero);
    } else {
        PP.calendar.easyLong(option.it, option.zero, option.hour);
    }
};
PP.calendar = function (opt) {
    var option = {
        input: "", //日历控件关联的表单,jquery语法
        action: "", //触发器的id列表，jquery语法
        float: true, //浮窗显示
        time: true, //使用时间
        format: "%y-%m-%d %h:%M", //格式化字符串
        x: 0,
        y: 0,
        //startYear: 2000, 	//起始年
        //endYear: 2010, 	//结束年
        defaultVar: '', //默认值
        haveZero: true, //是否补零
        autoXY: false, //每次点击时自动计算位置
        zeroHour: false, //是否从零点开始
        defaultHour: '00-00', //如果zeroHour为false，可以设置初始化的小时和分钟
        css: ''			//自定义css
    };
    $$.extend(option, opt);
    if ($$(option.input).length == 0) {
        return;
    }
	var thisYear = new Date().getFullYear();
	if(!option.startYear){
		option.startYear = thisYear-5;
	}
	if(!option.endYear){
		option.endYear = thisYear+1;
	}
    if (!$id("calendarFrame")) {
        try {
            $$("head").append("<style type='text/css'>.calender {width:170px;color:#000000	height:183px;font-size:12px;overflow:hidden;	margin-right:14px;background:url('') no-repeat right center #fff;border:1px solid #397EAE;padding:1px;}.calender ul,.calender li{list-style-type:none;margin:0;padding:0;}.day li,.date li{float:left;clear:none;}.calender .day {background-color:#EDF5FF;	height:20px;}.calender .day li,.calender .date li{float:left;width:14%;height:20px;line-height:20px;text-align:center}.calender li a {	text-decoration:none;font-family:Tahoma;font-size:11px;color:#333}.calender li a:hover{color:#f30;text-decoration:underline;}.calenderTitle a {text-decoration:none;margin:0 2px;color:#000;font-weight:bold}.today {background-color:#ffffaa;border:1px solid #f60;padding:2px}.today a {color:#f30;}.calenderBottom {clear:both;border-top:1px solid #ddd;padding: 3px 0;text-align:left}.calenderBottom a {text-decoration:none;margin:2px !important;font-weight:bold;color:#000;}.closeCalenderBox {	float:right;border:1px solid #000;background:#fff;font-size:9px;width:11px;height:11px;line-height:11px;text-align:center;overflow:hidden;font-weight:normal !important}</style>");
            //输出浮窗框架
            var cc = document.createElement('span');
            cc.style.position = 'absolute';
            cc.style.zIndex = 99999;
            cc.style.display = "none";
            cc.className = "calendarFrame";
            cc.id = "calendarFrame";
            cc.innerHTML = '<iframe width="165" height="170" frameborder="0" style="width:165px;height:170px;position:absolute;top:1px;left:1px;border:0;z-index:-100000;FILTER: Alpha(Opacity=110,Style=0)" ></iframe><div class="calender"><div class="calenderTitle" style="text-align:center;height:20px;line-height:20px;clear:both;"><A class="NextMonth" title="下一年" style="float:right;font-size:18px;" caction="nextYear">&raquo;</A><A class="LastMonth" title="上一年" style="float:left;font-size:18px;" caction="lastYear">&laquo;</A><A class="NextMonth" title="下一月" style="float:right;font-size:18px;" caction="nextMonth">&#8250;</A><A class="LastMonth" title="上一月" style="float:left;font-size:18px;" caction="lastMonth">&#8249;</A><span class="selectThisYear" faction="yearFrame"><A title="点击选择其他的年份" caction="years" ></A></span>年<span class="selectThisMonth" faction="monthFrame"><A title="点击选择其他的月份" caction="months"></A></span>月</div><div class="calenderBody" style="clear:both"><UL class="day"><LI style="clear:none;">日</LI><LI style="clear:none;">一</LI><LI style="clear:none;">二</LI><LI style="clear:none;">三</LI><LI style="clear:none;">四</LI><LI style="clear:none;">五</LI><LI style="clear:none;">六</LI></UL><UL class="date" faction="dayFrame"></UL></div><div class="calenderBottom" style="text-align:center;" ><A  style="float:right;" caction="close">×</A><span style="float:left;"><A title="回到今天的日期" caction="goToday" >今天</A></span><span faction="timeFrame"><span faction="hourFrame"><A title="点击选择其他的时间" caction="hours"></A></span>点<span faction="minuteFrame"><A title="点击选择其他的时间" caction="minutes"></A></span>分</span></div><div style="float:left;background-color:#ddd; text-align:center; line-height:20px;width:170px; height:20px;">点击日期 确认选择</div></div>';
            document.body.appendChild(cc);
            var cal = $$("#calendarFrame");
            //阻止冒泡
            cal.click(function (event) {
                if (event.preventDefault) {
                    event.preventDefault();
                    event.stopPropagation();
                } else {
                    event.cancelBubble = true;
                }
            }).find("[caction]").css("cursor", "pointer");
            cal.find("[caction='close']").add($$("body")).click(function () {
                $$("#calendarFrame").hide();
            });
            cal.find("[caction='nextMonth'],[caction='lastMonth'],[caction='nextYear'],[caction='lastYear'],[caction='goToday']").click(
			(function(option){ return function () {
                PP.calendar.change(option,this, $$(this).attr("caction"));
            }
			}(option)));
            //点击上一月、下一月、上一年、下一年、今天的事件
            cal.find("[faction='yearFrame'],[faction='monthFrame'],[faction='hourFrame'],[faction='minuteFrame']").each(function () {
                $$(this).attr("oldCode", $$(this).html());
            }).click(
			(function(option){return function () {
                if ($$(this).attr("select")) {
                    return;
                }
                PP.calendar.select(this,option);
            }
			}(option)));
        } catch (e) { }
    }
    //阻止组件冒泡
    try {
        $$(option.input).add($$(option.action)).click(function (event) {
            if (event.preventDefault) {
                event.preventDefault();
                event.stopPropagation();
            } else {
                event.cancelBubble = true;
            }
        });
    } catch (e) { }
    var _input = $$(option.action);
    var _attr = option.float + "$" + option.time + "$" + option.format + "$" + $getX(_input.get(0)) + "$" + (parseInt(PP.calendar.getY(_input.get(0))) + 5) + "$" + option.startYear + "$" + option.endYear + "$" + option.haveZero + "$" + option.autoXY + "$" + option.zeroHour + "$" + option.defaultHour;
    //绑定点击事件
    var _inputBox = $$(option.input)[0];
    _input.attr("_attr", _attr).click(function () {
        PP.calendar.init(_inputBox,option);
    });
};
///////////////功能代码定义区域//////////////////////////////////
//显示日历
PP.calendar.init = function (it,option) {
    var cal = $$("#calendarFrame");
    var _tempStr = it.value.split(' ')[0].split('-');
    var date;
    try {
        date = _tempStr.length == 3 ? new Date(_tempStr[0], parseInt(Number(_tempStr[1])) - 1, parseInt(Number(_tempStr[2]))) : new Date();
    } catch (e) {
        date = new Date();
    }
    var _attr = $$(it).attr("_attr").split("$");
    var _time = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + "-" + date.getHours() + "-" + date.getMinutes();
    if (_attr[9] == "true") {
        var _time = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + "-" + "00" + "-" + "00";
    } else if (_attr[10]) {
        //如果设置了默认时分
        var _time = date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + "-" + _attr[10];
    }
    //显示日历
    cal.attr("_time", _time).attr("_attr", $$(it).attr("_attr")).attr("rid", it.id).css("left", $getX(it) + "px").css("top", (parseInt(PP.calendar.getY(it)) + parseInt($$(it).height() + 5)) + "px").show();
    //是否显示时间
    if (_attr[1] == "true") {
        cal.find("[faction='timeFrame']").show();
    } else {
        cal.find("[faction='timeFrame']").hide();
    }
    //	if(_attr[9]=="true"){

    //		cal.find("[faction='timeFrame']").hide();
    //	}
    //初始化年，月
    PP.calendar.setTimeInfo(cal,option);
};
PP.calendar.easy = function (it, zero) {
    var _id = (typeof (it) == "object") ? it.id : it;
    var _it = $$("#" + _id).get();
    if (_it.length < 1) {
        return;
    }
    var opt = {
        input: "#" + _id,
        action: "#" + _id,
        format: "%y-%m-%d",
        //startYear: 2000,
        //endYear: 2010,
        time: false,
        autoXY: true,
        zeroHour: (zero ? true : false)
    };
    PP.calendar(opt);
};
PP.calendar.easyLong = function (it, zero, hour) {
    var _id = (typeof (it) == "object") ? it.id : it;
    var _it = $$("#" + _id).get();
    if (_it.length < 1) {
        return;
    }
    var opt = {
        input: "#" + _id,
        action: "#" + _id,
        format: "%y-%m-%d %h:%M",
        //startYear: 2000,
        //endYear: 2010,
        time: true,
        autoXY: true,
        zeroHour: (zero ? true : false),
        defaultHour: (hour ? hour : "00-00")
    };
    PP.calendar(opt);
};
//设置当前时间
PP.calendar.setTimeInfo = function (cal,option) {
    var _time = cal.attr("_time").split("-");
    cal.find("[caction='years']").html(_time[0].toString());
    cal.find("[caction='months']").html(_time[1].toString());
    cal.find("[caction='hours']").html(_time[3].toString());
    cal.find("[caction='minutes']").html(_time[4].toString());
    //生成当月的日历列表
    cal.find("[faction='dayFrame']").html(setDayList(cal)).attr("curState", _time[0] + "-" + _time[1]);
    cal.find("[cDays]").css("cursor", "pointer").click(function () {
        PP.calendar.selectDay(this,option);
    });
    function setDayList(cal) {
        var _time = cal.attr("_time").split("-");
        //以参数为当前日期
        var hc = "";
        //上个月的最后一天的日，如30,31,29
        var lDay = dateAdd("d", "-1", _time[0] + "-" + _time[1] + "-01").getDate();
        //上个月补齐天数：本月1号是星期几，那么上个月需要显示几天来补齐日期，灰色显示
        var lDays = getWeekDay(_time[0] + "-" + (_time[1] - 1) + "-01");
        //这个月最后一天
        var cDate = dateAdd("d", "-1", _time[0] + "-" + _time[1] + "-01");
        //这个月总天数
        var cDays = cDate.getDate();
        //下个月补齐天数：最后一天是星期几,如果最后一天不是星期天，那么输出的时候，就要用下个月的时间补齐6-n天
        var nDays = cDate.getDay();
        //今天的日期
        var todayObj = new Date();
        //今天的日期字符串
        today = todayObj.getFullYear() + "-" + todayObj.getMonth() + "-" + todayObj.getDate();
        //循环输出	上个月补齐的几天
        for (i = 0; i < lDays; i++) {  // Last Month's Date
            hc = "<LI style='color:#bbb;font-size:11px;clear:none;' >" + lDay + "</LI>" + hc;
            lDay--;
        }
        //循环输出这个月的日期
        for (i = 1; i <= cDays; i++) { // Current Month's Date
            //如果是今天的话就输出today样式
            //            if (today == _time[0] + "-" + (parseInt(_time[1]) - 1) + "-" + i) {
            if (_time[2] == i) {
                hc += "<li style='clear:none;' ><a href='javascript:;' class='today' cDays=" + i + " title='" + _time[0] + "-" + _time[1] + "-" + i + "'>" + i + "</a></li>";
            } else {
                hc += "<li style='clear:none;' ><a href='javascript:;' class='days' cDays=" + i + " title='" + _time[0] + "-" + _time[1] + "-" + i + "'>" + i + "</a></li>";
            }
        };
        //补齐最后一个星期的几天
        for (var i = 1; i < 7 - nDays; i++) {  // Next Month's Date
            hc += "<LI style='color:#bbb;font-size:11px;clear:none;'>" + i + "</LI>";
        }
        return hc;
    };
    //获取一某日是星期几，从0开始分别是（天，1，2，3，4，5，6）
    function getWeekDay(date) {
        var theDate;
        if (typeof (date) == "string") {
            theDate = new Date(date.split("-")[0], date.split("-")[1], date.split("-")[2]);
        }
        if (typeof (date) == "object") {
            theDate = date;
        }
        return theDate.getDay();
    };
    //日期运算，参数：单位,差值，基准日期
    function dateAdd(interval, number, date) {
        number = parseInt(number);
        //判断各种格式的日期初始值，如果有内容就直接赋值
        if (typeof (date) == "string") {
            var date = new Date(date.split("-")[0], date.split("-")[1], date.split("-")[2]);
        }
        if (typeof (date) == "object") {
            var date = date;
        }
        switch (interval) {
            case "y":
                return new Date(date.getFullYear() + number, date.getMonth(), date.getDate());
                break;
            case "m":
                return new Date(date.getFullYear(), date.getMonth() + number, checkLastDate(date.getFullYear(), date.getMonth() + number, date.getDate()));
                break;
            case "d":
                return new Date(date.getFullYear(), date.getMonth(), date.getDate() + number);
                break;
            case "w":
                return new Date(date.getFullYear(), date.getMonth(), 7 * number + date.getDate());
                break;
        };
    };
    //检查当月的最后一天是否正确，如果不正确就改成正确的
    function checkLastDate(year, month, date) {
        var enddate = ["31", "28", "31", "30", "31", "30", "31", "31", "30", "31", "30", "31"];
        var returnDate = "";
        enddate[1] = (year % 4 == 0) ? "29" : enddate[1];
        return (date > enddate[month]) ? enddate[month] : date;
    };
};
//修改当前日期，各种修改操作(修改对象，修改类型，目标数值)
PP.calendar.change = function (option,it, type, number) {
    var date = PP.calendar.getSelectedTime();
    var cal = $$("#calendarFrame");
    var _time = cal.attr("_time").split("-");
    date = new Date(_time[0], parseInt(_time[1]) - 1, _time[2], _time[3], _time[4]);
    if (type == "goToday") {
        date = new Date();
    }
    if (type == "nextYear") {
        date.setYear(date.getFullYear() + 1);
    }
    if (type == "lastYear") {
        date.setYear(date.getFullYear() - 1);
    }
    if (type == "nextMonth") {
		var om=date.getMonth();
        date.setMonth(om + 1);
		var nm=date.getMonth();
		if((om+1)%12-nm!=0){
			date.setDate(date.getDate()-1);
		}
    }
    if (type == "lastMonth") {
        date.setMonth(date.getMonth() - 1);
    }
    if (type == "yearFrame") {
        date.setYear(parseInt(number));
    }
    if (type == "monthFrame") {
        date.setMonth(parseInt(number) - 1);
    }
    if (type == "hourFrame") {
        date.setHours(parseInt(number));
    }
    if (type == "minuteFrame") {
        date.setMinutes(parseInt(number));
    }
    if (type == "day") {
        date.setDate(parseInt(number));
    }
    cal.attr("_time", date.getFullYear() + "-" + (date.getMonth() + 1) + "-" + date.getDate() + "-" + date.getHours() + "-" + date.getMinutes());
    //初始化年,月
    PP.calendar.setTimeInfo(cal, option);
};
//获取当前用户选择后的时间
PP.calendar.getSelectedTime = function () {
    var cal = $$("#calendarFrame");
    var _time = cal.attr("_time").split("-");
    return new Date(_time[0], parseInt(_time[1]) - 1, _time[2], _time[3], _time[4]);
};
//下拉框日期修改操作
PP.calendar.select = function (it,option) {
    var cal = $$("#calendarFrame");
    var time = cal.attr("_time").split("-");
    var attr = cal.attr("_attr").split("$");
    var type = $$(it).attr("faction");
    var _frame = [0, 0];
    var _value = "";
    if (type == "yearFrame") {
        _frame = [attr[5], attr[6]];
        _value = time[0];
    }
    if (type == "monthFrame") {
        _frame = [1, 12];
        _value = time[1];
    }
    if (type == "hourFrame") {
        _frame = [0, 23];
        _value = time[3];
    }
    if (type == "minuteFrame") {
        _frame = [0, 59];
        _value = time[4];
    }
    var hc = '<select>';
    for (var i = _frame[0]; i <= _frame[1]; i++) {
        hc += '<option value="' + i + '" >' + i + '</option>';
    };
    hc += '</select>';
    $$(it).attr("select", "on").html(hc).find("select").val(_value).change(function () {
        var _tempValue = this.value;
        _parent = $$(this).parent();
        _parent.html(_parent.attr("oldCode")).removeAttr("select");
        PP.calendar.change(option,it, type, _tempValue);
    });
};
//选择日期
PP.calendar.selectDay = function (it,option) {
    var cal = $$("#calendarFrame");
    var attr = cal.attr("_attr").split("$");
    PP.calendar.change(option,it, "day", $$(it).attr("cDays"));
    var date = PP.calendar.getSelectedTime();
    var year = date.getFullYear().toString();
    var month = (date.getMonth() + 1).toString();
    var day = date.getDate().toString();
    var hour = date.getHours().toString();
    var minute = date.getMinutes().toString();
    //处理补零
    if (attr[7] == "true") {
        month = (month.length == 1) ? "0" + month : month;
        day = (day.length == 1) ? "0" + day : day;
        hour = (hour.length == 1) ? "0" + hour : hour;
        minute = (minute.length == 1) ? "0" + minute : minute;
    }
    var _value = attr[2];
    _value = _value.replace("%y", year);
    _value = _value.replace("%m", month);
    _value = _value.replace("%d", day);
    _value = _value.replace("%h", hour);
    _value = _value.replace("%M", minute);
	if(!option||!option.onchanging||(option.onchanging&&option.onchanging(_value ))){
    	cal.find("[caction='close']").click();
	    $$("#" + cal.attr("rid")).val(_value);
		if(option&&option.onchanged){
			option.onchanged();
		}
	}
	
};
PP.calendar.getY = function(el){
	if(el.getBoundingClientRect){
		return el.getBoundingClientRect().top+$getPageScrollHeight();
	}else{
		return $getY(el);	
	}	
}
function $calendars(opt) {
    /**
     * 日历组件
     *
     * @author: alextang
     * @date: 2010-12-30
     * @update: 2011-07-19 日历精确单位可定制(单位为天或者分钟)，页面上点击任意位置隐藏日历，优化UI
     **/
	var option={
		el:null, 
		callback:$empty(), 
		unit:"", 
		nowDate:"", 
		pos:"", 
		e:null
	};
	
	for(var k in opt){option[k]=opt[k]};
    // 组件样式
    $loadCss("http://static.gtimg.com/css/core/calendars.css");

    // 组件DOM结构
    var aDOMCalendar = '';
    aDOMCalendar += '<div id="winCalendar" class="winCalendar">';
    aDOMCalendar += '<div class="close_win"><span id="btnCloseCalendar">关闭</span></div>';
    aDOMCalendar += '<div id="currentTime" class="currentTime">';
    aDOMCalendar += '<strong id="currentYear"></strong> - <strong id="currentMonth"></strong>';
    aDOMCalendar += '<span id="yearMinus" class="arrow leftA" title="减少年份">&laquo;</span>';
    aDOMCalendar += '<span id="monthMinus" class="arrow leftB" title="减少月份">&lt;</span>';
    aDOMCalendar += '<span id="monthPlus" class="arrow rightB" title="增加月份">&gt;</span>';
    aDOMCalendar += '<span id="yearPlus" class="arrow rightA" title="增加年份">&raquo;</span>';
    aDOMCalendar += '</div>';
    aDOMCalendar += '<ul class="week">';
    aDOMCalendar += '<li>一</li><li>二</li><li>三</li><li>四</li><li>五</li><li>六</li><li>日</li>';
    aDOMCalendar += '</ul>';
    aDOMCalendar += '<div id="days" class="days"></div>';
    aDOMCalendar += '<div id="time" class="time">';
    aDOMCalendar += '<input type="number" id="hours" value="00" maxlength="2" min="0" max="23" autocomplete="off"/><span id="minutesWrap"><span class="interval">:</span><input type="number" maxlength="2" id="minutes" value="00" min="0" max="59" autocomplete="off"/></span><span id="secondWrap"><span class="interval">:</span><input type="number" maxlength="2" id="seconds" value="00" min="0" max="59" autocomplete="off"/></span>';
    aDOMCalendar += '<span id="btnOk" class="btnOk">确定</span>';
    aDOMCalendar += '</div>';
    aDOMCalendar += '</div>';
    aDOMCalendar += '<iframe class="frm_calendar" id="frmCalendar" src="about:blank" scrolling="no" frameborder="0"></iframe>';

    // 在页面中插入日历结构
    var insertCalendar = function () {
        if (!$id('elCalendarWrap')) {
            var elCalendarWrap = document.createElement('div');
            elCalendarWrap.innerHTML = aDOMCalendar;
            elCalendarWrap.setAttribute('id', 'elCalendarWrap');
            document.body.appendChild(elCalendarWrap);
        }
    };


    // 日期组件构造函数
    var Calendar = function (config) {
        for (var i in arguments[0]) {
            this[i] = arguments[0][i];
        }
    };

    // 日期组件原型
    Calendar.prototype = {
        finalDate: '',

        getFinalDate: function () {
            return this.finalDate;
        },

        display: function (cDate) {
            var cDate = cDate || new Date();
            var myDate = {
                year: cDate.getFullYear(),
                month: cDate.getMonth() + 1 < 10 ? '0' + (cDate.getMonth() + 1) : cDate.getMonth() + 1,
                date: cDate.getDate()
            };
            this.finalDate = myDate.year + '-' + myDate.month + '-' + (myDate.date < 10 ? '0' + myDate.date : myDate.date);

            this.el.year.innerHTML = myDate.year;
            this.el.month.innerHTML = myDate.month;

            // get firstday position in this month
            myDate.firstdayPos = new Date(myDate.year, myDate.month - 1, 1).getDay() - 1;
            myDate.firstdayPos = myDate.firstdayPos == -1 ? 6 : myDate.firstdayPos;

            // get maxDay in this month
            myDate.maxDayPos = new Date(myDate.year, myDate.month, 0).getDate() + myDate.firstdayPos;

            var days = this.createDayDom();

            // fill data
            var _self = this;
            var last = 0;
            for (var i = 0, k; k = days[i]; i++) {
                var t;
                if (i < myDate.firstdayPos || i >= myDate.maxDayPos) {
                    t = ' ';
                    k.className = 'no_data';
                } else {
                    t = i + 1 - myDate.firstdayPos;
                    k.onclick = function (t, i) {
                        return function () {
                            days[last].className = '';
                            this.className = 'selected';
                            last = i;
                            _self.finalDate = myDate.year + '-' + myDate.month + '-' + (t < 10 ? '0' + t : t);

                            if (_self.el.unit == 'day') {
                                if (_self.callback) {
                                    _self.callback(_self.finalDate);
                                }
                            }
                        };
                    }(t, i);
                }
                k.innerHTML = t;
                if (t == myDate.date) {
                    k.id = this.el.today;
                }
            }
        },

        // create days DOM
        createDayDom: function () {
            var days = this.el.days.getElementsByTagName('a');
            if (days.length <= 0) {
                for (var i = 0; i < 42; i++) {
                    var el = document.createElement('a');
                    el.setAttribute('href', 'javascript:void(0);');
                    this.el.days.appendChild(el);
                }
            } else {
                for (var i = 0, k; k = days[i]; i++) {
                    k.className = '';
                }
            }

            try {
                $id(this.el.today).id = '';
            } catch (e) {}

            return this.el.days.getElementsByTagName('a');
        },

        change: function (type) {
            var today = $id(this.el.today);
            var date = {
                year: Number(this.el.year.firstChild.nodeValue),
                month: Number(this.el.month.firstChild.nodeValue) - 1,
                day: Number(today.firstChild.nodeValue)
            };
            switch (type) {
            case 'yearPlus':
                date.year++;
                break;
            case 'yearMinus':
                date.year--;
                break;
            case 'monthPlus':
				if(date.day==31&&date.month!=6){
					//下个月必然没有31
					date.day=1;
				}
                date.month++;
                if (date.month > 11) {
                    date.year++;
                    date.month = 0;
                }
                break;
            case 'monthMinus':
                date.month--;
                if (date.month < 0) {
                    date.year--;
                    date.month = 11;
                }
                break;
            }
            this.display(new Date(date.year, date.month, date.day));
        },

        custom: function () {
            this.display(arguments[0] || new Date());

            var op = this.el.currentTime.getElementsByTagName('span');
            var _self = this;
            for (var i = 0, k; k = op[i]; i++) {
                k.onclick = function () {
                    _self.change(this.id);
                };
            }
        }
    };
    /**
     * 日期组件对外接口
     *
     * @param (el) 触发日期控件的DOM 必选
     * @param (callback) 选择日期的回调函数 必选
     * @param (unit) 日历选择单位 可选，默认是'day'，可以为'hou'、'min'、'sec'，表示可以选择小时和分钟
     * @param (nowDate) 初始化当前时间 可选，默认值是当前时间
     * @param (pos) 日期控件相对于的触发日期控件DOM的偏移尺寸，默认值[0, 0] 可选
     **/
    var userCalendar = function (el, callback, unit, nowDate, pos, e) {
        insertCalendar();
        unit = unit || 'day';
        var elCalendarWrap = $id('elCalendarWrap');
        var config = {
            el: {
                year: $id('currentYear'),
                month: $id('currentMonth'),
                currentTime: $id('currentTime'),
                days: $id('days'),
                today: 'today',
                unit: unit
            },
            callback: function (v) {
                callback(v);
                elCalendarWrap.style.display = 'none';
            }
        };

        // 根据已有日期初始化日历
        var calendar = new Calendar(config);
        nowDate = nowDate.substring(0, 10);
        if (/\d{4}-\d{2}-\d{2}/.test(nowDate)) {
            nowDate = nowDate.match(/(\d{4})-(\d{2})-(\d{2})/);
            calendar.custom(new Date(nowDate[1], nowDate[2] - 1, nowDate[3]));
        } else {
            calendar.custom();
        }

        // 选择小时和分钟
        if (unit == 'hou' || unit == 'min' || unit == 'sec') {
            $id('time').style.display = 'block';
            $id('minutesWrap').style.display = (unit == 'min' || unit == 'sec') ? 'inline' : 'none';
            $id('secondWrap').style.display = (unit == 'sec') ? 'inline' : 'none';

            $id('btnOk').onclick = function () {
                var iHour = $id('hours').value,
                    iMin = $id('minutes').value,
                    iSec = $id('seconds').value;
                if (iHour < 0 || iHour > 23) {
                    alert('小时可以是0至23的数');
                    return false;
                }
                if ((unit == 'min' || unit == 'sec') && (iMin < 0 || iMin > 59)) {
                    alert('分钟可以是0至59的数');
                    return false;
                }
                if (unit == 'sec' && (iSec < 0 || iSec > 59)) {
                    alert('秒数可以是0至59的数');
                    return false;
                }
                var hm = (iHour.length < 2 ? '0' + iHour : iHour);
                if (unit == 'min' || unit == 'sec') {
                    hm += ':' + (iMin.length < 2 ? '0' + iMin : iMin);
                }else{
                	hm += ':00';
                }
                if (unit == 'sec') {
                    hm += ':' + (iSec.length < 2 ? '0' + iSec : iSec);
                }else{
                	hm += ':00';
                }
                var finalDate = calendar.getFinalDate() + ' ' + hm;
                if (callback) {
                    callback(finalDate);
                }
                elCalendarWrap.style.display = 'none';
            };
        } else {
            $id('time').style.display = 'none';
        }

        // 定位日历
        pos = pos || [0, 0];
        elCalendarWrap.style.left = ($getX(el) + pos[0]) + 'px';
        elCalendarWrap.style.display = 'block';
        var elY = $getY(el);
        var calendarY = 0;
        if (elY + pos[1] + $id('winCalendar').clientHeight > (document.documentElement.clientHeight + (document.body.scrollTop || document.documentElement.scrollTop))) {
            calendarY = elY - pos[1] - $id('winCalendar').clientHeight;
            if (!$isBrowser('ie6')) {
                calendarY -= (document.body.scrollTop || document.documentElement.scrollTop);
            }
        } else {
            calendarY = elY + pos[1] + el.clientHeight;
            if (!$isBrowser('ie6')) {
                calendarY -= (document.body.scrollTop || document.documentElement.scrollTop);
            }
        }
        elCalendarWrap.style.top = calendarY + 'px';

        // 阻止日历元素上的点击冒泡
        elCalendarWrap.onclick = function (e) {
            e = e || window.event;
            $stopBubble(e);
        }
        // 阻止当前点击事件冒泡
        $stopBubble(e);

        // 在页面任意点击会隐藏日历
        $addEvent(document,"click",function () {
            elCalendarWrap.style.display = 'none';
        });
        $id('btnCloseCalendar').onclick = function () {
            elCalendarWrap.style.display = 'none';
        };
    };
    
    userCalendar(option.el,option.callback,option.unit,option.nowDate,option.pos,option.e);
}
function $captureImage(opts){
    var CAP = {
        options: {
            //上传input file标签的名称
            inputFileName: "Fdata",
            //上传文件的包头信息，包括cookie
            uploadDataHeader: {
                'Cookie': ''
            },
            //上传服务器地址,默认为mcs文件上传CGI
            uploadUrl: 'http://file.mcs.paipai.com/cgi-bin/up',
            //是否自动上传截屏图片
            isAutoUpload: false,
            //安装截屏控件页面
            helpUrl: 'http://mcs.paipai.com/instcap.htm',
            //图片上传进度
            onUploadProcess: function(precent){
                return true;
            },
            //截屏图片上传成功
            onUploadSuccess: function(result){
                return true;
            },
            //截屏成功
            onCaptureSuccess: function(fileId, fileName){
                return true;
            },
            //发生错误
            onFailure: function(err){
                //err:{id:'1:未安装插件，2：上传失败   3:上传未知事件      查看onUploadEvent中错误码',description:'错误描述'}
                return false;
            }
        },
        //截屏对象
        capture: null,
        //上传对象
        uploader: null,
        //对象初始化
        init: function(opts){
            for (var o in opts) {
                this.options[o] = opts[o];
            }
            //安装截屏控件
            this.setup();
            return this;
        },
        //安装截屏控件
        setup: function(){
            try {
                this.capture = new ActiveXObject("SCActiveX.ScreenCapture");
                this.uploader = new ActiveXObject("SCActiveX.Uploader");
            } 
            catch (e) {
                //截屏控件安装提示
                if (confirm("您还未安装截屏控件，立即安装截屏控件？")) {
                    window.open(this.options.helpUrl);
                }
                this.capture = null;
                this.uploader = null;
                this.options.onFailure({
                    id: 1,
                    description: '未安装截屏控件'
                });
            }
        },
        //启动截屏
        doCapture: function(){
            if (!(this.capture && this.uploader)) {
                this.setup();
                if (!(this.capture && this.uploader)) {
                    return false;
                }
            }
            try {
                var _this = this;
                this.capture.OnCaptureFinished = function(){
                    if (!(_this.capture && _this.uploader)) {
                        return false;
                    }
                    //获取文件id
                    var fileId = _this.capture.SaveClipBoardBmpToFile(1);
                    //获取本地图片文件名
                    var fileName = _this.capture.GetLocalFileNameByID(fileId);
                    //截屏成功
                    _this.options.onCaptureSuccess(fileId, fileName);
                    //控件上传图片
                    if (_this.options.isAutoUpload) {
                        _this.doUpload(fileId);
                    }
                };
                this.capture.DoCapture();
            } 
            catch (e) {
                alert('截屏失败，请重试');
            }
            return true;
        },
        //控件调用CGI上传图片
        doUpload: function(fileId, data){
            if (!(this.capture && this.uploader)) {
                this.setup();
                if (!(this.capture && this.uploader)) {
                    return false;
                }
            }
            try {
                //清理一下上传数据       
                this.uploader.ClearFormItems();
                this.uploader.ClearHeaders();
                
                //上传服务器地址
                this.uploader.URL = this.options.uploadUrl;
                //上传的HTTP包头信息
                var headData = this.options.uploadDataHeader;
                for (var item in headData) {
                    this.uploader.AddHeader(item, headData[item]);
                }
                //POST数据
                this.uploader.AddFormItem(this.options.inputFileName, 1, 4, fileId);
                if (data) {
                    for (var i = 0, len = data.length; i < len; i++) {
                        this.uploader.AddFormItemObject(data[i]);
                    }
                }
                var _this = this;
                //上传时触发的事件
                this.uploader.OnEvent = function(obj, eventID, p1, p2, p3){
                    if (!(_this.capture && _this.uploader)) {
                        return false;
                    }
                    var err = {};//错误信息
                    switch (eventID) {
                    case 1://发生上传错误
                        err.id = p1;
                        switch (parseInt(p1)) {
                            //ERR_GETPACKAGE_FAILED
                        case 20001:
                            err.description = "MIME包错误";
                            break;
                            //ERR_GETBUFFER_FAILED
                        case 20002:
                            err.description = "内存不足";
                            break;
                            //ERR_HTTPREQUEST_FAILED
                        case 20003:
                            err.description = "发送请求失败";
                            break;
                            //ERR_HTTPADDHEADERS_FAILED
                        case 20004:
                            err.description = "添加HTTP请求头失败";
                            break;
                            //ERR_GETHTTPRESPONSE_FAILED
                        case 20005:
                            err.description = "获取HTTP应答体失败";
                            break;
                            //ERR_GETHTTPHEADERS_FAILED
                        case 20006:
                            err.description = "获取HTTP应答头失败";
                            break;
                            //ERR_CANNOT_CONNECTTOSERVER
                        case 20007:
                            err.description = "无法连接到服务器";
                            break;
                            //ERR_URL_INVALID
                        case 20008:
                            err.description = "URL不合法";
                            break;
                            //ERR_CREATETHREAD_FAILED
                        case 20009:
                            err.description = "创建上传线程失败";
                            break;
                            //ERR_UPLOADTHREAD_ALREADYRUNNING
                        case 20010:
                            err.description = "上传线程已经运行";
                            break;
                        default:
                            err.description = "上传失败，请重试";
                            break;
                        }
                        _this.options.onFailure(err);
                        break;
                    case 2://Progress	
                        _this.options.onUploadProcess(p1 * 100 / p2);
                        break;
                    case 3://Finished
                        _this.options.onUploadSuccess(_this.uploader.Response);
                        break;
                    default://Unknown event
                        err.id = 3;
                        err.description = "上传过程中，发生未知错误";
                        _this.options.onFailure(err);
                        break;
                    }
                };
                //开始上传
                this.uploader.StartUpload();
            } 
            catch (e) {
                this.options.onFailure({
                    id: 2,
                    description: "截屏图片上传失败，请重试"
                });
            }
            return true;
        }
    };
    return CAP.init(opts);
}
function $checkIdcard(idcard){
  //var Errors=new Array("验证通过!","身份证号码位数不对!","身份证号码出生日期超出范围或含有非法字符!","身份证号码校验错误!","身份证地区非法!");
  var Errors=[true, "身份证号码位数不对!","身份证号码出生日期超出范围或含有非法字符!","身份证号码校验错误!","身份证地区非法!"];
  var area={11:"北京",12:"天津",13:"河北",14:"山西",15:"内蒙古",21:"辽宁",22:"吉林",23:"黑龙江",31:"上海",32:"江苏",33:"浙江",34:"安徽",35:"福建",36:"江西",37:"山东",41:"河南",42:"湖北",43:"湖南",44:"广东",45:"广西",46:"海南",50:"重庆",51:"四川",52:"贵州",53:"云南",54:"西藏",61:"陕西",62:"甘肃",63:"青海",64:"宁夏",65:"新疆",71:"台湾",81:"香港",82:"澳门",91:"国外"}
  var idcard,Y,JYM;
  var S,M;
  var idcard_array = new Array();
  idcard_array = idcard.split("");
  if(area[parseInt(idcard.substr(0,2))]==null) return Errors[4];
  switch(idcard.length){
    case 15:
      if ((parseInt(idcard.substr(6,2))+1900) % 4 == 0 || ((parseInt(idcard.substr(6,2))+1900) % 100 == 0 && (parseInt(idcard.substr(6,2))+1900) % 4 == 0 )){
        ereg = /^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$/;//测试出生日期的合法性
      }
      else{
        ereg = /^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$/;//测试出生日期的合法性
      }
      if(ereg.test(idcard))
        return Errors[0];
      else
        return Errors[2];
    break;
  case 18:
    if ( parseInt(idcard.substr(6,4)) % 4 == 0 || (parseInt(idcard.substr(6,4)) % 100 == 0 && parseInt(idcard.substr(6,4))%4 == 0 )){
      ereg = /^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$/;//闰年出生日期的合法性正则表达式
    }
    else{
    ereg = /^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$/;//平年出生日期的合法性正则表达式
    }
    if(ereg.test(idcard)){
      S = (parseInt(idcard_array[0]) + parseInt(idcard_array[10])) * 7 + (parseInt(idcard_array[1]) + parseInt(idcard_array[11])) * 9 + (parseInt(idcard_array[2]) + parseInt(idcard_array[12])) * 10 + (parseInt(idcard_array[3]) + parseInt(idcard_array[13])) * 5 + (parseInt(idcard_array[4]) + parseInt(idcard_array[14])) * 8 + (parseInt(idcard_array[5]) + parseInt(idcard_array[15])) * 4 + (parseInt(idcard_array[6]) + parseInt(idcard_array[16])) * 2 + parseInt(idcard_array[7]) * 1 + parseInt(idcard_array[8]) * 6 + parseInt(idcard_array[9]) * 3 ;
      Y = S % 11;
      M = "F";
      JYM = "10X98765432";
      M = JYM.substr(Y,1);
      if(M == idcard_array[17].toUpperCase())
        return Errors[0];
      else
        return Errors[3];
    }
    else
      return Errors[2];
    break;
  default:
    return Errors[1];
    break;
  }
}
function $checkUserIsBuyerVip(callback){
	//判断用户是否彩钻用户，并把结果返回给指定的回调函数，1表示是彩钻用户，0表不是
	window["_PP_UserIsBuyerVip_data"]=callback;
	$loginFrame({
		x:0,
		y:0,
		type:"func",
		action:function(){
			$loadScript("http://service.paipai.com/cgi-bin/buyervip_level?t="+Math.random());
			window.buyerVipCallBack=function(json){
				//加载彩钻flash动画
				if(json.code=='200'){
					window["_PP_UserIsBuyerVip_data"](json.state);
				}
			};
		}
	});
}
function $checkUserIsVip(uin,callback){
	//检查用户是否会员，并把会员状态返回给回调函数
	$loadScript('http://virtual.paipai.com/extinfo/qqvipflag?callback=chkVipCallBack');
	//用户身份回调,参数:flag=1为会员，flag=0为非会员
	window.chkVipCallBack=function(data){
		callback(data.isVip,data);
	};
}
function $child(node,val,fn){
	var results=[],
		node=node||document.body;
		
	walk(node.firstChild,function(n){
		if(!n){return ;}
		var actual=n.nodeType===1&&n.nodeName.toLowerCase();
		if(typeof actual === 'string' && (actual === val || typeof val !== 'string')){
				results.push(n);
				fn&&fn(n);
		}
	});
	
	return results;
			
	function walk(n,func){
		func(n);
		while(n&&(n=n.nextSibling)){
			func(n,func);		
		}
	}
}
function $cloneObj(obj) {
    function Clone(){};
    Clone.prototype = obj;
    var c = new Clone();
    return c;
}
function $copyUrl(txt, msg){
    if (window.clipboardData) {
        window.clipboardData.clearData();
        window.clipboardData.setData("Text", txt);
    }
    else 
        if (window.netscape) {
            try {
                netscape.security.PrivilegeManager.enablePrivilege("UniversalXPConnect");
            } 
            catch (e) {
                alert("被浏览器拒绝！\n请在浏览器地址栏输入'about:config'并回车\n然后将'signed.applets.codebase_principal_support'设置为'true'");
				return;
            }
            var clip = Components.classes['@mozilla.org/widget/clipboard;1'].createInstance(Components.interfaces.nsIClipboard);
            if (!clip) {
                alert("你的浏览器不支持此功能！");
                return;
            }
            var trans = Components.classes['@mozilla.org/widget/transferable;1'].createInstance(Components.interfaces.nsITransferable);
            if (!trans) {
                alert("你的浏览器不支持此功能！");
                return;
            }
            trans.addDataFlavor('text/unicode');
            var str = new Object();
            var len = new Object();
            var str = Components.classes["@mozilla.org/supports-string;1"].createInstance(Components.interfaces.nsISupportsString);
            var copytext = txt;
            str.data = copytext;
            trans.setTransferData("text/unicode", str, copytext.length * 2);
            var clipid = Components.interfaces.nsIClipboard;
            if (!clip) {
                alert("你的浏览器不支持此功能！");
                return;
            }
            clip.setData(trans, null, clipid.kGlobalClipboard);
        }
        else {
            alert("你的浏览器不支持此功能！");
            return;
        }
    alert(msg || "复制成功！");
}
function $createXmlObj(){
//构造xml对象
	var tempObj;
	if (document.all){
		var arrXMLDom = ["MSXML2.DOMDocument.4.0","Microsoft.XmlDom"];
		for (var i = 0; i < arrXMLDom.length; i++){
			try{
				tempObj = new ActiveXObject(arrXMLDom[i]);
				tempObj.async = false;
				return tempObj;
			}catch (e){}
		}
	}else{
		tempObj = document.implementation.createDocument("", "", null);
		tempObj.async = false;
		return tempObj;
	}
}
function $curStyle(obj, prop) {
	if (obj.currentStyle) {
		return obj.currentStyle[prop];
	}
	else if (window.getComputedStyle) {
		prop = prop.replace (/([A-Z])/g, "-$1");
		prop = prop.toLowerCase ();
		return window.getComputedStyle(obj,null).getPropertyValue(prop);
	}
	return null;
}
function $debug(msg,vars){
	//js输出调试代码组件，url中"g_dg=1"为开关，且需要启用调试控制台
	if(location.href.indexOf("g_dg=1")<1 || (console?0:1)){return false;}
	var _fn=$debug.caller.toString().replace(/\n/g,"").replace(/function (.*?)\(.*/i,"$1");
	console.log("------------------------------\n"+(new Date()).getTime()+"\t["+_fn+"]\t"+msg);
	if(arguments[1]){
		for(var i=1;i<arguments.length;i++){
			document.all?$eachObj(arguments[i],function(a,b){console.log(a+":"+b)}):console.log(arguments[i]);
		}
	}
	return true;
}
function $decodeHtml(content){
	if(content == null){
		return "";	
	}
	return $strReplace(content, {
                    "&amp;" : '&',
		"&quot;" : '\"',
		"\\'" : '\'',
		"&lt;" : '<',
		"&gt;" : '>',
		"&nbsp;" : ' ',
		"&#39;" : '\'',
		"&#09;" : '\t',
		"&#40;" : '(',
     	"&#41;" : ')',
		"&#42;" : '*',
		"&#43;" : '+',
		"&#44;" : ',',
		"&#45;" : '-',
		"&#46;" : '.',
		"&#47;" : '/',
		"&#63;" : '?',
		"&#92;" : '\\',
		"<BR>" : '\n'
	});
}
//读取标准模板并返回结构
function $decodeTemplate(str,desc){
	//去除所有的换行
	str=str.replace(/[\n\r]/g,"");
	//分解子模板
	var a=str.match(/<!--(.*?)\/\*(.*?)\*\/(.*?)\1-->/gi);
	var b={};
	var c={};
	if(!a){return [];}
	for(var i=0;i<a.length;i++){
		//读取子模板id及模板内容
		var t=a[i].match(/(.*?)\/\*(.*?)\*\/(.*)\1/i);
		b[t[1]]=$strTrim(t[3]);
		c[t[1]]=t[2];
	}
	desc==true?b._desc=c:"";
	return b;
}
function $delClass(ids,cName){	
	$setClass(ids,cName,"remove");
}
function $delCookie(name, path, domain, secure) {
	//删除cookie
	var value = $getCookie(name);
	if(value != null) {
		var exp = new Date();
		exp.setMinutes(exp.getMinutes() - 1000);
		path = path || "/";
		document.cookie = name + '=;expires=' + exp.toGMTString() + ( path ? ';path=' + path : '') + ( domain ? ';domain=' + domain : '') + ( secure ? ';secure' : '');
	}
}
function $delEvent(obj,type,handle){
	if (window.removeEventListener){
		obj.removeEventListener(type, handle, false);
	}else if (window.detachEvent){
		obj.detachEvent("on"+type, handle);
	}
}
function $destoryDomEvents(d) {
    var a = d.attributes, i, l, n;
    if (a) {
        l = a.length;
        for (i = 0; i < l; i += 1) {
            if (a[i]) {
                n = a[i].name;
                if (typeof d[n] === 'function') {
                    d[n] = null;
                }
            }
        }
    }
    a = d.childNodes;
    if (a) {
        l = a.length;
        for (i = 0; i < l; i += 1) {
            $destoryDomEvents(d.childNodes[i]);
        }
    }
}
function $display(ids,state){
	var state=state||'';
	if(typeof(ids)=="string"){
		var arr=ids.split(',');		
		for(var i=0,len=arr.length;i<len;i++){
			var o=$id(arr[i]);
			o && (o.style.display=state);
		}	
	}else if(ids.length){
		for(var i=0,len=ids.length;i<len;i++){
			ids[i].style.display=state;
		}			
	}else{
		ids.style.display=state;
	}
}
function $displayHide(ids){
	$display(ids,'none');
}
function $displayShow(ids){
	$display(ids,'');
}
function $divf(a,b) {
	var str1=a+".",
		str2=b+".",
		len1=str1.split(".")[1].length,
		len2=str2.split(".")[1].length,
		n=len2-len1,
		m=Math.pow(10,n);
	return (str1.replace(".",""))/(str2.replace(".",""))*m;
}
function $doClick(id){
	var o = $id(id);        
	if($isBrowser('ie')){o.click()}        
	else{        
		var	e = document.createEvent('MouseEvents');        
		e.initEvent('click',true,true);        
		o.dispatchEvent(e);        
	}  
}
function $dTree(opt) {

	/*--------------------------------------------------|

	 | dTree 2.05 | www.destroydrop.com/javascript/tree/ |

	 |---------------------------------------------------|

	 | Copyright (c) 2002-2003 Geir Landr                |

	 |                                                   |

	 | This script can be used freely as long as all     |

	 | copyright messages are intact.                    |

	 |                                                   |

	 | Updated: 17.04.2003                               |

	 |--------------------------------------------------*/
	/*
	 <p><a href="javascript: d.openAll();">open all</a> | <a href="javascript: d.closeAll();">close all</a></p>
	 <script type="text/javascript">
	 d = $dTree;
	 d.add(0,-1,'My example tree');
	 d.add(1,0,'Node 1','example01.html');
	 d.add(2,0,'Node 2','example01.html');
	 d.add(3,1,'Node 1.1','example01.html');
	 d.add(4,0,'Node 3','example01.html');
	 d.add(5,3,'Node 1.1.1','example01.html');
	 d.add(6,5,'Node 1.1.1.1','example01.html');
	 d.add(7,0,'Node 4','example01.html');
	 d.add(8,1,'Node 1.2','example01.html');
	 d.add(9,0,'My Pictures','example01.html','Pictures I\'ve taken over the years','','',this.config.imgUrl+'imgfolder');
	 d.add(10,9,'The trip to Iceland','example01.html','Pictures of Gullfoss and Geysir');
	 d.add(11,9,'Mom\'s birthday','example01.html');
	 d.add(12,0,'Recycle Bin','example01.html','','',this.config.imgUrl+'trash');
	 document.write(d);
	 </script>*/

	// Node object
	$loadCss('http://static.gtimg.com/css/core/dtree.css');
	

	function Node(o) {

		this.id = o.id;

		this.pid = o.pid;

		this.name = o.name;

		this.url = o.url;

		this.title = o.title;

		this.target = o.target;

		this.icon = o.icon;

		this.iconOpen = o.iconOpen;
		
		//hasChild,是否有子节点
		this.hc = o.hc;
		
		//是否打开
		this._io = o.open || false;
		
		//是否选中
		this._is = false;
		
		//是否最后一个元素
		this._ls = false;
				
		//hasLoad,子节点是否载入
		this._hl = false;
		
		//当前在数组中的排序
		this._ai = 0;
		
		//父节点
		this._p;
		
		//所在级别
		this._lv = -1;		
	};

	// Tree object

	function dTree() {
		/*
		 add(parameters)
		 　　添加一个树节点，实际参数有9个add(id,pid,name,url,title,target,icon,iconOpen,open);
		 　　
		 位置	参数别名		类型		功能
		 1	id			int		节点自身的id(唯一)
		 2	pid			int		节点的父节点id
		 3	name		string	节点显示在页面上的名称
		 4	url			string	节点的链接地址
		 5	title		string	鼠标放在节点上显示的提示信息
		 6	target		string	节点链接所打开的目标frame
		 7	icon		string	节点关闭状态时显示的图标
		 8	iconOpen	string	节点打开状态时显示的图标
		 9	open		bool	节点第一次加载是否打开

		 openAll()
		 　　打开全部节点，可在树对象创建前或创建后调用
		 closeAll()
		 　　关闭全部节点，可在树对象创建前或创建后调用
		 openTo(id,select)
		 　　打开指定id的节点，可以传两个参数：
		 　　id 指定需要打开的节点的唯一id
		 　　select 是否让该节点处于选中状态
		 config配置
		 　　
		 变量				类型		默认值	描述
		 target			string			所有节点的target
		 folderLinks	bool	true	文件夹可被链接
		 useSelection	bool	true	节点可被选择高亮
		 useCookies		bool	true	树可以使用cookie记住状态
		 useLines		bool	true	创建带结构连接线的树
		 useIcons		bool	true	创建带有图表的树
		 useStatusText	bool	false	用节点名替代显示在状态栏的节点url
		 closeSameLevel	bool	false	同级节点只允许一个节点处于打开状态

		 【例】
		 tree.config.closeSameLevel=true;表示打开某级节点时，该级其他处于打开状态的同级节点会被关闭。
		 tree.config.target = "mytarget";
		 */
		this.config = {
			//实例名称
			name  : '',
			//所有节点的target
			target : null,
			//文件夹可被链接
			folderLinks : true,
			//节点可被选择高亮
			useSelection : true,
			//树可以使用cookie记住状态
			useCookies : true,
			//创建带结构连接线的树
			useLines : true,
			//创建带有图表的树
			useIcons : true,
			//用节点名替代显示在状态栏的节点url
			useStatusText : false,
			//同级节点只允许一个节点处于打开状态
			closeSameLevel : false,
			//初始化执行的函数
			onInit:$empty(),
			//点击执行的函数
			onSelected:$empty(),
			//载入后执行的函数
			onLoaded:$empty(),
			//当ajax设置为false时，采用级别加载；如果设置为url则用ajax加载
			ajax : false,
			//目录附加的html
			clipHtml:'',
			//节点附加的html
			nodeHtml:'',
			//根节点是否允许附加html
			hsRootHtml:false,
			//默认按需重绘
			isLazy:true		
		}
	
		for(var k in opt){
			this.config[k]=opt[k];
		};
		
		//ajax不支持cookies
		this.config.useCookies=this.config.ajax!==false?false:this.config.useCookies;
		
		this.icon = {

			root : 'base',

			folder : 'folder',

			folderOpen : 'folderopen',

			node : 'page',

			empty : 'empty',

			line : 'line',

			join : 'join',

			joinBottom : 'joinbottom',

			plus : 'plus',

			plusBottom : 'plusbottom',

			minus : 'minus',

			minusBottom : 'minusbottom',

			nlPlus : 'nolines_plus',

			nlMinus : 'nolines_minus'

		};
		//nodes数组
		this.aNodes = [];
		//关系二维数组
		this.pNodes = [];
		//对照数组
		this.rNodes = [];

		this.root = new Node({id:-1});

		this.selectedNode = null;

		this.selectedFound = false;

		this.completed = false;		

		this.aOpens = ($getCookie('co' + this.config.name) || '').split('.');
		
		this.aLoads = [];

	};

	// Adds a new node to the node array

	dTree.prototype.add = function(id, pid, name, url, title, target, icon, iconOpen, open) {

		var node={
				id:id, 
				pid:pid, 
				name:name, 
				url:url, 
				title:title, 
				target:target, 
				icon:icon, 
				iconOpen:iconOpen, 
				open:open,
				hc:null		//可以传入是否有子节点,1,0都是传入的，null代表需要寻找
			};		
		if( typeof (id) == 'object') {
			for(var k in id){
				node[k]=id[k]
			}
		};
		var now=new Node(node);
		this.aNodes.push(now);
		now._ai=this.aNodes.length-1;
		this.rNodes[node.id]=now._ai;
		!this.pNodes[node.pid]?this.pNodes[node.pid]=[now.id]:this.pNodes[node.pid].push(now.id);
	};
	// Open/close all nodes

	dTree.prototype.openAll = function() {

		this.oAll(true);

	};

	dTree.prototype.closeAll = function() {

		this.oAll(false);

	};
	// Outputs the tree to the page

	dTree.prototype.toString = function() {
		var str = [];
		str.push('<div class="dtree">\n');
		if($id) {
			if(this.config.useCookies)
				this.selectedNode = this.getSelected();

			str.push(this.addNode(this.root));
		} else
			str.push('Browser not supported.');

		str.push('</div>');

		if(!this.selectedFound)
			this.selectedNode = null;

		this.completed = true;
		
		this.config.onInit();
		
		return str.join('');

	};
	// Creates the tree structure

	dTree.prototype.addNode = function(pNode,isLoaded) {
		if(pNode!=this.root && this.config.ajax!==false && !isLoaded){
			return this.loadNode(pNode);
		}
		
		var str = [],
			arr = this.pNodes[pNode.id],//某些情况下，arr为undefind
			len = arr?arr.length:0;

		for(var n=0;n<len;n++){
			var ai=this.rNodes[this.pNodes[pNode.id][n]],
				cn =this.aNodes[ai];
							
			cn._lv = pNode._lv + 1;
							
			cn._p = pNode;
			
			cn._ls = (n == len-1)?true:false;
			//校验是否有子节点
			cn.hc=this.config.ajax===false&&cn.hc===null?(!!this.pNodes[cn.id]):cn.hc;
			
			if(!cn.target && this.config.target)
				cn.target = this.config.target;

			if(cn.hc && !cn._io && this.config.useCookies)
				cn._io = this.isOpen(cn.id+'');

			if(!this.config.folderLinks && cn.hc)
				cn.url = null;

			if(this.config.useSelection && cn.id == this.selectedNode && !this.selectedFound) {

				cn._is = true;

				this.selectedNode = cn._ai;

				this.selectedFound = true;

			}
			str.push(this.node(cn, ai));

			cn._ls?(pNode._hl = true):'';
		};
		
		return str.join('');
	};
	dTree.prototype.loadNode = function(pNode){
		var that=this;
		$namespace('Core.dTree');		
		Core.dTree.callback=function(data){
			for(var i=0,len=data.length;i<len;i++){
				that.add(data[i]);
			};
			$id("d"+that.config.name + pNode._ai).innerHTML = that.addNode(pNode,true);
			that.config.onLoaded(pNode);	
		}

		if($inArray(pNode.id,this.aLoads)==-1){
			this.aLoads.push(pNode.id);
			$loadScript({
				url:this.config.ajax.replace(/{#nId#}/g,pNode.id),
				charset:'UTF-8'
			});
		}else{
			return addNode(pNode,true);
		};			
		
		return '';
	}
	// Creates the node icon, url and text

	dTree.prototype.node = function(node, nodeId) {
		var str = [];
		str.push('<div class="dTreeNode">' + this.indent(node, nodeId));

		if(this.config.useIcons) {

			if(!node.icon)
				node.icon = (this.root.id == node.pid) ? this.icon.root : ((node.hc) ? this.icon.folder : this.icon.node);

			if(!node.iconOpen)
				node.iconOpen = (node.hc) ? this.icon.folderOpen : this.icon.node;

			if(this.root.id == node.pid) {

				node.icon = this.icon.root;

				node.iconOpen = this.icon.root;

			}
			str.push('<span id="i' + this.config.name + nodeId + '" class="icon_' + ((node._io) ? node.iconOpen : node.icon) + '">&nbsp;</span>');

		}

		if(node.url) {
			str.push('<a id="s' + this.config.name + nodeId + '" class="' + ((this.config.useSelection) ? ((node._is ? 'nodeSel' : 'node')) : 'node') + '" href="' + node.url + '"');
			node.title?str.push(' title="' + node.title + '"'):'';
			node.target?str.push(' target="' + node.target + '"'):'';
			this.config.useStatusText?str.push(' onmouseover="window.status=\'' + node.name + '\';return true;" onmouseout="window.status=\'\';return true;" '):'';
			(this.config.useSelection && ((node.hc && this.config.folderLinks) || !node.hc))?str.push(' onclick="javascript: ' + this.config.name + '.s(' + nodeId + ',this);"'):'';			
			str.push('>');
		} else if((!this.config.folderLinks || !node.url) && node.hc && node.pid != this.root.id)
			str.push('<a href="javascript: ' + this.config.name + '.o(' + nodeId + ',this);" class="node">');
			
		str.push(node.name);

		(node.url || ((!this.config.folderLinks || !node.url) && node.hc))?str.push('</a>'):'';
		if(node.hc){
			if(this.root.id != node.pid || (this.root.id == node.pid && this.config.hsRootHtml)){
				this.config.clipHtml?str.push(this.config.clipHtml.replace(/{#nodeId#}/g,nodeId).replace(/{#nId#}/g,node.id)):'';
			}				
		}else{
			this.config.nodeHtml?str.push(this.config.nodeHtml.replace(/{#nodeId#}/g,nodeId).replace(/{#nId#}/g,node.id)):'';
		}
	
		str.push('</div>');

		if(node.hc) {
			str.push('<div id="d' + this.config.name + nodeId + '" class="clip" style="display:' + ((this.root.id == node.pid || node._io) ? 'block' : 'none') + ';">');
			
			//if(!this.completed && (node._lv < this.config.initLevel || (this.config.useCookies && this.isOpen(node.id+''))))
			//第一级无路如何都要显示
			
			if((!this.config.isLazy||node._lv<1) || (this.config.useCookies && this.isOpen(node.id+''))){
				str.push(this.addNode(node));
			}

			str.push('</div>');
		}

		return str.join('');

	};
	// Adds the empty and line icons

	dTree.prototype.indent = function(node, nodeId) {

		var str = [];

		if(this.root.id != node.pid) {
			for(var n = 1, len = node._lv; n < len; n++)
				str.push('<span class="icon_' + (this.config.useLines? this.icon.line : this.icon.empty ) + '">&nbsp;</span>'); 
			
			if(node.hc) {
				str.push('<a href="javascript: ' + this.config.name + '.o(' + nodeId + ',this);"><span id="j' + this.config.name + nodeId + '" class="icon_');

				if(!this.config.useLines)
					str.push((node._io) ? this.icon.nlMinus : this.icon.nlPlus);
				
else
					str.push(((node._io) ? ((node._ls && this.config.useLines) ? this.icon.minusBottom : this.icon.minus) : ((node._ls && this.config.useLines) ? this.icon.plusBottom : this.icon.plus ) ));
				str.push('">&nbsp;</span></a>');

			} else
				str.push('<span class="icon_' + ((this.config.useLines) ? ((node._ls) ? this.icon.joinBottom : this.icon.join ) : this.icon.empty) + '">&nbsp;</span>');

		}

		return str.join('');

	};
	// Returns the selected node

	dTree.prototype.getSelected = function() {
		//同时提供给外部获取当前选中的id
		return $getCookie('cs' + this.config.name);

	};
	// Highlights the selected node

	dTree.prototype.s = function(id,that) {

		if(!this.config.useSelection)
			return;

		var cn = this.aNodes[id];

		if(cn.hc && !this.config.folderLinks)
			return;

		if(this.selectedNode != id) {

			if(this.selectedNode || this.selectedNode == 0) {
				eOld = $id("s" + this.config.name + this.selectedNode);

				eOld?eOld.className = "node":"";

			}
			eNew = $id("s" + this.config.name + id);

			eNew.className = "nodeSel";

			this.selectedNode = id;

			if(this.config.useCookies)
				$setCookie('cs' + this.config.name,cn.id,43200);
			
			this.config.onSelected(cn,that);
		}

	};
	// Toggle Open or close

	dTree.prototype.o = function(id,that) {

		var cn = this.aNodes[id];

		if(!cn._hl){
			//如果是ajax的话，最终载入其实不在这里
			$id("d"+this.config.name + id).innerHTML = this.addNode(cn);
		}

		this.nodeStatus(!cn._io, id, cn._ls);

		cn._io = !cn._io;

		if(this.config.closeSameLevel)
			this.closeLevel(cn);

		if(this.config.useCookies)
			this.updateCookie();
			
		if(this.config.ajax===false)
			this.config.onSelected(cn,that);
	};
	// Open or close all nodes

	dTree.prototype.oAll = function(status) {

		for(var n = 0, len = this.aNodes.length; n < len; n++) {
			var cn=this.aNodes[n];
			if(cn.hc && cn.pid != this.root.id) {

				if(!cn._hl){
					$id("d"+this.config.name + cn._ai).innerHTML = this.addNode(cn);
				}
				
				this.nodeStatus(status, n, cn._ls)

				cn._io = status;

			}

		}

		if(this.config.useCookies)
			this.updateCookie();

	};
	// Opens the tree to a specific node

	dTree.prototype.openTo = function(id) {
		for(var n = 0, len = this.aNodes.length; n < len; n++) {

			if(this.aNodes[n].id == id) {
				id = n;
				break;
			}

		}

		var cn = this.aNodes[id];
		
		if(cn._lv==-1){
			this.openTo(cn.pid);
		}
		
		cn._io = true;
	
		cn._is = true;
	
		if (this.completed && cn.hc){
			if(!cn._hl){
				$id("d"+this.config.name + id).innerHTML = this.addNode(cn);
			}
			this.nodeStatus(true, cn._ai, cn._ls);
		}
	
		if (this.completed && !cn.hc) this.s(cn._ai);
		
	};
	// Closes all nodes on the same level as certain node

	dTree.prototype.closeLevel = function(node) {

		for(var n = 0, len = this.aNodes.length; n < len; n++) {

			if(this.aNodes[n].pid == node.pid && this.aNodes[n].id != node.id && this.aNodes[n].hc) {

				this.nodeStatus(false, n, this.aNodes[n]._ls);

				this.aNodes[n]._io = false;

				this.closeAllChildren(this.aNodes[n]);

			}

		}

	}
	// Closes all children of a node

	dTree.prototype.closeAllChildren = function(node) {

		for(var n = 0, len = this.aNodes.length; n < len; n++) {

			if(this.aNodes[n].pid == node.id && this.aNodes[n].hc) {

				if(this.aNodes[n]._io)
					this.nodeStatus(false, n, this.aNodes[n]._ls);

				this.aNodes[n]._io = false;

				this.closeAllChildren(this.aNodes[n]);

			}

		}

	}
	// Change the status of a node(open or closed)

	dTree.prototype.nodeStatus = function(status, id, bottom) {
		eDiv = $id('d' + this.config.name + id);
		eJoin = $id('j' + this.config.name + id);

		if(this.config.useIcons) {
			eIcon = $id('i' + this.config.name + id);

			eIcon.className = 'icon_' + ((status) ? this.aNodes[id].iconOpen : this.aNodes[id].icon);
		}

		eJoin.className = 'icon_' + ((this.config.useLines) ? ((status) ? ((bottom) ? this.icon.minusBottom : this.icon.minus) : ((bottom) ? this.icon.plusBottom : this.icon.plus)) : ((status) ? this.icon.nlMinus : this.icon.nlPlus));

		eDiv.style.display = (status) ? 'block' : 'none';

	};

	// [Cookie] Returns ids of open nodes as a string
	dTree.prototype.updateCookie = function() {
		var str = [];

		for(var n = 0, len = this.aNodes.length; n < len; n++) {
			if(this.aNodes[n]._io && this.aNodes[n].pid != this.root.id) {
				str.push(this.aNodes[n].id);
			}
		}
		//设置一个月时间
		$setCookie('co' + this.config.name, str.join('.'),43200);

	};
	// [Cookie] Checks if a node id is in a cookie

	dTree.prototype.isOpen = function(id) {
		return $inArray(id,this.aOpens)==-1?false:true;
	};
	
	var back=new dTree(opt);
	
	return back;
}
function $each(jn,fn){
	var len=jn.length;
	if("number"===typeof len){
		for(var i=0;i<len;i++){
			try{
				fn(jn[i],i);
			}catch(e){
				if($break(e)){break;}else{throw e;};
			}
		}
	}else{
		for(var k in jn){
			try{
				fn(jn[k],k);
			}catch(e){
				if($break(e)){break;}else{throw e;};
			}
		}
	}
}
function $eachObj(obj,func,deep){
	//遍历object对象，并用func进行处理
	deep=arguments[2]?deep:false;
	if(typeof obj != "object" || obj.length == 0){
		return "";
	}	
	for(var i in obj){
		if(typeof obj[i] == "object"){
			obj[i] = deep?arguments.callee(obj[i],func,deep):func(i,obj[i].toString());
		}else{
			func(i,obj[i]+"");
		}
	}	
	return obj;
}
function $empty(){
//返回全局空函数，不做任何事情，返回true；
   return function(){return true;}
}
function $escHrefScript(str){
/**
 * 用做过滤直接放到<a href="javascript:alert('XXX')">中的XXX
 * @return {String}
 */	
	return $escScript($escMiniUrl($escHtmlEp(str)));
}
function $escHtml(str){
/**
 * 用做过滤直接放到HTML里的
 * @return {String}
 */
	return str.replace(/[&'"<>\/\\\-\x00-\x09\x0b-\x0c\x1f\x80-\xff]/g, function(r){
		return "&#" + r.charCodeAt(0) + ";"
	}).replace(/ /g, "&nbsp;").replace(/\r\n/g, "<br />").replace(/\n/g,"<br />").replace(/\r/g,"<br />");
}
function $escHtmlEp(str){
/**
 * 用做过滤HTML标签里面的东东 比如这个例子里的<input value="XXX"> XXX就是要过滤的
 * @return {String}
 */	
	return str.replace(/[&'"<>\/\\\-\x00-\x1f\x80-\xff]/g, function(r){
		return "&#" + r.charCodeAt(0) + ";"
	});
}
function $escMiniUrl(str){
/**
 * @return {String}
 */	
	return str.replace(/%/g, "%25");
}
function $escNone(str){
/**
 * 空过滤，所有的都必须加上$esc，否则邮件会提醒
 * @return {String}
 */	
	return str+"";
}
function $escRegexp(str){
/**
 * 用做过滤直接放到正则表达式中的
 * @return {String}
 */	
	return str.replace(/[\\\^\$\*\+\?\{\}\.\(\)\[\]]/g, function(a){
		return "\\" + a;
	});
}
function $escScript(str){
/**
 * 用做过滤直接放到HTML里js中的
 * @return {String}
 */	
	return str.replace(/[\\"']/g, function(r){
		return "\\" + r;
	}).replace(/%/g, "\\x25").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\x01/g, "\\x01");
}
function $escUrl(str){
/**
 * 用做过滤直接URL参数里的 比如 http://show.qq.com/abc_cgi?a=XXX XXX就是要过滤的
 * @return {String}
 */
	return escape(str).replace(/\+/g, "%2B");
}
function $extend(){
	// copy reference to target object
	var target = arguments[0] || {}, i = 1, length = arguments.length, options;
	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target != "object" && typeof target != "function" )
		target = {};
	for ( ; i < length; i++ )
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null )
			// Extend the base object
			for ( var name in options ) {
				var copy = options[ name ];
				// Prevent never-ending loop
				if ( target === copy )
					continue;
				if ( copy !== undefined )
					target[ name ] = copy;
			}
	// Return the modified object
	return target;
}
function $fillTemplate(template,dom,opt){
	var option={
		url:"http://paipai.com/cgi-bin/getProduct",
		method:'get',
		type:"json",
		onSuccess:function(datas){
			var result=[];
			for(var i=0,len=datas.length;i<len;i++){
				result.push(fillData(template,datas[i]));
			}
			dom.innerHTML=result.join("");
		}
	}
	for(var key in opt){
		option[key]=opt[key];
	}
	$ajax(option);
	function fillData(template,data){
		var status=0;
		var result=[];
		var buffer=[];
		for(var i=0,len=template.length;i<len;i++){
			var c=template.charAt(i);
			switch(status){
			case 0:{
				if(c=='#'){
					status=1;
				}else{
					result.push(c);
				}
				break;
			}
			case 1:{
					if(c=='{'){
						status=2;
					}else{
						status=0;
						result.push('#');
					}
					break;
			}
			case 2:{
				if(c=='}'){
					var prop=buffer.join("");
					status=0;
					buffer=[];
					var value=data[prop];
					if(value==undefined){
						result.push("#{"+prop+"}");
					}else{
						result.push(value);
					}
				}else{
					buffer.push(c);
				}
				break;
			}
			}
		}
		if(status==1){
			result.push('#');
		}else if(status==2){
			result.push("#{"+buffer.join(""));
		}
		return result.join("");
	}
}
function $fillTplByJson(opts){
	var option={
		json:{},
		type:'fill',//html 只返回html fill 填充dom
		tpl:'',//模版 当tpl为空而dom不为空是，tpl为domfill.innerHTML
		domfill:null
	};
	for (var k in opts) {
		option[k] = opts[k];
	}
	var json     = option.json;
	var domfill  = option.domfill;
	var isIE     = navigator.userAgent.toLowerCase().indexOf("msie")!=-1;
	function getTmpId(dom){
		if (dom.nodeType == 1){
			var tpl_id = dom.getAttribute("tpl_id");
			if (tpl_id)return tpl_id.replace(/:.*/,'').replace(/\|.*/,'');
		}
		return null;
	}
	function getTopTpls(dom,arrTopTpls){
		var child = dom.firstChild;
		while (child){
			var tpl_id = getTmpId(child);
			if (tpl_id)arrTopTpls.push({id:tpl_id,innerTpl:child.innerHTML,dom:child});
			else getTopTpls(child,arrTopTpls);
			child = child.nextSibling;
		}
	}
	var tagExec = /<([a-zA-Z]+)[^<>]*\btpl_id=[^<>]*>/ig;
	function getFirstTplTag(html,start){
		tagExec.lastIndex = start;
		var a = tagExec.exec(html);
		if(a)return {tag:a[0],start:a.index,name:a[1]};
		return null;
	}
	var specAttrReg = /\b_(src|href|title|alt|class)/g;
	function fill1Level(json,html){
		html = html.replace(/\{__([^{}]+)__\}/g,function(){
			with(json){
				try{
					return eval(arguments[1]);
				}catch(e){};
			}
			return "";
		}).replace(/\{([^}]+)\}/g,function(){
			var name=arguments[1].replace(/:.*/,'').replace(/\|.*/,'');
			if (typeof json[name]=="string"||typeof json[name]=="number")return json[name];
			return "";
		}).replace(specAttrReg,"$1");
		return html;
	}
	function passReturn(iCurSite,sHtml,tplLen){
		while (iCurSite < tplLen){
			var c = sHtml.charAt(iCurSite);
			if (c == '\r' || c == '\n')iCurSite++;
			else break;
		}
		return iCurSite;
	}
	
	function _fillDom(json,dom,outTag1,outTag2,index){
		var tplHtml = dom.innerHTML,
		tplLen      = tplHtml.length,
		arrTopTpls  = [],
		startSite   = 0,
		resultHtml  = '';
		getTopTpls(dom,arrTopTpls);
		for (var i = 0; i < arrTopTpls.length; i++){
			var tplInfo = arrTopTpls[i];
			var tplTag = getFirstTplTag(tplHtml,startSite);
			var html1Level = tplHtml.substring(startSite,tplTag.start);
			var tagname = tplTag.name;
			resultHtml += fill1Level(json,html1Level);
			startSite = tplTag.start+tplTag.tag.length;
			if(isIE)startSite = passReturn(startSite,tplHtml,tplLen);
			startSite += tplInfo.innerTpl.length;
			if(isIE)startSite = passReturn(startSite,tplHtml,tplLen);
			var testEnd = '</'+tagname+'>'
			var sPrev = tplHtml.substr(startSite,testEnd.length);
			var tplOutTag = '';
			if (testEnd == sPrev){
				startSite += testEnd.length;
				tplOutTag = sPrev;
			}
			var tplJson = json[tplInfo.id];
			if(tplJson instanceof Array)for (var j = 0; j < tplJson.length; j++)resultHtml += _fillDom(tplJson[j],tplInfo.dom,tplTag.tag,tplOutTag,(j+1));
		}
		var html1Level = tplHtml.substring(startSite);
		resultHtml += fill1Level(json,html1Level);
		return fill1Level(json,outTag1)+resultHtml+fill1Level(json,outTag2);
	}
	function _fillId(json,dom){
		dom.innerHTML = _fillDom(json,dom,"","",0);
		if (json.attr instanceof Array){
			var arrAttr = json.attr;
			for (var i = 0; i<arrAttr.length; i++){
				var attr = arrAttr[i];
				for (var name in attr){
					var strTpl = dom.getAttribute(name);
					if (strTpl){
						dom.setAttribute(name.replace(specAttrReg,"$1"),fill1Level(attr[name],strTpl));
					}
				}
			}
		}
	}
	if (option.type == "html"){
		var div   = document.createElement("DIV");
		div.innerHTML = option.tpl;
		_fillId(json,div);
		return div.innerHTML;
	}
	else{
		if (!domfill){
			for (var id in json){
				var iddom = document.getElementById(id);
				if (iddom) _fillId(json[id],iddom);
			}
		}
		else{
			if (tpl != '') domfill.innerHTML = option.tpl;
			_fillId(json,domfill);
		}
	}
}
function $find(selector, context, results, seed){
/*!
 * Sizzle CSS Selector Engine - v1.0
 *  Copyright 2009, The Dojo Foundation
 *  Released under the MIT, BSD, and GPL Licenses.
 *  More information: http://sizzlejs.com/
 */
var chunker = /((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^\[\]]*\]|['"][^'"]*['"]|[^\[\]'"]+)+\]|\\.|[^ >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,
	done = 0,
	toString = Object.prototype.toString,
	hasDuplicate = false,
	baseHasDuplicate = true;

// Here we check if the JavaScript engine is using some sort of
// optimization where it does not always call our comparision
// function. If that is the case, discard the hasDuplicate value.
//   Thus far that includes Google Chrome.
[0, 0].sort(function(){
	baseHasDuplicate = false;
	return 0;
});

var Sizzle = function(selector, context, results, seed) {
	results = results || [];
	context = context || document;

	var origContext = context;

	if ( context.nodeType !== 1 && context.nodeType !== 9 ) {
		return [];
	}
	
	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	var parts = [], m, set, checkSet, extra, prune = true, contextXML = Sizzle.isXML(context),
		soFar = selector, ret, cur, pop, i;
	
	// Reset the position of the chunker regexp (start from head)
	do {
		chunker.exec("");
		m = chunker.exec(soFar);

		if ( m ) {
			soFar = m[3];
		
			parts.push( m[1] );
		
			if ( m[2] ) {
				extra = m[3];
				break;
			}
		}
	} while ( m );

	if ( parts.length > 1 && origPOS.exec( selector ) ) {
		if ( parts.length === 2 && Expr.relative[ parts[0] ] ) {
			set = posProcess( parts[0] + parts[1], context );
		} else {
			set = Expr.relative[ parts[0] ] ?
				[ context ] :
				Sizzle( parts.shift(), context );

			while ( parts.length ) {
				selector = parts.shift();

				if ( Expr.relative[ selector ] ) {
					selector += parts.shift();
				}
				
				set = posProcess( selector, set );
			}
		}
	} else {
		// Take a shortcut and set the context if the root selector is an ID
		// (but not if it'll be faster if the inner selector is an ID)
		if ( !seed && parts.length > 1 && context.nodeType === 9 && !contextXML &&
				Expr.match.ID.test(parts[0]) && !Expr.match.ID.test(parts[parts.length - 1]) ) {
			ret = Sizzle.find( parts.shift(), context, contextXML );
			context = ret.expr ? Sizzle.filter( ret.expr, ret.set )[0] : ret.set[0];
		}

		if ( context ) {
			ret = seed ?
				{ expr: parts.pop(), set: makeArray(seed) } :
				Sizzle.find( parts.pop(), parts.length === 1 && (parts[0] === "~" || parts[0] === "+") && context.parentNode ? context.parentNode : context, contextXML );
			set = ret.expr ? Sizzle.filter( ret.expr, ret.set ) : ret.set;

			if ( parts.length > 0 ) {
				checkSet = makeArray(set);
			} else {
				prune = false;
			}

			while ( parts.length ) {
				cur = parts.pop();
				pop = cur;

				if ( !Expr.relative[ cur ] ) {
					cur = "";
				} else {
					pop = parts.pop();
				}

				if ( pop == null ) {
					pop = context;
				}

				Expr.relative[ cur ]( checkSet, pop, contextXML );
			}
		} else {
			checkSet = parts = [];
		}
	}

	if ( !checkSet ) {
		checkSet = set;
	}

	if ( !checkSet ) {
		Sizzle.error( cur || selector );
	}

	if ( toString.call(checkSet) === "[object Array]" ) {
		if ( !prune ) {
			results.push.apply( results, checkSet );
		} else if ( context && context.nodeType === 1 ) {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && (checkSet[i] === true || checkSet[i].nodeType === 1 && Sizzle.contains(context, checkSet[i])) ) {
					results.push( set[i] );
				}
			}
		} else {
			for ( i = 0; checkSet[i] != null; i++ ) {
				if ( checkSet[i] && checkSet[i].nodeType === 1 ) {
					results.push( set[i] );
				}
			}
		}
	} else {
		makeArray( checkSet, results );
	}

	if ( extra ) {
		Sizzle( extra, origContext, results, seed );
		Sizzle.uniqueSort( results );
	}

	return results;
};

Sizzle.uniqueSort = function(results){
	if ( sortOrder ) {
		hasDuplicate = baseHasDuplicate;
		results.sort(sortOrder);

		if ( hasDuplicate ) {
			for ( var i = 1; i < results.length; i++ ) {
				if ( results[i] === results[i-1] ) {
					results.splice(i--, 1);
				}
			}
		}
	}

	return results;
};

Sizzle.matches = function(expr, set){
	return Sizzle(expr, null, null, set);
};

Sizzle.find = function(expr, context, isXML){
	var set;

	if ( !expr ) {
		return [];
	}

	for ( var i = 0, l = Expr.order.length; i < l; i++ ) {
		var type = Expr.order[i], match;
		
		if ( (match = Expr.leftMatch[ type ].exec( expr )) ) {
			var left = match[1];
			match.splice(1,1);

			if ( left.substr( left.length - 1 ) !== "\\" ) {
				match[1] = (match[1] || "").replace(/\\/g, "");
				set = Expr.find[ type ]( match, context, isXML );
				if ( set != null ) {
					expr = expr.replace( Expr.match[ type ], "" );
					break;
				}
			}
		}
	}

	if ( !set ) {
		set = context.getElementsByTagName("*");
	}

	return {set: set, expr: expr};
};

Sizzle.filter = function(expr, set, inplace, not){
	var old = expr, result = [], curLoop = set, match, anyFound,
		isXMLFilter = set && set[0] && Sizzle.isXML(set[0]);

	while ( expr && set.length ) {
		for ( var type in Expr.filter ) {
			if ( (match = Expr.leftMatch[ type ].exec( expr )) != null && match[2] ) {
				var filter = Expr.filter[ type ], found, item, left = match[1];
				anyFound = false;

				match.splice(1,1);

				if ( left.substr( left.length - 1 ) === "\\" ) {
					continue;
				}

				if ( curLoop === result ) {
					result = [];
				}

				if ( Expr.preFilter[ type ] ) {
					match = Expr.preFilter[ type ]( match, curLoop, inplace, result, not, isXMLFilter );

					if ( !match ) {
						anyFound = found = true;
					} else if ( match === true ) {
						continue;
					}
				}

				if ( match ) {
					for ( var i = 0; (item = curLoop[i]) != null; i++ ) {
						if ( item ) {
							found = filter( item, match, i, curLoop );
							var pass = not ^ !!found;

							if ( inplace && found != null ) {
								if ( pass ) {
									anyFound = true;
								} else {
									curLoop[i] = false;
								}
							} else if ( pass ) {
								result.push( item );
								anyFound = true;
							}
						}
					}
				}

				if ( found !== undefined ) {
					if ( !inplace ) {
						curLoop = result;
					}

					expr = expr.replace( Expr.match[ type ], "" );

					if ( !anyFound ) {
						return [];
					}

					break;
				}
			}
		}

		// Improper expression
		if ( expr === old ) {
			if ( anyFound == null ) {
				Sizzle.error( expr );
			} else {
				break;
			}
		}

		old = expr;
	}

	return curLoop;
};

Sizzle.error = function( msg ) {
	throw "Syntax error, unrecognized expression: " + msg;
};

var Expr = Sizzle.selectors = {
	order: [ "ID", "NAME", "TAG" ],
	match: {
		ID: /#((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		CLASS: /\.((?:[\w\u00c0-\uFFFF\-]|\\.)+)/,
		NAME: /\[name=['"]*((?:[\w\u00c0-\uFFFF\-]|\\.)+)['"]*\]/,
		ATTR: /\[\s*((?:[\w\u00c0-\uFFFF\-]|\\.)+)\s*(?:(\S?=)\s*(['"]*)(.*?)\3|)\s*\]/,
		TAG: /^((?:[\w\u00c0-\uFFFF\*\-]|\\.)+)/,
		CHILD: /:(only|nth|last|first)-child(?:\((even|odd|[\dn+\-]*)\))?/,
		POS: /:(nth|eq|gt|lt|first|last|even|odd)(?:\((\d*)\))?(?=[^\-]|$)/,
		PSEUDO: /:((?:[\w\u00c0-\uFFFF\-]|\\.)+)(?:\((['"]?)((?:\([^\)]+\)|[^\(\)]*)+)\2\))?/
	},
	leftMatch: {},
	attrMap: {
		"class": "className",
		"for": "htmlFor"
	},
	attrHandle: {
		href: function(elem){
			return elem.getAttribute("href");
		}
	},
	relative: {
		"+": function(checkSet, part){
			var isPartStr = typeof part === "string",
				isTag = isPartStr && !/\W/.test(part),
				isPartStrNotTag = isPartStr && !isTag;

			if ( isTag ) {
				part = part.toLowerCase();
			}

			for ( var i = 0, l = checkSet.length, elem; i < l; i++ ) {
				if ( (elem = checkSet[i]) ) {
					while ( (elem = elem.previousSibling) && elem.nodeType !== 1 ) {}

					checkSet[i] = isPartStrNotTag || elem && elem.nodeName.toLowerCase() === part ?
						elem || false :
						elem === part;
				}
			}

			if ( isPartStrNotTag ) {
				Sizzle.filter( part, checkSet, true );
			}
		},
		">": function(checkSet, part){
			var isPartStr = typeof part === "string",
				elem, i = 0, l = checkSet.length;

			if ( isPartStr && !/\W/.test(part) ) {
				part = part.toLowerCase();

				for ( ; i < l; i++ ) {
					elem = checkSet[i];
					if ( elem ) {
						var parent = elem.parentNode;
						checkSet[i] = parent.nodeName.toLowerCase() === part ? parent : false;
					}
				}
			} else {
				for ( ; i < l; i++ ) {
					elem = checkSet[i];
					if ( elem ) {
						checkSet[i] = isPartStr ?
							elem.parentNode :
							elem.parentNode === part;
					}
				}

				if ( isPartStr ) {
					Sizzle.filter( part, checkSet, true );
				}
			}
		},
		"": function(checkSet, part, isXML){
			var doneName = done++, checkFn = dirCheck, nodeCheck;

			if ( typeof part === "string" && !/\W/.test(part) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn("parentNode", part, doneName, checkSet, nodeCheck, isXML);
		},
		"~": function(checkSet, part, isXML){
			var doneName = done++, checkFn = dirCheck, nodeCheck;

			if ( typeof part === "string" && !/\W/.test(part) ) {
				part = part.toLowerCase();
				nodeCheck = part;
				checkFn = dirNodeCheck;
			}

			checkFn("previousSibling", part, doneName, checkSet, nodeCheck, isXML);
		}
	},
	find: {
		ID: function(match, context, isXML){
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				return m ? [m] : [];
			}
		},
		NAME: function(match, context){
			if ( typeof context.getElementsByName !== "undefined" ) {
				var ret = [], results = context.getElementsByName(match[1]);

				for ( var i = 0, l = results.length; i < l; i++ ) {
					if ( results[i].getAttribute("name") === match[1] ) {
						ret.push( results[i] );
					}
				}

				return ret.length === 0 ? null : ret;
			}
		},
		TAG: function(match, context){
			return context.getElementsByTagName(match[1]);
		}
	},
	preFilter: {
		CLASS: function(match, curLoop, inplace, result, not, isXML){
			match = " " + match[1].replace(/\\/g, "") + " ";

			if ( isXML ) {
				return match;
			}

			for ( var i = 0, elem; (elem = curLoop[i]) != null; i++ ) {
				if ( elem ) {
					if ( not ^ (elem.className && (" " + elem.className + " ").replace(/[\t\n]/g, " ").indexOf(match) >= 0) ) {
						if ( !inplace ) {
							result.push( elem );
						}
					} else if ( inplace ) {
						curLoop[i] = false;
					}
				}
			}

			return false;
		},
		ID: function(match){
			return match[1].replace(/\\/g, "");
		},
		TAG: function(match, curLoop){
			return match[1].toLowerCase();
		},
		CHILD: function(match){
			if ( match[1] === "nth" ) {
				// parse equations like 'even', 'odd', '5', '2n', '3n+2', '4n-1', '-n+6'
				var test = /(-?)(\d*)n((?:\+|-)?\d*)/.exec(
					match[2] === "even" && "2n" || match[2] === "odd" && "2n+1" ||
					!/\D/.test( match[2] ) && "0n+" + match[2] || match[2]);

				// calculate the numbers (first)n+(last) including if they are negative
				match[2] = (test[1] + (test[2] || 1)) - 0;
				match[3] = test[3] - 0;
			}

			// TODO: Move to normal caching system
			match[0] = done++;

			return match;
		},
		ATTR: function(match, curLoop, inplace, result, not, isXML){
			var name = match[1].replace(/\\/g, "");
			
			if ( !isXML && Expr.attrMap[name] ) {
				match[1] = Expr.attrMap[name];
			}

			if ( match[2] === "~=" ) {
				match[4] = " " + match[4] + " ";
			}

			return match;
		},
		PSEUDO: function(match, curLoop, inplace, result, not){
			if ( match[1] === "not" ) {
				// If we're dealing with a complex expression, or a simple one
				if ( ( chunker.exec(match[3]) || "" ).length > 1 || /^\w/.test(match[3]) ) {
					match[3] = Sizzle(match[3], null, null, curLoop);
				} else {
					var ret = Sizzle.filter(match[3], curLoop, inplace, true ^ not);
					if ( !inplace ) {
						result.push.apply( result, ret );
					}
					return false;
				}
			} else if ( Expr.match.POS.test( match[0] ) || Expr.match.CHILD.test( match[0] ) ) {
				return true;
			}
			
			return match;
		},
		POS: function(match){
			match.unshift( true );
			return match;
		}
	},
	filters: {
		enabled: function(elem){
			return elem.disabled === false && elem.type !== "hidden";
		},
		disabled: function(elem){
			return elem.disabled === true;
		},
		checked: function(elem){
			return elem.checked === true;
		},
		selected: function(elem){
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			elem.parentNode.selectedIndex;
			return elem.selected === true;
		},
		parent: function(elem){
			return !!elem.firstChild;
		},
		empty: function(elem){
			return !elem.firstChild;
		},
		has: function(elem, i, match){
			return !!Sizzle( match[3], elem ).length;
		},
		header: function(elem){
			return (/h\d/i).test( elem.nodeName );
		},
		text: function(elem){
			return "text" === elem.type;
		},
		radio: function(elem){
			return "radio" === elem.type;
		},
		checkbox: function(elem){
			return "checkbox" === elem.type;
		},
		file: function(elem){
			return "file" === elem.type;
		},
		password: function(elem){
			return "password" === elem.type;
		},
		submit: function(elem){
			return "submit" === elem.type;
		},
		image: function(elem){
			return "image" === elem.type;
		},
		reset: function(elem){
			return "reset" === elem.type;
		},
		button: function(elem){
			return "button" === elem.type || elem.nodeName.toLowerCase() === "button";
		},
		input: function(elem){
			return (/input|select|textarea|button/i).test(elem.nodeName);
		}
	},
	setFilters: {
		first: function(elem, i){
			return i === 0;
		},
		last: function(elem, i, match, array){
			return i === array.length - 1;
		},
		even: function(elem, i){
			return i % 2 === 0;
		},
		odd: function(elem, i){
			return i % 2 === 1;
		},
		lt: function(elem, i, match){
			return i < match[3] - 0;
		},
		gt: function(elem, i, match){
			return i > match[3] - 0;
		},
		nth: function(elem, i, match){
			return match[3] - 0 === i;
		},
		eq: function(elem, i, match){
			return match[3] - 0 === i;
		}
	},
	filter: {
		PSEUDO: function(elem, match, i, array){
			var name = match[1], filter = Expr.filters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			} else if ( name === "contains" ) {
				return (elem.textContent || elem.innerText || Sizzle.getText([ elem ]) || "").indexOf(match[3]) >= 0;
			} else if ( name === "not" ) {
				var not = match[3];

				for ( var j = 0, l = not.length; j < l; j++ ) {
					if ( not[j] === elem ) {
						return false;
					}
				}

				return true;
			} else {
				Sizzle.error( "Syntax error, unrecognized expression: " + name );
			}
		},
		CHILD: function(elem, match){
			var type = match[1], node = elem;
			switch (type) {
				case 'only':
				case 'first':
					while ( (node = node.previousSibling) )	 {
						if ( node.nodeType === 1 ) { 
							return false; 
						}
					}
					if ( type === "first" ) { 
						return true; 
					}
					node = elem;
				case 'last':
					while ( (node = node.nextSibling) )	 {
						if ( node.nodeType === 1 ) { 
							return false; 
						}
					}
					return true;
				case 'nth':
					var first = match[2], last = match[3];

					if ( first === 1 && last === 0 ) {
						return true;
					}
					
					var doneName = match[0],
						parent = elem.parentNode;
	
					if ( parent && (parent.sizcache !== doneName || !elem.nodeIndex) ) {
						var count = 0;
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								node.nodeIndex = ++count;
							}
						} 
						parent.sizcache = doneName;
					}
					
					var diff = elem.nodeIndex - last;
					if ( first === 0 ) {
						return diff === 0;
					} else {
						return ( diff % first === 0 && diff / first >= 0 );
					}
			}
		},
		ID: function(elem, match){
			return elem.nodeType === 1 && elem.getAttribute("id") === match;
		},
		TAG: function(elem, match){
			return (match === "*" && elem.nodeType === 1) || elem.nodeName.toLowerCase() === match;
		},
		CLASS: function(elem, match){
			return (" " + (elem.className || elem.getAttribute("class")) + " ")
				.indexOf( match ) > -1;
		},
		ATTR: function(elem, match){
			var name = match[1],
				result = Expr.attrHandle[ name ] ?
					Expr.attrHandle[ name ]( elem ) :
					elem[ name ] != null ?
						elem[ name ] :
						elem.getAttribute( name ),
				value = result + "",
				type = match[2],
				check = match[4];

			return result == null ?
				type === "!=" :
				type === "=" ?
				value === check :
				type === "*=" ?
				value.indexOf(check) >= 0 :
				type === "~=" ?
				(" " + value + " ").indexOf(check) >= 0 :
				!check ?
				value && result !== false :
				type === "!=" ?
				value !== check :
				type === "^=" ?
				value.indexOf(check) === 0 :
				type === "$=" ?
				value.substr(value.length - check.length) === check :
				type === "|=" ?
				value === check || value.substr(0, check.length + 1) === check + "-" :
				false;
		},
		POS: function(elem, match, i, array){
			var name = match[2], filter = Expr.setFilters[ name ];

			if ( filter ) {
				return filter( elem, i, match, array );
			}
		}
	}
};

var origPOS = Expr.match.POS,
	fescape = function(all, num){
		return "\\" + (num - 0 + 1);
	};

for ( var type in Expr.match ) {
	Expr.match[ type ] = new RegExp( Expr.match[ type ].source + (/(?![^\[]*\])(?![^\(]*\))/.source) );
	Expr.leftMatch[ type ] = new RegExp( /(^(?:.|\r|\n)*?)/.source + Expr.match[ type ].source.replace(/\\(\d+)/g, fescape) );
}

var makeArray = function(array, results) {
	array = Array.prototype.slice.call( array, 0 );

	if ( results ) {
		results.push.apply( results, array );
		return results;
	}
	
	return array;
};

// Perform a simple check to determine if the browser is capable of
// converting a NodeList to an array using builtin methods.
// Also verifies that the returned array holds DOM nodes
// (which is not the case in the Blackberry browser)
try {
	Array.prototype.slice.call( document.documentElement.childNodes, 0 )[0].nodeType;

// Provide a fallback method if it does not work
} catch(e){
	makeArray = function(array, results) {
		var ret = results || [], i = 0;

		if ( toString.call(array) === "[object Array]" ) {
			Array.prototype.push.apply( ret, array );
		} else {
			if ( typeof array.length === "number" ) {
				for ( var l = array.length; i < l; i++ ) {
					ret.push( array[i] );
				}
			} else {
				for ( ; array[i]; i++ ) {
					ret.push( array[i] );
				}
			}
		}

		return ret;
	};
}

var sortOrder;

if ( document.documentElement.compareDocumentPosition ) {
	sortOrder = function( a, b ) {
		if ( !a.compareDocumentPosition || !b.compareDocumentPosition ) {
			if ( a == b ) {
				hasDuplicate = true;
			}
			return a.compareDocumentPosition ? -1 : 1;
		}

		var ret = a.compareDocumentPosition(b) & 4 ? -1 : a === b ? 0 : 1;
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
} else if ( "sourceIndex" in document.documentElement ) {
	sortOrder = function( a, b ) {
		if ( !a.sourceIndex || !b.sourceIndex ) {
			if ( a == b ) {
				hasDuplicate = true;
			}
			return a.sourceIndex ? -1 : 1;
		}

		var ret = a.sourceIndex - b.sourceIndex;
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
} else if ( document.createRange ) {
	sortOrder = function( a, b ) {
		if ( !a.ownerDocument || !b.ownerDocument ) {
			if ( a == b ) {
				hasDuplicate = true;
			}
			return a.ownerDocument ? -1 : 1;
		}

		var aRange = a.ownerDocument.createRange(), bRange = b.ownerDocument.createRange();
		aRange.setStart(a, 0);
		aRange.setEnd(a, 0);
		bRange.setStart(b, 0);
		bRange.setEnd(b, 0);
		var ret = aRange.compareBoundaryPoints(Range.START_TO_END, bRange);
		if ( ret === 0 ) {
			hasDuplicate = true;
		}
		return ret;
	};
}

// Utility function for retreiving the text value of an array of DOM nodes
Sizzle.getText = function( elems ) {
	var ret = "", elem;

	for ( var i = 0; elems[i]; i++ ) {
		elem = elems[i];

		// Get the text from text nodes and CDATA nodes
		if ( elem.nodeType === 3 || elem.nodeType === 4 ) {
			ret += elem.nodeValue;

		// Traverse everything else, except comment nodes
		} else if ( elem.nodeType !== 8 ) {
			ret += Sizzle.getText( elem.childNodes );
		}
	}

	return ret;
};

// Check to see if the browser returns elements by name when
// querying by getElementById (and provide a workaround)
(function(){
	// We're going to inject a fake input element with a specified name
	var form = document.createElement("div"),
		id = "script" + (new Date()).getTime();
	form.innerHTML = "<a name='" + id + "'/>";

	// Inject it into the root element, check its status, and remove it quickly
	var root = document.documentElement;
	root.insertBefore( form, root.firstChild );

	// The workaround has to do additional checks after a getElementById
	// Which slows things down for other browsers (hence the branching)
	if ( document.getElementById( id ) ) {
		Expr.find.ID = function(match, context, isXML){
			if ( typeof context.getElementById !== "undefined" && !isXML ) {
				var m = context.getElementById(match[1]);
				return m ? m.id === match[1] || typeof m.getAttributeNode !== "undefined" && m.getAttributeNode("id").nodeValue === match[1] ? [m] : undefined : [];
			}
		};

		Expr.filter.ID = function(elem, match){
			var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
			return elem.nodeType === 1 && node && node.nodeValue === match;
		};
	}

	root.removeChild( form );
	root = form = null; // release memory in IE
})();

(function(){
	// Check to see if the browser returns only elements
	// when doing getElementsByTagName("*")

	// Create a fake element
	var div = document.createElement("div");
	div.appendChild( document.createComment("") );

	// Make sure no comments are found
	if ( div.getElementsByTagName("*").length > 0 ) {
		Expr.find.TAG = function(match, context){
			var results = context.getElementsByTagName(match[1]);

			// Filter out possible comments
			if ( match[1] === "*" ) {
				var tmp = [];

				for ( var i = 0; results[i]; i++ ) {
					if ( results[i].nodeType === 1 ) {
						tmp.push( results[i] );
					}
				}

				results = tmp;
			}

			return results;
		};
	}

	// Check to see if an attribute returns normalized href attributes
	div.innerHTML = "<a href='#'></a>";
	if ( div.firstChild && typeof div.firstChild.getAttribute !== "undefined" &&
			div.firstChild.getAttribute("href") !== "#" ) {
		Expr.attrHandle.href = function(elem){
			return elem.getAttribute("href", 2);
		};
	}

	div = null; // release memory in IE
})();

if ( document.querySelectorAll ) {
	(function(){
		var oldSizzle = Sizzle, div = document.createElement("div");
		div.innerHTML = "<p class='TEST'></p>";

		// Safari can't handle uppercase or unicode characters when
		// in quirks mode.
		if ( div.querySelectorAll && div.querySelectorAll(".TEST").length === 0 ) {
			return;
		}
	
		Sizzle = function(query, context, extra, seed){
			context = context || document;

			// Only use querySelectorAll on non-XML documents
			// (ID selectors don't work in non-HTML documents)
			if ( !seed && context.nodeType === 9 && !Sizzle.isXML(context) ) {
				try {
					return makeArray( context.querySelectorAll(query), extra );
				} catch(e){}
			}
		
			return oldSizzle(query, context, extra, seed);
		};

		for ( var prop in oldSizzle ) {
			Sizzle[ prop ] = oldSizzle[ prop ];
		}

		div = null; // release memory in IE
	})();
}

(function(){
	var div = document.createElement("div");

	div.innerHTML = "<div class='test e'></div><div class='test'></div>";

	// Opera can't find a second classname (in 9.6)
	// Also, make sure that getElementsByClassName actually exists
	if ( !div.getElementsByClassName || div.getElementsByClassName("e").length === 0 ) {
		return;
	}

	// Safari caches class attributes, doesn't catch changes (in 3.2)
	div.lastChild.className = "e";

	if ( div.getElementsByClassName("e").length === 1 ) {
		return;
	}
	
	Expr.order.splice(1, 0, "CLASS");
	Expr.find.CLASS = function(match, context, isXML) {
		if ( typeof context.getElementsByClassName !== "undefined" && !isXML ) {
			return context.getElementsByClassName(match[1]);
		}
	};

	div = null; // release memory in IE
})();

function dirNodeCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];
		if ( elem ) {
			elem = elem[dir];
			var match = false;

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 && !isXML ){
					elem.sizcache = doneName;
					elem.sizset = i;
				}

				if ( elem.nodeName.toLowerCase() === cur ) {
					match = elem;
					break;
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

function dirCheck( dir, cur, doneName, checkSet, nodeCheck, isXML ) {
	for ( var i = 0, l = checkSet.length; i < l; i++ ) {
		var elem = checkSet[i];
		if ( elem ) {
			elem = elem[dir];
			var match = false;

			while ( elem ) {
				if ( elem.sizcache === doneName ) {
					match = checkSet[elem.sizset];
					break;
				}

				if ( elem.nodeType === 1 ) {
					if ( !isXML ) {
						elem.sizcache = doneName;
						elem.sizset = i;
					}
					if ( typeof cur !== "string" ) {
						if ( elem === cur ) {
							match = true;
							break;
						}

					} else if ( Sizzle.filter( cur, [elem] ).length > 0 ) {
						match = elem;
						break;
					}
				}

				elem = elem[dir];
			}

			checkSet[i] = match;
		}
	}
}

Sizzle.contains = document.compareDocumentPosition ? function(a, b){
	return !!(a.compareDocumentPosition(b) & 16);
} : function(a, b){
	return a !== b && (a.contains ? a.contains(b) : true);
};

Sizzle.isXML = function(elem){
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833) 
	var documentElement = (elem ? elem.ownerDocument || elem : 0).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

var posProcess = function(selector, context){
	var tmpSet = [], later = "", match,
		root = context.nodeType ? [context] : context;

	// Position selectors must be done after the filter
	// And so must :not(positional) so we move all PSEUDOs to the end
	while ( (match = Expr.match.PSEUDO.exec( selector )) ) {
		later += match[0];
		selector = selector.replace( Expr.match.PSEUDO, "" );
	}

	selector = Expr.relative[selector] ? selector + "*" : selector;

	for ( var i = 0, l = root.length; i < l; i++ ) {
		Sizzle( selector, root[i], tmpSet );
	}

	return Sizzle.filter( later, tmpSet );
};

// EXPOSE

return Sizzle(selector, context, results, seed);

}
function $fireEvent(dom,type,eType) {
	var	dom=$id(dom),
		type=type || "click",
		eType= eType || "MouseEvents";
    if(window.attachEvent) {
        dom.fireEvent('on' + type);
    }else{
        var e = document.createEvent(eType);
        e.initEvent(type,true,true);
        dom.dispatchEvent(e);
    }
}
//跨域iframe使之自动自适应高度，iframe必须定义相同的name、id(适用于iframe内无跳转情况)
function $fitIframeHeight(){
	var s=document.getElementById("_heigthSync")
	if(!s){
		var f=document.createElement("iframe");
		f.height="0";
		f.width="0";
		f.src="";
		f.style.display="none";
		f.id="_heigthSync";
		document.body.appendChild(f);
	}
	setInterval(function(){
		//var _h = $isBrowser('firefox') ? Math.max(document.documentElement.offsetHeight,document.body.offsetHeight) : ($isBrowser('ie') ? Math.min(document.documentElement.scrollHeight,document.body.scrollHeight) : document.documentElement.scrollHeight);
		var _h = $isBrowser('ie') ? document.body.scrollHeight : document.documentElement.offsetHeight;
		var _d=document.referrer.replace(/h.*?:\/\//,"").replace(/(\/|\?).*/,"");
		if(!_d){return;}
		var _t=window.name+"|"+_h;
		var s=document.getElementById("_heigthSync");
		if(_t!=s.getAttribute("attr")){
			s.src = "http://"+_d+"/sinclude/autoheight.html#"+_t; 
			s.setAttribute("attr",_t);
		}
	},30);
}
function $fixPrice(price,ornprice,threshold){
	    //price为商品价格*100  threshold是精确阈值 目前为50元 5000
           //价格处理规则 大于等于50精确到元，小于50精确到角，价格为0则返回0.01元，四舍五入的价格大于原价则采用原价。
		threshold = threshold||5000;
		var p = Math.round(price/10)/10;
		return (price>=threshold ? Math.round(price/100) : p==0?0.01: p>ornprice?ornprice:p).toFixed(2);
}
function $flashRequest(opt){
	var option={
		id:"",		//生成flash的id只
		url:"",//url,及get的参数
		data:"",//如果数据是post，请组合字符串
		callback:"",		//如果有callback,传入函数名称
		errorCallback:""		//网络错误时回调，传入函数名称
	}
	for(var i in opt){
		option[i]=opt[i];
	}
	var div=document.createElement("DIV");
	div.width=1;div.height=1;
    document.body.appendChild(div);
	
	var t=(new Date()).toLocaleTimeString().replace(/:/g,"");
	option.url=escape(option.url);
	option.id="flashRequest_"+t;
	option.data=escape(option.data);
	
	if($isBrowser("ie")){
		div.innerHTML='<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,0,0" width="1" height="1" id="'+option.id+'"> <param name="movie" value="http://static.paipaiimg.com/flash/release/simpleDataLoader.swf?t='+t+'" /><param value="high" name="quality" /><param name="allowScriptAccess" value="always" /><param name="flashVars" value="dataUrl='+option.url+"&data="+option.data+"&callback="+option.callback+"&errorCallback="+option.errorCallback+'" /><param name="wmode" value="transparent" /></object>';
	}else{
		div.innerHTML='<object width="1" height="1" id="'+option.id+'" type="application/x-shockwave-flash" data="http://static.paipaiimg.com/flash/release/simpleDataLoader.swf?t='+t+'"><param value="high" name="quality" /><param name="allowScriptAccess" value="always" /><param name="flashVars" value="dataUrl='+option.url+"&data="+option.data+"&callback="+option.callback+"&errorCallback="+option.errorCallback+'" /><param name="wmode" value="transparent" /></object>';
    }
	return option;
}
function $floatSub(arg1,arg2){
//浮点数减法运算   
 var r1,r2,m,n;  
 try{r1=arg1.toString().split(".")[1].length}catch(e){r1=0}  
 try{r2=arg2.toString().split(".")[1].length}catch(e){r2=0}  
 m=Math.pow(10,Math.max(r1,r2));  
 //动态控制精度长度  
 n=(r1>=r2)?r1:r2;  
 return ((arg1*m-arg2*m)/m).toFixed(n);  
}
function $focus(dom,word){
	var val=dom.value,
		len=val.length;
	$ready(function(){	dom.focus()});			
	if(len==0) return;//如果textarea里面没有数据，直接focus即可。

	if(word){
		var start=val.indexOf(word);
		if(document.createRange){
			//firefox
			dom.setSelectionRange(start,start+word.length);
		}else{
			var r = dom.createTextRange();
			r.findText(word);
			r.select();
		}
	}else if(word===""){
		dom.select();
	}else if(word===0){
		if(document.createRange){
			dom.setSelectionRange(0,0);
		};
	}else{
		if(document.createRange){
			dom.setSelectionRange(len,len);	
		}else{
			var r = dom.createTextRange();
			r.move('character',len);
			r.select();
		};		
	};

}
function $focusInput(id,note,callback){
	var o=$id(id);
	$addEvent(o,'focus',function(){
		o.style.color='#000000';
		var text=note;
		if(typeof note=="function"){
			text=note();	
		}
		if(text&&text!=''&&o.value==text){
			o.value='';
		}
		if(typeof callback=="function"){
			callback(true);
		}
	});
	$addEvent(o,'blur',function(){
		if(note&&o.value==''){
			var text=note;
			if(typeof note=="function"){
				text=note();	
			}
			o.value=text;
			o.style.color='#999999';
		}
		if(typeof callback=="function"){
			callback(false);
		}
	});	
}
(function(){
	var _formatArray_cache = {};
	
	$formatArray=function(str, data){
   	 	/* 模板替换,str:模板id或者内容，data:数据内容
			\W：匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。 
			如果是id,并且cache中有值，直接返回，否则获取innerHTML，再次解析；
			如果不是id，解析并存入cache
		 */
		var fn = !/\W/.test(str)?
			_formatArray_cache[str]=_formatArray_cache[str] || $formatArray($id(str).innerHTML) :
				new Function("arr",
					"var p=[];p.push('" +str.replace(/[\r\t\n]/g, " ").split("<%")
					.join("\t").replace(/((^|%>)[^\t]*)'/g, "$1\r").replace(/\t=(.*?)%>/g, "',$1,'").split("\t")
					.join("');").split("%>")
					.join("p.push('").split("\r")
					.join("\\'") + "');return p.join('');");
		return data ? fn( data ) : fn;
	}
})()
function $formatDate(date,formatStr){ 
	//格式化时间
	var	arrWeek=['日','一','二','三','四','五','六'],
		str=formatStr
			.replace(/yyyy|YYYY/,date.getFullYear())
			.replace(/yy|YY/,$addZero(date.getFullYear()%100,2)	)
			.replace(/mm|MM/,$addZero(date.getMonth()+1,2))
			.replace(/m|M/g,date.getMonth()+1)
			.replace(/dd|DD/,$addZero(date.getDate(),2)	)
			.replace(/d|D/g,date.getDate())
			.replace(/hh|HH/,$addZero(date.getHours(),2))
			.replace(/h|H/g,date.getHours())
			.replace(/ii|II/,$addZero(date.getMinutes(),2))
			.replace(/i|I/g,date.getMinutes())
			.replace(/ss|SS/,$addZero(date.getSeconds(),2))
			.replace(/s|S/g,date.getSeconds())
			.replace(/w/g,date.getDay())
			.replace(/W/g,arrWeek[date.getDay()]); 
	return str; 
}
(function(){
	var _formatJson_cache = {};
	
	$formatJson=function(str, data){
   	 	/* 模板替换,str:模板id或者内容，data:数据内容
			\W：匹配任何非单词字符。等价于 '[^A-Za-z0-9_]'。 
			如果是id,并且cache中有值，直接返回，否则获取innerHTML，再次解析；
			如果不是id，解析并存入cache
		 */
		var fn = !/\W/.test(str)?
			_formatJson_cache[str]=_formatJson_cache[str] || $formatJson($id(str).innerHTML) :
				new Function("obj",
					"var p=[],print=function(){p.push.apply(p,arguments);};" +
					"with(obj){p.push('" +str
					.replace(/[\r\t\n]/g, " ")
					.split("<%").join("\t")
					.replace(/((^|%>)[^\t]*)'/g, "$1\r")
					.replace(/\t=(.*?)%>/g, "',$1,'")
					.split("\t").join("');")
					.split("%>").join("p.push('")
					.split("\r").join("\\'") + "');}return p.join('');");
		return data ? fn( data ) : fn;
	}
})()
function $formatPrix(prix,formatStr){
    //格式化价格，注意JS是没有四舍五入的，只能直接截取
    //formatStr:x.x,x.xx,x.xxx……   
    var arrPrix=(prix+".").split("."),
		arrFormat=(formatStr+".").split("."),
		formatLen=arrFormat[1].length;
    return [(+prix).toFixed(formatLen),arrPrix[0],arrPrix[1]];
}
function $formatStr(str,obj){
	if(str){
		str =str.replace(/{#(\w+)#}/g,function($0,$1){
			return obj[$1] || "";
		});
		return str;
	}
	return "";
}
function $formatTjw(opt){
	var o={
		src:"",			//数据源路径
		template:'',	//模板内容
		pageType:0,		//0:不分页;1:左右分页
		pTag:'',		//统计信息
        showLength:0,   //只显示列表中的几个，如果为0的时候，显示所有
        startNum:0,     //从第几个开始
		interval:0,     //毫秒值，如果不为0，则定时刷新
		filter:'',      //过滤串，必须为‘{#itemCode#}==aaaaa’这种类型
		content:null,	//数据展示的位置，dom形式
		/*以上是共用可配置，一下是系统生成的*/
		prev:0,			//上一个开始
		next:0,			//下一个开始
		total:0,		//总个数
		data:null,		//存储已获取的xml	
		intr:null,		//如果有分页，定时拉取数据
		isBindPage:false	//如果有分页，是否已经绑定上一页，下一页
	};
	for(var k in opt){
		o[k]=opt[k];
	}
	
	var id=o.content.id,
		hc='<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0"><tr><td align="center" valign="middle" style="font-size:13px; color:#333333; text-align:center;vertical-align: middle; " width="100%" height="100%"><img src="http://static.paipaiimg.com/assets/common/loading2.gif" /><br />数据加载中……</td></tr></table>';//居中显示loading状态
	o.content.innerHTML=hc;
	//判断数据是否已经存在在数据中心，如果存在就直接显示，不加载，如果不存在就开始加载
	if(o.data){
		showXml();
	}else{
		$ajax({
			url:o.src,
                        type:'xml',
			onSuccess :function(data){
				o.data=data;
				o.total=o.data.getElementsByTagName('item').length;
				o.pTag=o.pTag?o.pTag:o.data.getElementsByTagName('domainId')[0].firstChild.nodeValue*1+"."+o.data.getElementsByTagName('pageId')[0].firstChild.nodeValue*1+".{#linkId#}";
				showXml();
			},
			onError:function(msg){
				//alert(msg);
				return false;
			}
		}); 
	}

	
	//根据opt的值输出data中的对应内容。
	function showXml(){
		//检查当前要显示的页是否有数据，没有数据则说明操作混乱，不予理会该请求
		if(!o.data){return false;}
		var arrHtml=[],
			data=o.data,
			list=data.getElementsByTagName('item'),
			startNum=o.startNum*1+o.showLength*1;

		for(var i=o.startNum,len=o.total,startNum=(startNum>0)?startNum:len;(i<startNum && i<len) ;i++){
			var itemInfo={};
			for(var j=0,jLen=list[i].attributes.length;j<jLen;j++){
				itemInfo[list[i].attributes[j].name]=list[i].attributes[j].value;
			}
			
			var valueNodes=list[i].childNodes;
			for(var j=0,jLen=valueNodes.length;j<jLen;j++){
				itemInfo[valueNodes[j].nodeName]=valueNodes[j].firstChild?valueNodes[j].firstChild.nodeValue:"";
			};
			
			if(o.filter){
				var filter=o.filter;
				for(var j in itemInfo){
					filter=$strReplace(filter,"{#"+j+"#}","itemInfo['"+j+"']");
				};
				filter=eval(filter);
				if(!filter) continue;
			};	
			
			var discount=Math.round(parseFloat(itemInfo["newPrice"])-parseFloat(itemInfo["vouPrice"])),	//红包面值
				sysPtag=o.pTag.replace('{#linkId#}',i),
				cUrl=itemInfo["commodityUrl"],
				url=cUrl?(cUrl+(cUrl.indexOf('?')==-1?"?":"&")+"PTAG="+sysPtag):"http://auction1.paipai.com/"+itemInfo["id"]+"?PTAG="+sysPtag,
				gradeIcon=PP.icons?PP.icons.grade({qq:itemInfo["qq"],showScore:false,score:itemInfo["userCredit"],type:"seller"}):"",//等级图标
				badEvalRate=(parseFloat(itemInfo["badEvalRate"])/10).toFixed(1)+"%",//差评
				goodEvalRate=(parseFloat(itemInfo["goodEvalRate"])/10).toFixed(1)+"%",//好评
				lawSuitRate=(parseFloat(itemInfo["lawSuitRate"])/10).toFixed(1)+"%",//店铺投诉率	
				recmdReason=itemInfo["recmdReason"],//推荐理由
				costMoney=itemInfo["costMoney"]*1,
				rec_title=recmdReason?recmdReason.split("#")[0]:"",
				rec_description=recmdReason?recmdReason.split("#")[1]:"",
				shopUrl="http://"+itemInfo["qq"]+".paipai.com/?PTAG="+sysPtag;

			//商品列表的html代码
			var html=$strReplace(o.template,{
				"{#url#}":url,
				"{#shopUrl#}":shopUrl,
				"{#costMoney#}":costMoney,
				"{#discount#}":discount,
				"{#gradeIcon#}":gradeIcon,
				"{#rec_title#}":rec_title,
				"{#rec_description#}":rec_description,
				"{#badEvalRate#}":badEvalRate,	 
				"{#goodEvalRate#}":goodEvalRate,
				"{#lawSuitRate#}":lawSuitRate,
				"{#uploadTimeSim#}":itemInfo['uploadTime'].substr(11,5),
				"{#price#}":$formatPrix(itemInfo['newPrice'],"x.x")[0],
				"{#priceToday#}":$formatPrix(itemInfo['todayPrice'],"x.x")[0]
	   		});
			for(var j in itemInfo){
				html=$strReplace(html,"{#"+j+"#}",itemInfo[j]);
			};
			arrHtml.push(html);
		};
		
		//填入商品列表的html代码
		o.content.innerHTML=arrHtml.join('');
				
		if(1==o.pageType&&o.total>o.showLength*1){	
			showPage();
		}
	};
	//翻页控件
	function showPage(){
		var oParent=o.content.parentNode,
			isIE=$isBrowser('ie'),
			oLeft=isIE?oParent.childNodes[0]:oParent.childNodes[1],
			oLeftLink=oLeft.childNodes[0],
			oRight=isIE?oParent.childNodes[1]:oParent.childNodes[3],
			oRightLink=oRight.childNodes[0];
		o.next = o.startNum*1+o.showLength*1;
		o.prev = o.startNum*1-o.showLength*1;

	
		if(!o.isBindPage){
			//第一次进入的时候绑定
			o.isBindPage=true;
			
			var	time=o.interval*1;
			if(time>0){
				//自动翻页，注册定时执行事件，仅循环一次
				o.intr=setInterval(function(){	
					if(o.next < o.total){		
						o.startNum=o.next;
						showXml();
					}else{
						clearInterval(o.intr);
					}
				},time)
			};			

			$display(oLeft);
			$display(oRight);
			
			oLeftLink.onclick=function(){
				clearInterval(o.intr);
				if(this.className!="end"){
					o.startNum=o.prev;
					showXml();
				}
			};
			
			oRightLink.onclick=function(){
				clearInterval(o.intr);
				if(this.className!="end"){
					o.startNum=o.next;
					showXml();
				}
			};
			
		}
		
		if(o.prev < 0){
			oLeftLink.className='end';
			oRightLink.className='';
		}else if(o.next >= o.total){
			oLeftLink.className='';
			oRightLink.className='end';
		}else{
			oLeftLink.className='';
			oRightLink.className='';
		}
	}
}
function $formatXml(opt){
    var option={
        src:"",        //数据源路径
        template:'',    //模板内容
        contentId:"",    //jquery语法表示的用于显示商品列表的dom id
        lastCodes:"",    //最后的补齐商品的html代码
        page:false,        //是否显示分页
        pageId:"",        //jquery语法表示的用于显示分页控制条的dom id
        pageType:"full",    //分页显示的类型
        pTag:"",        //ptag标记
        firstPageId:1,    //默认显示第几页
        linkTag:"#none",
        showLength:0,    //只显示列表中的几个，如果为0的时候，显示所有
        startNum:0,    　　//从第几个开始
        interval:0,        //毫秒值，如果不为0，则定时刷新
        filter:'',        //过滤串，必须为'{#itemCode#}==aaaaa'这种类型
		imagesType:'image',
		loadHtml:'<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0"><tr><td align="center" valign="middle" style="font-size:13px; color:#333333; text-align:center;vertical-align: middle; " width="100%" height="100%"><img src="http://static.paipaiimg.com/assets/common/loading2.gif" /><br />数据加载中……</td></tr></table>',
        onShowed:function(obj){return true;},
        //组件内部运行数据
        data:{},        //存储数据值
        currentPage:0,    //要显示的页面
        pageCount:0,    //数据的总页数
        itemCount:0,    //数据总条数
        actionId:0,        //操作id
        content:"",        //显示列表对象
        pageBar:"",        //显示分页列表对象
        errorTag:false,     //是否有数据加载出错的情况
		isReverse:false		//是否逆序显示
    };
	$extend(option,opt);
    if(option.src==""){return;}
    option.content=$$(option.contentId);
    option.pageBar=$$(option.pageBar);
    if(window._docCache==undefined){
		window._docCache={};
	}
    if(opt.interval*1>0){
        if(!window._formatXml_interval){
            window._formatXml_intvFunc={};
            window._formatXml_interval=setInterval(function(){
                for(var key in window._formatXml_intvFunc){
                    window._formatXml_intvFunc[key]();
                }
            },opt.interval);
        };
    };
    //开始加载数据  
    getXml(option.firstPageId,option);
    function getXml(i,opt){
        //加载第i页数据
        //设置actionId
        opt.actionId=i;
        //显示loading状态
        opt.content.html(opt.loadHtml);
        //判断数据是否已经存在在数据中心，如果存在就直接显示，不加载，如果不存在就开始加载
        if(opt.data[opt.contentId.id+"_"+i]){
            opt.currentPage=parseInt(i);
            showXml(opt);
        }else{
            var dataUrl=opt.src.replace(/_2_\d+\./,"_2_" + i + ".");
            if(dataUrl.indexOf("ppms")==-1){   dataUrl=opt.src.replace(/_\d+\./,"_" + i + ".");}
	    var _showXml=function(doc){
				opt.currentPage=parseInt(doc.getElementsByTagName('currentPage')[0].firstChild.nodeValue);
				opt.data[opt.contentId.id+"_"+opt.currentPage]=doc;
				showXml(opt);
			};
            $$.ajax({
                cache:false,
                url:dataUrl,
                dataType: "xml",
                success :function(da){
                    opt.currentPage=parseInt(da.getElementsByTagName('currentPage')[0].firstChild.nodeValue);
                    opt.data[opt.contentId.id+"_"+opt.currentPage]=da;
                    showXml(opt);
                },
                error:function(da,b,er){
                    //加载失败后，转到第1页显示。如果是第一页加载出错的话就中断
                    if(i==1){
                        opt.errorTag=true;
                        if(arguments[0]+arguments[1]+arguments[2]){
                        }
                        return false;
                    }else{
                        getXml(1,opt);
                    };
                    return false;
                }
            }); 
        }
    };
    function showXml(opt){
        //检查当前要显示的页是否有数据，没有数据则说明操作混乱，不予理会该请求
        if(!opt.data[opt.contentId.id+"_"+opt.currentPage] || opt.errorTag){
            return false;
        }
        //如果actionid！=currentPage则说明是过期的内容显示请求，不予理会该请求
        if(opt.page &&opt.currentPage != opt.actionId ){
            return false;
        }
        var data=opt.data[opt.contentId.id+"_"+opt.currentPage];
        opt.currentPage=data.getElementsByTagName('currentPage')[0].firstChild.nodeValue*1;
        opt.pageCount=data.getElementsByTagName('pageCount')[0].firstChild.nodeValue*1;
        opt.itemCount=data.getElementsByTagName('itemCount')[0].firstChild.nodeValue*1;
        opt.domainId=data.getElementsByTagName('domainId')[0].firstChild.nodeValue*1;
        var ptagPageId=data.getElementsByTagName('pageId')[0].firstChild.nodeValue*1;
        var list=data.getElementsByTagName('item');
        var startNum=opt.startNum*1+opt.showLength*1;
        var hc=[];//商品列表的html代码
        for(var i=opt.startNum,len=list.length,startNum=(startNum>0)?startNum:len;(i<startNum && i<len) ;i++){
            var itemInfo={},temp=opt.template;
            for(var j=0;j<list[i].attributes.length;j++){
                itemInfo[list[i].attributes[j].name]=list[i].attributes[j].value;
            };
            var valueNodes=$$(list[i]).children();
            for(var j=0;j<valueNodes.length;j++){
                itemInfo[valueNodes[j].nodeName]=valueNodes[j].firstChild?valueNodes[j].firstChild.nodeValue:"";
            };
            itemInfo["discount"]=Math.round(parseFloat(itemInfo["newPrice"])-parseFloat(itemInfo["vouPrice"]));            //红包面值
			var ptag=opt.pTag?opt.pTag:ptagPageId+"."+opt.domainId+"."+(parseInt(i)+1);
			if(itemInfo["ptag"]){ ptag=opt.pTag?opt.pTag:itemInfo["ptag"];};
			if(ptag.split(".").length==2){ptag=ptag+"."+(parseInt(i)+1);};
            itemInfo["sysPtag"]=ptag;
            itemInfo["cUrl"]=itemInfo["commodityUrl"];
            itemInfo["url"]=itemInfo["commodityUrl"]?(itemInfo["commodityUrl"]+(itemInfo["commodityUrl"].indexOf('?')==-1?"?":"&")+"PTAG="+itemInfo["sysPtag"]):"http://auction1.paipai.com/"+itemInfo["id"]+"?PTAG="+itemInfo["sysPtag"];//商品链接
            itemInfo["gradeIcon"]=$getGradeIcons({qq:itemInfo["qq"],showScore:false,score:itemInfo["userCredit"],type:"seller"});    //等级图标
            itemInfo["badEvalRate"]=(parseFloat(itemInfo["badEvalRate"])/10).toFixed(1)+"%";
            itemInfo["goodEvalRate"]=(parseFloat(itemInfo["goodEvalRate"])/10).toFixed(1)+"%";
            itemInfo["lawSuitRate"]=(parseFloat(itemInfo["lawSuitRate"])/10).toFixed(1)+"%";
			recmdReason=itemInfo["recmdReason"];
            itemInfo["costMoney"]=itemInfo["costMoney"]*1;
			itemInfo["discount"]=Math.round(parseFloat(itemInfo["newPrice"])-parseFloat(itemInfo["vouPrice"]));			//红包面值
            itemInfo["rec_title"]=recmdReason?recmdReason.split("#")[0]:"";
            itemInfo["rec_description"]=recmdReason?recmdReason.split("#")[1]:"";
            itemInfo["shopUrl"]="http://"+itemInfo["qq"]+".paipai.com/?PTAG="+itemInfo["sysPtag"];
			itemInfo["pic160x160"]=itemInfo["image"].replace(/(\.|\.\d{2,3}\x\d{2,3}\.)\jpg/,".160x160.jpg");
			itemInfo["pic120x120"]=itemInfo["image"].replace(/(\.|\.\d{2,3}\x\d{2,3}\.)\jpg/,".120x120.jpg");
			itemInfo["pic200x200"]=itemInfo["image"].replace(/(\.|\.\d{2,3}\x\d{2,3}\.)\jpg/,".200x200.jpg");
			itemInfo["pic100x100"]=itemInfo["image"].replace(/(\.|\.\d{2,3}\x\d{2,3}\.)\jpg/,".100x100.jpg");
			itemInfo["pic80x80"]=itemInfo["image"].replace(/(\.|\.\d{2,3}\x\d{2,3}\.)\jpg/,".80x80.jpg");
			itemInfo["realImage"]=itemInfo[opt.imagesType];
			itemInfo["nPrice"]=itemInfo["newPrice"]?"<ins><em class='n'>"+itemInfo["newPrice"].split(".")[0]+".</em><em class='n0'>"+itemInfo["newPrice"].split(".")[1]+"</em></ins>":"";
			itemInfo["oPrice"]=itemInfo["oldPrice"]?"<del><em class='o'>"+itemInfo["oldPrice"].split(".")[0]+".</em><em class='o0'>"+itemInfo["oldPrice"].split(".")[1]+"</em></del>":"";
			itemInfo["vPrice"]=itemInfo["vouPrice"]?"<em class='v'>"+itemInfo["vouPrice"].split(".")[0]+".</em><em class='v0'>"+itemInfo["vouPrice"].split(".")[1]+"</em>":"";
			itemInfo["aPrice"]=itemInfo["adSentence"]?"<em class='a'>"+itemInfo["adSentence"].split(".")[0]+".</em><em class='a0'>"+itemInfo["adSentence"].split(".")[1]+"</em>":"";
			itemInfo["uploadTimeSim"]=itemInfo['uploadTime']?itemInfo['uploadTime'].substr(11,5):"";
			itemInfo["price"]=$formatPrix(itemInfo['newPrice'],"x.x")[0];
			itemInfo["order"]=(i+1);
            if(opt.filter){
                var filter=opt.filter;
                for(var j in itemInfo){
                    filter=$strReplace(filter,"{#"+j+"#}","itemInfo['"+j+"']");
                };
                filter=eval(filter);
                if(!filter) continue;
            };

            for(var j in itemInfo){
				temp=temp.replace((new RegExp("{#"+j+"#}","g") ),itemInfo[j])
            }
    		hc.push(temp);
        };
        //填入商品列表的html代码
        opt.content[0].innerHTML=hc.join("")+opt.lastCodes;
        
        if(opt.interval*1>0&&!window._formatXml_intvFunc[opt.contentId.id]){
            window._formatXml_intvFunc[opt.contentId.id]=function(){
                var startNum=opt.startNum*1+opt.showLength*1,total=list.length;
                opt.startNum=startNum<total?startNum:0;
                showXml(opt);
            }
        };
		showPage(opt);
        if(!opt.onShowed(opt)){return false;};

    };
	function showPage(opt){
		if(!opt.pageId){
			return;
		}
		var dom=$$((opt.pageId.indexOf("#")>=0)?opt.pageId:("#"+opt.pageId))
		$page({
			pageCount:opt.pageCount,
			currentPage:opt.currentPage,
			domList:[dom.get()],
			type:"simple",
			action:"func",
			func:function(pid){
				getXml(pid,opt);
			}
		});
	};
}
/**
 * 创建fragment
 */
function $fragment(html) {
	var fragment = document.createDocumentFragment(),div=document.createElement("div");
	div.innerHTML = html;
	var childNodes=div.childNodes;
	while(childNodes.length){
		fragment.appendChild(childNodes[0]);
	}
	return fragment;
}
function $getAbsoluteTop(dom){
//取dom对象与页面顶部的绝对偏移
	if(!dom){return null;}
	var offsetTop=dom.offsetTop;
	while(dom=dom.offsetParent){
		offsetTop+=dom.offsetTop;
	}
	return offsetTop;
}
function $getActiveInfoByStr(msg){
    //根据抽奖接口返回的信息同系统标准提示和运营自定义提示做匹配，返回正确提示
    var smsg=window.activeErrMsg_text;
    var umsg=window.user_text?window.user_text:window.activeErrMsg_text;
    var index=-1;
    for(var i=0,j=smsg.length;i<j;i++){
        if(smsg[i]==msg){
            index=i;
        }
    }
    return (umsg[index]&&(index>=0))?umsg[index]:"系统错误，请稍后再试！";
}
function $getContentHeight(){
//获取页面内容的实际高度
var bodyCath=document.body;
var doeCath=document.compatMode=='BackCompat'?bodyCath:document.documentElement;
return (window.MessageEvent&&navigator.userAgent.toLowerCase().indexOf('firefox')==-1)?bodyCath.scrollHeight:doeCath.scrollHeight;
}
function $getContentWidth(){
//获取页面内容的实际宽度
	var bodyCath=document.body;
	var doeCath=document.compatMode=='BackCompat'?bodyCath:document.documentElement;
	return (window.MessageEvent&&navigator.userAgent.toLowerCase().indexOf('firefox')==-1)?bodyCath.scrollWidth:doeCath.scrollWidth;
}
function $getCookie(name) {
	//读取COOKIE
	var reg = new RegExp("(^| )" + name + "(?:=([^;]*))?(;|$)"), val = document.cookie.match(reg);
	return val ? (val[2] ? unescape(val[2]) : "") : null;
}
function $getCoordinate(obj, type){
	var _top = 0, _left = 0, _w = 0, _h = 0;
	if (obj && obj.tagName) {
		var oP = obj.parentNode, bOffsetParent = oP && oP.offsetParent, oOffsetParent = obj.offsetParent;
		_left += obj.offsetLeft;
		_top += obj.offsetTop;
		_w = obj.offsetWidth;
		_h = obj.offsetHeight;
		while (bOffsetParent) {
			if (oOffsetParent == oP) {
				_left += oP.offsetLeft;
				_top += oP.offsetTop;
				oOffsetParent = bOffsetParent;
			}
			_left -= oP.scrollLeft;
			_top -= oP.scrollTop;
			oP = oP.parentNode;
			bOffsetParent = oP.offsetParent;
		}
	}
	return type == "array" ? [_top, _left + _w, _top + _h, _left, _w, _h] : {
		top: _top,
		bottom: _top + _h,
		left: _left,
		right: _left + _w,
		width: _w,
		height: _h
	};
}
function getElementsByClass(classN, root) {
	// 检查参数是否符合规范
	if(typeof classN != "string") {
		return null;
	}
	// 如果传入的root格式不对，则默认body为root
	if(!root || root.nodeType != "1") {
		root = document.body;
	}
	
	var _all = root.getElementsByTagName("*");
	// 把获取到的节点放入该数组中，用于返回
	var _arr = [];
	for(var i=0, len=_all.length; i<len; i++) {
		for(var j=0, k=_all[i].className.split(" "), l=k.length; j<l; j++) {
			if(k[j] == classN) {
				_arr.push(_all[i]);
			}
		}
	}
	return _arr;
}
function $getElemPostion(elem){
	 elem = typeof(elem) == "string" ? $id(elem) : elem;
	 var rect = elem.getBoundingClientRect(),
	 	doc = elem.ownerDocument,
	 	body = doc.body,
	 	docElem = doc.documentElement;
	 var clientTop = docElem.clientTop || body.clientTop || 0,
	 	clientLeft = docElem.clientLeft || body.clientLeft || 0;
	 var top = rect.top + (self.pageYOffset || docElem.scrollTop) - clientTop,
	 left = rect.left + (self.pageXOffset || docElem.scrollLeft) - clientLeft;
	 return {
	 	left: left,
	 	top: top,
	 	width: rect.right - rect.left,
	 	height: rect.bottom - rect.top
	 };
}
function $getEventPos(e){
	e = e || window.event;
	var D = document.documentElement;
	if (e.pageX) 
		return {
			x: e.pageX,
			y: e.pageY
		};
	return {
		x: e.clientX + D.scrollLeft - D.clientLeft,
		y: e.clientY + D.scrollTop - D.clientTop
	};
}
function $getGcd(a, b) {
    if(b == 0) return a;
    return $getGcd(b, a % b);
}
function $getHash(name,url){
	var u = arguments[1] || location.hash; 
	var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)");
	var r = u.substr(u.indexOf("#") + 1).match(reg); 
	if (r != null) { return r[2]; } return "";
}
function $getHeight(e){
	   var show = e.style.display;
	   show=="none"&&(e.style.display = "");
	   var box = e.getBoundingClientRect();
	   var h = box.height?box.height:(box.bottom-box.top);
	   e.style.display = show;
	   return h;
}
function $getImageUrlBySize(imgurl, size) {
    return imgurl.split(/\.\d\./)[0] + (/\.\d\./).exec(imgurl)[0] + size + 'x' + size + '.' + imgurl.substr(imgurl.length - 3, 3);
}
function $getKeyCode(e) {
	var	e=e||window.event;
	return	e.keyCode||e.which;
}
function $getLcm(a, b) {
	return (a*b/$getGcd(a, b));
}
function $getMousePosition(e){
	//获取鼠标的位置
	var e=window.event?window.event:e.evt;
	var pos=[];
	if(typeof e.pageX!="undefined"){
		pos=[e.pageX,e.pageY];
	}else if(typeof e.clientX!="undefined"){
		pos=[e.clientX+$getScrollPosition()[0],e.clientY+$getScrollPosition()[1]];
	}
	return pos;
}
function $getMp(n){
	var mp = $getCookie("mp");
    return mp?mp.split(":")[n]:"";
}
function $getNick(){
	//获取COOKIES中保存的用户昵称 
	var nick=$getCookie("hs");
	return nick?nick.replace(/[0,1]\/\d+\/[0,1]\//,""):'';
}
function $getOS(){
    /*
     检测系统
     支持系统：
     Windows(95/98/NT 4.0/2000/me/xp/vista/7/wince)
     Unix
     Linux
     MacOS(iphone/iphone4/ipod/ipad)
     Android/Symbian
     
     @author: kevinni
     */
    var _os = {}, _pf = navigator.platform.toLowerCase(), _ua = navigator.userAgent.toLowerCase(), _v = navigator.appVersion, _n = 'unknown', _c = 99;
    //PC系统
    _os.windows = _pf == "win32" || _pf == "windows";
    (_os.mac = (_pf == "mac68k" || _pf == "macppc" || _pf == "macintosh")) && ((_n = 'macos') && (_c = 21));
    //移动系统
    (_os.ipad = /ipad\;/ig.test(_ua)) && ((_n = 'ipad') && (_c = 31));
    (_os.ipod = /ipod\;/ig.test(_ua)) && ((_n = 'ipod') && (_c = 32));
    (_os.iphone = /iphone os/ig.test(_ua)) && ((_n = 'iphone') && (_c = 41));
    (_os.android = /android/ig.test(_ua)) && ((_n = 'android') && (_c = 51));
    (_os.symbian = /symbian/ig.test(_ua)) && ((_n = 'symbian') && (_c = 61));
    (_os.wince = (_pf == 'wince' || _pf == 'windows ce' || _pf == 'pocket pc')) && ((_n = 'wince') && (_c = 71));
    if (_os.windows) {
        (_os.win95 = (_ua.indexOf("win95") > -1 || _ua.indexOf("windows 95") > -1)) && ((_n = 'win95') && (_c = 99));
        (_os.win98 = (_ua.indexOf("win98") > -1 || _ua.indexOf("windows 98") > -1)) && ((_n = 'win98') && (_c = 99));
        (_os.winme = (_ua.indexOf("win 9x 4.90") > -1 || _ua.indexOf("windows me") > -1)) && ((_n = 'winme') && (_c = 99));
        (_os.win2k = (_ua.indexOf("nt 5.0") > -1 || _ua.indexOf("windows 2000") > -1)) && ((_n = 'win2k') && (_c = 14));
        (_os.winxp = (_ua.indexOf("nt 5.1") > -1 || _ua.indexOf("windows xp") > -1)) && ((_n = 'winxp') && (_c = 11));
        (_os.win2003 = (_ua.indexOf("nt 5.2") > -1 || _ua.indexOf("windows 2003") > -1)) && ((_n = 'win2003') && (_c = 15));
        (_os.winvista = (_ua.indexOf("nt 6.0") > -1 || _ua.indexOf("windows vista") > -1)) && ((_n = 'winvista') && (_c = 12));
        (_os.win7 = (_ua.indexOf("nt 6.1") > -1 || _ua.indexOf("windows 7") > -1)) && ((_n = 'win7') && (_c = 13));
        (_os.winnt4 = ((_ua.indexOf("winnt") > -1 || _ua.indexOf("winnt4.0") > -1 || _ua.indexOf("windows nt") > -1 || _ua.indexOf("nt 4.0") > -1) && (!_os.winme && !_os.win2k && !_os.winxp && _os.win2003 && !_os.winvista && !_os.win7))) && ((_n = 'winnt4') && (_c = 99));
    }
    _os.name = _n;// 系统简称
    _os.code = _c;// 系统代码
    return _os;
}
function $getPageScrollHeight(){
	var bodyCath=document.body;
	var doeCath=document.compatMode=='BackCompat'?bodyCath:document.documentElement;
	var ua = navigator.userAgent.toLowerCase();
	return (window.MessageEvent && ua.indexOf('firefox')==-1 && ua.indexOf('opera')==-1)?bodyCath.scrollTop:doeCath.scrollTop;
}
function $getPageScrollWidth(){
	var bodyCath=document.body;
	var doeCath=document.compatMode=='BackCompat'?bodyCath:document.documentElement;
	var ua = navigator.userAgent.toLowerCase();
	return (window.MessageEvent && ua.indexOf('firefox')==-1 && ua.indexOf('opera')==-1)?bodyCath.scrollLeft:doeCath.scrollLeft;
}
/**
 *从URL地址中获取多个参数值，适合自定义的URL，该函数返回的是一个数组
 **/		
function $getParams(opt){
var option={
	pNames:[],
	url:window.location,
	se:"&|#",
	con:"=",
	ext:".html"
};
for(var i in opt){
	option[i]=opt[i];
}
var names=option.pNames,result=[],tempIndex;
for(var j=0,k=names.length;j<k;j++){
	var reg=new RegExp("(^"+option.se+"|)"+names[j]+option.con+"([^"+option.se+"]*)(|"+option.se+"$)"),
	r=option["url"].match(reg);			
	r=r!=null?r[2]:"";
	tempIndex= r.indexOf(option["ext"]);
	r = (tempIndex!= -1)?r.substr(0,tempIndex):r;
	result.push(r);
}
return result;
}
function $getQQNum(){
    var _qq = $getCookie("uin");
    if (_qq) {
        return parseInt(_qq.replace("o", ""), 10);
    }
    else {
        return "";
    }
}
/**
 * 获得一个精确的定时器，实现无累加时间误差定时执行
 * @author wubocao
 */
var $getQuarz=(function(){
	/**
	 * 定时器对象
	 * @param {Function} callback 回调函数
	 * @param {Number} delay 延时，单位:ms
	 * @param {Number} exeTimes 执行次数
	 */
	var Timer=function(option,quarz){
		this.callback=option.func;
		this.delay=option.delay;
		this.nextTime=option.startTime;
		this.times=option.times;
		this.before;
		this.next;
		this.status=0;
		this.quarz=quarz;
	}
	Timer.prototype={
		/**
		 * 队列中在本定时器之后插入新的定时器
		 * @param {Object} timer
		 */
		insert:function(timer){
			if(!timer||this==timer){
				return;
			}
			var next=this.next;
			this.next=timer;
			timer.before=this;
			timer.next=next;
			if(next){
				next.before=timer;
			}
			timer.status=1;
		},
		/**
		 * 队列中在本定时器之前插入新的定时器
		 * @param {Object} timer
		 */
		insertBefore:function(timer){
			if(!timer||this==timer){
				return;
			}
			var before=this.before;
			this.before=timer;
			timer.next=this;
			timer.before=before;
			if(before){
				before.next=timer;
			}
			if(this.quarz.timer==this){
				this.quarz.timer=timer;
			}
			timer.status=1;
		},
		/**
		 * 从队列中移除本定时器
		 */
		remove:function(){
			var before=this.before;
			var next=this.next;
			if(before){
				before.next=next;
			}
			if(next){
				next.before=before;
			}
			if(this.quarz.timer==this){
				this.quarz.timer=next;
			}
			this.status=-1;
			this.before=null;
			this.next=null;
		},
		/**
		 * 执行本定时器，并判断是否完成和重新进入队列
		 */
		execute:function(){
			var callback=this.callback;
			var now=new Date().getTime();
			if(callback){
				try{window.setTimeout(function(){callback()},0);}catch(e){}
			}
			//避免执行流程堵塞
			do{
				this.nextTime+=this.delay;
			}while(this.nextTime<now);
			if(this.times!=-1){//非永久执行
				if(--this.times>0){//排入下次执行时间
					this.reQueue();
				}else{//已经执行完成
					this.remove();
				}
			}else{
				this.reQueue();
			}
		},
		/**
		 * 重新进入队列
		 */
		reQueue:function(){
			var next=this.next;
			while(next){
				if(this.nextTime>next.nextTime){
					this.remove();
					next.insert(this);
					break;
				}else{
					break;
				}
				next=next.next;
			}
			this.status=1;
		}
	}
	var Quarz=function(){
		//定时器链表头
		this.timer=null;
		//定时ID
		this.tid=null;
	};
	Quarz.prototype={
		/**
		 * $quarz添加新定时器
		 * @param {Function} func 回调函数
		 * @param {Number} delay 执行延迟时间
		 * @param [{Number}|-1] times 执行次数 默认不填和填非正数为始终执行，否则为指定的执行次数;
		 */
		addTimer:function(opt){
			var option={
				func:null,
				delay:1000,
				times:-1,
				startTime:new Date().getTime()
			}
			var that=this;
			var times=opt.times;
			var func=opt.func;
			var delay=opt.delay;
			var startTime=opt.startTime;
			if(typeof times!='undefined'&&typeof times =='number'&&times>0){
				option.times=parseInt(times,10);
			}
			if(typeof func=='function'){
				option.func=func;
			}
			if(typeof delay=='number'&&delay>0){
				option.delay=parseInt(delay,10);
			}
			if(typeof startTime=='number'&&startTime>option.startTime){
				option.startTime=startTime;
			}
			var timer=new Timer(option,this);
			if(this.timer){
				this.timer.insertBefore(timer);
				this.timer=timer;
			}else{
				this.timer=timer;
			}
			timer.reQueue();
			//如果加入到第一个，则需要排序
			if(timer==this.timer){
				window.setTimeout(function(){
					that.timeCaller();
				},0)
			}
			return timer;
		},
		timeCaller:function(){
			var that=this;
			if(this.tid){
				window.clearTimeout(this.tid);
			}
			var t=this.timer;
			if(!t){
				return;
			}
			var delay=t.nextTime-new Date().getTime();
			if(delay>0){
				this.tid=window.setTimeout(function(){
					if(t.status==1&&t==that.timer){
						that.tid=null;
						t.execute();
						that.timeCaller();
					}
				},delay);
				t.tid=this.tid;
			}else{
				t.execute();
				this.timeCaller();
			}
		}
	};
	var quarz=new Quarz();
	return function(){
		return quarz;
	}
})()
function $getQuery(name,url){
//参数：变量名，url为空则表从当前页面的url中取
	var u  = arguments[1] || window.location.search,
		reg = new RegExp("(^|&)"+ name +"=([^&]*)(&|$)"),
		r = u.substr(u.indexOf("\?")+1).match(reg);
	return r!=null?r[2]:"";
}
function $getQuerySafe(name, url) {
    var s = escape($getQuery(name, url));
    s=s.replace(/[\?|#].*/, "").replace(/(%23|%3F).*/i,"").replace(/(%2523|%253F).*/i,""); 
    return s
}
/**
 * 获取规则库引擎
 */
var $getRuleEngine=(function(){
	if(window['$getRuleEngine']){
		return window['$getRuleEngine'];
	}
	var engine={
		data:{
			debug:false
		},
		rules:{
			
		},
		ruleList:[],
		entra:{//接口
			getData:function(triger,key){
				alert("请在程序扩展此接口:getData");
				return "";
			},
			getDom:function(triger,key){
				alert("请在程序扩展此接口:getDom");
				return "";
			}
		},
		init:function(){
			
		},
		addRule:function(rule){
			if(rule instanceof Array){
				for(var i=0,len=rule.length;i<len;i++){
					this.addRule(rule[i]);
				}
				return;
			}
			var triger=rule.triger;
			if(triger instanceof Array){
				for(var i=0,len=triger.length;i<len;i++){
					var rule1=$extend({},rule);
					rule1.triger=triger[i];
					this.addRule(rule1);
				}
				return;
			}
			var key="";
			this.ruleList.push(rule);
			switch(true){
				case triger.indexOf("@custom:")==0:{//手动触发规则支持
					key=triger.split(":")[1];
					break;
				}
				case triger.indexOf("@init:")==0:{//初始化触发规则支持
					this.checkRule(rule);
					break;
				}
				case triger.indexOf("@timer:")==0:{//定时触发规则支持
					var interval=parseInt(triger.split(":")[1]);
					var that=this;
					(function(r){
						var timer=$getQuarz().addTimer({
						    func:function(){
								that.checkRule(r);
						    },
						    delay:interval,
						    times:-1
						});
					})(rule);
					break;
				}
				case triger.match(/^@dom-bind\[\w+\]:/)==0:{//元素绑定触发规则支持
					var dom=$id(triger.split(":")[1]);
					if(dom){
						try{
							var act=triger.split(":")[0];
							act=act.substring(10,act.length-2);
							var that=this;
							(function(r){
								$addEvent(dom,act,function(){
									that.checkRule(r);
								});
							})(rule)
						}catch(e){}
					}
					break;
				}
			}
			key&&(this.rules[key]=rule);
		},
		hasRule:function(triger){
			return !!this.rules[triger];
		},
		check: function(triger,obj){
			rule = this.rules[triger];
			if (!rule) {
				if (this.data.debug) {
					throw "triger["+key+"] is not exist";
				} else {
					return;
				}
			}
			return this.checkRule(rule,obj);
		},
		checkRule:function(rule,obj){
			var r=rule.rule;
			var value=this.getValue(rule,obj);
			var key;
			var result;
			var end;
			switch(true){
				case r.indexOf("@simple:")==0:{//简单规则支持
					key=r.split(":")[1];
					try{
						result=(new Function("value","engine",["return ",key.replace(/{#value#}/g,value)].join(""))).apply({},[value,this]);
						end=this.hit(rule,result,obj);
					}catch(e){
						if (this.data.debug) {
							throw "rule["+key+"] got an error,"+e.message;
						} else {
							throw e;
						}
					}
					break;
				}
				case r.indexOf("@extern:")==0:{//外部规则支持
					key=r.split(":")[1];
					try{
						var environment=window;
						var arr=key.split(".");
						for(var i=0,len=arr.length;environment&&i<len;i++){
							environment=environment[arr[i]];
						}
						environment&&(result=environment(value,this));
						end=this.hit(rule,result,obj);
					}catch(e){
						if (this.data.debug) {
							throw "rule["+key+"] got an error,"+e.message;
						} else {
							throw e;
						}
					}
					break;
				}
				case r.indexOf("@func:")==0:{//自定义规则支持
					key=r.split(":")[1];
					try{
						result=rule[key](value,this);
						end=this.hit(rule,result,obj);
					}catch(e){
						if (this.data.debug) {
							throw "rule["+key+"] got an error,"+e.message;
						} else {
							throw e;
						}
					}
					break;
				}
			}
			return end;
		},
		getValue:function(rule,obj){
			var input=rule.input;
			var key;
			var value="";
			switch(true){
				case input.indexOf("@test:")==0:{//测试数据支持
					key=input.split(":")[1];
					value=key;
					break;
				}
				case input.indexOf("@data:")==0:{//外部数据支持
					key=input.split(":")[1];
					value=this.entra.getData('',key);
					break;
				}
				case input.indexOf("@dom-value:")==0:{//dom-value支持
					key=input.split(":")[1];
					var dom=$id(key);
					dom&&(value=dom.value);
					break;
				}
				case input.indexOf("@extern:")==0:{//外部输入支持
					key=input.split(":")[1];
					try{
						var environment=window;
						var arr=key.split(".");
						for(var i=0,len=arr.length;environment&&i<len;i++){
							environment=environment[arr[i]];
						}
						environment&&(value=environment(this,obj));
					}catch(e){
						if (this.data.debug) {
							throw "input["+key+"] got an error,"+e.message;
						} else {
							throw e;
						}
					}
					break;
				}
				case input.indexOf("@func:")==0:{//自定义输入支持
					key=input.split(":")[1];
					try{
						value=rule[key](this,obj);
					}catch(e){
						if (this.data.debug) {
							throw "input["+key+"] got an error,"+e.message;
						} else {
							throw e;
						}
					}
					break;
				}
			}
			return value;
		},
		hit:function(rule,result,obj){
			var input=rule.input;
			var hit=rule.hit;
			var end;
			switch(true){
				case hit.indexOf("@alert:")==0:{//简单提示支持
					key=hit.substring("@alert:".length);
					result&&alert(key);
					end=result;
					break;
				}
				case hit.indexOf("@extern:")==0:{//外部函数支持
					key=hit.split(":")[1];
					try{
						var environment=window;
						var arr=key.split(".");
						for(var i=0,len=arr.length;environment&&i<len;i++){
							environment=environment[arr[i]];
						}
						environment&&(end=environment(result,this,obj));
					}catch(e){
						if (this.data.debug) {
							throw "hit["+key+"] got an error,"+e.message;
						} else {
							throw e;
						}
					}
					break;
				}
				case hit.indexOf("@func:")==0:{//自定义函数支持
					key=hit.split(":")[1];
					try{
						end=rule[key](result,this,obj);
					}catch(e){
						if (this.data.debug) {
							throw "hit["+key+"] got an error,"+e.message;
						} else {
							throw e;
						}
					}
					break;
				}
			}
			return end;
		}
	};
	return function(){
		return engine;
	}
})()
function $getScrollPosition(){
	//获取滚动条的位置
	var scrollLeft = document.documentElement.scrollLeft || document.body.scrollLeft || window.pageXOffset;
	var scrollTop = document.documentElement.scrollTop || document.body.scrollTop || window.pageYOffset;
	return [scrollLeft ? scrollLeft : 0, scrollTop ? scrollTop : 0];
}
function $getServerTime(url) {
    var xhr = $xhrMaker(),
    url = url || "http://" + window.location.hostname+"/favicon.ico";
	try{
		xhr.open("HEAD", url, false);
		xhr.send();
	}catch(e){
		return new Date();
	}
    return new Date(xhr.getResponseHeader("Date"));
}
//获取组件id对应的模板
function $getStdTemplate(str,id){
	//有cache的情况
	window["_template"]?"":window._template={};
	if(window["_template"][id]){
		return window["_template"][id];
	}
	//有自定义模板的情况
	var s=$id("template_"+id);
	s?str=s.innerHTML:"";
	var obj=$decodeTemplate(str);
	return window["_template"][id]=obj;
}
function $getStrBetween(str,sBegin,sEnd){
	var bp=str.indexOf(sBegin);
	if(bp==-1){
		return("");
	}
	bp+=sBegin.length;
	var ep=str.indexOf(sEnd,bp);
	if(ep==-1){
		return("");
	}
	return str.substr(bp,ep-bp);
}
function $getTarget(e,parent,tag) {
	var	e=window.event||e,
		tar=e.srcElement||e.target;
	if(parent && tag && tar.nodeName.toLowerCase()!=tag){
		while(tar = tar.parentNode){
			//对下拉框的点击会回溯到document，其它最多回溯到document.body即可
			if(tar==parent || tar==document.body || tar==document){
				return null;
			}else if(tar.nodeName.toLowerCase()==tag){
				break;
			}
		}
	};
	return tar;
}
function $getTextByByteLength(txt,getLen){

//根据字节长度截取字符串
//txt:文本
//getLen:字节长度
	 if(txt==null){
		 return "";
	 }
	 var asc;
	 //ASCII码
	 var txtLen=$getTextLengthByByte(txt);
	 //txt的实际长度
	 var txtNew="";
	 //获取新的字符串
	 var tempLen=0;
	 //临时变量
	 var txtTemp="";
	 //临时变量
   
	if(txtLen>getLen)//如果txt字符串的长度大于要截取的
	{  
	  for(var i=0;i<txt.length;i++){  
		   asc=txt.charCodeAt(i);   
		   if(asc>0&&asc<255){
			tempLen+=1;      
		   }else {
			tempLen+=2;    
		   }
		   if(tempLen>getLen){
			txtNew=txtTemp;
			//提取当前长度
		   }else {
			txtTemp+=txt.substr(i,1);
		   }
	  }
	}else {
	  txtNew=txt;
	}
    return txtNew; 
	 
}
function $getTextLengthByByte(txt){
   if(txt==null){
	  return 0;  
   }
   var asc; 
   var txtLen=0; 
   for(var i=0;i<txt.length;i++)
   {
	  asc=txt.charCodeAt(i);  
	  if(asc>0&&asc<255){
	   txtLen+=1;   
	  }else{
	   txtLen+=2;   
	  }
   }
   return txtLen; 
}
function $getTimeDistance(ts){
//根据时间差计算剩余的时间，返回[天，小时，分，秒]
	  var timeLeft=[0,0,0,0];//结构：天、小时、分、秒
	  timeLeft[0]=(ts>86400)?parseInt(ts/86400):0;
	  ts=ts - timeLeft[0] * 86400;
	  timeLeft[1]=(ts>3600)?parseInt(ts/3600):0;
	  ts=ts - timeLeft[1] * 3600;
	  timeLeft[2]=(ts>60)?parseInt(ts/60):0;
	  timeLeft[3]=ts - timeLeft[2] * 60;
	  return timeLeft;
}
function $getTimeInterval(st,et){
//返回两个时间之间的间隔的描述字符串
   var dateLeft = 0;
    var hourLeft = 0;
    var minuteLeft = 0;
    var secondLeft = 0;
	var timeLeft=[0,0,0,0];//结构：天、小时、分、秒
	var timeStr="";
	var ts=(et>st)?parseInt((et-st)/1000):0;
	timeLeft[0]=(ts>86400)?parseInt(ts/86400):0;
	ts=ts - timeLeft[0] * 86400;
	timeLeft[1]=(ts>3600)?parseInt(ts/3600):0;
	ts=ts - timeLeft[1] * 3600;
	timeLeft[2]=(ts>60)?parseInt(ts/60):0;
	timeLeft[3]=ts - timeLeft[2] * 60;
	timeStr=(timeLeft[0]>0)?timeLeft[0]+"天":"";
	timeStr+=(timeLeft[0]<=0 && timeLeft[1]<=0)?"":(timeLeft[1]+"小时");
	timeStr+=(timeLeft[0]<=0 && timeLeft[1]<=0 && timeLeft[2]<=0)?"":(timeLeft[2]+"分钟");
	timeStr+=(timeLeft[0]<=0 && timeLeft[1]<=0 && timeLeft[2]<=0 && timeLeft[3]<=0)?"":timeLeft[3]+"秒";
	return timeStr;
}
function $getTjwHtml(option){
	var op = {
	    url: '',   //推荐位链接
		template: '', //html模版
		properties: {},        //模版对应的js对象如： <%=obj[i].url%>  {url: ''},对象值可以是funciton
		path: 'list->item',  //或者数据的xml文件路径
		position: [],   //需要显示的位置
		callback: null   //回调
	}
	for(p in option){
	    op[p] = option[p];
	}
	//是否是xml url
	if(op.url.indexOf(".xml") == -1){
	    throw new Error("url must be xml.");
	}
	$ajax({
             url:op.url,
             type:'xml',
		onSuccess :function(data){
			var path = op.path.split('->');
			var items, datas = [];
			for(var i = 0, a = path.length; i < a; i++){
			    items = i == a-1 ? data.getElementsByTagName(path[i]) : data.getElementsByTagName(path[i])[0];
			}
			
			if(!op.position || op.position.length == 0){
			    for(var i = 0, a = items.length; i < a; i++){
					datas.push(format(items[i], i));
				}
			}else{
			    for(var i = 0, a = op.position.length; i < a; i++){
					if(!items[op.position[i]])continue;
				    datas.push(format(items[op.position[i]], i));
				}
			}
			
			if(!op.template) {
				op.callback && op.callback(datas);				return;
			}
			
			op.callback($formatJson(op.template, datas));
			
			function format(item, index){
				var properties = op.properties;
				var data = {};
			    for(pe in properties){
					var obj = item.getAttribute(pe);
					if(obj == null){
					    obj = item.getElementsByTagName(pe)[0] && item.getElementsByTagName(pe)[0].childNodes[0] ? 
						        item.getElementsByTagName(pe)[0].childNodes[0].nodeValue : "";
					}
					
					data[pe] = typeof properties[pe] === "function" ? properties[pe].call(properties, obj, index) : obj;
				}
				return data;
			}
		},
		onError:function(msg){
		}
    }); }
function $getToken(){
	var skey=$getCookie("skey"),
		token=skey==null?"":$time33(skey);
	return token;
}
function $getUin(){
	//返回当前登陆用户的QQ号码 ,没有则返回""
	var uin=$getCookie("uin");
	return uin?parseInt(uin.replace("o",""),10):"";
}
function $getValue(name){
	//专门用于check和radio取值，单独取值请直接写value
	var objs=document.getElementsByName(name),
		returnvar=[];
	for(var i=0,len=objs.length;i<len;i++){
		var t=objs[i];
		if(t.tagName.toLowerCase()=="input"){
			if((t.type.toLowerCase()=="checkbox" || t.type.toLowerCase()=="radio") ){	//设置单选复选框的值
				if(t.checked==true){
					returnvar.push(t.value);
				}
			}
		}
	};
	returnvar=returnvar.join(',');
	return returnvar;
}
function $getWeekNumOfYear(){
	var today = new Date();
	var end = new Date(today.getFullYear(),today.getMonth(),today.getDate());
	var start = new Date(today.getFullYear(),0,1);
	var d = Math.round((end -start)/86400000);
	return Math.ceil((start.getDay()+d-today.getDay())/7+1);
}
function $getWidth(e){
   var box = e.getBoundingClientRect();
   return box.width?box.width:(box.right-box.left);
}
function $getWindowHeight(){
	var bodyCath=document.body;
	return (document.compatMode=='BackCompat'?bodyCath:document.documentElement).clientHeight;
}
function $getWindowWidth(){
	var bodyCath=document.body;
	return (document.compatMode=='BackCompat'?bodyCath:document.documentElement).clientWidth;
}
function $getX(e){
//获取页面中对象的绝对X位置
	var t=e.offsetLeft || 0;
	while(e=e.offsetParent)t+=e.offsetLeft;
	return t;
}
function $getY(e){
//获取页面中对象的绝对Y位置
	var t=e.offsetTop || 0;
	while(e=e.offsetParent){
		t+=e.offsetTop;
	}
	return t;
}
function $getYP(e){
	//获取页面中对象的绝对Y位置，如果是隐藏的，则尝试获取其父节点位置
	var t = $getY(e),e = e.parentNode;   
	
	while(0===t && document.body != e){
		t = $getY(e);   
		e = e.parentNode;
	}
	
    return t;
}
function $hasClass(old,cur){
	if(!old||!cur) return null;
	var arr=old.split(' ');
	for(var i=0,len=arr.length;i<len;i++){
		if(cur==arr[i]){
			return cur;
		}
	};
	return null;
}
function $hover(option){
	var opt={
		title:null,//dom
		content:null,//dom
		overFunc:$empty(),
		outFunc:$empty(),
		timer:100,
		intr:null
	};
	for(var k in option){
		opt[k]=option[k];
	};
	
	$mouseover(opt.title,overFunc);
	$mouseout(opt.title,outFunc);
	$mouseover(opt.content,overFunc);
	$mouseout(opt.content,outFunc);
	
	function overFunc(){
		clearTimeout(opt.intr);
		opt.intr = null;
		opt.content.style.display="block"
		opt.overFunc(opt);
	}
	
	function outFunc(){
		opt.intr=setTimeout(function(){
			opt.content.style.display="none"
			opt.outFunc(opt);
		},opt.timer);
	}	
}
function $htmlDecode(str){
    return typeof(str) != "string" ? "" : str.replace(/&amp;/g, "&").replace(/&lt;/g, "<").replace(/&gt;/g, ">").replace(/&quot;/g, "\"").replace(/&nbsp;/g, " ");
}
function $htmlEncode(str){
    return typeof(str) != "string" ? "" : str.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\"/g, "&quot;").replace(/ /g, "&nbsp;");
}
function $id(id){
	return typeof(id)=="string"?document.getElementById(id):id;
}
function $ie6Fixed(ids, hs) {
	if(ids.length && hs.length && ids.length == hs.length) {
		if($isBrowser("ie6")){
			setInterval(function(){
				for(var i=0, len=ids.length; i<len; i++) {
					if($id(ids[i])) {
						$id(ids[i]).style.top = ($getWindowHeight()+$getPageScrollHeight()-hs[i])+"px";
					}
				}
			},100);
		}
	}
}
function $imgPreview(conf) {
    /**
    * 图片预览（仅支持ie和ff）
    * @el {object} 展示预览图片的容器
    * @fileInput {object} 上传控件对象
    * @callback {function} 预览回调事件（errCode：0为正常，-1为预览失败）
    * @maxWidth {number} 预览图片最大宽度
    * @maxHeight {number} 预览图片最大高度
    * @acceptType {array} 接受的图片类型
    */
    var _conf = {
        el: null,
        fileInput: null,
        callback: function (errCode) { },
        maxWidth: 160,
        maxHeight: 0,
        acceptType: ['.jpg', '.gif']
    }
    var doc = document;
    for (var key in _conf) {
        conf[key] = conf[key] || _conf[key];
    }

    conf.el = typeof conf.el === 'string' ? doc.getElementById(conf.el) : conf.el;
    conf.fileInput = typeof conf.fileInput === 'string' ? doc.getElementById(conf.fileInput) : conf.fileInput;

    if (!conf.el || !conf.fileInput) {
        return false;
    }
    //绑定预览事件
    addEvent(conf.fileInput, 'change', setPreviewImg);

    //_imgSizeTest是一只小白鼠，用来测量上传图片的真实大小
    var prevHtml = '<div id="_preContent" style="filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=scale);"></div>';
    prevHtml += '<img id="_imgSizeTest" style="filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(sizingMethod=image);visibility:hidden;position:absolute;left : -' + (conf.maxHeight + 10000) + 'px;" />';
    conf.el.innerHTML = prevHtml;
    //设置图片预览
    function setPreviewImg() {
        var obj = conf.fileInput,
                    reg = new RegExp(conf.acceptType.join('|'), 'i');
        if (!obj.value.match(reg)) {
            alert('图片格式无效！');
            conf.fileInput.value = '';
            //清空file中的值，just for ie
            (function clearFileInput(file) {
                var form = document.createElement('form');
                document.body.appendChild(form);
                var pos = file.nextSibling;
                form.appendChild(file);
                form.reset();
                pos.parentNode.insertBefore(file, pos);
                document.body.removeChild(form);
            })(conf.fileInput);
            return false;
        }
        var _preContent = doc.getElementById('_preContent'),
                    _imgSizeTest = doc.getElementById('_imgSizeTest');
        _preContent.innerHTML = '';
        var imgPrevObj = doc.createElement("IMG");
        //imgPrevObj.setAttribute("src", "");
        imgPrevObj.setAttribute("id", "_preview");
        imgPrevObj.style.visibility = 'hidden';
        _preContent.appendChild(imgPrevObj);
        //展示图片的对象引用
        var preObj, imgSrc, width, height;

        try {
            if (isBrowser('ie')) {
                if (isBrowser('ie6')) {
                    imgPrevObj.onreadystatechange = imgComplete;
                    imgPrevObj.src = obj.value;
                    imgSrc = obj.value;
                    preObj = imgPrevObj;
                } else {
                    _preContent.style.visibility = 'hidden';
                    obj.select();
                    imgSrc = doc.selection.createRange().text;
                    _preContent.filters.item('DXImageTransform.Microsoft.AlphaImageLoader').src = imgSrc;
                    _imgSizeTest.filters.item('DXImageTransform.Microsoft.AlphaImageLoader').src = imgSrc;
                    imgPrevObj.style.display = 'none';
                    preObj = _preContent;
                    width = _imgSizeTest.offsetWidth;
                    height = _imgSizeTest.offsetHeight;
                    autoSizePreview(preObj, width, height);
                    preObj.style.visibility = 'visible';
                }
            } else {
                imgPrevObj.onload = imgComplete;
                imgSrc = obj.files[0].getAsDataURL();
                imgPrevObj.src = imgSrc;
                preObj = imgPrevObj;
            }

        } catch (e) {
            conf.callback(-1);
            return false;
        }


        conf.callback(0, { imgSrc: imgSrc });
    }
    function imgComplete() {
        if (this.readyState == "complete" || this.complete == true) {
            autoSizePreview(this, this.offsetWidth, this.offsetHeight);
            this.style.visibility = 'visible';
        }
    }
    function autoSizePreview(objPre, originalWidth, originalHeight) {
        var zoomParam = clacImgZoomParam(conf.maxWidth, conf.maxHeight, originalWidth, originalHeight);
        objPre.style.width = zoomParam.width + 'px';

        objPre.style.height = zoomParam.height + 'px';
    }
    function clacImgZoomParam(maxWidth, maxHeight, width, height) {
        var param = { width: width, height: height };

        if (width > maxWidth || height > maxHeight) {
            var rateWidth = maxWidth > 0 ? (width / maxWidth) : 0;
            var rateHeight = maxHeight > 0 ? (height / maxHeight) : 0;

            if (rateWidth > rateHeight) {
                param.width = maxWidth;
                param.height = height / rateWidth;
            } else {
                param.width = width / rateHeight;
                param.height = maxHeight;
            }
        }
        return param;
    }
    function addEvent(obj, type, handle) {
        //事件绑定，兼容ff，ie
        if (window.addEventListener) {
            obj.addEventListener(type, handle, false);
        } else if (window.attachEvent) {
            obj.attachEvent("on" + type, handle);
        } else {
            obj["on" + type] = handle;
        }
    };
    function isBrowser(str) {
        str = str.toLowerCase();
        var b = navigator.userAgent.toLowerCase();
        var arrB = [];
        arrB['firefox'] = b.indexOf("firefox") != -1;
        arrB['opera'] = b.indexOf("opera") != -1;
        arrB['safari'] = b.indexOf("safari") != -1;
        arrB['gecko'] = !arrB['opera'] && !arrB['safari'] && b.indexOf("gecko") > -1;
        arrB['ie'] = !arrB['opera'] && b.indexOf("msie") != -1;
        arrB['ie6'] = !arrB['opera'] && b.indexOf("msie 6") != -1;
        arrB['ie7'] = !arrB['opera'] && b.indexOf("msie 7") != -1;
        return arrB[str];
    };
    return {
        setImg: setPreviewImg
    }
}
function $inArray(t,arr){
	for(var i=arr.length;i--;){
		if(arr[i]===t){
			return i*1;
		}
	};
	return -1;
}
function $initTabExchange(){
	//初始化tab切换工具
	$$("[tag='tabexchang']").live("mouseover",function(){
		var c=$$(this).attr("content");
		$$("[tag='tabexchang'][groupId='"+$$(this).attr("groupId")+"']").each(function(){
			var ons=$$(this).attr("onstyle");
			var offs=$$(this).attr("offstyle");
			var cont=$$(this).attr("content");
			if(c==cont){//当前的显示出来
				$$(this).removeClass(offs).addClass(ons);
				$$(cont).show();
			}else{
				$$(this).removeClass(ons).addClass(offs);
				$$(cont).hide();
			}
		});
		
	});
}
function $insertHTML(obj, command, html){
	if (!obj) {
		return false;
	}
	try {
		if (obj.insertAdjacentHTML) {
			obj.insertAdjacentHTML(command, html);
		}
		else {
			var range = obj.ownerDocument.createRange(), beforeFirst = command.indexOf("before") == 0, begin = command.indexOf("Begin") != -1;
			if (beforeFirst == begin) {
				range[beforeFirst ? "setStartBefore" : "setStartAfter"](obj);
				obj.parentNode.insertBefore(range.createContextualFragment(html), begin ? obj : obj.nextSibling);
			}
			else {
				var gj = obj[beforeFirst ? "lastChild" : "firstChild"];
				if (gj) {
					range[beforeFirst ? "setStartAfter" : "setStartBefore"](gj);
					obj[beforeFirst ? "appendChild" : "insertBefore"](range.createContextualFragment(html), gj);
				}
				else {
					obj.innerHTML = html;
				}
			}
		}
		return true;
	} 
	catch (e) {
		return false;
	}
}
function $isBrowser(str){
	str=str.toLowerCase();
	var b=navigator.userAgent.toLowerCase();
	var arrB=[];
	arrB['firefox']=b.indexOf("firefox")!=-1;
	arrB['opera']=b.indexOf("opera")!=-1;
	arrB['safari']=b.indexOf("safari")!=-1;
        arrB['chrome']=b.indexOf("chrome")!=-1;
	arrB['gecko']=!arrB['opera']&&!arrB['safari']&&b.indexOf("gecko")>-1;
	arrB['ie']=!arrB['opera']&&b.indexOf("msie")!=-1;
	arrB['ie6']=!arrB['opera']&&b.indexOf("msie 6")!=-1;
	arrB['ie7']=!arrB['opera']&&b.indexOf("msie 7")!=-1;
        arrB['ie8']=!arrB['opera']&&b.indexOf("msie 8")!=-1;
        arrB['ie9']=!arrB['opera']&&b.indexOf("msie 9")!=-1;
	return arrB[str];
}
function $isColor(colorStr){
	return /#[\dA-Fa-f]{6}/.test(colorStr);
}
function $isDocReady(){
	//判断页面是否ready
	if(navigator.userAgent.match(/MSIE/)){
		try{
			document.documentElement.doScroll('left');
			return true;              
		}catch(e){}
		return false;
	}else{
		return document.body?true:false;
	}
}
function $isEmptyObj(obj){
	if(!obj||!(typeof obj=="object")){return true;}
	for(var key in obj){return false;}
	return true;
}
function $isFloat(v){
	//浮点数
	return /^(([1-9]\d*)|(\d+\.\d+)|0)$/.test(v); 
}
function $isLogin(){
	return ($getCookie("skey") && $getCookie("uin"))?true:false;
}
function $isMail(v){
	return /^([a-zA-Z0-9]+[_|\-|\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\-|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]+$/.test(v)
}
function $isMobile(v){
/*
　　中国移动号段 1340-1348 135 136 137 138 139 150 151 152 157 158 159 187 188 147 182
　　中国联通号段 130 131 132 155 156 185 186 145
　　中国电信号段 133 1349 153 180 189
*/	
	var cm="134,135,136,137,138,139,150,151,152,157,158,159,187,188,147,182,183",
		cu="130,131,132,155,156,185,186,145",
		ct="133,153,180,189",
		v=v||"",
		h1=v.substring(0,3),
		h2=v.substring(0,4),
		v=(/^1\d{10}$/).test(v)?(cu.indexOf(h1)>=0?"联通":(ct.indexOf(h1)>=0?"电信":(h2=="1349"?"电信":(cm.indexOf(h1)>=0?"移动":"未知")))):false;
	//首先找是否联通，然后查找是否电信，然后在移动中查找‘1349’为电信，最后在移动中查找
	return v; 
}
function $isPhone(v, hasCode) {
	//hasCode:是否必须填写区号  true/false
	//有400或800电话这种情况
	return hasCode ? /^(\d{3,4}\-){1}\d{3,9}(\-\d{1,5})?$/.test(v) : /^(\d{3,4}\-)?\d{3,9}(\-\d{1,5})?$/.test(v);
}
function $isPInt(v){
	//正整数
	return /^[1-9]\d*$/.test(v); 
}
function $isQQ(v){
	return /^[1-9]\d{4,9}$/.test(v); 
}
function $isRange(v,min,max){
	//注意，这里的undefined不能加上引号
	if(min!=null&&max!=null){
		return v>=min&&v<=max;
	}else if(min!=null){
		return v>=min;
	}else if(max!=null){
		return v<=max;
	}else{return true}
}
function $jqCalendar() {
var jQuery = $$;
    (function ($) { // create private scope (inside you can use $ instead of jQuery)

        // functions and vars declared here are effectively 'singletons'.  there will be only a single
        // instance of them.  so this is a good place to declare any immutable items or stateless
        // functions.  for example:

        var today = new Date(); // used in defaults
        var months = '一月,二月,三月,四月,五月,六月,七月,八月,九月,十月,十一月,十二月'.split(',');
        var monthlengths = '31,28,31,30,31,30,31,31,30,31,30,31'.split(',');
        var yearRegEx = /^\d{4,4}$/;

        // next, declare the plugin function
        $.fn.simpleDatepicker = function (options) {
            // functions and vars declared here are created each time your plugn function is invoked

            // you could probably refactor your 'build', 'load_month', etc, functions to be passed
            // the DOM element from below

            var opts = jQuery.extend({}, jQuery.fn.simpleDatepicker.defaults, options);

            // replaces a date string with a date object in opts.startdate and opts.enddate, if one exists
            // populates two new properties with a ready-to-use year: opts.startyear and opts.endyear
            /** extracts and setup a valid year range from the opts object **/
            (function setupYearRange() {
                var startyear, endyear;
                if (opts.startdate.constructor == Date) {
                    startyear = opts.startdate.getFullYear();
                } else if (opts.startdate) {
                    if (yearRegEx.test(opts.startdate)) {
                        startyear = opts.startdate;
                    } else if (opts.startdate) {
                        opts.startdate = initDateObj(opts.startdate);
                        startyear = opts.startdate.getFullYear();
                    } else {
                        startyear = today.getFullYear();
                    }
                } else {
                    startyear = today.getFullYear();
                }
                opts.startyear = startyear;

                if (opts.enddate.constructor == Date) {
                    endyear = opts.enddate.getFullYear();
                } else if (opts.enddate) {
                    if (yearRegEx.test(opts.enddate)) {
                        endyear = opts.enddate;
                    } else if (opts.enddate) {
                        opts.enddate = initDateObj(opts.enddate);
                        endyear = opts.enddate.getFullYear();
                    } else {
                        endyear = today.getFullYear();
                    }
                } else {
                    endyear = today.getFullYear();
                }
                opts.endyear = endyear;
            })();

            /** HTML factory for the actual datepicker table element **/
            // has to read the year range so it can setup the correct years in our HTML <select>
            function newDatepickerHTML() {
                var years = [];

                // process year range into an array
                for (var i = 0; i <= opts.endyear - opts.startyear; i++) years[i] = opts.startyear + i;

                // build the table structure
                var div = jQuery('<div attrTag="jqCalendar_datepicker" class="datepicker" style="display:none;z-index:300;"><table cellpadding="0" cellspacing="0"><tbody></tbody></table><iframe class="ifhideselect" frameborder="0"></iframe></div>');
                var table = div.find('table');

                table.append('<thead></thead>');
                table.append('<tfoot></tfoot>');

                // month select field
                var monthselect = '<select name="month">';
                for (var i in months) monthselect += '<option value="' + i + '">' + months[i] + '</option>';
                monthselect += '</select>';

                // year select field
                var yearselect = '<select name="year">';
                for (var i in years) yearselect += '<option>' + years[i] + '</option>';
                yearselect += '</select>';

                jQuery("thead", table).append('<tr class="controls"><th colspan="7"><span class="prevMonth">&laquo;</span>&nbsp;' + monthselect + yearselect + '&nbsp;<span class="nextMonth">&raquo;</span></th></tr><tr class="days"><th>S</th><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th></tr>');
                var foot = jQuery("tfoot", table);
                if (opts.hasTime) {
                    var footStr = '<tr><td colspan=7><select name="hour">' + fillTimeOption(24) + '</select>时 <select name="minute">' + fillTimeOption(60) + '</select>分 ';
                    if (opts.timeFormat.indexOf('ss') > 0) {
                        footStr += '<select name="second">' + fillTimeOption(60) + '</select>秒 </td></tr>';
                    } else {
                        footStr += '</td></tr>';
                    }
                    foot.append(footStr);
                }
                foot.append('<tr><td colspan="2"><span class="clear">清空</span></td><td colspan="3"><span class="today">今天</span></td><td colspan="2"><span class="close">关闭</span></td></tr>');
                for (var i = 0; i < 6; i++) jQuery("tbody", table).append('<tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>');
                return div;

                function fillTimeOption(num) {
                    var a = [];
                    for (var i = 0; i < num; i++) {
                        var v = (i) < 10 ? ('0' + (i)) : (i);
                        a.push('<option value="' + v + '">' + v + '</option>');
                    }
                    return a.join('');
                }
            }

            /** get the real position of the input (well, anything really) **/
            //http://www.quirksmode.org/js/findpos.html
            function findPosition(obj) {
                var curleft = curtop = 0;
                if (obj.offsetParent) {
                    do {
                        curleft += obj.offsetLeft;
                        curtop += obj.offsetTop;
                    } while (obj = obj.offsetParent);
                    return [curleft, curtop];
                } else {
                    return false;
                }
            }

            /** load the initial date and handle all date-navigation **/
            // initial calendar load (e is null)
            // prevMonth & nextMonth buttons
            // onchange for the select fields
            function loadMonth(e, el, datepicker, chosendate) {
                // reference our years for the nextMonth and prevMonth buttons
                var mo = jQuery("select[name=month]", datepicker).get(0).selectedIndex;
                var yr = jQuery("select[name=year]", datepicker).get(0).selectedIndex;
                var yrs = jQuery("select[name=year] option", datepicker).get().length;

                // first try to process buttons that may change the month we're on
                if (e && jQuery(e.target).hasClass('prevMonth')) {
                    if (0 == mo && yr) {
                        yr -= 1; mo = 11;
                        jQuery("select[name=month]", datepicker).get(0).selectedIndex = 11;
                        jQuery("select[name=year]", datepicker).get(0).selectedIndex = yr;
                    } else {
                        mo -= 1;
                        jQuery("select[name=month]", datepicker).get(0).selectedIndex = mo;
                    }
                } else if (e && jQuery(e.target).hasClass('nextMonth')) {
                    if (11 == mo && yr + 1 < yrs) {
                        yr += 1; mo = 0;
                        jQuery("select[name=month]", datepicker).get(0).selectedIndex = 0;
                        jQuery("select[name=year]", datepicker).get(0).selectedIndex = yr;
                    } else {
                        mo += 1;
                        jQuery("select[name=month]", datepicker).get(0).selectedIndex = mo;
                    }
                }

                // maybe hide buttons
                if (0 == mo && !yr) jQuery("span.prevMonth", datepicker).hide();
                else jQuery("span.prevMonth", datepicker).show();
                if (yr + 1 == yrs && 11 == mo) jQuery("span.nextMonth", datepicker).hide();
                else jQuery("span.nextMonth", datepicker).show();

                // clear the old cells
                var cells = jQuery("tbody td", datepicker).unbind().empty().removeClass('date');

                // figure out what month and year to load
                var m = jQuery("select[name=month]", datepicker).val();
                var y = jQuery("select[name=year]", datepicker).val();
                var d = new Date(y, m, 1);
                var startindex = d.getDay();
                var numdays = monthlengths[m];

                // http://en.wikipedia.org/wiki/Leap_year
                if (1 == m && ((y % 4 == 0 && y % 100 != 0) || y % 400 == 0)) numdays = 29;

                // test for end dates (instead of just a year range)
                if (opts.startdate.constructor == Date) {
                    var startMonth = opts.startdate.getMonth();
                    var startDate = opts.startdate.getDate();
                }
                if (opts.enddate.constructor == Date) {
                    var endMonth = opts.enddate.getMonth();
                    var endDate = opts.enddate.getDate();
                }

                // walk through the index and populate each cell, binding events too
                for (var i = 0; i < numdays; i++) {

                    var cell = jQuery(cells.get(i + startindex)).removeClass('chosen');

                    // test that the date falls within a range, if we have a range
                    if (
					(yr || ((!startDate && !startMonth) || ((i + 1 >= startDate && mo == startMonth) || mo > startMonth))) &&
					(yr + 1 < yrs || ((!endDate && !endMonth) || ((i + 1 <= endDate && mo == endMonth) || mo < endMonth)))) {

                        cell
						.text(i + 1)
						.addClass('date')
						.hover(
							function () { jQuery(this).addClass('over'); },
							function () { jQuery(this).removeClass('over'); })
						.click(function () {
						    var chosenDateObj = new Date(jQuery("select[name=year]", datepicker).val(), jQuery("select[name=month]", datepicker).val(), jQuery(this).text(), jQuery("select[name=hour]", datepicker).val() || 0, jQuery("select[name=minute]", datepicker).val() || 0, jQuery("select[name=second]", datepicker).val() || 0);
						    closeIt(el, datepicker, chosenDateObj);
						});

                        // highlight the previous chosen date
                        if (i + 1 == chosendate.getDate() && m == chosendate.getMonth() && y == chosendate.getFullYear()) cell.addClass('chosen');
                    }
                }
            }

            /** closes the datepicker **/
            // sets the currently matched input element's value to the date, if one is available
            // remove the table element from the DOM
            // indicate that there is no datepicker for the currently matched input element
            function closeIt(el, datepicker, dateObj, isClear) {
                if (dateObj && dateObj.constructor == Date) {
                    el.val(jQuery.fn.simpleDatepicker.formatOutput(dateObj, opts));
                }
                if (isClear) {
                    el.val('');
                }
                datepicker.remove();
                datepicker = null;
                jQuery.data(el.get(0), "simpleDatepicker", { hasDatepicker: false });
                opts.callback(el.get(0));
            }

            function initDateObj(str) {
                try {
                    var a1 = str.split(' ');
                    var ds = a1[0].split('-');
                    var ts = a1[1] ? a1[1].split(':') : [];

                    return new Date(ds[0], parseInt(ds[1] - 1), ds[2], ts[0] || null, ts[1] || null, ts[2] || null);
                } catch (e) {
                    return new Date();
                }
            };

            // iterate the matched nodeset
            return this.each(function () {

                // functions and vars declared here are created for each matched element. so if
                // your functions need to manage or access per-node state you can defined them
                // here and use $this to get at the DOM element

                if (jQuery(this).is('input') && 'text' == jQuery(this).attr('type')) {

                    var datepicker;
                    jQuery.data(jQuery(this).get(0), "simpleDatepicker", { hasDatepicker: false });

                    // open a datepicker on the click event
                    jQuery(this).click(function (ev) {
                        var $this = jQuery(ev.target);
                        if (false == jQuery.data($this.get(0), "simpleDatepicker").hasDatepicker) {
                            var curDatepicker = $jqCalendar.datepicker;
                            if (curDatepicker) {
                                curDatepicker.unbind();
                                curDatepicker.remove();
                                curDatepicker = null;
                                jQuery.data($jqCalendar.el, "simpleDatepicker", { hasDatepicker: false });
                            }
                            // store data telling us there is already a datepicker
                            jQuery.data($this.get(0), "simpleDatepicker", { hasDatepicker: true });

                            // validate the form's initial content for a date
                            var initialDate = $this.val();

                            if (initialDate) {
                                var chosendate = initDateObj(initialDate);
                            } else if (opts.chosendate.constructor == Date) {
                                var chosendate = opts.chosendate;
                            } else if (opts.chosendate) {
                                var chosendate = initDateObj(opts.chosendate);
                            } else {
                                var chosendate = today;
                            }

                            // insert the datepicker in the DOM
                            datepicker = newDatepickerHTML();
                            jQuery("body").prepend(datepicker);

                            // position the datepicker
                            var elPos = findPosition($this.get(0));
                            var x = (parseInt(opts.x) ? parseInt(opts.x) : 0) + elPos[0];
                            var y = (parseInt(opts.y) ? parseInt(opts.y) : 0) + elPos[1];
                            jQuery(datepicker).css({ position: 'absolute', left: x, top: y, display: '' });

                            // bind events to the table controls
                            jQuery("span", datepicker).css("cursor", "pointer");
                            jQuery("select", datepicker).bind('change', function () { loadMonth(null, $this, datepicker, chosendate); }).click(function () { return false; });
                            jQuery("span.prevMonth", datepicker).click(function (e) { loadMonth(e, $this, datepicker, chosendate); return false; });
                            jQuery("span.nextMonth", datepicker).click(function (e) { loadMonth(e, $this, datepicker, chosendate); return false; });
                            jQuery("span.today", datepicker).click(function () { closeIt($this, datepicker, new Date()); });
                            jQuery("span.close", datepicker).click(function () { closeIt($this, datepicker); });
                            jQuery("span.clear", datepicker).click(function () { closeIt($this, datepicker, null, true); });
                            // set the initial values for the month and year select fields
                            // and load the first month
                            jQuery("select[name=month]", datepicker).get(0).selectedIndex = chosendate.getMonth();
                            jQuery("select[name=year]", datepicker).get(0).selectedIndex = Math.max(0, chosendate.getFullYear() - opts.startyear);

                            if (opts.hasTime) {
                                jQuery("select[name=hour]", datepicker).get(0).selectedIndex = chosendate.getHours();
                                jQuery("select[name=minute]", datepicker).get(0).selectedIndex = chosendate.getMinutes();
                                if (opts.timeFormat.indexOf('ss') > 0) {
                                    jQuery("select[name=second]", datepicker).get(0).selectedIndex = chosendate.getSeconds();
                                }
                            }
                            loadMonth(null, $this, datepicker, chosendate);
                        }
                        $jqCalendar.datepicker = datepicker;
                        $jqCalendar.el = $this.get(0);
                        $jqCalendar.showCalendar = true;
                        return false;
                    });

                    jQuery(document.body).click(function () {
                        if (!$jqCalendar.showCalendar) {
                            var curDatepicker = $jqCalendar.datepicker;
                            if (curDatepicker) {
                                curDatepicker.unbind();
                                curDatepicker.remove();
                                curDatepicker = null;
                                jQuery.data($jqCalendar.el, "simpleDatepicker", { hasDatepicker: false });
                            }
                        }
                        $jqCalendar.showCalendar = false;
                    });
                }

            });

        };

        // finally, I like to expose default plugin options as public so they can be manipulated.  one
        // way to do this is to add a property to the already-public plugin fn

        jQuery.fn.simpleDatepicker.formatOutput = function (dateObj, opts) {
            return fixedValue(dateObj.getFullYear()) + '-'
               + fixedValue(dateObj.getMonth() + 1)
               + "-" + fixedValue(dateObj.getDate())
               + (opts.hasTime ? (' ' + opts.timeFormat.replace('hh', fixedValue(dateObj.getHours())).replace('ii', fixedValue(dateObj.getMinutes())).replace('ss', fixedValue(dateObj.getSeconds()))) : '');

            function fixedValue(v) {
                return v < 10 ? ('0' + v) : v;
            }
        };

        jQuery.fn.simpleDatepicker.defaults = {
            // date string matching /^\d{1,2}\/\d{1,2}\/\d{2}|\d{4}$/
            chosendate: today,
            // date string matching /^\d{1,2}\/\d{1,2}\/\d{2}|\d{4}$/
            // or four digit year
            startdate: today.getFullYear() - 20,
            enddate: today.getFullYear() + 30,
            timeFormat: 'hh:ii',    //hh:ii:ss
            hasTime: false,
            // offset from the top left corner of the input element
            x: 18, // must be in px
            y: 18, // must be in px
            callback: function (datepicker) { }
        };

        $loadCss("http://static.paipaiimg.com/module/jqcalendar.css?t=20101201");
    })(jQuery);
}
function $json2temp( json, temp )
{
	for( var i in json )
	{
		var reStr = i;
		var re = new RegExp( "{#"+reStr+"#}", "gi" );
		temp = temp.replace( re, json[i] )	;	
	}
	return temp;
}
function $jsonToTpl(json,tpl){
	return tpl.replace(/{#(\w+)#}/g,function(a,b){return json[b]||""});
}
//检查组件样式是否已经加载，否则加载对应css文件
function $loadCompCss(comp,url){
	//检查对应comp的css是否存在
	var temp=document.createElement("div");
	temp.className=comp+"_css";
	temp.style.position="absolute";
	temp.style.top="0px";
	document.body.appendChild(temp);
	if(parseInt(temp.offsetHeight)<1){
		$loadCss(url);
	}
	//清理场景
	document.body.removeChild(temp);
	delete temp;
	return true;
}
function $loadCss(path){
	if(!window["_loadCss"] || window["_loadCss"].indexOf(path)<1){
			var l = document.createElement('link');
			l.setAttribute('type', 'text/css');
			l.setAttribute('rel', 'stylesheet');
			l.setAttribute('href', path);
			l.setAttribute("id","loadCss"+Math.random());
			document.getElementsByTagName("head")[0].appendChild(l);
			window["_loadCss"]?(window["_loadCss"]+="|"+path):(window["_loadCss"]="|"+path);
	}
	return true;
}
function $loadImg(obj,attr){
	//载入隐藏的图片
	var attr=attr || "back_src",
		images = obj.getElementsByTagName("IMG");
	for(var i=0,len=images.length;i<len;i++){
		var oImg=images[i],
			src=oImg.getAttribute(attr);
		''==oImg.src && src && (oImg.src=src);
	}
}
function $loadScript(obj) {
	//创建一个script并加载script
	//原始参数：id:'放置script的id',  url:'载入的地址',obj:'其他配置';
	var isObj = typeof (obj) == "object", url = isObj ? obj.url : arguments[0], id = isObj ? obj.id : arguments[1], obj = isObj ? obj : arguments[2];

	//定义全局计数器
	if(!$loadScript.counter) {
		$loadScript.counter = 1;
	}

	setTimeout(function() {

		var _el = document.createElement("script"), D = new Date(), _time = D.getTime(), //script标签的属性id的时间戳
		_isCleared = false, _timer = null, //定时器对象
		o = obj || {}, //扩展参数对象
		data = o.data || '', //可选，get数据  支持对象{p1:1,p2:2}和字符串p1=1&p2=2
		charset = o.charset || "gb2312", //可选，编码方式
		isToken = o.isToken, //可选，是否添加token验证
		timeout = o.timeout, //可选，超时时间，单位：毫秒
		isAutoReport = o.isAutoReport || false, //可选，是否自动返回码上报，true/false 默认为false
		reportOptions = o.reportOptions || {}, //可选，返回码上报组件的参数，同组件$returnCode
		reportType = o.reportType || 'current',
		//可选，支持两种返回码上报方式：current 和 cross，前者是当前页cgi上报，后者是跨页面上报
		reportRetCodeName = o.reportRetCodeName,
		//可选，异步接口返回数据的错误码字段名称，无默认值。
		reportSuccessCode = typeof (o.reportSuccessCode) == "undefined" ? 200 : o.reportSuccessCode,
		//可选，接口返回成功的状态码，默认为200，指cgi成功返回。设置了reportRetCodeName时，reportSuccessCode将无效。
		reportErrorCode = typeof (o.reportErrorCode) == "undefined" ? 500 : o.reportErrorCode,
		//可选，接口返回错误的状态码，默认为500，泛指cgi不可用。
		reportTimeoutCode = typeof (o.reportTimeoutCode) == "undefined" ? 600 : o.reportTimeoutCode,
		//可选，接口超时的状态码，默认为600，指cgi超时。
		onload = o.onload, //可选，加载完成
		callbackName = o.callbackName || '', //可选，回调函数名称
		callback = o.callback, //可选，回调函数体
		errorback = o.errorback,
		//可选，错误回调函数体，参数为错误码。
		_jsonpLoadState = 'uninitialized';
		//加载状态

		//设置超时
		if(timeout) {
			_timer = setTimeout(function() {
				clear(reportTimeoutCode);
			}, parseInt(timeout, 10));
		}

		//定义返回码自动上报
		if(isAutoReport && reportOptions) {
			if(reportType == 'cross') {
				//页面1打开的时候注册一个action
				$returnCode(reportOptions).reg();
			}
			else {
				reportOptions.url = reportOptions.url || url.substr(0, url.indexOf('?') == -1 ? url.length : url.indexOf('?'));
				var _retCoder = $returnCode(reportOptions);
			}
		}

		//创建一个临时全局函数，执行回调函数
		if(callbackName && typeof callback == "function") {
			var oldName = callbackName;
			if(callbackName.indexOf('.') == -1) {
				callbackName = window[callbackName] ? callbackName + $loadScript.counter++ : callbackName;
				window[callbackName] = function(jsonData) {
					_jsonpLoadState = 'loaded';
					if(isAutoReport && reportRetCodeName) {
						reportSuccessCode = jsonData[reportRetCodeName];
					}
					//原生的回调函数
					callback(jsonData);
				};
			}
			else {
				var arrJ = callbackName.split("."), p = {}, arrF = [];
				for(var j = 0, jLen = arrJ.length; j < jLen; j++) {
					var n = arrJ[j];
					if(j == 0) {
						p = window[n];
					}
					else {
						if(j == jLen - 1) {
							p[n] ? ( n = n + $loadScript.counter++) : '';
							p[n] = function(jsonData) {
								_jsonpLoadState = 'loaded';
								if(isAutoReport && reportRetCodeName) {
									reportSuccessCode = jsonData[reportRetCodeName];
								}
								//原生的回调函数
								callback(jsonData);
							};
						}
						else {
							p = p[n];
						}
					}
					arrF.push(n);
				}
				callbackName = arrF.join('.');
			}
			url = url.replace('=' + oldName, '=' + callbackName);
		}

		if(data) {
			url += (url.indexOf("?") != -1 ? "&" : "?") + ( typeof data == 'string' ? data : jsontostr(data));
		} id = id ? (id + _time) : _time, url = (isToken !== false ? $addToken(url, "ls") : url);
		_el.charset = charset;
		_el.id = id;
		_jsonpLoadState = 'loading';
		//加载jsonp数据成功
		_el.onload = _el.onreadystatechange = function() {
			var uA = navigator.userAgent.toLowerCase();
			//非ie与ie判断
			if(!(!(uA.indexOf("opera") != -1) && uA.indexOf("msie") != -1) || /loaded|complete/i.test(this.readyState)) {
				if( typeof onload == "function") {
					onload();
				}
				//loaded
				clear(_jsonpLoadState == "loaded" ? reportSuccessCode : reportErrorCode);
			}
		};
		//加载jsonp数据错误，支持safari,chrome,firefox,ie9
		_el.onerror = function() {
			//cgi error
			clear(reportErrorCode);
		};
		_el.src = url;
		document.getElementsByTagName("head")[0].appendChild(_el);

		/**清除处理函数
		 *  @errCode: reportSuccessCode, reportErrorCode,  reportTimeoutCode
		 */
		function clear(errCode) {
			if(!_el) {
				return;
			}
			//防止重复执行的问题
			if(_isCleared) {
				return;
			}
			else {
				_isCleared = true;
			}

			//返回数据错误或超时
			if(_jsonpLoadState != "loaded" && typeof errorback == "function") {
				errorback(errCode);
			}

			//清除全局临时回调函数
			if(callbackName) {
				if(callbackName.indexOf('.') == -1) {
					window[callbackName] = null;
					try {
						delete window[callbackName];
					}
					catch (e) {
					}
				}
				else {
					var arrJ = callbackName.split("."), p = {};
					for(var j = 0, jLen = arrJ.length; j < jLen; j++) {
						var n = arrJ[j];
						if(j == 0) {
							p = window[n];
						}
						else {
							if(j == jLen - 1) {
								try {
									delete p[n];
								}
								catch (e) {
								}
							}
							else {
								p = p[n];
							}
						}
					}
				}
			}

			//清除定时器
			if(_timer) {
				clearTimeout(_timer);
			}

			//返回码自动上报
			if(isAutoReport && reportType != 'cross') {
				_retCoder.report(_jsonpLoadState == "loaded", errCode);
			}

			//清除绑定属性，防止内存泄漏
			if(_el.clearAttributes) {//IE
				_el.clearAttributes();
			}
			else {//other browsers
				_el.onload = _el.onreadystatechange = _el.onerror = null;
			}

			//清除script元素
			try {
				_el.parentNode.removeChild(_el);
			}
			catch (e) {
			}
			_el = null;
		}

		function jsontostr(d) {
			var a = [];
			for(var k in d) {
				a.push(k + '=' + d[k]);
			}
			return a.join('&');
		}

	}, 0);
}
function $loadXmlString(s){
//加载xml字符串，转成xml对象

	var tempObj = $createXmlObj();
	if (document.all){
		if (tempObj){
			tempObj.loadXML(s);
		}
	}else{
		var oParser = new DOMParser();
		tempObj = oParser.parseFromString(s,"text/xml");
	}
	return tempObj;
}
function $loginUrl(option){
	var opt={
		type:'app',		//app/client
		dom:document.body,	//可以传入obj，那么会去找该obj下面所有链接，也可以传入string，那么会找这个id本身
		uin:$getUin(),
		key:$getCookie("skey") || "",
		prefix:{
			//'app':'http://ptlogin2.paipai.com/jump?uin={#uin#}&skey={#key#}&u1=',
			'app':'http://ptlogin2.paipai.com/client_jump_paipai?uin={#uin#}&skey={#key#}&keyindex=0&u1=',
			'client':'http://ptlogin2.paipai.com/client_jump_paipai?clientuin={#uin#}&clientkey={#key#}&keyindex=0&u1='
		},
		ptag:'',
		filter:[]		//过滤，支持某些链接不加
	};
	
	for(var k in option){opt[k] = option[k]};
	
	var prefix=opt.prefix[opt.type].replace("{#uin#}",opt.uin).replace("{#key#}",opt.key),
		dom=$id(opt.dom);
	
	$addEvent(dom,"mousedown",function(e){
		var tar=$getTarget(e,dom,"a");
		//当点击sroll的时候也会触发mousedown，但它的parent是null
		if(tar){
			var href=tar.href,
				tag=href.indexOf("?")!=-1?"&":"?";
			//如果已经加上了 | js操作 | # | 当前页面本身，均不做操作。
			if(href.indexOf("http://ptlogin2.paipai.com/")==-1 && href.indexOf("javascript")==-1 && href.indexOf(window.location.href)==-1 && href.indexOf("#")!=0){
				//判断有没有被排除的链接，如果有也不加
				for(var i=0,len=opt.filter.length;i<len;i++){
					if(href.indexOf(opt.filter[i])!=-1){return;}
				}
				//如果指定了ptag且ptag值没有被指定
				opt.ptag && href.toLowerCase().indexOf("ptag")==-1 && (href=href+tag+"PTAG="+opt.ptag);		
				tar.href=prefix	+ escape(href);			
			};
		}
	});
$addEvent(dom,"dragstart",function(e){  //禁止链接拖放,避免用户skey暴露
		var tar=$getTarget(e,dom,"a");		
		tar && $preventDefault(e);
	});
/*
	for(var i=0,len=links.length;i<len;i++){
		var href=links[i].href,
			tag=href.indexOf("?")!=-1?"&":"?";
		//如果已经加上了，则不做操作。
		if(href.indexOf("http://ptlogin2.paipai.com/client_jump_paipai?")!=-1){break};
		//如果指定了ptag且ptag值没有被指定
		opt.ptag && href.toLowerCase().indexOf("ptag")==-1 && (href=href+tag+"PTAG="+opt.ptag);
		links[i].href=prefix+escape(href);
	}*/
}
function $loopElement(func,lm){
	var lm=lm || document.body;		
    lm!=document.body && func(lm);	    	    
    lm=focusLm(lm.firstChild);
        
    while(lm){
        $loopElement(func,lm);
        lm=focusLm(lm.nextSibling);
    }
    
    function focusLm(lm){
    	while(lm && lm.nodeType!=1){
    		lm=lm.nextSibling;
    	};
    	return lm;
    }
}
function $makeKV(data){
	//将json串组装成键值串并返回
	var arr=[];
	for( var k in data) {
		arr.push(k+":"+data[k]);
	};
	return arr.join("|");
}
function $makeRd(rd,url){
	var url=url||'http://www.paipai.com/rd.html',
		arrRd=rd.split(".");
	return "http://service.paipai.com/cgi-bin/go?pageId="+arrRd[0]+"&domainId="+arrRd[1]+"&linkId="+arrRd[2]+ "&url=" + escape(url);
}
function $makeUrl(data){
	//将json串组装成为url并返回
	var arr=[];
	for( var k in data) {
		arr.push(k+"="+data[k]);
	};
	return arr.join("&");
}
$mask = function(el, f, t) {

	function _MaskAPI() {
		this.version = "0.4b";
		this.instances = 0;
		this.objects = {};
	}

	MaskAPI = new _MaskAPI();

	function Mask(m, t) {
		this.mask = m;
		this.type = ( typeof t == "string") ? t : "string";
		this.error = [];
		this.errorCodes = [];
		this.value = "";
		this.strippedValue = "";
		this.allowPartial = false;
		this.id = MaskAPI.instances++;
		this.ref = "MaskAPI.objects['" + this.id + "']";
		MaskAPI.objects[this.id] = this;
	}

	// define the attach(oElement) function
	Mask.prototype.attach = function(o) {
		maskAddEvent(o, "onkeydown", "return " + this.ref + ".isAllowKeyPress(event, this);", true);
		maskAddEvent(o, "onkeyup", "return " + this.ref + ".getKeyPress(event, this);", true);
		maskAddEvent(o, "onblur", "this.value = " + this.ref + ".format(this.value);", true);
	}
	Mask.prototype.isAllowKeyPress = function(e, o) {
		if(this.type != "string")
			return true;
		var xe = new qEvent(e);

		if(((xe.keyCode > 47) && (o.value.length >= this.mask.length)) && !xe.ctrlKey)
			return false;
		return true;
	}
	Mask.prototype.getKeyPress = function(e, o, _u) {
		this.allowPartial = true;
		var xe = new qEvent(e);

		//	var k = String.fromCharCode(xe.keyCode);

		if((xe.keyCode > 47) || (_u == true) || (xe.keyCode == 8 || xe.keyCode == 46)) {
			var v = o.value, d;
			if(xe.keyCode == 8 || xe.keyCode == 46)
				d = true;
			else
				d = false
			if(this.type == "number")
				this.value = this.setNumber(v, d);
			else if(this.type == "date")
				this.value = this.setDateKeyPress(v, d);
			else
				this.value = this.setGeneric(v, d);

			o.value = this.value;
		}
		/* */

		this.allowPartial = false;
		return true;
	}
	Mask.prototype.format = function(s) {
		if(this.type == "number")
			this.value = this.setNumber(s);
		else if(this.type == "date")
			this.value = this.setDate(s);
		else
			this.value = this.setGeneric(s);
		return this.value;
	}
	Mask.prototype.throwError = function(c, e, v) {
		this.error[this.error.length] = e;
		this.errorCodes[this.errorCodes.length] = c;
		if( typeof v == "string")
			return v;
		return true;
	}
	Mask.prototype.setGeneric = function(_v, _d) {
		var v = _v, m = this.mask;
		var r = "x#*", rt = [], nv = "", t, x, a = [], j = 0, rx = {
			"x" : "A-Za-z",
			"#" : "0-9",
			"*" : "A-Za-z0-9"
		};

		// strip out invalid characters
		v = v.replace(new RegExp("[^" + rx["*"] + "]", "gi"), "");
		if((_d == true) && (v.length == this.strippedValue.length))
			v = v.substring(0, v.length - 1);
		this.strippedValue = v;
		var b = [];
		for(var i = 0; i < m.length; i++) {
			// grab the current character
			x = m.charAt(i);
			// check to see if current character is a mask, escape commands are not a mask character
			t = (r.indexOf(x) > -1);
			// if the current character is an escape command, then grab the next character
			if(x == "!")
				x = m.charAt(i++);
			// build a regex to test against
			if((t && !this.allowPartial) || (t && this.allowPartial && (rt.length < v.length)))
				rt[rt.length] = "[" + rx[x] + "]";
			// build mask definition table
			a[a.length] = {
				"chr" : x,
				"mask" : t
			};
		}

		var hasOneValidChar = false;
		// if the regex fails, return an error
		if(!this.allowPartial && !(new RegExp(rt.join(""))).test(v))
			return this.throwError(1, "The value \"" + _v + "\" must be in the format " + this.mask + ".", _v);
		// loop through the mask definition, and build the formatted string
		else if((this.allowPartial && (v.length > 0)) || !this.allowPartial) {
			for( i = 0; i < a.length; i++) {
				if(a[i].mask) {
					while(v.length > 0 && !(new RegExp(rt[j])).test(v.charAt(j)))
					v = (v.length == 1) ? "" : v.substring(1);
					if(v.length > 0) {
						nv += v.charAt(j);
						hasOneValidChar = true;
					}
					j++;
				} else
					nv += a[i].chr;
				if(this.allowPartial && (j > v.length))
					break;
			}
		}

		if(this.allowPartial && !hasOneValidChar)
			nv = "";
		if(this.allowPartial) {
			if(nv.length < a.length)
				this.nextValidChar = rx[a[nv.length].chr];
			else
				this.nextValidChar = null;
		}

		return nv;
	}
	Mask.prototype.setNumber = function(_v, _d) {
		var v = String(_v).replace(/[^\d.-]*/gi, ""), m = this.mask;
		// make sure there's only one decimal point
		v = v.replace(/\./, "d").replace(/\./g, "").replace(/d/, ".");

		// check to see if an invalid mask operation has been entered
		if(!/^[\$]?((\$?[\+-]?([0#]{1,3},)?[0#]*(\.[0#]*)?)|([\+-]?\([\+-]?([0#]{1,3},)?[0#]*(\.[0#]*)?\)))$/.test(m))
			return this.throwError(1, "An invalid mask was specified for the \nMask constructor.", _v);

		if((_d == true) && (v.length == this.strippedValue.length))
			v = v.substring(0, v.length - 1);

		if(this.allowPartial && (v.replace(/[^0-9]/, "").length == 0))
			return v;
		this.strippedValue = v;

		if(v.length == 0)
			v = NaN;
		var vn = Number(v);
		if(isNaN(vn))
			return this.throwError(2, "The value entered was not a number.", _v);

		// if no mask, stop processing
		if(m.length == 0)
			return v;

		// get the value before the decimal point
		var vi = String(Math.abs((v.indexOf(".") > -1 ) ? v.split(".")[0] : v));
		// get the value after the decimal point
		var vd = (v.indexOf(".") > -1) ? v.split(".")[1] : "";
		var _vd = vd;

		var isNegative = (vn != 0 && Math.abs(vn) * -1 == vn);

		// check for masking operations
		var show = {
			"$" : /^[\$]/.test(m),
			"(" : (isNegative && (m.indexOf("(") > -1)),
			"+" : ((m.indexOf("+") != -1) && !isNegative )
		}
		show["-"] = (isNegative && (!show["("] || (m.indexOf("-") != -1)));

		// replace all non-place holders from the mask
		m = m.replace(/[^#0.,]*/gi, "");

		/*
		make sure there are the correct number of decimal places
		*/
		// get number of digits after decimal point in mask
		var dm = (m.indexOf(".") > -1 ) ? m.split(".")[1] : "";
		if(dm.length == 0) {
			vi = String(Math.round(Number(vi)));
			vd = "";
		} else {
			// find the last zero, which indicates the minimum number
			// of decimal places to show
			var md = dm.lastIndexOf("0") + 1;
			// if the number of decimal places is greater than the mask, then round off
			if(vd.length > dm.length)
				vd = String(Math.round(Number(vd.substring(0, dm.length + 1)) / 10));
			// otherwise, pad the string w/the required zeros
			else
				while(vd.length < md)
				vd += "0";
		}

		/*
		pad the int with any necessary zeros
		*/
		// get number of digits before decimal point in mask
		var im = (m.indexOf(".") > -1 ) ? m.split(".")[0] : m;
		im = im.replace(/[^0#]+/gi, "");
		// find the first zero, which indicates the minimum length
		// that the value must be padded w/zeros
		var mv = im.indexOf("0") + 1;
		// if there is a zero found, make sure it's padded
		if(mv > 0) {
			mv = im.length - mv + 1;
			while(vi.length < mv)
			vi = "0" + vi;
		}

		/*
		 check to see if we need commas in the thousands place holder
		 */
		if(/[#0]+,[#0]{3}/.test(m)) {
			// add the commas as the place holder
			var x = [], i = 0, n = Number(vi);
			while(n > 999) {
				x[i] = "00" + String(n % 1000);
				x[i] = x[i].substring(x[i].length - 3);
				n = Math.floor(n / 1000);
				i++;
			}
			x[i] = String(n % 1000);
			vi = x.reverse().join(",");
		}

		/*
		 combine the new value together
		 */
		if((vd.length > 0 && !this.allowPartial) || ((dm.length > 0) && this.allowPartial && (v.indexOf(".") > -1) && (_vd.length >= vd.length))) {
			v = vi + "." + vd;
		} else if((dm.length > 0) && this.allowPartial && (v.indexOf(".") > -1) && (_vd.length < vd.length)) {
			v = vi + "." + _vd;
		} else {
			v = vi;
		}

		if(show["$"])
			v = this.mask.replace(/(^[\$])(.+)/gi, "$") + v;
		if(show["+"])
			v = "+" + v;
		if(show["-"])
			v = "-" + v;
		if(show["("])
			v = "(" + v + ")";
		return v;
	}
	Mask.prototype.setDate = function(_v) {
		var v = _v, m = this.mask;
		var a, e, mm, dd, yy, x, s;

		// split mask into array, to see position of each day, month & year
		a = m.split(/[^mdy]+/);
		// split mask into array, to get delimiters
		s = m.split(/[mdy]+/);
		// convert the string into an array in which digits are together
		e = v.split(/[^0-9]/);

		if(s[0].length == 0)
			s.splice(0, 1);

		for(var i = 0; i < a.length; i++) {
			x = a[i].charAt(0).toLowerCase();
			if(x == "m")
				mm =  parseInt(e[i], 10) - 1;
			else if(x == "d")
				dd = parseInt(e[i], 10);
			else if(x == "y")
				yy = parseInt(e[i], 10);
		}

		// if year is abbreviated, guess at the year
		if(String(yy).length < 3) {
			yy = 2000 + yy;
			if((new Date()).getFullYear() + 5 < yy)
				yy = yy - 100;
		}

		// create date object
		var d = new Date(yy, mm, dd);

		if(d.getDate() != dd)
			return this.throwError(1, "An invalid day was entered.", _v);
		else if(d.getMonth() != mm)
			return this.throwError(2, "An invalid month was entered.", _v);

		var nv = "";

		for( i = 0; i < a.length; i++) {
			x = a[i].charAt(0).toLowerCase();
			if(x == "m") {
				mm++;
				if(a[i].length == 2) {
					mm = "0" + mm;
					mm = mm.substring(mm.length - 2);
				}
				nv += mm;
			} else if(x == "d") {
				if(a[i].length == 2) {
					dd = "0" + dd;
					dd = dd.substring(dd.length - 2);
				}
				nv += dd;
			} else if(x == "y") {
				if(a[i].length == 2)
					nv += d.getFullYear();
				else
					nv += d.getFullYear();
			}

			if(i < a.length - 1)
				nv += s[i];
		}

		return nv;
	}
	Mask.prototype.setDateKeyPress = function(_v, _d) {
		var v = _v, m = this.mask, k = v.charAt(v.length - 1);
		var a, e, c, ml, vl, mm = "", dd = "", yy = "", x, p, z;

		if(_d == true) {
			while((/[^0-9]/gi).test(v.charAt(v.length - 1)))
			v = v.substring(0, v.length - 1);
			if((/[^0-9]/gi).test(this.strippedValue.charAt(this.strippedValue.length - 1)))
				v = v.substring(0, v.length - 1);
			if(v.length == 0)
				return "";
		}

		// split mask into array, to see position of each day, month & year
		a = m.split(/[^mdy]/);
		// split mask into array, to get delimiters
		s = m.split(/[mdy]+/);
		// mozilla wants to add an empty array element which needs removed
		if(s[0].length == 0)
			s.splice(0, 1);
		// convert the string into an array in which digits are together
		e = v.split(/[^0-9]/);
		// position in mask
		p = (e.length > 0) ? e.length - 1 : 0;
		// determine what mask value the user is currently entering
		c = a[p].charAt(0);
		// determine the length of the current mask value
		ml = a[p].length;

		for(var i = 0; i < e.length; i++) {
			x = a[i].charAt(0).toLowerCase();
			if(x == "m")
				mm =  parseInt(e[i], 10) - 1;
			else if(x == "d")
				dd = parseInt(e[i], 10);
			else if(x == "y")
				yy = parseInt(e[i], 10);
		}

		var nv = "";
		var j = 0;

		for( i = 0; i < e.length; i++) {
			x = a[i].charAt(0).toLowerCase();

			if(x == "m") {
				z = ((/[^0-9]/).test(k) && c == "m");
				mm++;
				if((e[i].length == 2 && mm < 10) || (a[i].length == 2 && c != "m") || (mm > 1 && c == "m") || (z && a[i].length == 2)) {
					mm = "0" + mm;
					mm = mm.substring(mm.length - 2);
				}
				vl = String(mm).length;
				ml = 2;
				nv += mm;
			} else if(x == "d") {
				z = ((/[^0-9]/).test(k) && c == "d");
				if((e[i].length == 2 && dd < 10) || (a[i].length == 2 && c != "d") || (dd > 3 && c == "d") || (z && a[i].length == 2)) {
					dd = "0" + dd;
					dd = dd.substring(dd.length - 2);
				}
				vl = String(dd).length;
				ml = 2;
				nv += dd;
			} else if(x == "y") {
				z = ((/[^0-9]/).test(k) && c == "y");
				if(c == "y")
					yy = String(yy);
				else {
					if(a[i].length == 2)
						yy = d.getFullYear();
					else
						yy = d.getFullYear();
				}
				if((e[i].length == 2 && yy < 10) || (a[i].length == 2 && c != "y") || (z && a[i].length == 2)) {
					yy = "0" + yy;
					yy = yy.substring(yy.length - 2);
				}
				ml = a[i].length;
				vl = String(yy).length;
				nv += yy;
			}

			if(((ml == vl || z) && (x == c) && (i < s.length)) || (i < s.length && x != c ))
				nv += s[i];
		}

		if(nv.length > m.length)
			nv = nv.substring(0, m.length);

		this.strippedValue = (nv == "NaN") ? "" : nv;

		return this.strippedValue;
	}
	function qEvent(e) {
		// routine for NS, Opera, etc DOM browsers
		if(window.Event) {
			var isKeyPress = (e.type.substring(0, 3) == "key");

			this.keyCode = (isKeyPress) ? parseInt(e.which, 10) : 0;
			this.button = (!isKeyPress) ? parseInt(e.which, 10) : 0;
			this.srcElement = e.target;
			this.type = e.type;
			this.x = e.pageX;
			this.y = e.pageY;
			this.screenX = e.screenX;
			this.screenY = e.screenY;
			if(document.layers) {
				this.altKey = ((e.modifiers & Event.ALT_MASK) > 0);
				this.ctrlKey = ((e.modifiers & Event.CONTROL_MASK) > 0);
				this.shiftKey = ((e.modifiers & Event.SHIFT_MASK) > 0);
				this.keyCode = this.translateKeyCode(this.keyCode);
			} else {
				this.altKey = e.altKey;
				this.ctrlKey = e.ctrlKey;
				this.shiftKey = e.shiftKey;
			}
			// routine for Internet Explorer DOM browsers
		} else {
			e = window.event;
			this.keyCode = parseInt(e.keyCode, 10);
			this.button = e.button;
			this.srcElement = e.srcElement;
			this.type = e.type;
			if(document.all) {
				this.x = e.clientX + document.body.scrollLeft;
				this.y = e.clientY + document.body.scrollTop;
			} else {
				this.x = e.clientX;
				this.y = e.clientY;
			}
			this.screenX = e.screenX;
			this.screenY = e.screenY;
			this.altKey = e.altKey;
			this.ctrlKey = e.ctrlKey;
			this.shiftKey = e.shiftKey;
		}
		if(this.button == 0) {
			this.setKeyPressed(this.keyCode);
			this.keyChar = String.fromCharCode(this.keyCode);
		}
	}

	// this method will try to remap the keycodes so the keycode value
	// returned will be consistent. this doesn't work for all cases,
	// since some browsers don't always return a unique value for a
	// key press.
	qEvent.prototype.translateKeyCode = function(i) {
		var l = {};
		// remap NS4 keycodes to IE/W3C keycodes
		if(!!document.layers) {
			if(this.keyCode > 96 && this.keyCode < 123)
				return this.keyCode - 32;
			l = {
				96 : 192,
				126 : 192,
				33 : 49,
				64 : 50,
				35 : 51,
				36 : 52,
				37 : 53,
				94 : 54,
				38 : 55,
				42 : 56,
				40 : 57,
				41 : 48,
				92 : 220,
				124 : 220,
				125 : 221,
				93 : 221,
				91 : 219,
				123 : 219,
				39 : 222,
				34 : 222,
				47 : 191,
				63 : 191,
				46 : 190,
				62 : 190,
				44 : 188,
				60 : 188,
				45 : 189,
				95 : 189,
				43 : 187,
				61 : 187,
				59 : 186,
				58 : 186,
				"null" : null
			}
		}
		return (!!l[i]) ? l[i] : i;
	}
	// try to determine the actual value of the key pressed
	qEvent.prototype.setKP = function(i, s) {
		this.keyPressedCode = i;
		this.keyNonChar = ( typeof s == "string");
		this.keyPressed = (this.keyNonChar) ? s : String.fromCharCode(i);
		this.isNumeric = (parseInt(this.keyPressed, 10) == this.keyPressed);
		this.isAlpha = ((this.keyCode > 64 && this.keyCode < 91) && !this.altKey && !this.ctrlKey);
		return true;
	}
	// try to determine the actual value of the key pressed
	qEvent.prototype.setKeyPressed = function(i) {
		var b = this.shiftKey;
		if(!b && (i > 64 && i < 91))
			return this.setKP(i + 32);
		if(i > 95 && i < 106)
			return this.setKP( i - 48);

		switch( i ) {
			case 49:
			case 51:
			case 52:
			case 53:
				if(b)
					i = i - 16;
				break;
			case 50:
				if(b)
					i = 64;
				break;
			case 54:
				if(b)
					i = 94;
				break;
			case 55:
				if(b)
					i = 38;
				break;
			case 56:
				if(b)
					i = 42;
				break;
			case 57:
				if(b)
					i = 40;
				break;
			case 48:
				if(b)
					i = 41;
				break;
			case 192:
				if(b)
					i = 126;
				else
					i = 96;
				break;
			case 189:
				if(b)
					i = 95;
				else
					i = 45;
				break;
			case 187:
				if(b)
					i = 43;
				else
					i = 61;
				break;
			case 220:
				if(b)
					i = 124;
				else
					i = 92;
				break;
			case 221:
				if(b)
					i = 125;
				else
					i = 93;
				break;
			case 219:
				if(b)
					i = 123;
				else
					i = 91;
				break;
			case 222:
				if(b)
					i = 34;
				else
					i = 39;
				break;
			case 186:
				if(b)
					i = 58;
				else
					i = 59;
				break;
			case 191:
				if(b)
					i = 63;
				else
					i = 47;
				break;
			case 190:
				if(b)
					i = 62;
				else
					i = 46;
				break;
			case 188:
				if(b)
					i = 60;
				else
					i = 44;
				break;

			case 106:
			case 57379:
				i = 42;
				break;
			case 107:
			case 57380:
				i = 43;
				break;
			case 109:
			case 57381:
				i = 45;
				break;
			case 110:
				i = 46;
				break;
			case 111:
			case 57378:
				i = 47;
				break;

			case 8:
				return this.setKP(i, "[backspace]");
			case 9:
				return this.setKP(i, "[tab]");
			case 13:
				return this.setKP(i, "[enter]");
			case 16:
			case 57389:
				return this.setKP(i, "[shift]");
			case 17:
			case 57390:
				return this.setKP(i, "[ctrl]");
			case 18:
			case 57388:
				return this.setKP(i, "[alt]");
			case 19:
			case 57402:
				return this.setKP(i, "[break]");
			case 20:
				return this.setKP(i, "[capslock]");
			case 32:
				return this.setKP(i, "[space]");
			case 91:
				return this.setKP(i, "[windows]");
			case 93:
				return this.setKP(i, "[properties]");

			case 33:
			case 57371:
				return this.setKP(i * -1, "[pgup]");
			case 34:
			case 57372:
				return this.setKP(i * -1, "[pgdown]");
			case 35:
			case 57370:
				return this.setKP(i * -1, "[end]");
			case 36:
			case 57369:
				return this.setKP(i * -1, "[home]");
			case 37:
			case 57375:
				return this.setKP(i * -1, "[left]");
			case 38:
			case 57373:
				return this.setKP(i * -1, "[up]");
			case 39:
			case 57376:
				return this.setKP(i * -1, "[right]");
			case 40:
			case 57374:
				return this.setKP(i * -1, "[down]");
			case 45:
			case 57382:
				return this.setKP(i * -1, "[insert]");
			case 46:
			case 57383:
				return this.setKP(i * -1, "[delete]");
			case 144:
			case 57400:
				return this.setKP(i * -1, "[numlock]");
		}

		if(i > 111 && i < 124)
			return this.setKP(i * -1, "[f" + ( i - 111) + "]");

		return this.setKP(i);
	}
	// define the addEvent(oElement, sEvent, sCmd, bAppend) function
	function maskAddEvent(o, _e, c, _b) {
		var e = _e.toLowerCase(), b = ( typeof _b == "boolean") ? _b : true, x = (o[e]) ? o[e].toString() : "";
		// strip out the body of the function
		x = x.substring(x.indexOf("{") + 1, x.lastIndexOf("}"));
		x = ((b) ? (x + c) : (c + x)) + "\n";
		return o[e] = (!!window.Event) ? new Function("event", x) : new Function(x);
	}

	var m = new Mask(f, t);
	m.attach(el);
}
function $md5(){
	// md5加密
	var hexcase = 0;  /* hex output format. 0 - lowercase; 1 - uppercase        */
	var b64pad  = ""; /* base-64 pad character. "=" for strict RFC compliance   */
	var chrsz   = 8;  /* bits per input character. 8 - ASCII; 16 - Unicode      */
	var option={};
	option.hexcase=hexcase;
	option.b64pad=b64pad;
	option.chrsz=chrsz;
	option.hex_md5=hex_md5;
	option.binl2hex=binl2hex;
	option.core_md5=core_md5;
	
	return option;
	function hex_md5(s){ 
		return binl2hex(core_md5(str2binl(s), s.length * option.chrsz));
	}
	function binl2hex(binarray){
		var hex_tab = option.hexcase ? "0123456789ABCDEF" : "0123456789abcdef";
		var str = "";
		for(var i = 0; i < binarray.length * 4; i++)
		{
		  str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +
				 hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);
		}
		return str;
	}
	function core_md5(x, len){
		/* append padding */
		x[len >> 5] |= 0x80 << ((len) % 32);
		x[(((len + 64) >>> 9) << 4) + 14] = len;
		
		var a =  1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d =  271733878;
		
		for(var i = 0; i < x.length; i += 16){
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
		  
			a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
			d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
			c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
			b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
			a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
			d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
			c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
			b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
			a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
			d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
			c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
			b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
			a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
			d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
			c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
			b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);
		  
			a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
			d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
			c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
			b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
			a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
			d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
			c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
			b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
			a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
			d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
			c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
			b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
			a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
			d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
			c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
			b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);
		  
			a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
			d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
			c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
			b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
			a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
			d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
			c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
			b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
			a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
			d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
			c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
			b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
			a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
			d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
			c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
			b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);
		  
			a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
			d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
			c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
			b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
			a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
			d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
			c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
			b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
			a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
			d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
			c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
			b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
			a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
			d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
			c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
			b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);
		  
			a = safe_add(a, olda);
			b = safe_add(b, oldb);
			c = safe_add(c, oldc);
			d = safe_add(d, oldd);
		}
		return Array(a, b, c, d);
	}

	function md5_cmn(q, a, b, x, s, t){
		return safe_add(bit_rol(safe_add(safe_add(a, q), safe_add(x, t)), s),b);
	}
	function md5_ff(a, b, c, d, x, s, t){
		return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
	}
	function md5_gg(a, b, c, d, x, s, t){
		return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
	}
	function md5_hh(a, b, c, d, x, s, t){
		return md5_cmn(b ^ c ^ d, a, b, x, s, t);
	}
	function md5_ii(a, b, c, d, x, s, t){
		return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
	}

	function safe_add(x, y){
		var lsw = (x & 0xFFFF) + (y & 0xFFFF);
		var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
		return (msw << 16) | (lsw & 0xFFFF);
	}
	function bit_rol(num, cnt){
		return (num << cnt) | (num >>> (32 - cnt));
	}

	function str2binl(str){
		var bin = Array();
		var mask = (1 << option.chrsz) - 1;
		for(var i = 0; i < str.length * option.chrsz; i += option.chrsz)
		  bin[i>>5] |= (str.charCodeAt(i / option.chrsz) & mask) << (i%32);
		return bin;
	}
}
function $mouseout(obj,func){
	obj.onmouseout=function(e){
		var e=window.event||e,
			target=e.toElement || e.relatedTarget,
			parent=target;
		while ( parent && parent !== this ) {
			parent = parent.parentNode;
		}	
		if ( parent !== this ) {
			func(this);
		}
	}
}
function $mouseouter(option){
    var opt={
        title:null,//dom
        content:null,//dom
        outFunc:function(){
            $addClass(opt.content,"h");
        },
        timer:100,
        intr:null
    };
    for(var k in option){
        opt[k]=option[k];
    };
    
    $mouseout(opt.title,outFunc);
    $mouseover(opt.content,overFunc);
    $mouseout(opt.content,outFunc);
    
    function overFunc(){
        clearTimeout(opt.intr);
        opt.intr = null;
    }
    
    function outFunc(){
        opt.intr=setTimeout(function(){
            opt.outFunc();
        },opt.timer);
    }    
}
function $mouseover(obj,func){
	obj.onmouseover=function(e){
		var e=window.event||e,
			target=e.fromElement || e.relatedTarget,
			parent=target;
		while ( parent && parent !== this ) {
			parent = parent.parentNode;
		}	
		if ( parent !== this ) {
			func(this);
		}
	}
}
function $mouseoverDelay(param){
	var op = {
		domNav: '',          //hover效果的父元素ID(string 3c化妆品列表专用)或是待添加效果元素集合(array)
		hoverNodeName: '',   //待添加效果元素nodeName
		hoverClass: 'hover', //hover时要添加或删除的className
		fixedClass:[],       //hover时指定的className 【over，out】，次参数的优先级高于hoverclass
		delay: 400,          //延时的毫秒数
		funcOver:$empty(),   //mouseover执行延时后  调用的方法
		funcOut:$empty()     //mouseout执行延时后  调用的方法
	}
	for(var i in param){op[i]=param[i]};
	var hoverNode, hoverNodeList, hoverHold=false, styleHand=false, em, overTimer=null, outTimer=null;
	hoverNodeList = typeof(op.domNav) == 'string' ? $id(op.domNav).getElementsByTagName(op.hoverNodeName) : op.domNav;
	for(var i=0,len=hoverNodeList.length; i<len; i++){
		em = hoverNodeList[i];
		if(typeof(op.domNav) == 'object' || $child(em).length == 2){
			em.setAttribute('hIndex', i);
			em.onmouseover = function(){
				hoverHold = this.getAttribute('hIndex');
				if(overTimer){
					clearTimeout(overTimer);
					overTimer = null;
				}
				if(outTimer && styleHand == hoverHold){
					clearTimeout(outTimer);
					outTimer = null;
				}
				else {
					var obj=this;
					overTimer = setTimeout(function(){
						if(hoverHold === obj.getAttribute('hIndex')){
							op.fixedClass.length ? obj.className = op.fixedClass[0]:$addClass(obj, op.hoverClass);
							styleHand = hoverHold;
						}
						op.funcOver(obj);
					}, op.delay);
				}
			}
			em.onmouseout = function(){
				hoverHold = false;
				var obj = this;
				if(styleHand === obj.getAttribute('hIndex')){
					outTimer = setTimeout(function(){
						op.fixedClass.length ? obj.className = op.fixedClass[1]: $delClass(obj, op.hoverClass);
						styleHand = false;
						op.funcOut(obj);
					}, op.delay);
				}
			}
		}
	}
}
function $mouseScroller(opt){
  //鼠标拖动元素组件
  var option={
	  scrollerMin:0,			//有效范围
	  scrollerMax:100,
	  percent:0,				//postion在min，max的百分比
	  delta:0,				//position与min的偏差
	  scrollerPosition:0,		//最后有效的位置值
	  scrollerDrag:false,		//是否启用
	  scrollerRangeExtend:true,		//当超出范围时，是否当做极值并发送scroll事件
	  scrollType:"x",			//方向，支持"x"，"y"
	  onStart:function(obj){
	  },							//初始化完成，随时可以触发
	  onScroll:function(obj){
	  },
	  onInit:function(obj){
	  },						//触发开始，初始化document事件
	  onComplete:function(obj){
	  },
	  startScroll:function(){
	  }	//外部逻辑判断是否开始监听滚动，调用此函数
  };
  option.startScroll=goScroll;
  //合并参数
  for(var i in opt){
	  option[i]=opt[i];
  }
  return option;
  function goScroll(){
	  if(option.onInit)option.onInit(option);
	  document.onmousemove=function(e){
		  var evt=e||window.event;
		  if(!evt||!option.scrollerDrag)return false;
		  var mousex=evt.clientX;
		  var mousey=evt.clientY;
		  var position=0;
		  switch(option.scrollType){
			  case "x":
			  position=mousex;
			  break;
			  case "y":
			  position=mousey;
			  break;
		  }
		  if(position>=option.scrollerMin&&position<=option.scrollerMax){
			  option.scrollerPosition=position;
			  option.delta=option.scrollerPosition-option.scrollerMin;
			  option.percent=option.delta/(option.scrollerMax-option.scrollerMin);
			  if(option.onScroll)option.onScroll(option);
		  }else if(position<option.scrollerMin && option.scrollerRangeExtend){
			  option.scrollerPosition=option.scrollerMin;
			  option.delta=0;
			  option.percent=0;
			  if(option.onScroll)option.onScroll(option);
		  }else if(position>option.scrollerMax && option.scrollerRangeExtend){
			  option.scrollerPosition=option.scrollerMax;
			  option.delta=option.scrollerPosition-option.scrollerMin;
			  option.percent=1;
			  if(option.onScroll)option.onScroll(option);
		  }
		  return false;
	  }
	  document.onmouseup=function(){
		  if(option.scrollerDrag){
			  option.scrollerDrag=false;
			  document.onmousemove=null;
			  if(option.onComplete)option.onComplete(option);
		  }
	  }
	  option.scrollerDrag=true;
	  if(option.onStart)option.onStart(option);
  }
}
function $mulf(a,b) {
	var str1=a+".",
		str2=b+".",
		len1=str1.split(".")[1].length,
		len2=str2.split(".")[1].length,
		n=len1+len2,
		m=Math.pow(10,n);
	return (str1.replace(".",""))*(str2.replace(".",""))/m;
}
function $name(name){
	return document.getElementsByName(name);
}
function $namespace(str){
    var arr=str.split(',');
    for(var i=0,len=arr.length;i<len;i++){
        // 将命名空间切成N部分, 比如mini、common等
        var    arrJ=arr[i].split("."),parent={};
        for (var j = 0,jLen=arrJ.length; j < jLen; j++){
            var name = arrJ[j],child=parent[name];
            j===0?eval('(typeof '+name+')==="undefined"?('+name+'={}):"";parent='+name):(parent=parent[name]=(typeof child)==='undefined'?{}:child);
        };
    }
}
function $nextElement(element, index) {
	if(typeof index != "number"){
		index=0;
	}
	return $recursivelyElements(element,"nextSibling", index + 1)[index];
}
function $onReady(fn) { 
	//document的ready事件
	var d = document;
	var done = false, 
	init = function () { 
		if (!done){
			done = true; 
			fn(); 
		} 
	};
	(function () { 
		try { 
			d.documentElement.doScroll('left'); 
		} catch (e) { 
			setTimeout(arguments.callee, 50); 
			return; 
		} 
		init(); 
	})(); 
	d.onreadystatechange = function() { 

		if (d.readyState == 4) { 
			d.onreadystatechange = null; 
			init(); 
		} 
	}; 
}
function $openModal(url, variant, options){
    //打开模态窗口
    if (!url || url.replace(/(^\s*)|(\s*$)/g, "") == '') 
        return;
    options = options || {};
    this.height = parseInt(options.height, 10) || 500;
    this.width = parseInt(options.width, 10) || 800;
    this.center = options.center || (options.center == 0 ? 0 : 1);
    this.help = options.help || 0;
    this.resizable = options.resizable || 0;
    this.statusbar = options.status || (options.status == 0 ? 0 : 1);
    this.scroll = options.scroll || (options.scroll == 0 ? 0 : 1);
    this.minimize = options.minimize || 0;
    this.maximize = options.maximize || 0;
    
    if ($isBrowser('ie6')) {
        this.height += 54;
        this.width += 6;
    }
    options = 'scroll:' + this.scroll + ';center:' + this.center + ';resizable:' + this.resizable + ';minimize:' + this.minimize + ';maximize:' + this.maximize + ';help:' + this.help + ';status:' + this.statusbar + ';dialogWidth:' + this.width + 'px' + ';dialogHeight:' + this.height + 'px';
    
    return window.showModalDialog(url, variant || window, options);
}
function $option(){
    var pt=arguments[0];
    for(var i=1,len=arguments.length;i<len;i++){
        for(var k in arguments[i]){
            pt[k]=arguments[i][k]
        }
    }
    return pt;
}
function $parseDate(str){
	return Date.parse(str.split('-').join('/'))
}
function $parseUrl(url) {
    var a =  document.createElement('a');
    a.href = url;
    return {
        source: url,
        protocol: a.protocol.replace(':',''),
        host: a.hostname,
        port: a.port,
        query: a.search,
        params: (function(){
            var ret = {},
                seg = a.search.replace(/^\?/,'').split('&'),
                len = seg.length, i = 0, s;
            for (;i<len;i++) {
                if (!seg[i]) { continue; }
                s = seg[i].split('=');
                ret[s[0]] = s[1];
            }
            return ret;
        })(),
        file: (a.pathname.match(/([^\/?#]+)$/i) || [,''])[1],
        hash: a.hash.replace('#',''),
        path: a.pathname.replace(/^([^\/])/,'/$1'),
        relative: (a.href.match(/tps?:\/\/[^\/]+(.+)/) || [,''])[1],
        segments: a.pathname.replace(/^\//,'').split('/')
    };
}
function $picPreview(picList, id, maxh, maxw) {
//商品图片大图查看功能
    var t = [];
    for (var i = 0; i < picList.length; i++) {
        (picList[i] != "") ? t.push(picList[i]) : "";
    }
    picList = t;
    //显示遮罩
    var page = (picList.length > 1) ? true : false;
    var cId = id; //当前图片编号

    var picHtml = '<table width="100%" height="' + maxh + '" border="0" cellpadding="0" cellspacing="0" style="background-color:#ffffff"><tr><td width="60" align="center" valign="top"  style="display:none;"><br /><br /><input id="pp1" type="button" value=" << " style="line-height:25px;"/></td><td align="center" valign="middle" ><div id="pp3" style="width:720px;overflow:hidden;"></div></td><td width="60" align="center" valign="top"   style="display:none;"><br /><br /><input id="pp2" type="button" style="line-height:25px;" value=" >> "/></td></tr></table>'

    var al = $float({
        title: "",
        html: picHtml,
        fix: true,
        width: maxw + (page ? 160 : 60),
        height: maxh + 80,
        style: "stand", //stand\none\poptip
        cover: true	//显示
    });

    $$("#floatCover").css("z-index", "3000");
    $$("#floatBox_" + al.id).css("z-index", "4000");

    var l1 = $$("#pp1"), l2 = $$("#pp2"), l3 = $$("#pp3");
    if (page) {
        l2.add(l1).click(function () {
            showPic((this.id == l1.attr("id")) ? parseInt(cId) - 1 : parseInt(cId) + 1);
        }).parent("td").show();
    }
    //显示首张图片，并resize
    showPic(id);
    //根据情况显示上一页等其他的相关控制信息，并resize
    function showPic(id) {
        //编号不正确的情况
        if (id < 0 || id > picList.length - 1) {
            return;
        }
        l3.html('<img src="' + picList[id] + '" alt="点击图片可关闭大图" id="pp4" />');
        $$("#pp4").click(function () {
            al.close();
        }).one("load", function () {
            $reSizeImg(this, maxw, maxh);
            al.width = this.width + (page ? 120 : 0);
            al.height = this.height + 25;
            al.width = (al.width < maxw + (page ? 120 : 0)) ? maxw + (page ? 120 : 0) : al.width;
            al.height = (al.height < maxh + 25) ? maxh + 25 : al.height;
            //al.resize();
        }).one("error", function () {
            al.width = maxw; al.height = maxh + 25;
        });
        cId = id;
        l1.attr("disabled", (cId == 0) ? "disabled" : "");
        l2.attr("disabled", (cId == picList.length - 1) ? "disabled" : "");
    }
}
function $picSlider(params){
		//显示浮窗,支持各种形态
		var inobj={
			slider:document.getElementById("slider"),	//	唯一id
			container:document.getElementById("container"),
			vertical:true, //是否垂直滑动，false则水平滑动
			count:5,
			auto:true,
			duration:30, //滑动持续时间
			change:0,
			time:10, //滑动延时
			pause:3000,
			index:0, // 当前索引
			images:[],
			onstart:function(o){return true;},//滑动开始事件
			onfinish:function(o){return true;},//滑动完成事件
			actionstyle:"Quart" //表示使用哪个tween算子 3个选项：Quart,Back,Bounce
		};
	    
		for(var i in params) inobj[i] = params[i];
		
		inobj._t = inobj._b = inobj._c = 0;//tween参数
		inobj.timer = null;
		
		inobj.slide = slide;
		inobj.move = move;
		inobj.moveto = moveto;
		inobj.next = next;
		inobj.previous = previous;
		
		inobj.Tween = {
			Quart: {
				easeOut: function(t,b,c,d){
					return -c * ((t=t/d-1)*t*t*t - 1) + b;
				}
			},
			Back: {
				easeOut: function(t,b,c,d,s){
					if (s == undefined) s = 1.70158;
					return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
				}
			},
			Bounce: {
				easeOut: function(t,b,c,d){
					if ((t/=d) < (1/2.75)) {
						return c*(7.5625*t*t) + b;
					} else if (t < (2/2.75)) {
						return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
					} else if (t < (2.5/2.75)) {
						return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
					} else {
						return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
					}
				}
			}
		}
		
		inobj.stop = stop;
		
		inobj._css = inobj.vertical ? "top" : "left";//方向
	
		//样式设置
		var p = getStyle(inobj.container).position;
		(p == "relative" || p == "absolute")?"":inobj.container.style.position = "relative";
		inobj.container.style.overflow = "hidden";
		inobj.slider.style.position = "absolute";
	
		inobj.change = inobj.change ? inobj.change : inobj.slider[inobj.vertical ? "offsetHeight" : "offsetWidth"] / inobj.count;
		
		if(inobj.count>1){
			var numUl = inobj.slider.nextSibling.nodeType==1?inobj.slider.nextSibling:inobj.slider.nextSibling.nextSibling;
			
			var nums=[];
			numUl.innerHTML = "";
			for(var i = 0; i < inobj.count; AddNum(i++)){};
		}
		
		
		function AddNum(i){
				var num = numUl.appendChild(document.createElement("a"));
				num.setAttribute("href",inobj.images[i].split("|")[1]);
				num.setAttribute("target","_blank");
				num.innerHTML = i+1;
				//num.innerHTML = '<a href="'++'" target="_blank">'+(i+1)+'</a>';
				num.onmouseover = function(){
					timer = setTimeout(function(){ num.className = "current";inobj.auto = false;inobj.slide(i); }, 200);
				}
				num.onmouseout = function(){ clearTimeout(inobj.timer); num.className = ""; inobj.auto = true; inobj.slide(); }
				nums[i] = num;
		}
		inobj.slide();
		
		
		
		
	
		return inobj;
	
		//开始切换
		function slide(index) {
			//修正index
			index == undefined && (index = inobj.index);
			index < 0 && (index = inobj.count - 1) || index >= inobj.count && (index = 0);
			//设置参数
			inobj.target = -Math.abs(inobj.change) * (inobj.index = index);
			inobj._t = 0;
			inobj._b = parseInt(getStyle(inobj.slider)[inobj.vertical ? "top" : "left"]);
			inobj._c = inobj.target - inobj._b;
			
			inobj.onstart(inobj);
			for(var j in nums){
				j==index?nums[j].className="current":nums[j].className="";
			}
			inobj.move();
		}
		
		//移动
	   function move() {
			clearTimeout(inobj.timer);
			//未到达目标继续移动否则进行下一次滑动
			if (inobj._c && inobj._t < inobj.duration) {
				inobj.moveto(Math.round(inobj.Tween[inobj.actionstyle].easeOut(inobj._t++, inobj._b, inobj._c, inobj.duration)));
				inobj.timer = setTimeout(inobj.move, inobj.time);
			}else{
				inobj.moveto(inobj.target);
				inobj.auto && (inobj.timer = setTimeout(inobj.next, inobj.pause));
			}
	   }
		
	
 	
	//移动到
	  function  moveto(i) {
		  if(!isNaN(i)){
		inobj.slider.style[inobj._css] = i + "px";
		  }
	  }
	  //下一个
	  function next() {
		inobj.slide(++inobj.index);
	  }
	  //上一个
	  function previous() {
		inobj.slide(--inobj.index);
	  }
	  //停止
	  function stop() {
		clearTimeout(inobj.timer); inobj.moveto(inobj.target);
	  }
	  
	  function getStyle(element){
			return element.currentStyle || document.defaultView.getComputedStyle(element, null);
	  }
  }
function $prevElement(element, index) {
	if(typeof index != "number"){
		index=0;
	}
	return $recursivelyElements(element,"previousSibling", index + 1)[index];
}
function $preventDefault(e){
	if(e && e.preventDefault){
		e.preventDefault();
	}else{
		window.event.returnValue=false;
	};
	return false;
}
function $purge(d) {
    var a = d.attributes, i, l, n;
    if (a) {
        l = a.length;
        for (i = 0; i < l; i += 1) {
            n = a[i].name;
            if (typeof d[n] === 'function') {
                d[n] = null;
            }
        }
    }
    a = d.childNodes;
    if (a) {
        l = a.length;
        for (i = 0; i < l; i += 1) {
            $purge(d.childNodes[i]);
        }
    }
}
//获取0-N之间的随机整数
function $randomInt(num){
	return Math.floor(Math.random()*num);
}
function $randomSubArray(arr,len){
		if(arr.length <= len){return arr;}
		var obj = {},
			list = [];
		do{
			var index = $randomInt(arr.length);
			if(!obj[index]){
				obj[index] = index+10;
				list.push(arr[index]);
			}
		}while(list.length<len);
		return list;
	}
(function(){
	var	isReady=false, //判断onDOMReady方法是否已经被执行过
    	readyList= [],//把需要执行的方法先暂存在这个数组里
        timer;//定时器句柄
	$ready=function(fn) {
		if (isReady )
			fn.call( document);
		else
			readyList.push(function() { return fn.call(this);});
		return this;
	}
        
	var onDOMReady=function(){
		for(var i=0,len=readyList.length;i<len;i++){
			readyList[i].apply(document);
		}
		readyList = null;
	}
	
	var bindReady = function(evt){
		if(isReady) return;
		isReady=true;
		onDOMReady.call(window);
		if(document.removeEventListener){
			document.removeEventListener("DOMContentLoaded", bindReady, false);
		}else if(document.attachEvent){
			document.detachEvent("onreadystatechange", bindReady);
			if(window == window.top){
				clearInterval(timer);
				timer = null;
			}
		}
	};
	if(document.addEventListener){
		document.addEventListener("DOMContentLoaded", bindReady, false);
	}else if(document.attachEvent){
		document.attachEvent("onreadystatechange", function(){
			if((/loaded|complete/).test(document.readyState)){
				bindReady();
			}
		});
		if(window == window.top){
			timer = setInterval(function(){
					try{
						isReady||document.documentElement.doScroll('left');//在IE下用能否执行doScroll判断dom是否加载完毕
					}catch(e){
						return;
					}
					bindReady();
			},5);
		}
	}
})()
function $recursivelyElements(element, property, maximumLength) {
	maximumLength = maximumLength || -1;
	var elements = [], maximumLength;
	while( element = element[property]) {
		if(element.nodeType == 1) {
			elements.push(element);
			maximumLength--;
		}
		if(!maximumLength) {
			break;
		}
	}
	return elements;
}
function $regionGetPathByStr(rstr){
//根据地址描述（如：湖北省武汉市黄陂区）获取地址的省市区的路径,返回对象结构同$regionGetPath
	var regionMap=$getRegionMap();
	var regionArr=["","","","","","",false,""];
	if(!rstr) return;
	if(rstr.indexOf("省", 0) != -1){
		rstr = rstr.replace("省", "");
	}
	var special=[[0,"北京北京市",40000,"北京","北京市"],[1,"天津天津市",100,"天津","天津市"],[2,"上海上海市",200,"上海","上海市"],[3,"重庆重庆市",300,"重庆","重庆市"]];
	for(var i=0;i<special.length;i++){
		var data=special[i];
		if(regionMap[data[0]][0]==rstr.substring(0,2)){
			rstr=rstr.replace(data[1],"");
			for(var s in regionMap[data[0]][2][data[2]][2]){
				if(regionMap[data[0]][2][data[2]][2][s]==rstr){
					return [data[0],data[3],data[2],data[4],s,rstr,true,s];
				}
			}
		}
	}
		
	if(regionMap[42245][0] == rstr.substring(0,2)){
		regionArr = [42245, "海外", 42246, "海外", "", "", true, 42246];
	}
	special=[[32,"香港"],[33,"澳门"],[31,"台湾"]];
	for(var i=0;i<special.length;i++){
		var data=special[i];
		if(regionMap[data[0]][0]==rstr.substring(0,2)){
			rstr=rstr.replace(data[1],"");
			for(var s in regionMap[data[0]][2]){
				if(regionMap[data[0]][2][s][0]==rstr){
					return regionArr=[data[0],data[1],s,rstr,"","",true,s]
				}
			}
		}
	}
	if((rstr.substring(0,3) === (regionMap[10][0]) || (rstr.substring(0,3) === regionMap[6][0]))){
			regionArr[0] = index =  (rstr.substring(0,3) === "黑龙江") ?  6 : 10;
			regionArr[1] = (rstr.substring(0,3) === "黑龙江") ? regionMap[6][0] : regionMap[10][0];
			rstr = rstr.replace(rstr.substring(0,3), "");
			for(var s in regionMap[index][2]){
				if(rstr.substring(0, 2) === (regionMap[index][2][s][0]).substring(0, 2) ){
					regionArr[2] = s;
					regionArr[3] = regionMap[index][2][s][0];
					rstr = rstr.replace(regionMap[index][2][s][0], "");
					for(var k in regionMap[index][2][s][2]){
						if(regionMap[index][2][s][2][k][0] === rstr){
							regionArr[4] = k;
							regionArr[5] = regionMap[index][2][s][2][k][0];
							regionArr[6] = true;
							regionArr[7] = k;
						}
					}
				}
			}
	}
	for(var i in regionMap){
		if((regionMap[i][0]).substring(0,2) === rstr.substring(0,2)){
			regionArr[0] = i;
			regionArr[1] = regionMap[i][0];
			rstr = rstr.replace(rstr.substring(0,2), "");
			for(var j in regionMap[i][2]){
				if(rstr.substring(0,2) === (regionMap[i][2][j][0]).substring(0, 2)){
					regionArr[2] = j;
					regionArr[3] = regionMap[i][2][j][0];
					rstr = rstr.replace(regionMap[i][2][j][0], "");
					for(var k in regionMap[i][2][j][2]){
						if(regionMap[i][2][j][2][k][0] === rstr){
							regionArr[4] = k;
							regionArr[5] = rstr;
							regionArr[6] = true;
							regionArr[7] = k;
							return regionArr;
						}
					}
				}
			}
		}
	}
	return regionArr;
}
function $regionGetStr(rid){
//根据地址id来取地址的描述字符串，如果是直辖市则不写省名称
	var regionMap=$getRegionMap();
	if(rid==""){
		return "";
	}
	var path=$regionGetPath(rid);
	//如果省的类别标记为1，则不加省后缀,表示是不需要加省描述的省，如新疆
	var pStr=(path[1])?path[1]+((regionMap[path[0]][1]==1)?"":"省"):"";
	var cStr=(path[3])?path[3]:"";
	//选中了市的话，判断是否直辖市，如果是的话就不显示省
	if(path[2]){
		if(regionMap[path[0]][2][path[2]][1]==1){
			pStr="";
		}
		//如果省的类别标记为2的话，标识不显示省名称，类似于直辖市的处理，如海外
		if((regionMap[path[0]][1]==2)){
			pStr="";
		}
	}
	var aStr=(path[5])?path[5]:"";
	return pStr+cStr+aStr;
}
//删除子节点
function $removeAllChild(obj) {
    for (var i = obj.childNodes.length - 1; i > -1; i--) {
        var child = obj.childNodes[i];
        obj.removeChild(child);
    }
    return obj;
}
function $replace(tpl, argsArray){
	var _t = tpl;
        for(var i=0,len=argsArray.length; i<len; i++){
                var curr = argsArray[i];
		_t = _t.replace(curr[0], curr[1]);
	}
	return _t;
}
function $replaceParam(param,value,url,forceReplace){
	url=url||location.href;
	var reg=new RegExp("([\\?&]"+param+"=)[^&#]*");
	if(!url.match(reg)){
		return (url.indexOf("?")==-1)?(url+"?"+param+"="+value):(url+"&"+param+"="+value);
	}
	if(forceReplace){
		return url.replace(reg,"$1"+value);
	}
	return url;
}
function $report(url){
	//用于无回调的数据上报
	var image=new Image(1,1);
	image.src = url+"#"+Math.random();
}
function $reSizeImg(obj, newW, newH){
//resize图片大小
	if(obj == null) return;
	var oImg = new Image();
	oImg.src = obj.src;
	var oldW = oImg.width;
	var oldH = oImg.height;
	if(oldW > newW || oldH > newH) {
		w = oldW/newW; 
		h = oldH/newH;
		if(h > w) w=h;
		oldW = oldW/w; 
		oldH = oldH/w;
	}
	if(oldW > 0 && oldH > 0){
		obj.width=oldW;
		obj.height=oldH;
	}
}
function $saveUrl(name,url){
	var name=name||document.title;
	var url	=url ||window.location.href;
	if (document.all){
		window.external.addFavorite(url,name);
	}else if(window.sidebar){
		window.sidebar.addPanel(name,url,"");
	};
	return false;
}
(function(){
    var	isBind=false,
        heightList=[],
        funcList=[],
        optList=[],
        visibleH=document.documentElement.clientHeight;//可见范围;
    
    $scroll=function(opt){
    	if(opt.clean==true){heightList=[];funcList=[];optList=[];}
    	
        var height=opt.height?opt.height:$getY($id(opt.id));
        if(visibleH<height){
            heightList.push(height*1);
            funcList.push(opt.func);
            optList.push(opt);
        }else{
            //如果设置的值本身就小于屏幕的值，那就没有必要压入了，直接执行
            opt.func(opt);
        };
        
        
        //如果已经绑定onscroll，无需重复绑定
        if(isBind){
            isBind=true;
        }else{
            $addEvent(window,'scroll',doScroll);
            $addEvent(window,'resize',doScroll);
        };
        
        function doScroll(){
			var len=heightList.length;
			if(len===0){
				$delEvent(window,'scroll',doScroll);
            	$delEvent(window,'resize',doScroll);
				return null;
			};
			
			var	dv 		= document.defaultView,
			 	y 		= (dv) ? dv.pageYOffset : 0,
				h 		=  visibleH,//可见范围
				arrHeight=[],
				arrFunc=[],
				arrOpt=[];
			
			try{
				h += Math.max(document.body.scrollTop,document.documentElement.scrollTop,y);
			}catch(e){}	
				
		    for(var i=0;i<len;i++){
                if(h > heightList[i]){
                    //无论是否需要，把传入进来的opt再传入调用函数
                   funcList[i](optList[i]);
				   //把已经操作完成的出栈
                }else{
					arrHeight.push(heightList[i]);
					arrFunc.push(funcList[i]);
					arrOpt.push(optList[i]);
				}
            };
			heightList=arrHeight;
			funcList=arrFunc;
			optList=arrOpt;
        }
    };
})()
function $selectColor(opt) {
	var option = {
		trigger:'', //触发dom
		container:'',
		defaultColor : '#ffffff',	//默认颜色
		selectedColor:'#ffffff',
		onSelect:function(o){return true;},
		colorTable: [
			["#FFFFFF", "#000000", "#EEECE1", "#1F497D", "#4F81BD", "#C0504D", "#9BBB59", "#8064A2", "#4BACC6", "#F79646"], 
			["#F2F2F2", "#7F7F7F", "#DDD9C3", "#C6D9F0", "#DBE5F1", "#F2DCDB", "#EBF1DD", "#E5E0EC", "#DBEEF3", "#FDEADA"], 
			["#D8D8D8", "#595959", "#C4BD97", "#8DB3E2", "#B8CCE4", "#E5B9B7", "#D7E3BC", "#CCC1D9", "#B7DDE8", "#FBD5B5"], 
			["#BFBFBF", "#3F3F3F", "#938953", "#548DD4", "#95B3D7", "#D99694", "#C3D69B", "#B2A2C7", "#92CDDC", "#FAC08F"], 
			["#A5A5A5", "#262626", "#494429", "#17365D", "#366092", "#953734", "#76923C", "#5F497A", "#31859B", "#E36C09"], 
			["#7F7F7F", "#0C0C0C", "#1D1B10", "#0F243E", "#244061", "#632423", "#4F6128", "#3F3151", "#205867", "#974806"], 
			["#C00000", "#FF0000", "#FFC000", "#FFFF00", "#92D050", "#00B050", "#00B0F0", "#0070C0", "#002060", "#7030A0"]]
	}
	option = $extend(option, opt);
	
	if(!option.trigger) return false; 
	
	$loadCss("http://static.paipaiimg.com/module/palette.css");
	
	var colorHtml = ['<div class="palette" tag="colorPanel" style="position: absolute;display:none;"><table width="" border="0" cellspacing="0" cellpadding="0"><tbody>'], 
	content = option.content;
	
	for(var i = 0, len = option.colorTable.length; i < len; i++){
		var colorRow = option.colorTable[i];
		colorHtml.push('<tr class="r'+(i*1+1)+'">');
		for(var j = 0, cLen = colorRow.length; j < cLen; j++){
			colorHtml.push('<td style="background-color:'+colorRow[j]+'"><b color="'+colorRow[j]+'"></b></td>');
		}
		colorHtml.push('</tr>');
	}
	colorHtml.push('</table><p class="add_color">输入色值 <input type="text" name="" maxlength="7" value="#CCCCCC" tag="color_value"/><button tag="color_confirm">确定</button></p></div></div>');
	
	//在页面中插入选色板
	if(!option.container){
		var content = document.createElement('DIV');
		content.innerHTML = $xss(colorHtml.join(''),'none');
		document.body.appendChild(content);
	}else{
		option.container.innerHTML = $xss(colorHtml.join(''),'none');
	}

	
	var colorPanel = $attr('tag', "colorPanel", content)[0], 
		colorBtn =   $attr('tag', "color_confirm", content)[0],
		colorVal =  $attr('tag', "color_value", content)[0],
		timeout="";

	
	colorPanel.style.left = ($getX(option.trigger)+option.trigger.offsetWidth)+"px";
	colorPanel.style.top =  ($getY(option.trigger)+option.trigger.offsetHeight)+"px";
	
	colorVal.onfocus = function(e){
		this.select();
		this.style.color = "#000";
	}
	
	//确定颜色按钮点击
	colorBtn.onclick = function(e){
		var color = colorVal.value;
		if($isColor(color)){
			colorPanel.style.display = "none";
			option.trigger.style.backgroundColor = color;
			option.selectedColor = color;
			option.onSelect(option);
		}else{
			alert('请输入标准色值。')
		}
	}
	
	//点击trigger选色板交替显示和隐藏。
	option.trigger.onclick = function(){
		timeout?clearTimeout(timeout):"";
		colorVal.style.color = "#aaa";
		colorPanel.style.display = colorPanel.style.display == "block"?"none":"block";
	}
	
	//点击页面选色板和trigger之外的地方，选色板隐藏。
	$addEvent(document,"click",function(e){
		var t = $getTarget(e);	
		t!=colorPanel&&t!=option.trigger&&t!=colorVal?colorPanel.style.display = "none":"";
	})
	
	/* 颜色板移出 */
	colorPanel.onmouseout = function(e){
		var self = this;
		var e = e || window.event, src = e.target || e.srcElement, color = src.getAttribute('color');
		if(color){
			src.className = "";
		}
		timeout = setTimeout(function(){
			self.style.display = "none";																 
		}, 500);		
	}
	/* 颜色版滑过 */
	colorPanel.onmousemove = function(e){
		timeout?clearTimeout(timeout):"";
		var e = e || window.event, src = e.target || e.srcElement, color = src.getAttribute('color');
		if(color){
			src.className="current";	
		}
	}
	/* 点击颜色版 */
	colorPanel.onclick = function(e){
		var e = e || window.event, src = e.target || e.srcElement, color = src.getAttribute('color');
		if(color){
			this.style.display = "none";
			option.trigger.style.backgroundColor = color;
			option.selectedColor = color;
			option.onSelect(option);
		}
	}
	
	option.dispose = function(){
		$destoryDomEvents(colorPanel);
		option.trigger = colorPanel = null;
	}
	
	option.setColor = function(rgb){
		option.trigger.style.backgroundColor = rgb;
	}
	
	return option;
}
function $setClass(ids,cName,kind){	
	if(typeof(ids)=="string"){
		var arrDom=ids.split(",");
		for(var i=0,len=arrDom.length;i<len;i++){
			setClass($id(arrDom[i]),cName,kind);
		}
	}
	if(ids instanceof Array){  //一堆的元素集合  array
		for(var i=0,len=ids.length; i<len && ids[i]; i++){
			setClass(ids[i],cName,kind);
		}
	}else{
		setClass(ids,cName,kind);
	};
	
	function setClass(obj,cName,kind){
		if(!obj){//做校验,避免异常
			return;
		}
		var oldName=obj.className,
			arrName=oldName?oldName.split(' '):[];
		if(kind=="add"){
			if(!$hasClass(oldName,cName)){
				arrName.push(cName);
				obj.className=arrName.join(' ');
			}
		}else if(kind=="remove"){
			var newName=[];
			for(var i=0,len=arrName.length;i<len;i++){
				if(cName!=arrName[i]&&' '!=arrName[i]){
					newName.push(arrName[i]);
				}
			};
			obj.className=newName.join(' ');
		}
	}	
}
function $setCookie(name, value, expires, path, domain, secure) {
	//写入COOKIES
	var exp = new Date(), expires = arguments[2] || null, path = arguments[3] || "/", domain = arguments[4] || null, secure = arguments[5] || false;
	expires ? exp.setMinutes(exp.getMinutes() + parseInt(expires)) : "";
	document.cookie = name + '=' + escape(value) + ( expires ? ';expires=' + exp.toGMTString() : '') + ( path ? ';path=' + path : '') + ( domain ? ';domain=' + domain : '') + ( secure ? ';secure' : '');
}
function $setHash(json,location){
	var location=location || window.location;
    var url = location.protocol+"//"+location.host+location.pathname+location.search;
    var buff = [];
    for(var i in json){
	        buff.push(i+"="+json[i])
	}
    return url+"#"+buff.join("&");
}
function $setIframe() {
     var pt={
     	id:arguments[0],
     	t:arguments[1]|| 300,
     	h:arguments[2]|| 700
     },
     pr={
     	oIframe:$id(pt.id),
     	intr:null
     };
	//查询初始化	
	pr.intr = setInterval(function() {
		try {
			pr.iframeDoc = pr.oIframe.contentDocument || pr.oIframe.contentWindow.document;		
			pr.oIframe.height = Math.max(pr.iframeDoc.documentElement.scrollHeight || pr.iframeDoc.body.scrollHeight,pt.h);
		}
		catch(e) {
			//clearInterval(pr.intr);
		}
	}, pt.t);
	return pr.intr;
}
//手动跨域设置父iframe的高度(一次性，无定时器)
function $setIframeFullHeight(_h){
	var s=document.getElementById("_heigthSync")
	if(!s){
		var f=document.createElement("iframe");
		f.height="0";
		f.width="0";
		f.src="";
		f.style.display="none";
		f.id="_heigthSync";
		document.body.appendChild(f);
	}
	if(!_h){
		_h = Math.max(document.documentElement.offsetHeight,document.body.offsetHeight);
	}
	var _d=document.referrer.replace(/h.*?:\/\//,"").replace(/(\/|\?).*/,"");
	if(!_d){return;}
	s=document.getElementById("_heigthSync");
	s.src = "http://"+_d+"/sinclude/autoheight.html#"+window.name+"|"+_h; 
}
function $setQuery(json){
	var url = location.protocol+"//"+location.host+location.pathname,
			search = location.search;
			
	for(var i in json){
		var query = i+"="+json[i],
		oldValue = $getQuery(i);
		
		if(oldValue){
			search = search.replace(i+"="+oldValue,i+"="+json[i]);
		}else{
			search = (search.length>0)?search +"&"+ query:"?"+query;
		}
	}
	return url+search+location.hash;
}
function $setSelectedItem(name,selectedValue){
    //专门用于check和radio设置选择项，设置成功则返回true;
    var objs=document.getElementsByName(name),
        flag=false;
    for(var i=0,len=objs.length;i<len;i++){
        var t=objs[i];
        if(t.tagName.toLowerCase()=="input"){
            if((t.type.toLowerCase()=="checkbox" || t.type.toLowerCase()=="radio") ){    //设置单选复选框的值
                if(t.value==selectedValue){
                    t.checked=true;
                    flag=true;
                }
            }
        }
    };
    return flag;
}
var $setVK=(function(){
    //伪函数，只为加载时执行一次
    if(!$getCookie("visitkey")){
        $report("http://service.paipai.com/cgi-bin/ping?rand="+parseInt(Math.random()*1000)+"&r=&u=http://jsrd.paipai.com&fu=http://jsrd.paipai.com/"+Math.random());
    }
    return $empty();
})()
function $shareUrl(option){
    var opt ={
        "tid":"44",//编号
        "wbg":"http://static.paipaiimg.com/assets/index/sale/invite_friend.jpg",
        'wname':escape('与好友分享'),
        "ptag":"211-3-3",
        "tp":150,
        "lft":150
    };
    for(p in option){ opt[p] = option[p]; }
    
    window.open('http://www.paipai.com/share2friends.shtml?tipsid='+opt["tid"]+'&wname='+opt["wname"]+'&wbg='+opt["wbg"]+'&ptag='+opt["ptag"],'shareWind','height=445,width=420,top='+opt["tp"]+',left='+opt["lft"]+',toolbar=no,menubar=no,scrollbars=yes, resizable=no, location=no, status=no');
    return false;
}
/**
 * @desc: 显示form元素的验证结果。
 * @para: {Object} option: 1,dom:对应的消息显示的容器(一定是预先定义好的p元素);2,type:消息类型; 3,消息说明。
 */
function $showInputHint(option){
	option = $extend({
		dom:"",//必填。id, #id, dom, jqDom四种格式任选一
		type:"right",//必填。error, warn, right 三选一
		desc:"验证正确", //必填。状态的说明文字
		width: 100 //选填，默认100
	}, option);
	option.dom = $$(option.dom);
	option.dom.width((typeof option.width)=="string"?"auto":(option.width||100)).removeClass("msg-para-right msg-para-warn msg-para-error").addClass("msg-para-"+option.type).html('<span class="msg0-icon-'+ option.type +'"></span>' + option.desc);
	option.hide = function(){this.dom.hide();return this;}
	option.show = function(){this.dom.show();return this;}
	return option;
}
function $showLoading(opt) {
    /**
    * 展示loading图标
    *
    * @content : 展示loading的对象
    * @timeout : 超时时间
    * @callback : 异步的回调函数
    * @actionBtn : 触发异步处理的按钮
    * @mode : loading样式（full：展示默认的提示，simple：展示简单的提示）
    */
    var option = {
        content: null,
        timeout: 5000,
        callback: null,
        actionBtn: null,
        mode: 'full',
        showType: 'display',
        timeoutCallback: function () { }
    }
    for (var key in opt) {
        if (opt[key]) {
            option[key] = opt[key];
        }
    }
    var loadingSimple = '<img src="http://static.paipaiimg.com/assets/common/loading.gif" hspace="5" align="absmiddle" />', //loading图片
        loadingImg = '<span style="display:inline-block;padding:0px"><img src="http://static.paipaiimg.com/assets/common/loading.gif" hspace="5" align="absmiddle" /> 数据加载中，请稍等……</span>',
        msg = option.mode == 'full' ? '系统繁忙，请稍候再试' : '系统繁忙',
        loadingImg = option.mode == 'full' ? loadingImg : loadingSimple;
    if (!$showLoading['showLoading_data']) {
        $showLoading['showLoading_data'] = {};
    }

    //提示内容区域
    if (typeof option.content === 'string') {
        option.content = getEl(option.content);
    }
    //触发对象
    if (option.actionBtn && typeof option.actionBtn === 'string') {
        option.actionBtn = getEl(option.actionBtn);
    }
    //显示loading图标
    option.content.innerHTML = loadingImg;
    option.content.style.display = '';
    if (option.actionBtn) {
        option.actionBtn.disabled = true;
    }
    //清除原有的setTimeout
    if ($showLoading['showLoading_data']['loadtag_' + option.content.id]) {
        clearTimeout($showLoading['showLoading_data']['loadtag_' + option.content.id]);
    }
    //创建超时处理函数
    var timeoutFunc = (function (option, msg) {
        return function () {
            warnMsg({ el: option.content.id, msg: msg, showType: option.showType });
            //接触按钮不可用的状态
            if (option.actionBtn) {
                option.actionBtn.disabled = false;
            }
            //超时后，回调函数置空
            if (option.callback) {
                $showLoading[option.callback] = function () { }
            }
            if (option.timeoutCallback) {
                option.timeoutCallback();
            }
        }
    })(option, msg);
    //记录setTimeout标记
    $showLoading['showLoading_data']['loadtag_' + option.content.id] = setTimeout(timeoutFunc, option.timeout);
    return {
        //取消展示超时信息的倒计时，同时隐藏loading对象
        clear: (function (option) {
            return function () {
                var timeoutId = $showLoading['showLoading_data']['loadtag_' + option.content.id];
                clearTimeout(timeoutId);
                var obj = getEl(option.content.id);
                //隐藏loading提示
                if (obj) {
                    warnMsg({ el: obj, showType: option.showType, show: false });
                }
                //接触按钮不可用的状态
                if (option.actionBtn) {
                    option.actionBtn.disabled = false;
                }
            }
        })(option)
    }
    function warnMsg(obj) {
        var option = {
            msg: "系统繁忙，请稍候再试",
            el: '',
            showType: 'display',
            show: true,
            template: '<span class="msg-para-warn re_ibx" style="margin:0px;"><span class="msg0-icon-warn"></span>{#msg#}</span>'
        }
        option = $extend(option, obj);
        var errDiv = getEl(option.el);
        if (!errDiv) {
            return false;
        }
        if (option.showType === 'display') {
            errDiv.style.display = option.show ? 'inline' : 'none';
        } else {
            errDiv.style.visibility = option.show ? 'visible' : 'hidden';
        }
        if (option.show) {
            errDiv.innerHTML = option.template.replace("{#msg#}", option.msg);
        }
    };

    function getEl(id) {
        if (typeof id === 'string') {
            return document.getElementById(id);
        }
        return id;
    }
}
function $showXmlListByTemplate(selector){
         var cssLoaded = [],cssBtnLoaded=[];
		 selector.each(function(){
             var xmlOpt={
                 src:getRightUrlForMarket($$(this).attr("dataUrl")),
                 contentId:this,
                 page:$$(this).attr("pageId")?true:false,
                 pageId:$$(this).attr("pageId"),
                 pTag:$$(this).attr("ptag")?$$(this).attr("ptag"):$$(this).attr("pTag"),
                 showLength:$$(this).attr("showNum")?$$(this).attr("showNum"):$$(this).attr("showLength"),
                 startNum:$$(this).attr("startNum"),
                 template:$$(this).attr("template")?$$(this).attr("template"):getRightTemplate($$(this).attr("class"),$$(this).attr("btn")),
                 loadHtml:templateList(0)
             };
             formatXml(xmlOpt);
         });

         function getRightUrlForMarket(url){
         var hosts=['promote1.paipai.com/promote','paipai.lady.qq.com/promote','paipai.digi.qq.com/promote','paipai.games.qq.com/promote'];
         var thisHost=location.hostname;
		 if(url.indexOf("/tjw/")<0){url="/tjw/"+url}
         for(var i=0;i<hosts.length;i++){ if (hosts[i].indexOf(thisHost)>=0){ url=url.replace("www.paipai.com",hosts[i]);}
}
         return url;
     }
     function getRightTemplate(className,btn){
         var btn=btn?btn:"btn_1_1"
		 var temp=templateList(1,btn);
         var classNameArry=['','pp_list_1','pp_list_2','pp_list_3','pp_list_4','pp_list_5','pp_list_6','pp_list_7','pp_list_8'];
         for(var i=1;i<classNameArry.length;i++){ if(className.indexOf(classNameArry[i])>=0){
			 temp=templateList(i,btn);			 
			 if(cssLoaded.join('-').indexOf(className)<0){			 
			 	$loadCss("http://static.paipaiimg.com/promote_v2/data/"+className+".css?t="+$randomInt(100));
			 	cssLoaded.push(className);
			 }
			 if(cssBtnLoaded.join('-').indexOf("ok")<0){	
			 $loadCss("http://static.paipaiimg.com/promote_v2/data/btn.css?t="+$randomInt(100));
			 cssBtnLoaded.push("ok");
			 }
} }
         return temp;
     }

     function templateList(n,btn){		  
         var template=[];        ;
         template[0]='<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0"><tr><td align="center" valign="middle" style="font-size:13px; color:#333333; text-align:center;vertical-align: middle; " width="100%" height="100%"><img src="http://static.paipaiimg.com/assets/common/loading2.gif" /><br />数据加载中……</td></tr></table>'; //加载状态
      //1,2,3均为商品模板
         template[1]='<li><a target="_blank" href="{#url#}">'+
                     '        <img src="{#image#}" class="image"/>'+
        			 '     <span class="recmdRegName">{#recmdRegName#}</span>'+
                     '        <span class="oldPrice">市场价:<em class="o">{#oldPrice#}</em>元</span>'+
                     '        <span class="newPrice">拍拍价:<em class="n">{#newPrice#}</em>元</span>'+
                     '        <span class="'+btn+'"></span>'+
                     '</a></li>';
         template[2]='<li><a target="_blank" href="{#url#}">'+
                     '        <img src="{#image#}" class="image"/>'+
                     '        <span class="recmdRegName">{#recmdRegName#}</span>'+
                     '        <span class="oldPrice">市场价:<em class="o">{#oldPrice#}</em>元</span>'+
                     '        <span class="newPrice">拍拍价:<em class="n">{#newPrice#}</em>元</span>'+
					 '        <span class="discount">可使用:<em class="n">{#discount#}</em>元红包</span>'+					 
                     '        <span class="'+btn+'"></span>'+
					 '        <span class="icon_hb"></span>'+
                     '</a></li>';
         template[3]='<li><a target="_blank" href="{#url#}">'+
                     '        <img src="{#image#}" class="image"/>'+
                     '        <p class="pp_layer_1"><span class="goodsName">{#recmdRegName#}</span>'+
                     '        <span class="newPrice">￥<em class="n">{#newPrice#}</em></span>'+
                     '        <span class="text_link">查看详情>></span></p>'+
                     '</a></li>';
         //4,5为店铺模板
         template[4]='<li><a target="_blank" href="{#url#}">'+
                     '        <img src="{#image#}" class="image"/>'+
                     '        <span class="recmdRegName">{#recmdRegName#}</span>'+
                     '        <span class="newPrice">拍拍价:<em class="n">{#newPrice#}</em>元</span>'+
                     '        <span class="addfavNum">已有<em class="n">{#shopLeft#}</em>人收藏</span>'+
                     '        <span class="'+btn+'"></span>'+
                     '</a></li>';
         template[5]='<li><a target="_blank" href="{#shopUrl#}">'+
                     '        <img src="{#image#}" class="image"/></a>'+
                     '		  <p class="pp_layer_1"><span class="shopName">{#recmdRegName#}</span>'+
                     '        <span class="goodEvalRate">好评：<em class="n">{#goodEvalRate#}</em></span>'+
                     '        <span class="gradeIcon">信用：{#gradeIcon#}</span>'+
                     '        <a target="_blank" href="{#shopUrl#}"><span class="'+btn+'"></span></a>'+
                     '</p></li>';
         return template[n];
 }

function formatXml(opt){var option={src:"",template:'',contentId:"",lastCodes:"",page:false,pageId:'',pageType:"full",pTag:"",firstPageId:1,linkTag:"#none",showLength:0,startNum:0,　　
interval:0,filter:'',loadHtml:'<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0"><tr><td align="center" valign="middle" style="font-size:13px; color:#333333; text-align:center;vertical-align: middle; " width="100%" height="100%"><img src="http://static.paipaiimg.com/assets/common/loading2.gif" /><br />数据加载中……</td></tr></table>',onShowed:function(obj){return true;},data:{},currentPage:0,pageCount:0,itemCount:0,actionId:0,content:"",pageBar:"",errorTag:false,reverse:false};$extend(option,opt);if(option.src==""){return;}
option.content=$$(option.contentId);option.pageBar=$$(option.pageBar);if(window._docCache==undefined){window._docCache={};}
if(opt.interval*1>0){if(!window._formatXml_interval){window._formatXml_intvFunc={};window._formatXml_interval=setInterval(function(){for(var key in window._formatXml_intvFunc){window._formatXml_intvFunc[key]();}
},opt.interval);};};getXml(option.firstPageId,option);function getXml(i,opt){opt.actionId=i;
var hc=opt.loadHtml;opt.content.html(hc);if(opt.data[opt.contentId.id+"_"+i]){opt.currentPage=parseInt(i);showXml(opt);}else{var dataUrl=opt.src.replace(/_2_\d+\./,"_2_"+i+".");
var _showXml=function(doc){opt.currentPage=parseInt(doc.getElementsByTagName('currentPage')[0].firstChild.nodeValue);opt.data[opt.contentId.id+"_"+opt.currentPage]=doc;showXml(opt);};if(opt.cacheID&&window._docCache[opt.cacheID]){_showXml(window._docCache[opt.cacheID]);}else{$$.ajax({cache:false,url:dataUrl,dataType:"xml",success:function(da){_showXml(da);if(opt.cacheID){window._docCache[opt.cacheID]=da;}
},error:function(da,b,er){if(i==1){opt.errorTag=true;if(arguments[0]+arguments[1]+arguments[2]){}
return false;}else{getXml(1,opt);};if(opt.cacheID){window._docCache[opt.cacheID]=undefined;}
return false;}
});}
}
};function showXml(opt){if(!opt.data[opt.contentId.id+"_"+opt.currentPage]||opt.errorTag){return false;}
if(opt.page&&opt.currentPage!=opt.actionId){return false;}
var data=opt.data[opt.contentId.id+"_"+opt.currentPage];opt.currentPage=data.getElementsByTagName('currentPage')[0].firstChild.nodeValue*1;opt.pageCount=data.getElementsByTagName('pageCount')[0].firstChild.nodeValue*1;opt.itemCount=data.getElementsByTagName('itemCount')[0].firstChild.nodeValue*1;opt.domainId=data.getElementsByTagName('domainId')[0].firstChild.nodeValue*1;
var ptagPageId=data.getElementsByTagName('pageId')[0].firstChild.nodeValue*1;
var list=data.getElementsByTagName('item');
var startNum=opt.startNum*1+opt.showLength*1;
var hc=[];for(var i=opt.startNum,len=list.length,startNum=(startNum>0)?startNum:len;(i<startNum&&i<len);i++){var itemInfo={};for(var j=0;j<list[i].attributes.length;j++){itemInfo[list[i].attributes[j].name]=list[i].attributes[j].value;}
var valueNodes=$$(list[i]).children();for(var j=0;j<valueNodes.length;j++){itemInfo[valueNodes[j].nodeName]=valueNodes[j].firstChild?valueNodes[j].firstChild.nodeValue:"";};
var discount=Math.round(parseFloat(itemInfo["newPrice"])-parseFloat(itemInfo["vouPrice"]));
var sysPtag=opt.pTag?opt.pTag:ptagPageId+"."+opt.domainId+"."+i;
var cUrl=itemInfo["commodityUrl"];
var url=cUrl?(cUrl+(cUrl.indexOf('?')==-1?"?":"&")+"PTAG="+sysPtag):"http://auction1.paipai.com/"+itemInfo["id"]+"?PTAG="+sysPtag;
var gradeIcon=PP.icons?PP.icons.grade({qq:itemInfo["qq"],showScore:false,score:itemInfo["userCredit"],type:"seller"}):"";
var badEvalRate=(parseFloat(itemInfo["badEvalRate"])/10).toFixed(1)+"%";
var goodEvalRate=(parseFloat(itemInfo["goodEvalRate"])/10).toFixed(1)+"%";
var lawSuitRate=(parseFloat(itemInfo["lawSuitRate"])/10).toFixed(1)+"%";
var recmdReason=itemInfo["recmdReason"];
var costMoney=itemInfo["costMoney"]*1;
var rec_title=recmdReason?recmdReason.split("#")[0]:"";
var rec_description=recmdReason?recmdReason.split("#")[1]:"";
var shopUrl="http://"+itemInfo["qq"]+".paipai.com/?PTAG="+sysPtag;
var pic160x160=itemInfo["image"].replace(/(\.|\.\d{2,3}\x\d{2,3}\.)\jpg/,".160x160.jpg");
var pic120x120=itemInfo["image"].replace(/(\.|\.\d{2,3}\x\d{2,3}\.)\jpg/,".120x120.jpg");
var pic200x200=itemInfo["image"].replace(/(\.|\.\d{2,3}\x\d{2,3}\.)\jpg/,".200x200.jpg");
var pic100x100=itemInfo["image"].replace(/(\.|\.\d{2,3}\x\d{2,3}\.)\jpg/,".100x100.jpg");
var pic80x80=itemInfo["image"].replace(/(\.|\.\d{2,3}\x\d{2,3}\.)\jpg/,".80x80.jpg");if(opt.filter){var filter=opt.filter;for(var j in itemInfo){filter=$strReplace(filter,
"{#"+j+"#}","itemInfo['"+j+"']");};filter=eval(filter);if(!filter)continue;};
var currHTML=opt.template;currHTML=$strReplace(currHTML,{"{#url#}":url,
	"{#shopUrl#}":shopUrl,
	"{#costMoney#}":costMoney,
	"{#discount#}":discount,
	"{#gradeIcon#}":gradeIcon,
	"{#rec_title#}":rec_title,
	"{#rec_description#}":rec_description,
	"{#badEvalRate#}":badEvalRate,
	"{#goodEvalRate#}":goodEvalRate,
	"{#lawSuitRate#}":lawSuitRate,
	"{#currentPage#}":opt.currentPage,
	"{#pageCount#}":opt.pageCount,
	"{#itemCount#}":opt.itemCount,
	"{#uploadTimeSim#}":itemInfo['uploadTime']?itemInfo['uploadTime'].substr(11,5):"",
	"{#pic80x80#}":pic80x80,
	"{#pic100x100#}":pic100x100,
	"{#pic120x120#}":pic120x120,
	"{#pic160x160#}":pic160x160,
	"{#pic200x200#}":pic200x200,
	"{#order#}":i+1,
	"{#price#}":$formatPrix(itemInfo['newPrice'],"x.x")[0]});for(var j in itemInfo){currHTML=$strReplace(currHTML,
	"{#"+j+"#}",itemInfo[j]);}
hc.push(currHTML);};opt.content[0].innerHTML=(opt.reverse?hc.reverse():hc).join("")+opt.lastCodes;if(typeof opt.afterXMLshow=="function"){opt.afterXMLshow();}
if(opt.interval*1>0&&!window._formatXml_intvFunc[opt.contentId.id]){window._formatXml_intvFunc[opt.contentId.id]=function(){var startNum=opt.startNum*1+opt.showLength*1,total=list.length;opt.startNum=startNum<total?startNum:0;showXml(opt);}
};showPage(opt);if(!opt.onShowed(opt)){return false};function getAttr(attr,xmlDom){for(var i=0;i<xmlDom.attributes.length;i++){if(xmlDom.attributes[i].name==attr){return xmlDom.attributes[i].value;}
}
return"";};
function getValue(attr,xmlDom){try{var returnVar=xmlDom.getElementsByTagName(attr)[0].firstChild.nodeValue;return returnVar;}catch(e){return"";}
};};
function showPage(opt){
	$page({pageCount:opt.pageCount,
		  currentPage:opt.currentPage,
		  domList:[$$(opt.pageId)],
		  type:"simple",
		  action:"func",
		  func:function(pid){getXml(pid,opt);}
			});
	}
  }
}
function $simpleValidator(){
	Validator = {
	Require : /.+/,
	Email : /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
	Phone : /^((\(\d{2,3}\))|(\d{3}\-))?(\(0\d{2,3}\)|0\d{2,3}-)?[1-9]\d{6,11}(\-\d{1,6})?$/,
	Mobile : /^(852\d{8})|(((\(\d{2,3}\))|(\d{3}\-))?((13\d{9})|(14\d{9})|(15\d{9})|(18\d{9})))$/,
	Url : /^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/,
	IdCard : "this.IsIdCard(value)",	
	Currency : /^\d+(\.\d+)?$/,
	Number : /^\d+$/,
	Zip : /^[0-9]\d{5}$/,
	QQ : /^[1-9]\d{4,9}$/,
	Integer : /^[-\+]?\d+$/,
	Double : /^[-\+]?\d+(\.\d+)?$/,
	English : /^[A-Za-z]+$/,
	Chinese : /^[\u0391-\uFFE5]+$/,
	Username : /^[a-z]\w{3,}$/i,
	UnSafe : /^(([A-Z]*|[a-z]*|\d*|[-_\~!@#\$%\^&\*\.\(\)\[\]\{\}<>\?\\\/\'\"]*)|.{0,5})$|\s/,
	IsSafe : function(str){return !this.UnSafe.test(str);},
	SafeString : "this.IsSafe(value)",
	Filter : "this.DoFilter(value, getAttribute('accept'))",
	Limit : "this.limit(value.length,getAttribute('min'), getAttribute('max'))",
	LimitB : "this.limit(this.LenB(value), getAttribute('min'), getAttribute('max'))",
	LimitC : "this.limit(this.LenC(value), getAttribute('min'), getAttribute('max'))",
	Date : "this.IsDate(value, getAttribute('min'), getAttribute('format'))",
	Repeat : "value == document.getElementsByName(getAttribute('to'))[0].value",
	Range : "parseFloat(getAttribute('min')) <= parseFloat(value) && parseFloat(value) <= parseFloat(getAttribute('max'))",
	Compare : "this.compare(value,getAttribute('operator'),getAttribute('to'))",
	Custom : "this.Exec(value, getAttribute('regexp'))",
	Group : "this.MustChecked(getAttribute('name'), getAttribute('min'), getAttribute('max'))",
	ErrorItem : [document.forms[0]],
	ErrorMessage : ["温馨提示：由于以下可能原因，您需要调整输入信息。\t\t\t\t\n"],

	Validate : function(){
	var theForm;
		var mode;
		switch(arguments.length)
		{
			case 0:	
			 theForm = document.forms[0];
			 mode = 1;
			 break;
			case 1:
				if(typeof(arguments[0])=="object")
					theForm = arguments[0];
				else
					theForm = document.forms[arguments[0]];
				mode = 1;
				break;
			case 2:
			default:
				if(typeof(arguments[0])=="object")
					theForm = arguments[0];
				else
					theForm = document.forms[arguments[0]];
				mode = arguments[1];
				break;
		}

		var obj = theForm || event.srcElement;
		var count = obj.elements.length;
		this.ErrorMessage.length = 1;
		this.ErrorItem.length = 1;
		this.ErrorItem[0] = obj;
		var checkwithObject = null;
		for(var i=0;i<count;i++){
			with(obj.elements[i]){
				var _dataType = getAttribute("dataType");
				if(typeof(_dataType) == "object" || typeof(this[_dataType]) == "undefined")
						continue;
				this.ClearState(obj.elements[i]);
				if(getAttribute("checkwith")!=null)
				{
					var _theObj=getAttribute("checkwith");				
					var _unionObjs= document.getElementsByName(_theObj);
					var iIndex;
					if(_unionObjs.length > 0)
					{
						for(iIndex=0;iIndex<_unionObjs.length;iIndex++)
						{	
							if(value == ""&&_unionObjs[iIndex].value!="")
								break;	
						}
						if(iIndex <	_unionObjs.length) 
							continue;				
					}
				}
//alert(getAttribute("id"));
//alert(getAttribute("require"));
				if(getAttribute("require") == "false" && value == "")
					continue;
				
				switch(_dataType){
					case "IdCard" :
					case "Date" :
					case "Repeat" :
					case "Range" :
					case "Compare" :
					case "Custom" :
					case "Group" : 
					case "Limit" :
					case "LimitB" :
					case "LimitC" :
					case "SafeString" :
					case "Filter" :
					if(!eval(this[_dataType])) {
						this.AddError(i, getAttribute("msg"));
					}
					break;
					default :
					if(!this[_dataType].test(value)){
						this.AddError(i, getAttribute("msg"));
					}
					break;
			}
		}
	}
	
	if(this.ErrorMessage.length > 1){
		mode = mode || 1;
		var errCount = this.ErrorItem.length;
		switch(mode){
			case 2 :
				for(var i=1;i<errCount;i++)
				{
					this.ErrorItem[i].style.color = "red";
					this.ErrorItem[i].style.borderColor = "red";
				}
				case 1 :
					alert(this.ErrorMessage.join("\n"));
				try
				{
					this.ErrorItem[1].focus();
				}
				catch(bb){break;}
				break;
		case 3 :
				for(var i=1;i<errCount;i++){
					try{
					this.ErrorItem[i].style.borderColor = "red";
					var span = document.createElement("SPAN");
					span.id = "__ErrorMessagePanel";
					span.style.color = "red";					
					this.ErrorItem[i].parentNode.appendChild(span);
					span.innerHTML = this.ErrorMessage[i].replace(/\d+:/,"*");
					}
					catch(e){alert(e.description);}
				}
				this.ErrorItem[1].focus();
				break;
				default :
				alert(this.ErrorMessage.join("\n"));
				break;
			}
			return false;
		}
		return true;
	},

limit : function(len,min, max){
min = min || 0;
max = max || Number.MAX_VALUE;
return min <= len && len <= max;
},
LenB : function(str){
return str.replace(/[^\x00-\xff]/g,"**").length;
},
LenC : function(str){
	var exp = /^[A-Za-z0-9]+$/;
	if(!exp.test(str))
	{
		return 0;
	}
return str.replace(/[^\x00-\xff]/g,"**").length;
},
ClearState : function(elem){
with(elem){
style.color = "";
style.borderColor="";
var lastNode = parentNode.childNodes[parentNode.childNodes.length-1];
if(lastNode.id == "__ErrorMessagePanel")
parentNode.removeChild(lastNode);
}
},
AddError : function(index, str){
this.ErrorItem[this.ErrorItem.length] = this.ErrorItem[0].elements[index];
this.ErrorMessage[this.ErrorMessage.length] = this.ErrorMessage.length + ":" + str;
},
Exec : function(op, reg){
return new RegExp(reg,"g").test(op);
},
compare : function(op1,operator,op2){
switch (operator) {
case "NotEqual":
return (op1 != op2);
case "GreaterThan":
return (op1 > op2);
case "GreaterThanEqual":
return (op1 >= op2);
case "LessThan":
return (op1 < op2);
case "LessThanEqual":
return (op1 <= op2);
default:
return (op1 == op2); 
}
},
MustChecked : function(name, min, max){
var groups = document.getElementsByName(name);
var hasChecked = 0;
min = min || 1;
max = max || groups.length;
for(var i=groups.length-1;i>=0;i--)
if(groups[i].checked) hasChecked++;
return min <= hasChecked && hasChecked <= max;
},
DoFilter : function(input, filter){
	exp_str1 = filter.split(",").join("|");
	exp_str2 = exp_str1.replace(/\s+/g,"");
	return new RegExp("^.+\.(?=EXT)(EXT)$".replace(/EXT/g, exp_str2), "gi").test(input);
},
IsIdCard : function(number){
var date, Ai;
var verify = "10x98765432";
var verify2 = "10x98765432";
var Wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
var area = ['','','','','','','','','','','','北京','天津','河北','山西','内蒙古','','','','','','辽宁','吉林','黑龙江','','','','','','','','上海','江苏','浙江','安微','福建','江西','山东','','','','河南','湖北','湖南','广东','广西','海南','','','','重庆','四川','贵州','云南','西藏','','','','','','','陕西','甘肃','青海','宁夏','新疆','','','','','','台湾','','','','','','','','','','香港','澳门','','','','','','','','','国外'];
var re = number.match(/^(\d{2})\d{4}(((\d{2})(\d{2})(\d{2})(\d{3}))|((\d{4})(\d{2})(\d{2})(\d{3}[x\d])))$/i);
if(re == null) return false;
if(re[1] >= area.length || area[re[1]] == "") return false;
if(re[2].length == 12){
Ai = number.substr(0, 17);
date = [re[9], re[10], re[11]].join("-");
}
else{
Ai = number.substr(0, 6) + "19" + number.substr(6);
date = ["19" + re[4], re[5], re[6]].join("-");
}
if(!this.IsDate(date, "ymd")) return false;
var sum = 0;
for(var i = 0;i<=16;i++){
sum += Ai.charAt(i) * Wi[i];
}
Ai +=verify.charAt(sum%11);
return (number.length ==15 || number.length == 18 && number.toLowerCase() == Ai);
},
IsDate : function(op, formatString)
{
formatString = formatString || "ymd";
var m, year, month, day;
switch(formatString){
case "ymd" :
m = op.match(new RegExp("^((\\d{4})|(\\d{2}))([-./])(\\d{1,2})\\4(\\d{1,2})$"));
if(m == null ) return false;
day = m[6];
month = m[5]*1;
year = (m[2].length == 4) ? m[2] : GetFullYear(parseInt(m[3], 10));
break;
case "dmy" :
m = op.match(new RegExp("^(\\d{1,2})([-./])(\\d{1,2})\\2((\\d{4})|(\\d{2}))$"));
if(m == null ) return false;
day = m[1];
month = m[3]*1;
year = (m[5].length == 4) ? m[5] : GetFullYear(parseInt(m[6], 10));
break;
default :
break;
}
if(!parseInt(month)) return false;
month = month==0 ?12:month;
var date = new Date(year, month-1, day);
return (typeof(date) == "object" && year == date.getFullYear() && month == (date.getMonth()+1) && day == date.getDate());
function GetFullYear(y){return ((y<30 ? "20" : "19") + y)|0;}
}
}

return Validator

}
function $simulateSelect(option){
	var opt={
		input:"",	//输入框id
		show:"",	//显示id
		cover:"",	//遮盖iframe的id
		button:"",	//提交的按钮
		onSearch:$empty(),	//开始搜索的时候
		onSumit:$empty()	//提交的时候调用
	};

	for(var k in option){
		opt[k]=option[k];
	};
	
	var	nowItem=-1,		//当前展示的项目
		preItem=0,		//前一项
		total=0,		//总项目
		val="",			//存储进行搜索的值，如果没有变化则不启动
		oInput=$id(opt.input),	//存储输入的dom
		oShow=$id(opt.show),		//存储展示位置的dom
		oBtn=$id(opt.button);	//存储按钮的dom
		
	$addEvent(document,"click",function(){
		//鼠标外部点击后隐藏搜索和选择的下拉框
		if(oShow.style.display!="none"){
			hideResult();	
		}
	});

	function hideResult(){
		//隐藏搜索结果列表
		$display(opt.show+","+opt.cover,"none");	
	};
	
	oInput.onkeyup=function(e){
		var	code=$getKeyCode(e);
		if(code!==13 && code!==38 && code!==40 && this.value!==''){
			if(this.value!==val){
				hideResult();	
				opt.onSearch(this.value,opt);
			};
		}else if(code==13){
			opt.onSumit();
		}else if(this.value==''){ 
			hideResult();				
		};
		val=this.value;
	};
	
	null!==oBtn?(oBtn.onclick=function(){
		opt.onSumit(); 
	}):"";
	
	opt.showResult=function(html,data){
		oShow.innerHTML=html;
		$display(opt.show+","+opt.cover,'block');
		nowItem=-1;
		preItem=0;
		total=data.length;
		oInput.onkeydown=function(e){
			showKeyDown($getKeyCode(e));
		}
		
		function showKeyDown(code){
			//选择搜索结果的操作
			if(code==38||code==40){
				//38:up,40:down
				preItem=nowItem;
				code==38?nowItem--:nowItem++;
				nowItem=nowItem<0?total-1:(nowItem>total-1?0:nowItem);
	
				var oItem=oShow.childNodes[0].childNodes[nowItem];
				if(oItem){
					oItem.className="autoResultLink";
					oInput.value=data[nowItem];
				};
				if(-1!==preItem){
					var oPrev=oShow.childNodes[0].childNodes[preItem];
					oPrev?oPrev.className="":"";
				}				
			}else if(code==13){
				//回车
				if(nowItem!=-1){
					oInput.value=data[nowItem];
					hideResult();
				};
				opt.onSumit(); 
			}
		};	
	}
}
function $stopBubble(ev){
　　var evt = ev || window.event;
　　if (window.event) {// IE
　　　　evt.cancelBubble = true;
　　} else {// Firefox
　　　　evt.stopPropagation();
　　}
}
function $stringSplitByLength(str,l,cuter){
//按照指定字节数把字符串分行,参数:字符串，切割长度（单位字节），用来分隔的代码
	if(str.length<=l){return str}
	cuter=cuter?cuter:"<br/>"
	var returnVar=[];
	var cutString="";
	var start=0;
	for(var i=0;i<str.length;i++){
		cutString=str.substr(start,i-start);
		if(cutString.replace(/[\u00FF-\uFFFF]/g,"  ").length>=l){
			returnVar.push(cutString)
			cutString="";
			start=i;
		}
	}
	(cutString)?returnVar.push(cutString):"";
	return returnVar.join(cuter);
}
function $strLenGB(v){
	//一个中文按照两个字节算，返回长度
	return v.replace(/[\u00FF-\uFFFF]/g,"  ").length;
}
function $strReplace(str,re,rt){
	//同时支持json格式的批量替换和原始的全部替换
	if(rt!=undefined){
		replace(re,rt);
	}else{
		for(var key in re){
			replace(key,re[key]);
		};
	};
	
	function replace(a,b){
		var arr=str.split(a);
		str=arr.join(b);
	};

	return str;
}
function $strSubGB(str,start,len,flag){
    //进行字符长度验证，如果超过长度则返回截断后的字符串
    var total = $strLenGB(str);
    if(total > (len-start)){
        var flag=flag||"";
        var strTemp=str.replace(/[\u00FF-\uFFFF]/g, "@-").substr(start,len);
        var subLen =strTemp.match(/@-/g)?strTemp.match(/@-/g).length:0;        
        return str.substring(0,len-subLen)+flag;
    }
    return str;
}
function $strTrim(str,code){
//删除字符串两端的空格或者指定内容
	var argus  = code || "\\s";
	var temp = new RegExp("(^"+argus+"*)|("+argus+"*$)","g");
	return str.replace(temp,"");
}
function $strTrimLeft(str,code){
	code = code||"\\s";
	return str.replace(new RegExp("(^"+ code + "*)","g"),""); 
}
function $strTrimRight(str,code){
	code = code||"\\s";
	return str.replace(new RegExp("(" + code + "*$)","g"),""); 
}
function $subf(a,b) {
	var len1=(a+".").split(".")[1].length,
		len2=(b+".").split(".")[1].length,
		n=Math.max(len1,len2),
		m=Math.pow(10,n);
	return (a*m-b*m)/m;
}
function $tabChange(cid,cs,ev,n,lazy){
//容器id，当前tab头的样式名，事件(click, mouseover...), 第一次显示第几个tab，是否切换到某个tab之后再load那个tab内容里的图片(1加载，其余不加载，需在图片中处理src和rel属性)
	if(!$$("#"+cid)||n<1) return;

	var tabw = $$("#" + cid + " .tabcon"),
		tabh = $$("#" + cid + " .tabnav li"),
		tabhLen = tabh.length,
		toId = n <= tabhLen ? n-1 : tabhLen-1;
	for (var i=0;i<tabhLen;i++){ $$(tabh[i]).attr("rel",i);	}

	tabh.eq(toId).addClass(cs);
	tabw.hide().eq(toId).show();
	if(lazy===1){loadImg(n); }

	tabh.bind(ev,function(){
		var tId = $$(this).attr("rel");
		if(lazy===1){ loadImg(tId); }
		$$(tabh[toId]).removeClass(cs);
		$$(tabw[toId]).hide();
		$$(tabh[tId]).addClass(cs);
		$$(tabw[tId]).show();
		toId = tId;
	});

	function loadImg(c){
		$$(tabw[c]).find("img").each(function(){
			if($$(this).attr("src")=="") {
				$$(this).attr("src",$$(this).attr("rel")); 
				$$(this).css("background-image","none"); 
			}
		});
	}

}
function $tabExchange(obj){
    var opt={
        titleId:"",    //tab标题的id
        titleTag:"",    //tab的元素类型
        contentId:"",    //内容的id    
        contentTag:"",    //内容元素类型
		className:"current",
        initIndex:0,
        timeLag:0,
		func:$empty()
    };
	
    for(var i in obj){
        opt[i]=obj[i];
    }
    //遍历所有的标题tab，并绑定事件
    var oTitle=$id(opt.titleId),
		tabs=oTitle.childNodes,
		oContent=$id(opt.contentId),
    	contents=oContent.childNodes,
    	_cont=[],
		_tabs=[],
		_imgs=[],//图片是否已经载入
		conTentTag=opt.contentTag.toLowerCase(),
		titleTag=opt.titleTag.toLowerCase(),
		intr=null,
		tabLen=0;//实际长度
		
    for(var i=0,len=contents.length;i<len;i++){
		var oContent=contents[i];
        if(conTentTag==oContent.nodeName.toLowerCase()){
            _cont.push(oContent);
        }
    }
	
    for(var i=0,len=tabs.length;i<len;i++){
		var oTab=tabs[i];
        if(titleTag==oTab.nodeName.toLowerCase()){			
            _tabs.push(oTab);	
			
			//给Tab绑定mouseover
			oTab.onmouseover=(function(cur){
				return function(){
					if(cur!=opt.initIndex){
						intr=setTimeout(function(){
							if(!_imgs[cur]){
								//如果已经在如果就不要再载入了
								loadImg(_cont[cur]);
								_imgs[cur]=true;
							};
							_cont[opt.initIndex].style.display="none";
							_tabs[opt.initIndex].className="";
							_cont[cur].style.display="block";
							_tabs[cur].className=opt.className;	
							opt.initIndex=cur;	
							opt.func(cur);
						},opt.timeLag);		
					}
				}
			})(tabLen++);
					
			oTab.onmouseout = function(){
				clearTimeout(intr);
			};
        }
    }
	
    if(_tabs.length != _cont.length) return;
	
    //根据initIndex设置显示的tab页    
	for(var j=0,len=tabLen;j<len;j++){
		_cont[j].style.display=(j==opt.initIndex)?"block":"none";
	}
	
    //初始载入默认显示Tab
    if(_tabs[opt.initIndex]){
        _tabs[opt.initIndex].className = opt.className;   		
		loadImg(_cont[opt.initIndex]);
		_imgs[opt.initIndex]=true;
    }

	
	function loadImg(obj){
		var images = obj.getElementsByTagName("IMG");
		for(var i=0,len=images.length;i<len;i++){
			var oImg=images[i],
				oImgBack=oImg.getAttribute("back_src");
			if(''==oImg.src&&oImgBack){
				oImg.src = oImgBack;
			}
		}
	}
}
function $templateStuff(json,target,tpl,splitStr){
	/**
	 *使用JSON数据填充模板
	 *@param {object}	json	json对象
	 *@param {string}	tpl		模板字符串
	 *@example	
	 *@return	替换结果字符串
	 */
	 each = function(object, fn) {
		if (typeof object != "object" || typeof fn != "function") {
			return false;
		}

		var i = 0, k, _fn = fn;
		// args = args || [];

		if (Object.prototype.toString.call(object) === "[object Array]") {
			// 如果存在js 1.5 的forEach则直接使用forEach
			if (!!object.forEach) {
				object.forEach(fn);
			} else {
				var len = object.length
				while (i < len) {
					_fn(object[i], i, object);
					++i;
				}
			}
		} else {
			for (k in object) {
				_fn(object[k], k, object);
			}
		}
		return true;
	};
	parse =function(json,tpl,splitStr)
	{
		var blocks=[];	
		/*
		for(var i=0,len=json.length; i<len; i++){			
			blocks.push(tpl.replace(/{(\w+)}/g,function(a, b){
				return json[i][b] !== undefined ? json[i][b] : a;
			}));
		}*/
		this.each(json,function(el){			
			blocks.push(tpl.replace(/{(\w+)}/g,function(a, b){
				return el[b] !== undefined ? el[b] : a;
			}));								   
		})
		return blocks.join(splitStr || '');
	};

	/**
	 *
	 *@param {object}	json	json对象
	 *@param {string}	target	目标填充元素id
	 *@param {string}	tpl		模板textarea的id
	 */
	
	tpl = $id(tpl || target+'_tpl').value;
	target = $id(target);

	var m = tpl.match(/<#([\s\S]+)#>/);
	var blockTpl= m[1];
	target.innerHTML = tpl.replace(m[0], this.parse(json, blockTpl, splitStr));
	target.style.visibility = 'visible';
	
}
function $testIDC(){
}
function $time33(str){
    //哈希time33算法
    for(var i = 0, len = str.length,hash = 5381; i < len; ++i){
       hash += (hash << 5) + str.charAt(i).charCodeAt();
    };
    return hash & 0x7fffffff;
}
function $timeoutDelegate() {
	//lcm: 间隔时间最小公倍数, gcd: 间隔时间最大公约数, queue: 队列列表, wait: 监听时间, timeout: 计步器, my: 代理类的实例对象，主要在delegate方法中使用
	var lcm = gcd = wait = timeout = 0, queue = [], my = this;
	
	if($timeoutDelegate._mold == undefined) {
		//代理程序，执行周期由gcd决定	
		$timeoutDelegate.prototype.delegate = function() {
			if (gcd > 0) {
				wait += gcd;
				for (var i = 0, len = queue.length; i < len; i++) {
					wait % queue[i].interval == 0 && queue[i].func();
				}
				wait >= lcm && (wait = 0);
				timeout = setTimeout(my.delegate, gcd);
			}
		};
		//退出timeout监听: id 指定将哪一个事件对象从队列中清除，不传时中止整个代理程序
		$timeoutDelegate.prototype.clear = function(id) {
			clearTimeout(timeout);
			if(id) {
				gcd = lcm = wait = 0;
				for (var i = 0, len = queue.length; i < len; i++) {
					if(queue[i].id == id) {
						queue.splice(i, 1);
						break;
					}
				}
				if(queue.length > 1) {
					gcd = lcm = queue[0].interval;
					for(i = 1, len = queue.length; i < len; i++) {
						gcd = $getGcd(gcd, queue[i].interval);
						lcm = $getLcm(lcm, queue[i].interval);
					}
				} else if(queue.length == 1) {
					gcd = lcm = queue[0].interval;
				}
				timeout = setTimeout(my.delegate, gcd);
			}
			return my;
		};
		/*	注册timeout监听
		*	eObj{
		*		id 事件对象id, register时会对queue里的id作检查, 如果id已存在queue中则不予注册, 同时也用于clear时指定事件对象
		*		func 加入队列的函数
		*		interval 该函数的调用间隔，单位毫秒
		*	},
		*	execute 是否立即执行（false时延迟到interval指定的时间再执行）
		*/
		$timeoutDelegate.prototype.register = function(eObj, execute) {
			for (var i = 0, len = queue.length; i < len; i++) {
				if(queue[i].id == eObj.id) return false;
			}
			execute && eObj.func();
			gcd = gcd == 0 ? eObj.interval : $getGcd(gcd, eObj.interval);
			lcm = lcm == 0 ? eObj.interval : $getLcm(lcm, eObj.interval);
			queue.push(eObj);
			
			my.clear();
			timeout = setTimeout(my.delegate, gcd);
			return my;
		};
		
		$timeoutDelegate._mold = true;
	}
}
function $timer(opt){
    //定时器
    var option = {
        delay: 1000,//间隔时间
        act: "add",//添加或删除定时器   命令名：add、del
        func: function(){
        },//执行函数
        counter: 0,//计数器，每秒加1
        guid: 0//定时器唯一标识，创建定时器时返回，删除定时器时需要传入此值。
    };
    for (var k in opt) {
        option[k] = opt[k];
    }
    if (!window._pp_core_timer_) {
        window._pp_core_timer_list_ = {
            delay: 1000,
            count: 0,
            guid: 0
        };
        window._pp_core_timer_ = setInterval(function(){
            for (var key in window._pp_core_timer_list_) {
                var oTimer = window._pp_core_timer_list_[key];
                if (typeof(oTimer) == "object") {
                    oTimer.counter++;
                    if (oTimer.counter * window._pp_core_timer_list_.delay >= oTimer.delay) {
                        oTimer.counter = 0;
                        if (typeof(oTimer.func) == "function") {
                            oTimer.func();
                        }
                    }
                }
                oTimer = null;
            }
        }, window._pp_core_timer_list_.delay);
    }
    switch (option.act) {
    case 'add':
        option.guid = ++window._pp_core_timer_list_.guid;
        window._pp_core_timer_list_[option.guid] = option;
        window._pp_core_timer_list_.count++;
        return option;
    case 'del':
        if (option.guid && window._pp_core_timer_list_[option.guid]) {
            window._pp_core_timer_list_[option.guid] = null;
            delete window._pp_core_timer_list_[option.guid];
            window._pp_core_timer_list_.count--;
            if (window._pp_core_timer_list_.count <= 0) {
                clearInterval(window._pp_core_timer_);
                window._pp_core_timer_ = null;
            }
        }
        return option;
    }
}
/**
* 将时间字符串转为中文
* @str : 时间字符串
* @return : []
*/
$timeStrToReadable = function (str, showEmpty) {
    return timeArrToReadable($timeStrToArr(str));
    /**
    * 将时间数组翻译成内容
    *
    * @data ：时间数组
    * @return ：string
    */
    function timeArrToReadable(data) {
        var hc = [];
        var label = ["星期一", "星期二", "星期三", "星期四", "星期五", "星期六", "星期日"];
        if (!data || !data.length) {
            data = [];
            for (var i = 0, len = 7; i < len; i++) {
                data.push([]);
            };
        }
        for (var i = 0; i < data.length; i++) {
            var dayHs = [];
            var item = data[i];
            if (item.length > 0) {
                for (var j = 0; j < item.length; j++) {
                    //x.5或整数
                    var range = item[j];
                    var sh = parseInt(range.start);
                    var eh = parseInt(range.end);
                    dayHs.push('' + sh + (range.start > sh ? ':30' : ':00') + '-' + eh + (range.end > eh ? ':30' : ':00') + '');
                }
                hc.push(label[i] + '（' + dayHs.join(',') + '）');
            } else if (showEmpty) {
                hc.push(label[i]);
            }
        }
        return hc;
    }
}
function $timeTipsStr(){
	var a="夜深了",b="早安",c="早上好",d="上午好",e="中午好",f="下午好",g="您好",h="晚上好";
	return [a,a,a,a,b,b,b,c,c,d,d,d,e,e,f,f,f,g,g,h,h,h,a,a][new Date().getHours()];
}
function $toArray(iterable){
	if(!iterable)return [];
	//优化效率，预设长度
	var length=iterable.length||0,results=new Array(length);
	while(length--)results[length]=iterable[length];
	return results;
}
var $update = (function(){
	//是否不支持设置select的innerHTML
	var SELECT_ELEMENT_INNERHTML_BUGGY = (function(){
		var el = document.createElement("select"), isBuggy = true;
		el.innerHTML = "<option value=\"test\">test</option>";
		if (el.options && el.options[0]) {
			isBuggy = el.options[0].nodeName.toUpperCase() !== "OPTION";
		}
		el = null;
		return isBuggy;
	})();
	//是否不支持设置table的innerHTML
	var TABLE_ELEMENT_INNERHTML_BUGGY = (function(){
		try {
			var el = document.createElement("table");
			if (el && el.tBodies) {
				el.innerHTML = "<tbody><tr><td>test</td></tr></tbody>";
				var isBuggy = typeof el.tBodies[0] == "undefined";
				el = null;
				return isBuggy;
			}
		} 
		catch (e) {
			return true;
		}
	})();
	//是否不支持设置link的innerHTML
	var LINK_ELEMENT_INNERHTML_BUGGY = (function(){
		try {
			var el = document.createElement('div');
			el.innerHTML = "<link>";
			var isBuggy = (el.childNodes.length === 0);
			el = null;
			return isBuggy;
		} 
		catch (e) {
			return true;
		}
	})();
	var ANY_INNERHTML_BUGGY = SELECT_ELEMENT_INNERHTML_BUGGY || TABLE_ELEMENT_INNERHTML_BUGGY || LINK_ELEMENT_INNERHTML_BUGGY;
	//是否不支持设置script的text内容
	var SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING = (function(){
		var s = document.createElement("script"), isBuggy = false;
		try {
			s.appendChild(document.createTextNode(""));
			isBuggy = !s.firstChild ||
			s.firstChild && s.firstChild.nodeType !== 3;
		} 
		catch (e) {
			isBuggy = true;
		}
		s = null;
		return isBuggy;
	})();
	
	function isElement(object){
		return !!(object && object.nodeType == 1);
	}
	
	function toHTML(object){
		return object && object.toHTML ? object.toHTML() : object ? String(object) : "";
	}
	
	function stripScripts(str){
		return str.replace(new RegExp('<script[^>]*>([\\S\\s]*?)<\/script>', 'img'), '');
	}
	
	var tags = {
		TABLE: ['<table>', '</table>', 1],
		TBODY: ['<table><tbody>', '</tbody></table>', 2],
		TR: ['<table><tbody><tr>', '</tr></tbody></table>', 3],
		TD: ['<table><tbody><tr><td>', '</td></tr></tbody></table>', 4],
		SELECT: ['<select>', '</select>', 1]
	}
	
	function _getContentFromAnonymousElement(tagName, html, force){
		var div = document.createElement("div"), t = tags[tagName];
		var workaround = false;
		if (t) {
			workaround = true;
		}
		else if (force) {
			workaround = true;
			t = ['', '', 0];
		}
		if (workaround) {
			div.innerHTML = '&nbsp;' + t[0] + html + t[1];
			div.removeChild(div.firstChild);
			for (var i = t[2]; i--;) {
				div = div.firstChild;
			}
			
		} else {
			div.innerHTML = html;
		}
		var nodes=div.childNodes;
		var result=[];
		for(var i=0,len=nodes.length;i<len;i++){
			result.push(nodes[i]);
		}
		return result;
	}
	
	function insert(element, insertions){
		element.appendChild(insertions);
		return element;
	}
	
	function update(element, content){
		element = $id(element);
		//此句为清除事件绑定
		$purge(element);
		//
		if (content && content.toElement) 
			content = content.toElement();
		if (isElement(content)) 
			return insert(update(element), content);
		content = toHTML(content);
		var tagName = element.tagName.toUpperCase();
		if (tagName === 'SCRIPT' && SCRIPT_ELEMENT_REJECTS_TEXTNODE_APPENDING) {
			element.text = content;
			return element;
		}
		if (ANY_INNERHTML_BUGGY) {
			if (tagName in tags) {
				while (element.firstChild) {
					element.removeChild(element.firstChild);
				}
				$each(_getContentFromAnonymousElement(tagName, stripScripts(content)), function(node){
					element.appendChild(node);
				});
			} else if (LINK_ELEMENT_INNERHTML_BUGGY && Object.prototype.toString.call(content) === "[object String]" && content.indexOf('<link') > -1) {
				while (element.firstChild) {
					element.removeChild(element.firstChild);
				}
				$each(_getContentFromAnonymousElement(tagName, stripScripts(content), true), function(node){
					element.appendChild(node)
				});
			} else {
				element.innerHTML = stripScripts(content);
			}
		} else {
			element.innerHTML = stripScripts(content);
		}
		return element;
	}
	return update;
})()
function $urlEncode(str){
	if(str && str.length){
		return escape(str).replace(/\+/g, '%2B').replace(/\"/g,'%22').replace(/\'/g, '%27').replace(/\//g,'%2F');
	}
	return "";
}
function $val(findstr){
	var objs=$$(findstr);
	var returnvar=[];
	for(var i=0;i<objs.length;i++){
		var t=objs[i];
		if(t.tagName.toLowerCase()=="input"){
			if((t.type.toLowerCase()=="checkbox" || t.type.toLowerCase()=="radio") ){	//设置单选复选框的值
				if(t.checked==true){
					returnvar.push(t.value);
				}
			}else{
				returnvar.push($$(t).val());
			}
		}else if(t.tagName.toLowerCase()=="select"){
			returnvar=returnvar.concat($$(t).val());
		}else{
			returnvar.push($$(t).val());
		}
	}
	returnvar=$$.grep(returnvar,function(n,i){return n!=null;});
	return returnvar;
}
function $validator() {
	$loadCss("http://static.paipaiimg.com/module/msg_tips.css");
	return {
		Require: /.+/,
		Email: /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
		Phone: /^(1[3584]\d{9})$|^(\d{3,4}\-)?\d{7,9}$|^\d{3,4}\-\d{3,9}\-\d{1,5}$/,
		Phone2: /^(\d{3,4}\-)?\d{7,9}(\-\d{1,5})?$/,
		Mobile: /^(1[3584]\d{9})$/,
		Url: /^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^<>\"\"])*$/,
		IdCard: "this.IsIdCard(value)",
		IdCardAuth: "this.IsIdCardAuth(value,getAttribute('date'))",
		ICBCard: /^((40000\d{14})|(95588\d{14})|(6222\d{15})|(\d{16}))$/,
		Currency: /^\d+(\.\d+)?$/,
		Number: /^\d+$/,
		Zip: /^[0-9]\d{5}$/,
		QQ: /^[1-9]\d{4,9}$/,
		Integer: /^[-\+]?\d+$/,
		Double: /^[-\+]?\d+(\.\d+)?$/,
		English: /^[A-Za-z]+$/,
		Chinese: /^[\u0391-\uFFE5]+$/,
		NameGB: /^[\u0391-\uFFE5]{2,}$/,
		NameENOrGB: /^[A-Za-z\u0391-\uFFE5][A-Z a-z\u0391-\uFFE5]*[A-Za-z\u0391-\uFFE5]$/,
		NameENOrGB1: /^[A-Za-z]{3,30}$/,
		variCode: /\w{4}/,
		Username: /^[a-z]\w{3,}$/i,
		UnSafe: /^(([A-Z]*|[a-z]*|\d*|[-_\~!@#\$%\^&\*\.\(\)\[\]\{\}<>\?\\\/\'\"]*)|.{0,5})$|\s/,
		IsSafe: function (str) {
			return !this.UnSafe.test(str);
		},
		SafeString: "this.IsSafe(value)",
		Filter: "this.DoFilter(value, getAttribute('accept'))",
		Limit: "this.limit(value.length,getAttribute('min'), getAttribute('max'))",
		LimitB: "this.limit(this.LenB(value), getAttribute('min'), getAttribute('max'))",
		Repeat: "value == document.getElementsByName(getAttribute('to'))[0].value",
		Range: "parseFloat(getAttribute('min')) <= parseFloat(value) && parseFloat(value) <= parseFloat(getAttribute('max'))",
		Compare: "this.compare(value,getAttribute('operator'),getAttribute('to'))",
		Custom: "this.Exec(value, getAttribute('regexp'))",
		Group: "this.MustChecked(getAttribute('name'), getAttribute('min'), getAttribute('max'))",
		Date: "this.IsDate(value, getAttribute('min'), getAttribute('format'))",
		ErrorItem: [document.forms[0]],
		ErrorMessage: ["温馨提示：由于以下可能原因，您需要调整输入信息。\t\t\t\t\n"],
		Validate: function (theForm, theItem) {
			var obj = theForm;
			var objItem;
			var count;
			this.ErrorMessage.length = 1;
			this.ErrorItem.length = 1;
			this.ErrorItem[0] = obj;

			count = theItem?1:obj.elements.length;

			for (var i = 0; i < count; i++) {
				objItem = theItem?theItem:obj.elements[i];
				with(objItem) {
					var _dataType = getAttribute("dataType");
					if (typeof(_dataType) == "object" || typeof(this[_dataType]) == "undefined")
						continue;
					this.ClearState(obj.elements[i]);
					if (getAttribute("checkwith") != null) {
						var _theObj = getAttribute("checkwith");
						var _unionObjs = document.getElementsByName(_theObj);
						var iIndex;
						if (_unionObjs.length > 0) {
							for (iIndex = 0; iIndex < _unionObjs.length; iIndex++) {
								if (value == "" && _unionObjs[iIndex].value != "")
									break;
							}
							if (iIndex < _unionObjs.length) {
								this.ShowMsg(name, " ", "message");
								setAttribute("require", "false", 0);
							}
						}
					}
					if (getAttribute("require") == "false" && value == "") {
						this.ShowMsg(name, " ", "hide");
						continue;
					}
					if (!this.Require.test(value)) {
						this.AddError(i, "必填项不能为空。");
						continue;
					}

					switch (_dataType) {
						case "Mobile":
							if (!this.Number.test(value))
								this.AddError(i, "请确认输入的是数字。");
							else if (value.length != 11)
								this.AddError(i, "您输入的手机号码位数不正确。");
							else if (!this.Mobile.test(value))
								this.AddError(i, "手机号码不正确。");
							else
								this.ShowMsg(name, "格式正确。", "hide");
							break;
						case "Phone":
							if (!this.Phone.test(value)) {
								this.AddError(i, "号码格式不正确。");
							} else {
								/^\d{7,9}$/.test(value)?this.AddError(i, "填写固话时需填写区号。"):this.ShowMsg(name, "格式正确。", "hide");
							}
							break;
						case "NameGB":
							if (!this.Chinese.test(value))
								this.AddError(i, "请输入中文合法字符。");
							else if (!this.NameGB.test(value))
								this.AddError(i, "请完整地输入您的中文姓名。");
							else
								this.ShowMsg(name, "格式正确。", getAttribute("show") == "" ? "message" : "hide");
							break;
						case "NameENOrGB":
							if (!eval(this.LimitB))
								this.AddError(i, "请输入“" + getAttribute('min') + "～" + getAttribute('max') + "个字符”（1个汉字为2个字符）。");
							else if (!this.NameENOrGB.test(value))
								this.AddError(i, "");
							else
								this.ShowMsg(name, "格式正确。", getAttribute("show") == "false" ? "hide" : "message");
							break;

						case "NameENOrGB1":
							var value1 = value.replace(/[^\x00-\xff]/g, "aa");
							if (!eval(this.LimitB))
								this.AddError(i, "请输入“" + getAttribute('min') + "～" + getAttribute('max') + "个字符”（1个汉字为2个字符）。");
							else if (!this.NameENOrGB1.test(value1))
								this.AddError(i, "");
							else
								this.ShowMsg(name, "格式正确。", getAttribute("show") == "false" ? "hide" : "message");
							break;

						case "LimitB":
							if (!eval(this.LimitB)) {
								var msg="请输入“" + getAttribute('min') + "～" + getAttribute('max') + "个字符”（1个汉字为2个字符）。";
								if(parseInt(getAttribute('min'))==parseInt(getAttribute('max'))) {
									msg="请输入“" + getAttribute('min') + "个字符”（1个汉字为2个字符）。";
								}
								this.AddError(i, msg);
							} else {
								this.ShowMsg(name, "格式正确。", getAttribute("show") == "false" ? "hide" : "message");
							}
							break;
						case "variCode":
							if (!this.variCode.test(value))
								this.AddError(i, "请输入4个字符。");
							else
								this.ShowMsg(name, "格式正确。", getAttribute("show") == "false" ? "hide" : "message");
							break;
						case "IdCard":
							if (value.length != 15 && value.length != 18)
								this.AddError(i, "您填写的身份证号码位数不正确。");
							else if (!eval(this.IdCard))
								this.AddError(i, "请输入符合身份证号码规范的数字和英文。");
							else
								this.ShowMsg(name, "格式正确。", getAttribute("show") == "false" ? "hide" : "message");
							break;
						case "IdCardAuth":
							if (value.length != 15 && value.length != 18)
								this.AddError(i, "您填写的身份证号码位数不正确。");
							else if (!eval(this.IdCard))
								this.AddError(i, "请输入符合身份证号码规范的数字和英文。");
							else if (!eval(this.IdCardAuth))
								this.AddError(i, "您还未满18岁，暂时不能提交身份证认证。");
							else
								this.ShowMsg(name, "格式正确。", getAttribute("show") == "false" ? "hide" : "message");
							break;
						case "Range":
							if (!this.Double.test(value)) {
								this.AddError(i, "请确认输入的是数字。");
							} else if (!eval(this[_dataType])) {
								this.AddError(i, "");
							} else {
								if (type == "text" || type == "file" || type == "password")
									this.ShowMsg(name, "格式正确。", getAttribute("show") == "false" ? "hide" : "message");
								else
									this.ShowMsg(name, "", "message");
							}
							break;

						case "Date":
						case "Repeat":
						case "Compare":
						case "Custom":
						case "Group":
						case "Limit":
						case "SafeString":
						case "Filter":
						case "ICBCCard":
							if (!eval(this[_dataType])) {
								this.AddError(i, "");
							} else {
								if (type == "text" || type == "file" || type == "password")
									this.ShowMsg(name, "格式正确。", getAttribute("show") == "false" ? "hide" : "message");
								else
									this.ShowMsg(name, "", getAttribute("show") == "false" ? "hide" : "message");
							}
							break;
						default:
							if (!this[_dataType].test(value)) {
								this.AddError(i, "格式不正确。");
							} else {
								if (type == "text")
									this.ShowMsg(name, "格式正确。", "hide");
								else
									this.ShowMsg(name, "", getAttribute("show") == "false" ? "hide" : "message");
							}
							break;
					}
				}
			}

			//总体处理验证显示
			if (this.ErrorMessage.length > 1) {
				var errCount = this.ErrorItem.length;
				//验证独个输入框的情况
				if (theItem) {
					//验证独个输入框的情况
					this.ShowMsg(theItem.name, this.ErrorMessage[i].replace(/\d+:/, "")+theItem.getAttribute("msg"));
				} else {
					//验证整个form的情况
					for (var i = 1; i < errCount; i++) {
						if(this.ErrorItem[i].getAttribute("require")=="true"||(this.ErrorItem[i].getAttribute("require")!="true"&&this.ErrorItem[i].value!='')) {
							this.ShowMsg(this.ErrorItem[i].name, this.ErrorMessage[i].replace(/\d+:/, "")+this.ErrorItem[i].getAttribute("msg"));
						}
					}
					//(this.ErrorItem[errCount - 1].type != "hidden")? this.ErrorItem[errCount - 1].focus():"";
					var theitem = this.ErrorItem[1];
					(theitem.type != "hidden")? setTimeout( function() {
						theitem.focus()
					},0):"";
				}
				return false;
			}
			return true;
		},
		//提示信息展示
		ShowMsg: function (name, msg, type) {
			var msgObj = $id(name + "_Msg") || $id(name + "Msg");
			var itemObj=$id(name);
			if(itemObj && !type) {
				if(itemObj.getAttribute("errorClean")=='on') {
					itemObj.value="";
				}
			}
			if (msgObj) {
				//如果require属性为false则隐藏提示区域
				if(type=="hide") {
					msgObj.style.display="none";
				} else {
					msgObj.style.display="";
				}

				if (!type) {
					type = "msg-para-warn warning_box";
					msg = '<span class="msg0-icon-warn"></span>'+msg;
				}
				if(type=="message") {
					type = "msg-para-right warning_box";
					msg = '<span class="msg0-icon-right"></span>'+msg;
				}
				msgObj.className = type;
				msgObj.innerHTML = msg;
			}
		},
		limit: function (len, min, max) {
			min = min || 0;
			max = max || Number.MAX_VALUE;
			return min <= len && len <= max;
		},
		LenB: function (str) {
			return str.replace(/[^\x00-\xff]/g, "**").length;
		},
		ClearState: function (elem) {
			with(elem) {
				style.color = "";
				style.borderColor = "";
				var lastNode = parentNode.childNodes[parentNode.childNodes.length - 1];
				if (lastNode.id == "__ErrorMessagePanel")
					parentNode.removeChild(lastNode);
			}
		},
		AddError: function (index, str) {
			this.ErrorItem[this.ErrorItem.length] = this.ErrorItem[0].elements[index];
			this.ErrorMessage[this.ErrorMessage.length] = this.ErrorMessage.length + ":" + str;
		},
		Exec: function (op, reg) {
			return new RegExp(reg,"g").test(op);
		},
		compare: function (op1, operator, op2) {
			switch (operator) {
				case "NotEqual":
					return (op1 != op2);
				case "GreaterThan":
					return (op1 > op2);
				case "GreaterThanEqual":
					return (op1 >= op2);
				case "LessThan":
					return (op1 < op2);
				case "LessThanEqual":
					return (op1 <= op2);
				default:
					return (op1 == op2);
			}
		},
		MustChecked: function (name, min, max) {
			var groups = document.getElementsByName(name);
			var hasChecked = 0;
			min = min || 1;
			max = max || groups.length;
			for (var i = groups.length - 1; i >= 0; i--)
				if (groups[i].checked)
					hasChecked++;
			return min <= hasChecked && hasChecked <= max;
		},
		DoFilter: function (input, filter) {
			exp_str1 = filter.split(",").join("|");
			exp_str2 = exp_str1.replace(/\s+/g, "");
			return new RegExp("^.+\.(?=EXT)(EXT)$".replace(/EXT/g, exp_str2), "gi").test(input);
		},
		IsIdCard: function (number) {
			var date, Ai;
			var verify = "10x98765432";
			var verify2 = "10x98765432";
			var Wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];
			var area = ['', '', '', '', '', '', '', '', '', '', '', '北京', '天津', '河北', '山西', '内蒙古', '', '', '', '', '', '辽宁', '吉林', '黑龙江', '', '', '', '', '', '', '', '上海', '江苏', '浙江', '安微', '福建', '江西', '山东', '', '', '', '河南', '湖北', '湖南', '广东', '广西', '海南', '', '', '', '重庆', '四川', '贵州', '云南', '西藏', '', '', '', '', '', '', '陕西', '甘肃', '青海', '宁夏', '新疆', '', '', '', '', '', '台湾', '', '', '', '', '', '', '', '', '', '香港', '澳门', '', '', '', '', '', '', '', '', '国外'];
			var re = number.match(/^(\d{2})\d{4}(((\d{2})(\d{2})(\d{2})(\d{3}))|((\d{4})(\d{2})(\d{2})(\d{3}[x\d])))$/i);
			if (re == null)
				return false;
			if (re[1] >= area.length || area[re[1]] == "")
				return false;
			if (re[2].length == 12) {
				Ai = number.substr(0, 17);
				date = [re[9], re[10], re[11]].join("-");
			} else {
				Ai = number.substr(0, 6) + "19" + number.substr(6);
				date = ["19" + re[4], re[5], re[6]].join("-");
			}
			if (!this.IsDate(date, "ymd"))
				return false;
			var sum = 0;
			for (var i = 0; i <= 16; i++) {
				sum += Ai.charAt(i) * Wi[i];
			}
			Ai += verify.charAt(sum % 11);
			return (number.length == 15 || number.length == 18 && number.toLowerCase() == Ai);
		},
		IsIdCardAuth: function (number, svrTime) {
			var date, datetime, nowtime;
			var re = number.match(/^(\d{2})\d{4}(((\d{2})(\d{2})(\d{2})(\d{3}))|((\d{4})(\d{2})(\d{2})(\d{3}[x\d])))$/i);
			if (re[2].length == 12) {
				Ai = number.substr(0, 17);
				date = [re[9], re[10], re[11]].join("-");
				if (!this.IsDate(date, "ymd"))
					return false;
				datetime = new Date(parseInt(re[9], 10), parseInt(re[10], 10) - 1, parseInt(re[11], 10), 0, 0, 0, 0);
			} else {
				Ai = number.substr(0, 6) + "19" + number.substr(6);
				date = ["19" + re[4], re[5], re[6]].join("-");
				if (!this.IsDate(date, "ymd"))
					return false;
				datetime = new Date(parseInt("19" + re[4], 10), parseInt(re[5], 10) - 1, parseInt(re[6], 10), 0, 0, 0, 0);
			}
			var nowtime = new Date();
			var timeCompare;
			if (svrTime)
				timeCompare = svrTime * 1000;
			else
				timeCompare = nowtime.getTime();
			if ((timeCompare - datetime.getTime()) < (18 * 3600 * 24 * 365 * 1000 + 4 * 24 * 3600 * 1000))
				return false;
			else
				return true;
		},
		IsDate: function (op, formatString) {
			formatString = formatString || "ymd";
			var m, year, month, day;
			switch (formatString) {
				case "ymd":
					m = op.match(new RegExp("^((\\d{4})|(\\d{2}))([-./])(\\d{1,2})\\4(\\d{1,2})$"));
					if (m == null)
						return false;
					day = m[6];
					month = m[5] * 1;
					year = (m[2].length == 4) ? m[2] : GetFullYear(parseInt(m[3], 10));
					break;
				case "dmy":
					m = op.match(new RegExp("^(\\d{1,2})([-./])(\\d{1,2})\\2((\\d{4})|(\\d{2}))$"));
					if (m == null)
						return false;
					day = m[1];
					month = m[3] * 1;
					year = (m[5].length == 4) ? m[5] : GetFullYear(parseInt(m[6], 10));
					break;
				default:
					break;
			}
			if (!parseInt(month))
				return false;
			month = month == 0 ? 12 : month;
			var date = new Date(year, month - 1, day);
			return (typeof(date) == "object" && year == date.getFullYear() && month == (date.getMonth() + 1) && day == date.getDate());

			function GetFullYear(y) {
				return ((y < 30 ? "20" : "19") + y) | 0;
			}

		}
	}
}
function $wordMiddle(){
	//进行字符长度验证，如果超过长度则返回截断后的字符串
	var pt=$option({
			'words':'',
			'sLen':0,
			'eLen':0,
			'cn':false,
			'flag':'…'
		},arguments[0]),
		len=pt.sLen+pt.eLen,
		wLen=pt.words.length;
    if(pt.cn){
    	var escapeWords=pt.words.replace(/@/g,'a').replace(/-/g,'e').replace(/[\u00FF-\uFFFF]/g,"@-"),
			totalWords =escapeWords.length;
        if(totalWords > len){
            var sw = escapeWords.substr(0,pt.sLen),
            	ew = escapeWords.substr(totalWords-pt.eLen,pt.eLen),
            	sm = sw.match(/@-/g),
            	em = ew.match(/@-/g),
            	swLen = sm?sm.length:0,
            	ewLen = em?em.length:0;
            if(sw.charAt(sw.length - 1) === '@'){
                swLen += 1;
            };
            if(ew.charAt(0) === '-'){
                ewLen += 1;
            };
            return pt.words.substr(0,pt.sLen-swLen)+pt.flag+pt.words.substr(wLen-(pt.eLen-ewLen),pt.eLen-ewLen);
        }
        
        return pt.words;
    }else{
        return wLen>len?pt.words.substr(0,pt.sLen)+pt.flag+pt.words.substr(wLen-pt.eLen,pt.eLen):pt.words;
    }
}
function $wordRestrict(words,len,cnStrict,flag){
//进行字符长度验证，如果超过长度则返回截断后的字符串
	if(cnStrict){
        var escapeWords = words.replace(/[\u00FF-\uFFFF]/g, "@-");
		var totalWords = escapeWords.length;
		if(totalWords > len){
			var enw = escapeWords.substr(0,len);
			var sublen = enw.match(/@-/g)?enw.match(/@-/g).length:0;
			if(escapeWords.substring(totalWords - 2,totalWords) === '@-' && enw.charAt(enw.length - 1) === '@'){
				sublen += 1;
			}
            var flag=flag||"";
			return words.substring(0, len-sublen)+flag;
		}
		return words;
	}else{
		return words.length>len?words.substring(0,len):words;
	}
}
function $xhrMaker(){
	var xhr;
	try{// Firefox, Opera 8.0+, Safari
		xhr=new XMLHttpRequest();
	}catch(e){//Internet Explorer
		try{
			xhr=new ActiveXObject("Msxml2.XMLHTTP");
		}catch(e){
			try {
				xhr=new ActiveXObject("Microsoft.XMLHTTP");
			}catch (e){
				xhr=null;
			}
		}
	};
	return xhr;
}
function $xmlHttpLoader(){
//创建xmlHttpRequest对象
	var cJ=null,i;
	if(window.fO){
		i=window.fO;
	}else{
		i=1;
	}
	do{
		try{
			switch(i){
				case 1:cJ=new ActiveXObject("Msxml2.XMLHTTP.4.0");
				break;
				case 2:cJ=new ActiveXObject("Msxml2.XMLHTTP");
				break;
				case 3:cJ=new ActiveXObject("Microsoft.XMLHTTP");
				break;
				case 4:cJ=new XMLHttpRequest();
				break;
				default:alert("很抱歉，您浏览器的ActiveX控件目前被设置为禁用，请修改浏览器的相关选项.");return null;
				break;
			}
		}catch(e){
		}
		if(cJ==null){
			i++;
		}else{
			window.fO=i;
			return cJ;
		}
	}
	while(true);
	return null;
}
function $xmlPage(option){
	var opt = {
		dataUrl:"",			//数据源路径
        template:'',			//模板内容
        contentId:"",		//jquery语法表示的用于显示商品列表的dom id
        page:false,			//是否显示分页
        pageId:"",			//jquery语法表示的用于显示分页控制条的dom id
        pageType:"simple",	//分页显示的类型
        pTag:"",				//ptag标记
        firstPageId:1,		//默认显示第几页
        showLength:0,	//只显示列表中的几个，如果为0的时候，显示所有
        startNum:0,		//从第几个开始
        onShowed:$empty(),
        //组件内部运行数据
        data:[],				//存储数据值
        currentPage:1,	//要显示的页面
        pageCount:0,		//数据的总页数
        itemCount:0,		//数据总条数
        actionId:0,			//操作id
        content:"",			//显示列表对象
        pageBar:""			//显示分页列表对象
	};
	$extend(opt,option);
	opt.content = $$(opt.contentId);
	opt.pageBar = $$(opt.pageId);
	getXml(opt);
	
	function getXml(opt){
		//显示loading状态
		var hc='<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0"><tr><td align="center" valign="middle" style="font-size:13px; color:#333333; text-align:center;vertical-align: middle; " width="100%" height="100%"><img src="http://static.paipaiimg.com/assets/common/loading2.gif" /><br />数据加载中……</td></tr></table>';
		opt.content.html(hc);
		$ajax({
			method:'get',
			url:opt.dataUrl,
                        type:'xml',
			onSuccess :function(data){
				var itemList = data.getElementsByTagName('item');
				opt.itemCount = itemList.length;
				opt.pageCount = parseInt(opt.itemCount/opt.showLength) + ((opt.itemCount % opt.showLength>0) ? 1 : 0) ;	
				var page = [];
				for ( var i = 0 , len = opt.itemCount; i < len ; i++)
				{
					page.push(itemList[i])
					if ( (i+1) % opt.showLength == 0)
					{
						opt.data.push( page );
						page = [];
					}
				}
				showXml(opt);
			},
			onError:function(da,b,er){
			}
		});
	}
	function showXml(opt){
		if (!opt.data[opt.currentPage-1]) return;
		var list = opt.data[opt.currentPage-1];
		var html = [];
		for(var i = 0, len = list.length; i < len; i++)
		{
            var itemInfo={};
            for(var j=0;j<list[i].attributes.length;j++)
			{
                itemInfo[list[i].attributes[j].name]=list[i].attributes[j].value;
            }
            var valueNodes=$$(list[i]).children();
            for(var j=0;j<valueNodes.length;j++)
			{
                itemInfo[valueNodes[j].nodeName]=valueNodes[j].firstChild?valueNodes[j].firstChild.nodeValue:"";
            };
			
			html.push( $json2temp( itemInfo, opt.template ));
		}
		opt.content.html( html.join("") );
		
		$page({
			pageCount:opt.pageCount,    //总页码
			currentPage:opt.currentPage,    //当前页码
			domList:[opt.pageBar],        //内容输出区域的id列表，jquery语法
			type:opt.pageType,
			action:'func',
			func:function(pid){
				opt.currentPage = pid;
				showXml(opt);
			}
		});
	}
}
function $xss(str,type){
	//空过滤
	if(!str){
		return str===0 ? "0" : "";
	}
	
	switch(type){
		case "none": //过度方案
			return str+"";
		break;
		case "html": //过滤html字符串中的XSS
			return str.replace(/[&'"<>\/\\\-\x00-\x09\x0b-\x0c\x1f\x80-\xff]/g, function(r){
				return "&#" + r.charCodeAt(0) + ";"
			}).replace(/ /g, "&nbsp;").replace(/\r\n/g, "<br />").replace(/\n/g,"<br />").replace(/\r/g,"<br />");
		break;
		case "htmlEp": //过滤DOM节点属性中的XSS
			return str.replace(/[&'"<>\/\\\-\x00-\x1f\x80-\xff]/g, function(r){
				return "&#" + r.charCodeAt(0) + ";"
			});
		break;
		case "url": //过滤url
			return escape(str).replace(/\+/g, "%2B");
		break;
		case "miniUrl":
			return str.replace(/%/g, "%25");
		break;
		case "script":
			return str.replace(/[\\"']/g, function(r){
				return "\\" + r;
			}).replace(/%/g, "\\x25").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\x01/g, "\\x01");
		break;
		case "reg":
			return str.replace(/[\\\^\$\*\+\?\{\}\.\(\)\[\]]/g, function(a){
				return "\\" + a;
			});
		break;
		default:
			return escape(str).replace(/[&'"<>\/\\\-\x00-\x09\x0b-\x0c\x1f\x80-\xff]/g, function(r){
				return "&#" + r.charCodeAt(0) + ";"
			}).replace(/ /g, "&nbsp;").replace(/\r\n/g, "<br />").replace(/\n/g,"<br />").replace(/\r/g,"<br />");
		break;
	}
}
function $3cShopClassList(uin,domId,classList,expand){
//3c数码商家自定义列表模块
	var target=$id(domId);
	var hc=[];
	var ps=20;
	if(classList&&classList.length>0){
		//展示左侧分类列表
		for(var i=0;i<classList.length;i++){
			var item=classList[i];
			hc.push('<li id="classList_'+item.classId+'">');
			var url="http://auction1.3c.paipai.com/itemlistbycustomclass.xhtml?pageType=0&uin="+uin+"&classid="+item.classId+"&pageSize="+ps;
			if(item.childrenList.length>0){
				hc.push('<p class="txt2p"><span class="iconarrowright"></span><a href="'+url+'" class="f0">'+item.className+'</a></p>');
				hc.push('<ul style="display:none;">');
				for(var j=0;j<item.childrenList.length;j++){
					var item2=item.childrenList[j];
					var url2="http://auction1.3c.paipai.com/itemlistbycustomclass.xhtml?pageType=0&uin="+uin+"&classid="+item2.classId+"&pageSize="+ps;
					hc.push('<li id="classList_'+item2.classId+'"><span class="ffst">·</span><a href="'+url2+'" class="f0">'+item2.className+'</a></li>');
				}
				hc.push('</ul>');
			}else{
				hc.push('<p class="txt2p"><span class="square"></span><a href="'+url+'" class="f0">'+item.className+'</a></p>');
			}
			hc.push('<p class="height1dotted"></p>');
			hc.push('</li>');
		}
	}else{
		hc.push('无类目');
		target.className='nodata';
	}
	target.innerHTML=hc.join('');
	//列表展开折叠交互
	var list=$$('#'+domId+'>li');
	for(var i=0;i<list.length;i++){
		(function(li,expand){
			var listItem=$$(li);
			var ul=listItem.find('>ul');
			if(ul.length>0){
				var span=listItem.find('>p>span');
				span.click(function(){
					if(ul.css('display')=='none'){
						//listItem.find('p').addClass('current');
						span.addClass('iconarrowdown').removeClass('iconarrowright');
						ul.show();
					}else{
						//listItem.find('p').removeClass('current');
						span.removeClass('iconarrowdown').addClass('iconarrowright');
						ul.hide();
					}
				});
				if(expand)span.click();
			}
		})(list[i],expand);
	}
}
function $activeRaffle(obj){
	var option = {
		g_sActive : "", //活动ID
		code : "", //拍拍CDKEY ,为空则调用接口 cxpl_drawing，非空调用接口cxpl_codedrawing
		deadId : "", //订单号，为空则按QQ号，非空按订单号
		level : "", //兑奖奖品等级，是否兑奖，取决于活动ID，兑奖时必须非空，抽奖时空和非空均可
		startFuc : null,//抽奖前调用函数
		endFuc : null,//抽奖后调用函数,return false,则终止后续预定代码执行
		lvl_text:[] //说明文字
	};
	
	for(var i in obj){
		option[i] = obj[i];
	}
	
	var aId = option.g_sActive;
	if(!aId) return $float({ title: "温馨提示", html: "未配置活动id！" });
	
	var codeStr = option.code?("&code=" + option.code) : "",  //拍拍CDKEY
		deadIdStr = option.deadId?("&deal_id=" + option.deadId) : "", //订单号
		levelStr = option.level?("&level=" + option.level) : "", //兑奖奖品等级
		cgiStr = codeStr ? "cxpl_codedrawing?active=" : "cxpl_drawing?active=", //根据拍拍CDKEY判断调用的CGI
		//组装url
		temp = ["http://party.paipai.com/cgi-bin/",cgiStr,aId,codeStr,deadIdStr,levelStr,"&t=",Math.random()],		
		url =  temp.join("");
	
	//抽奖结果反馈	
	window.AfterRaffle = function (a, b, c) {
		doAfterRaffle(a, b, c);
	};
	
	//抽奖前调用函数
	function startFuc(){
		var f = option["startFuc"];
		if(typeof(f) == "function"){
			f();
		}
	}
	
	//抽奖后调用函数
	function endFuc(l, r){
		var f = option["endFuc"];
		if(typeof(f) == "function"){
			var re = f(l, r);
			if(re!==false){//传入的函数return false,则终止后续预定代码执行
				$float({
					title: "温馨提示",
					html: r
				});
			}
		}else{
			$float({
				title: "温馨提示",
				html: r
			});
		}
	}
		
	//抽奖登陆超时
	window.showpaipailogin = function () {
		$loginFrame({
			model: false,
			type: "func",
			check: false,
			action: function () {			
				startFuc();//抽奖前调用函数
				//发抽奖请求,期待回调AfterRaffle、showpaipailogin
				$loadScript(url);
			}
		});
	};
	
	$loginFrame({
		model: false,
		type: 'func',
		check: true,
		action: function () {	
			startFuc();//抽奖前调用函数		
			//发抽奖请求,期待回调AfterRaffle、showpaipailogin
			$loadScript(url);
		}
	});
	
	//抽奖后的提示信息
	function doAfterRaffle(err,lvl,prizename){
		var lvlText = option.lvl_text||window.lvl_text,
			lvlText2 = window.lvl_text2 || lvlText,
			lvlEnd = window.lv_end || "本活动已结束，感谢您的关注！";
		//没有定义获奖信息
		if (!lvlText) return $float({title: "温馨提示",html: err});
		
		//系统返回错误信息模版
		var smsg = window.activeErrMsg_text || ["对不起，活动尚未开始。", //1活动未开始
		        "对不起，活动已结束。", //2活动已结束
		        "对不起，您暂时不能参与该活动，详细情况请联系拍拍客服。", //3买家正受处罚
		        "对不起，服务器繁忙，请稍后再试。", //4没法调用查询订单接口系统
		        "对不起，请输入正确的订单号。", //5订单号为空
		        "对不起，您输入的订单号无效。", //6查询不到订单信息
		        "对不起，您输入的订单号无效。", //7修改了订单时间
		        "对不起，您的订单付款金额不满足活动要求，不能参与本活动。", //8订单金额是否满足活动要求
		        "对不起，您的订单中商品不属于本活动指定类目，详情请参看活动规则！", //9订单类目不满足活动要求
		        "对不起，该订单没有完成财付通付款，不能使用该订单", //10订单没有完成付款
		        "对不起，当前订单支付方式不支持此次活动，详情请参看活动规则！", //11订单不是通过财付通付款
		        "对不起，您不是该订单的买家，不能使用该订单", //12兑奖用户不是订单买家
		        "对不起，您的订单卖家不满足活动要求，不能参与活动，详情请参看活动规则！", //13卖家不满足活动要求
		        "对不起，您的订单不是在指定的时间内完成付款，不能参与活动。", //14订单没有在指定时间内完成付款
		        "对不起，当日订单仅限当天参加活动，当晚24：00订单失效，详情请参看活动规则。", //15订单不是在当日付款
		        "对不起，您的信用等级不满足活动要求，不能参与活动。", //16买家信用不满足活动要求
		        "对不起，您尚未开通彩钻，不能参与活动。", //17买家没开通彩钻
		        "对不起，您的彩钻等级不满足活动要求，不能参与活动。", //18用户彩钻等级不满足活动要求
		        "对不起，您尚未选择奖品等级。", //19用户未选择兑奖/抽奖的等级
		        "对不起，该奖池暂无该奖品，请稍后再试。", //20（某等级）奖品已经兑、抽完
		        "对不起，今日奖品已发放完，请稍后再试。", //21（某等级）当日奖品已经兑、抽完
		        "对不起，本时段的奖品已发放完，请稍后再试。", //22（某等级）当小时奖品已经兑、抽完
		        "对不起，您在本活动中的参与次数已达到上限。", //23已达到活动指定的兑、抽奖上限
		        "对不起，您在本活动中单日的参与次数已达到上限。", //24已达到活动单日指定的兑、抽奖上限
		        "对不起，您兑换该奖品次数已达到上限", //25兑换某等级奖品次数已达到上限
		        "对不起，该订单已经参与过拍拍网活动了。", //26订单重复使用
		        "对不起，该QQ号码已经参与过拍拍网活动了。", //27QQ号码重复使用
		        "对不起，您在本活动中兑换次数已达到上限！", //28兑奖次数达到上限
		        "对不起，您在本活动的中奖次数已达到上限！", //29中奖次数已达到上限
		        "对不起，您不是非彩钻点亮用户, 不能参与活动。" //30中奖次数已达到上限
		   ],
		   umsg =  window.user_text || smsg,
		   len = err.length;
		   
		
		//抽奖结果反馈
		if (len > 0 && err.indexOf("自动发奖") < 0) {
		//根据抽奖接口返回的信息同系统标准提示和运营自定义提示做匹配，返回正确提示		
			for (var i = 0, index = -1, j = smsg.length; i < j; i++) {
				if (smsg[i] == err) {
					index = i;
					break;
				}
			}
			var errStr = ((index >= 0) && umsg[index]) ? umsg[index] : err;
			endFuc('error', errStr);
		}else if (len > 0 && err.indexOf("自动发奖失败") >= 0) {
			var errStr = lvlText2[lvl] || lvlEnd;	
			endFuc('error', errStr);	
		}else {
			var result = lvlText[lvl] || lvlEnd;
			endFuc(lvl, result);
		}
	}
}
function $activeRaffleByOrderId(startFun, resultFun, level, kind, value) {
	//按照订单号码参与抽奖活动
    if (!window.g_sActive) {
        return $float({
            title: "温馨提示",
            html: "该活动没有配置活动ID。"
        });
    };
    var oDeal = $$("[tag='deal_id']") || $$("#deal_id"),
		kind = kind * 1,
		val = value?value.replace(/^ | $/g, ""):"";
    oDeal.val(val);
    if (val == "" || val.indexOf("请") != -1) {
        var msg = val == "" ? "请输入信息" : val;
        $float({
            title: "温馨提示",
            html: msg
        });
        oDeal.focus();
        return;
    };
    var url = "http://party.paipai.com/cgi-bin/" + (kind != 1 ? "cxpl_drawing?active=" + window.g_sActive + "&deal_id=" : "cxpl_codedrawing?active=" + window.g_sActive + "&code=") + val + "&level=" + level+"&t="+Math.random();
    //启动前处理
    if (startFun) {      startFun();   }
    else {
        //判断登陆并发起抽奖请求
        $loginFrame({
            type: "func",
            action: function () {
                //PP.market.base.initLoginState();
                $loadScript(url);
            }
        });
    }
    //抽奖结果反馈
    window.AfterRaffle = function (a, b, c) {
        $showActiveEnd(a, b, c, resultFun)
    };
    //抽奖登陆超时
    window.showpaipailogin = function () {
        $loginFrame({
            type: "func",
            check: false,
            action: function () {
                $loadScript(url);
            }
        });
    };
}
function $activeRaffleByQQ(startFun, resultFun, level) {
    //按QQ号码抽奖活动。
    if (!window.g_sActive) {
        return $float({ title: "温馨提示", html: "未配置活动id！" });
    }
    window.activelevel = level;
    //抽奖结果反馈
    window.AfterRaffle = function (a, b, c) {
        $showActiveEnd(a, b, c, resultFun)
    };
    //抽奖登陆超时
    window.showpaipailogin = function () {
        $loginFrame({
            model: false,
            type: "func",
            check: false,
            action: function () {
                PP.market.base.initLoginState();
                var levelStr = window.activelevel ? ("&level=" + window.activelevel) : ""
                //发抽奖请求,期待回调AfterRaffle、doAfterLogin、showpaipailogin
                $loadScript("http://party.paipai.com/cgi-bin/cxpl_drawing?active=" + window.g_sActive + levelStr);
            }
        });
    };
    //判断登陆并发起抽奖请求
    if (!$isLogin()) { //判断登录
        $loginFrame({
            model: false,
            type: 'func',
            check: false,
            action: function () {
                PP.market.base.initLoginState();
                var levelStr = window.activelevel ? ("&level=" + window.activelevel) : ""
                //发抽奖请求,期待回调AfterRaffle、showpaipailogin
                $loadScript("http://party.paipai.com/cgi-bin/cxpl_drawing?active=" + window.g_sActive + levelStr);
            }
        });
    } else {
        var levelStr = window.activelevel ? ("&level=" + window.activelevel) : ""
        //发抽奖请求,期待回调AfterRaffle、showpaipailogin
        $loadScript("http://party.paipai.com/cgi-bin/cxpl_drawing?active=" + window.g_sActive + levelStr);
    }
}
function $addCartBBC(opt) {
	$loadCss("http://static.gtimg.com/css/core/addCartBBC.css?t=20111111.css");
	$loadScript({
		url:'http://order.buy.qq.com/cgi-bin/shopcart/addcmdy?callback=addCartCallback&t=' + Math.random()+"&"+$makeUrl(opt),
		charset:'utf-8'
	});
		
	window.addCartCallback=function(obj){
		if(obj.retCode==0){
		$float({
				html:'<div class="layer_common layer_add_buycart" id="addCartBBC">\
				    <div class="layer_inner">\
				        <div class="hd">\
				            <span class="close"><a href="#h" id="addCartBBCClose" wgtag="3000.2.1.3">×</a></span>\
				        </div>\
				        <div class="bd">\
				            <i class="icon_tips_32 icon_32_right"></i>\
				            <div class="tips_cont">\
				                <h4 >添加成功！</h4>\
				                <p >购物车总共'+obj.data.totalCount+'件商品，商品合计 <span class="price co_red">&yen;'+(obj.data.totalPrix/100).toFixed(2)+'</span></p>\
				                <div class="tips_cont_btn">\
				                    <a href="http://order.buy.qq.com/cgi-bin/shopcart/view" target="_blank" class="mod_btn mod_btn_red"><i class="bod_left"></i><span class="inner" wgtag="3000.2.1.1">去购物车结算</span><i class="bod_right"></i></a>\
				                    <a  href="#h" id="addCartBBCNext" class="link_blue" wgtag="3000.2.1.2">再逛逛</a>\
				                </div>\
				            </div>\
				        </div>\
				        <span class="arrow_wrap"><i class="arrow_outter">◆</i><i class="arrow_inner">◆</i></span>\
				    </div>\
				</div>',
		        width:'470',
		        height:"160",
		        style:"none",    //stand\none\poptip
		        left :opt.left,
        		top :opt.top,
		        cover:false,
		        closeId:"addCartBBCClose,addCartBBCNext"
		    });
		    $setCookie("shopcartCount",obj.data.totalCount,0,"/","qq.com");
		    $id("shopcart") && BBC && BBC.head && BBC.head.setGoodsNum();
		}else if(obj.retCode>0){
			$float({
			 	html:'	<div class="mod_layer_light" id="addCartBBCFail">\
						    <div class="inner">\
						        <a href="#h" class="close" id="addCartBBCClose" wgtag="3000.2.2.2">×</a>\
						        <div class="bd">\
						            <i class="icon_tips_32 icon_32_error">&nbsp;</i>\
						            <div class="tips_cont">'+obj.msg+'</div>\
						        </div>\
						    </div>\
						</div>',
		        width:'248',
		        height:"80",
		        style:"none",    //stand\none\poptip
		        left :opt.left,
        		top :opt.top,
		        cover:false,
		        closeId:"addCartBBCClose"
		    });
		}
	}
}
function cbAddCommentDone (resp) {
	if (resp.errCode == 0) {
		addCommentMsgbox('right', "评论成功！");
	} else {
		addCommentMsgbox('error', "评论失败！");
	}
	$$.dataStore['allcmt'] = [];
	loadCommentOverview();
	loadCommentPage(0);
}

function addCommentMsgbox(type, msg) {
	$float({
		html: ['<div class="mod_layer_light"><div class="inner">',
			'<a href="javascript:void(0);" class="close" id="addCommentMsgboxClose">×</a><div class="bd">',
			'<i class="icon_tips_32 icon_32_', type, '">&nbsp;</i><div class="tips_cont">', msg, '</div>',
			'</div></div></div>'].join(''),
		width: 240,
		height: 75,
		style: 'none',
		cover: false,
		closeId: 'addCommentMsgboxClose'
	});

	// 5秒钟后自动关闭
	setTimeout(function () {$$('#addCommentMsgboxClose').click();}, 5000);
};


function submitCommentForm() {
	if ($$('#addCommentTextarea').val().length < 1) {
		alert('请输入评论！');
		return false;
	}
	if ($$('#addCommentTextarea').val().length > 100) {
		alert('评论不能超过100个字！');
		return false;
	}
	document.addCommentForm.submit();
}

function $addComment(o) {
	var opts = {
		width: 470,
		height: 160,
		style: 'none',
		cover: true,
		spuid: 0,
		uin: 0,
		score: 5,
		anonymous: 0,
		nickName: '',
		content: '',
		callback: $$.noop // 一般用于强制刷新页面数据
	};
	for (var key in o) {
		opts[key] = o[key];
	}

	document.domain = 'qq.com';

	// 添加评论，进来先判断是否有资格
	if (opts.uin) {
		$float({
			html: [
			'<div style="left:50%;margin-left:-225px; " class="layer_common">',
			'	<div class="layer_inner">',
			'		<div class="hd">',
			'			<h3>评论商品</h3>',
			'			<span class="close"><a href="javascript:void(0);" id="addCommentLayerX">×</a></span>',
			'		</div>',
			'		<div class="bd"><form method="post" name="addCommentForm" action="/json.php?mod=comment&act=add&callback=cbAddCommentDone&fmt=1" target="addCommentIframe">',
			'			<div class="layer_cmt_row">',
			'				<div class="col_left">评分：</div>',
			'				<div class="col_right">',
			'					<div class="wg_rate wg_rate_default_5" current="5" id="addComment_rating_bar">',
            '            <a href="javascript:void(0);" title="很不喜欢" class="wg_rate_1" rel="1">1分</a>',
            '            <a href="javascript:void(0);" title="不喜欢" class="wg_rate_2" rel="2">2分</a>',
            '            <a href="javascript:void(0);" title="一般" class="wg_rate_3" rel="3">3分</a>',
            '            <a href="javascript:void(0);" title="喜欢" class="wg_rate_4" rel="4">4分</a>',
            '            <a href="javascript:void(0);" title="很喜欢" class="wg_rate_5" rel="5">5分</a>',
            '        </div>',
            '        <span class="wg_rate_desp">很喜欢</span>',
			'				</div>',
			'			</div>',
			'			<div class="layer_cmt_row">',
			'				<div class="col_left">评论：</div>',
			'				<div class="col_right">',
			'					<textarea name="content" id="addCommentTextarea"><\/textarea>',
			'					<input type="hidden" name="uin" value="', opts.uin,'"/>',
			'					<input type="hidden" name="spuid" value="', opts.spuid,'"/>',
			'					<input type="hidden" name="score" value="5"/>',
			'					<input type="hidden" name="domain" id="addCommentDomain" value="qq.com"/>',
			'					<input type="hidden" name="nickName" value="', opts.nickName,'"/>',
			'				</div>',
			'			</div>',
			'			<div class="layer_cmt_row layer_cmt_row_btn">',
			'				<div class="col_left">&nbsp;</div>',
			'				<div class="col_right">',
			'					<span class="layer_cmt_status">0/100</span>',
			'					<a href="javascript:void(0);" onclick="submitCommentForm();" class="mod_btn mod_btn_red"><i class="bod_left"></i><span class="inner">评论</span><i class="bod_right"></i></a>',
			'					<label class="chkbox_wrap"><input type="checkbox" name="anonymous" value="1"/> 匿名发表</label>',
			'				</div>',
			'			</div></form>',
			'		</div>',
			'	</div>',
			'</div><iframe name="addCommentIframe" style="display:none"></iframe>'].join(''),
			width: opts.width,
			height: opts.height,
			style: opts.style,
			cover: opts.cover,
			closeId: 'addCommentLayerX'
		});

		// 评论星星效果
		$$('.wg_rate').bind('mouseenter', function () {
			$$(this).removeClass('wg_rate_default_'+$$(this).attr('current'));
		}).bind('mouseleave', function () {
			var star = parseInt($$(this).attr('current'), 10);
			if (star > 5 || star < 1) star = 5;
			$$(this).addClass('wg_rate_default_'+star);

			var starname = ['', '很不喜欢', '不喜欢', '一般', '喜欢', '很喜欢'];
			$$('.wg_rate_desp').html(starname[star]);
		});
		$$('.wg_rate a').bind('mouseenter', function() {
			$$('.wg_rate_desp').html($$(this).attr('title'));
		}).bind('click', function () {
			var score = $$(this).attr('rel');
			document.addCommentForm.score.value = score;
			$$(this).parent().attr('current', score);
		});

		// 评论字数实时显示
		$$('#addCommentTextarea').bind('keyup', function(e) {
			var len = $$(this).val().length;
			var hint = len + '/100';
			$$('.layer_cmt_status').html(len > 100 ? '<b style="color:red">'+hint+"</b>" : hint);
		});
	} else {
		$float({
			html: ['<div style="left:50%; margin-left:-225px; " class="layer_common">',
			'	<div class="layer_inner">',
			'		<div class="hd">',
			'			<h3>评论商品</h3>',
			'			<span class="close"><a href="javascript:void(0);" id="addCommentLayerClose">×</a></span>',
			'		</div>',
			'		<div class="bd">',
			'			<i class="icon_tips_32 icon_32_error"></i>',
			'			<div class="tips_cont">',
			'				<h4 >暂不能评论！</h4>',
			'				<p >只有在QQ网购购买过并且还未评论过的用户才能进行评论，去看看其他用户的评论把。</p>',
			'				<div class="tips_cont_btn">',
			'					<a href="javascript:void(0);" id="addCommentLayerOK" class="mod_btn mod_btn_red"><i class="bod_left"></i><span class="inner">我知道了</span><i class="bod_right"></i></a>',
			'				</div>',
			'			</div>',
			'		</div>',
			'	</div>',
			'</div>'].join(''),
			width: opts.width,
			height: opts.height,
			style: opts.style,
			cover: opts.cover,
			closeId: 'addCommentLayerClose,addCommentLayerOK'
		});
	}
}
function $addFavoriteFC(opt) {
	$loadCss("http://static.gtimg.com/css/center_extra_layer.css");
	$loadScript("http://buy.qq.com/recommend/js/wgtag.js");
	$loadScript("http://pingjs.qq.com/tcss.ping.js");
	
	window.url_favorite_additem = 'http://favorite.buy.qq.com/json.php?mod=favorite&act=addItem&callback=addFavoriteCallback&t=' + Math.random() + "&" + $makeUrl(opt);
	
	var dataUrl = "http://oper.w.buy.qq.com/rcmd/queryrecommenddata";
	dataUrl += "?metaid=" + $parseCommodityId(opt.commodityId).cateid + "&sceneid=1006&callback=window.Favorite_associate";
	
	/*当用户点击常用标签时，在输入文本框中添加该标签文字*/
	window.Favorite_AddLabelToText = function(label)
	{
		var txt = document.getElementById("favorite_textTags");
		var label = document.getElementById(label);
		if('' == txt.value) {
			txt.value = label.innerHTML;
		} else {
			txt.value = txt.value + " " +label.innerHTML;
		}
	}
	
	window.Favorite_EditTagOk = function(obj) {    
		if(obj.result == 0) {    
			var float_handle = $float({
				html:'<div class="mod_layer_light" id = "favorite_editGood"> \
                        <div class="inner">\
							<a href="javascript:void(0);" id = "closeOK" class="close">×</a>\
                            <div class="bd">\
								<i class="icon_tips_32 icon_32_right">&nbsp;</i>\
								<p class="tips_cont">编辑成功</p> \
							</div>\
                        </div>\
                    </div>',
				width: '162',
				height:'32',
				style: 'none',
				dragble:false,
				cover:false,
				closeId: "closeOK"
			});
			$id('favorite_editGood').onclick = function() {
				float_handle.close();
			}
			setTimeout(float_handle.close,2000);
		}else if(obj.result == 1024){            
            BBC.head.login();            
		}else{
			alert("标签编辑失败");
		}
	}
	window.Favorite_ShowLabel = function(obj) {
		if(obj.result == 0) {
			var tagunit = obj.data;
			var tagNum = tagunit.length;
			if(tagNum>0){
				var html = '常用的：';
				for(var i = 0; i < tagNum - 1; i++) {
					html = html + '<a href="javascript:void(0)" id = "' + 'Label' + i + '" onclick = "Favorite_AddLabelToText(\'' + 'Label' + i + '\')">'+ tagunit[i]['name'] +'</a>|';
				}
				html = html + '<a href="javascript:void(0)" id = "' + 'Label' + i + '" onclick = "Favorite_AddLabelToText(\'' + 'Label' + i + '\')">'+ tagunit[i]['name'] +'</a>';
				var showTags = document.getElementById("favorite_commonTags");
				showTags.innerHTML =$escNone( html);
			}
		}
	}; 
	window.addFavoriteCallback=function(obj){
		if(obj.result == 0){
            //加入点击流
			window.Favorite_PgvSendClick("QQbuy.favorite.add.success");
			try{
                BBC.head.request.favorite(); //为头部的收藏入口进行收藏数据的添加
            }catch(e){}
                
            var favorite_numTips='';
            var favoriteNum = obj.FavoriteNum;
            if(obj.NoticeStock == 0) {
				if(favoriteNum == 0 ){
					favorite_numTips = '您成功收藏该商品';
				} else {
					favorite_numTips = '您已经收藏'+ favoriteNum +'个商品';
				}
			}else{
				favorite_numTips = '您成功对此商品缺货备忘';
			}
			if (obj.NoticeStock ==0) {
				$float({
					html:'<div class="layer_common layer_succ_fav" id = "favorite_addfavorite" favoriteid =' + obj.FavoriteId + '>\
                            <div class="layer_inner" style="width:495px;">\
                                <div class="hd">\
                                    <h3>收藏成功</h3>\
                                    <span class="close"><a href="javascript:void(0);" id="addFavoriteClose" >×</a></span>\
                                </div>\
                                <div class="bd">\
                                    <span class="icon_tips_32 icon_32_right"></span>\
                                    <div class="title">\
                                        <h4>收藏成功</h4>\
                                    <p class="exp" ><span class = "num">'+ favorite_numTips +'</span><a href="http://my.buy.qq.com/index.php?act=favorite " wgtag="3000.1.5.15">查看收藏夹&gt;&gt;</a></p>\
                                    </div>\
                                    <div class="add_label" id="favorite_label">\
                                        <p class="tit" id="favorite_float_label">为商品打上标签<i></i></p>\
                                        <div class="cnt" >\
                                            <p class="f1"><span class="t">标签：</span><input type="text" autocomplete="off" class="txt_long" id = "favorite_textTags"/></p>\
                                            <p class = "f3">（空格分隔，<span id = "favorite_tagsNum">最多5个标签</span>，<span id = "favorite_tagLength">单个标签不超过6个字</span>，<span id = "favorite_charcontrol">不支持特殊符号</span>）</p>\
                                            <p class="f2" id = "favorite_commonTags" ></p>\
                                            <div class="wrap_btn">\
                                                <a href="javascript:void(0)" class="mod_btn mod_btn_red"><i class="bod_left"></i><span class="inner" id = "favorite_editIsOk">确认</span><i class="bod_right"></i></a>\
                                                <a href="javascript:void(0)" class="cancle" id = "addFavoriteNext">取消</a>\
                                            </div>\
                                        </div>\
                                    </div>\
                                    <div class="other_goods" id="favorite_associate_div" style="display:none"><p class="tit">收藏了该商品的用户还收藏了：</p>\
                                        <ul id ="favorite_associate"></ul>\
                                    </div>\
                                </div>\
                            </div>\
                        </div>\
                        <textarea id="favorite_associate_tpl" style="display:none"></textarea>',
				width:'495',
                height:'290',
				style: 'none',
				dragble:false,
				cover:true,
				closeId:"addFavoriteClose,addFavoriteNext"    
             });
			} else {
				$float({
				html:'<div class="layer_common layer_succ_fav" id = "favorite_addfavorite" favoriteid =' + obj.FavoriteId + '>\
                            <div class="layer_inner" style="width:495px;">\
                                <div class="hd">\
                                    <h3>缺货备忘成功</h3>\
                                    <span class="close"><a href="javascript:void(0);" id="addFavoriteClose" >×</a></span>\
                                </div>\
                                <div class="bd">\
                                    <span class="icon_tips_32 icon_32_right"></span>\
                                    <div class="title">\
                                        <h4>缺货备忘成功</h4>\
                                    <p class="exp" ><span class = "num">'+ favorite_numTips +'</span><a href="http://my.buy.qq.com/index.php?act=favorite " wgtag="3000.1.5.15">进入收藏夹查看&gt;&gt;</a></p>\
                                    </div>\
                                        <div class="add_label" id="favorite_label">\
                                        <p class="tit" id="favorite_float_label">为商品打上标签<i></i></p><div class="cnt" >\
                                        <p class="f1"><span class="t">标签：</span><input type="text" autocomplete="off" class="txt_long" id = "favorite_textTags"/></p>\
                                        <p class = "f3">（空格分隔，<span id = "favorite_tagsNum">最多5个标签</span>，<span id = "favorite_tagLength">单个标签不超过6个字</span>，<span id = "favorite_charcontrol">不支持特殊符号</span>）</p>\
                                        <p class="f2" id = "favorite_commonTags" >\
                                        <!--BEGIN label -->\
                                        <!--END label -->\
                                        </p>\
                                    \
                                    <div class="wrap_btn">\
                                        <a href="javascript:void(0)" class="mod_btn mod_btn_red"><i class="bod_left"></i><span class="inner" id = "favorite_editIsOk">确认</span><i class="bod_right"></i></a>\
                                                <a href="javascript:void(0)" class="cancle" id = "addFavoriteNext">取消</a>\
                                            </div>\
                                        </div>\
                                    </div>\
                                    <div class="other_goods" id="favorite_associate_div" style="display:none"><p class="tit">收藏了该商品的用户还收藏了：</p>\
                                        <ul id ="favorite_associate"></ul>\
                                    </div>\
                                </div>\
                            </div>\
                        </div>\
                        <textarea id="favorite_associate_tpl" style="display:none"></textarea>',
                width:'495',
                height:'290',
                style: 'none',
                dragble:false,
                cover:true,
				closeId:"addFavoriteClose,addFavoriteNext"    
			});
			}
			
			var URL = 'http://favorite.buy.qq.com/json.php?mod=favorite&act=getCommTags&callback=Favorite_ShowLabel';
			$loadScript({
				url:URL,
				charset:'utf-8'
			});
                /*展示标签*/
			$id('favorite_float_label').onclick = function (e){
				if($id('favorite_label').className == 'add_label') {
					$id('favorite_label').className = 'add_label add_label_unfold';
				} else {
					$id('favorite_label').className ='add_label';
				}
			}
            /*用户点击“确定”按钮时的事件*/
			$id('favorite_editIsOk').onclick = function (){
				var txt = document.getElementById("favorite_textTags").value;
				temp = $strTrim(txt);
				var test;
				if(''!= temp){
                    /*过滤新增标签*/
					if('新增标签' == temp) {
						test = '';
					} else {
						test = temp.match(/\S+/g);
						var len = test.length;
                            //该商品对应收藏标签不能多于5个
						if(len > 5) {
							$addClass($id('favorite_tagsNum'),'co_red');
							return;
						}
                        //定义收藏标签名长度不能超过6个字符
						for(var i = 0; i < len; i++) {
							if(test[i].length > 6) {
								$addClass($id('favorite_tagLength'),'co_red');
								return;    
							}
							var containSpecial = RegExp(/[(\ )(\~)(\!)(\@)(\#)(\$)(\%)(\^)(\&)(\*)(\()(\))(\-)(\_)(\+)(\=) (\[)(\])(\{)(\})(\|)(\\)(\;)(\:)(\')(\")(\,)(\.)(\/)(\<)(\>)(\?)(\)]+/);
							if(containSpecial.test(test[i])){
								$addClass($id('favorite_charcontrol'),'co_red');
								return;
							}
						}
					}
				} else {
					test = temp;
				}
                //一切ok的话，把数据编入到数据库中！
				var FavoriteId = document.getElementById('favorite_addfavorite').getAttribute('favoriteid');
				var URL = 'http://favorite.buy.qq.com/json.php?mod=favorite&act=editTags&FavoriteId=' + FavoriteId + '&Tags_array=' + test + '&callback=Favorite_EditTagOk';
				$loadScript({
					url:URL,
					charset:'utf-8'
				});
			}
			/*修改标签时，红色警告消退*/
			$id('favorite_textTags').onkeydown = function() {
				$delClass($id('favorite_tagsNum'),'co_red');
				$delClass($id('favorite_tagLength'),'co_red');
				$delClass($id('favorite_charcontrol'),'co_red');
			}
            //对关联推荐进行拉取
			$loadScript({
				url:dataUrl,    
				charset:'utf-8'
			});   
        }else if(obj.result == 1024){
			window.Favorite_PgvSendClick("QQbuy.favorite.add.withoutlogin");
			BBC.head.login();                        
		}else if(obj.result == 7616){
			window.Favorite_PgvSendClick("QQbuy.favorite.add.exists");
			if(obj.NoticeStock == 0 ) {
				$float({
					html:'<div class="layer_common layer_succ_fav">\
                            <div class="layer_inner" style="width:350px;">\
                                <div class="hd"><h3>收藏成功</h3><span class="close"><a href="javascript:void(0);" id="closeOK" >×</a></span></div>\
                                <div class="bd">\
                                    <span class="icon_tips_32 icon_32_right"></span>\
                                    <div class="title title_2">\
                                        <h4>收藏成功</h4>\
                                        <p class="exp">该商品已在收藏夹里&nbsp;\
                                        <a href="http://my.buy.qq.com/index.php?act=favorite" wgtag="3000.1.5.15">查看收藏夹&gt;&gt;</a></p>\
                                        <div class="wrap_btn">\
                                            <a href="javascript:void(0)" class="mod_btn mod_btn_red"><i class="bod_left"></i><span class="inner" id = "addFavoriteOk">确定</span><i class="bod_right"></i></a>\
                                        </div>\
                                    </div>\
                                </div>\
                            </div>\
                         </div>',    
                    width:'350',
                    height:'170',
                    style: 'none',
                    dragble:true,
                    cover:false,
                 closeId:"addFavoriteOk,closeOK"    
                });
			} else {
				$float({
					html:'<div class="layer_common layer_succ_fav">\
                            <div class="layer_inner" style="width:350px;">\
                                <div class="hd"><h3>缺货备忘成功</h3><span class="close"><a href="javascript:void(0);" id="closeOK">×</a></span></div>\
                                <div class="bd">\
                                    <span class="icon_tips_32 icon_32_right"></span>\
                                    <div class="title title_2">\
                                        <h4>缺货备忘成功</h4>\
                                        <p class="exp">该商品已缺货备忘&nbsp;\
                                        <a href="http://my.buy.qq.com/index.php?act=favorite" wgtag="3000.1.5.15" >查看收藏夹&gt;&gt;</a></p>\
                                        <div class="wrap_btn">\
                                            <a href="javascript:void(0)" class="mod_btn mod_btn_red"><i class="bod_left"></i><span class="inner" id = "addFavoriteOk">确定</span><i class="bod_right"></i></a>\
                                        </div>\
                                    </div>\
                                </div>\
                            </div>\
                         </div>',    
                    width:'350',
                    height:'170',
                    style: 'none',
                    dragble:true,
                    cover:false,
                 closeId:"addFavoriteOk,closeOK"    
                });
            }
		}else{
			window.Favorite_PgvSendClick("QQbuy.favorite.add.error");
			alert("收藏商品失败！");
		}
	}
	var g_onclick_item = [];
	var wag_tag_item = '';
	
	window.Favorite_getWgtag = function(key){
		var wgtag = "";
		if(g_rcmd_wgtag_list){
			for(var i=0 ; i< g_rcmd_wgtag_list.length; i++){
				var obj = g_rcmd_wgtag_list[i];
				if(obj[key]){
					wgtag = obj[key];
					break;
				}
			}
		}
		return wgtag;
	}
	
	window.Favorite_PgvSendClick = function (str) {
		try{pgvSendClick({hottag:str,virtualDomain:"favorite.buy.qq.com"})}
		catch(e){};
	}
	
	window.Favorite_associate = function (obj) {
		if (obj.retcode !=0) {
			$id('favorite_label').className = 'add_label add_label_unfold';
			return;
		}else {
			var tagKey ="1006#" + obj.rcmdkey;
            //从20个返回来的商品中随机的获取5个.. 用于和现在的商品不一致的替换
			var itemList = window.favorite_getRadomList(obj.rcmdlist,5);
			wag_tag_item = 'wgtag="'+window.Favorite_getWgtag(tagKey)+'"';
			var flag =0;
			var commId_link = "http://item.buy.qq.com/item/" +opt.commodityId+".html";
			for (var i = 0 ;i< Math.min(4+flag,obj.rcmdlist.length);i++) {
				var pic_link = itemList[i].mainimg.replace("160x160", "80x80");
				if (commId_link == itemList[i].link) {
					flag =1 ;
					continue;
				}else {
					var click_item = {
						link : itemList[i].link,
						piclink : pic_link,
						stock_price : (itemList[i].price/100).toFixed(2),
						ref_price : (itemList[i].MarketPrice/100).toFixed(2),
						Fcommodity_name : itemList[i].title,
						wgtag : wag_tag_item
					};
					g_onclick_item[i-flag] = click_item;
				}
			}
			var get_associate_url = 'http://favorite.buy.qq.com/json.php?mod=favorite&act=getAssociate&callback=window.Favorite_tpl';
			$loadScript({
				url:get_associate_url,
				charset:'utf-8'
			});
		}
	}
	
	window.favorite_getRadomList = function(data, cnt){
		if(!data)
			return data;
		var len = data.length;
		if(len <= cnt){//个数不够
			return data;
		}else if(len > cnt){
			var dataRadom = new Array(cnt);
			var nRadom = len - cnt + 1;
			var now= new Date();
			var second=now.getSeconds();
			var nIndex = second % nRadom;
			for(var i = 0; i < cnt; i++){
				dataRadom[i] = data[nIndex + i];
			}
			return dataRadom;
		}else{
			return data;
		}
	}
	window.Favorite_tpl = function(tpl_data) {
		//favorite php 返回的模板填充
		$id('favorite_associate_div').style.display = 'block';
		$id('favorite_associate_tpl').value = tpl_data;
		$templateStuff(g_onclick_item,'favorite_associate','favorite_associate_tpl');
	}
	$loadScript({
		url:url_favorite_additem,
		charset:'utf-8'
	});
}
//添加链接的带登录态
function $addLoginKey(clientuin,clientkey)
{
	var pvDoc=document;
	if(window!=top)
	{
		try{pvDoc=top.document;}
		catch(e){};
	}
	var req_url = pvDoc.URL; 
	var sUrl=req_url.split("\/\/")[1].split("\/")[0];
	if(sUrl==""){ 
		sUrl="paipai.com";
	}
	var login_prefix = "http://member.paipai.com/cgi-bin/qq_to_paipai?clientuin="+clientuin+"&clientkey="+clientkey+"&re="+sUrl+"&url=";
	var obj=document.getElementsByTagName("A");
	for(i=0,len = obj.length;i<len;i++)	{
		if (obj[i].href.indexOf("qq_to_paipai") != -1 || obj[i].href.indexOf("javascript:") == 0 || obj[i].getAttribute("login")=="no"){
			continue;
		}else{
			obj[i].href = login_prefix+escape(obj[i].href);
		}
	}
	obj=null;
}
function $addPromoteTip( parent_node, tip_info, offset_x, offset_y ) {
    // 创建局部容器，并实现
    var local = {
        // 入口函数
        main: function() {
            // 添加促销浮层信息
            local.addTip();

            // 绑定促销浮层事件
            local.addEvent();
        },

        // 检查传入参数是否有效
        checkParams: function() {
            // 增强兼容性：可以处理节点ID或者节点对象
            if( typeof parent_node === "string" ) {
                parent_node = $id( parent_node );
            }

            // 检查传参是否均有效
            if( (
                typeof Node === "object" ? parent_node instanceof Node : typeof parent_node === "object" && typeof parent_node.nodeType === "number"
                && typeof parent_node.nodeName==="string" )
                && typeof tip_info === "object"
                && (
                    (
                        tip_info.color_price && tip_info.color_price.length !== 0
                    )
                    || tip_info.red_price !== 0
                    || tip_info.item_prop.substr( 2, 1 ) == "1"
                ) ) {
                return true;
            } else {
                return false;
            }
        },

        // 添加促销浮层数据
        addTip: function() {
            // 检查是否已经存在与数组中
            if( !window.promote_tip.getTipInfo( parent_node.getAttribute( 'item_id' ) ) ) {
                // 添加促销浮层偏移量
                tip_info.offset = {
                    x: offset_x || 0,
                    y: offset_y || 0
                };

                // 将促销浮层信息添加至数组中
                window.promote_tip.data.push( { parent_node: parent_node, item_id: parent_node.getAttribute( 'item_id' ), tip_info: tip_info } );
            }
        },

        // 绑定事件
        addEvent: function() {
            parent_node.onmouseover = function( event ){
                window.promote_tip.initShowTip( this );

                window.promote_tip.drawTip();
            }

            parent_node.onmouseout = function( event ){
                window.promote_tip.hideTip();
            }
        }
    };

    // 处理传入信息有误的情况
    if( !local.checkParams() ) {
        return;
    }

    // 创建全局容器
    window.promote_tip = window.promote_tip || {};

    // 判断全局变量是否存在
    if( window.promote_tip.touched == undefined ) {
        window.promote_tip = {
            touched: false,
            data: []
        };
    }

    // 实现全局容器
    if( !window.promote_tip.touched ) {
        window.promote_tip = {
            node: window.promote_tip.node || null,
            data: window.promote_tip.data || [],

            // 初始化用于加载促销浮层的DIV,完成全局变量和局部变量的交互
            initNode: function() {
                window.promote_tip.node = document.createElement( 'div' );

                window.promote_tip.node.setAttribute( 'id', 'promoteLayer' );
                window.promote_tip.node.setAttribute( 'class', 'promote_layer' );
                window.promote_tip.node.style.position = 'absolute';
                window.promote_tip.node.style.display = 'none';

                // 添加促销图层节点
                document.body.appendChild( window.promote_tip.node );
            },

            // 初始化
            initShowTip: function( parent_node ) {
                window.promote_tip.parent_node = parent_node;
                window.promote_tip.item_id = parent_node.getAttribute( 'item_id' );
                window.promote_tip.tip_info = window.promote_tip.getTipInfo( window.promote_tip.item_id );
            },

            // 搜索促销浮层信息
            getTipInfo: function( item_id ) {
                for( var i = 0, len = window.promote_tip.data.length; i < len; i++ ) {
                    if( window.promote_tip.data[i].item_id == item_id ) {
                        return window.promote_tip.data[i].tip_info;
                    }
                }

                return false;
            },

            // 获取父节点的位置偏移量
            getParentPos: function() {
                var _x = $getX( window.promote_tip.parent_node );
                var _y = $getY( window.promote_tip.parent_node );

                // 解决1像素偏移问题
                if( $isBrowser( 'ie9' ) || $isBrowser( 'chrome' ) || $isBrowser( 'firefox' ) ) {
                    _x++;
                }
                
                return { x: _x, y: _y };
            },

            // 组装促销浮层位置绝对偏移量
            getTipPos: function() {
                return { x: window.promote_tip.getParentPos().x + window.promote_tip.tip_info.offset.x, y: window.promote_tip.getParentPos().y + window.promote_tip.tip_info.offset.y };
            },

            // 组装促销信息
            genTipContent: function() {
                window.promote_tip.html = '\
                    <dl>';
                if( window.promote_tip.tip_info.color_price && window.promote_tip.tip_info.color_price.length !== 0 ) {
                    window.promote_tip.html += '\
                        <dt><span>彩钻VIP</span></dt> \
                        <dd>&yen;' + window.promote_tip.tip_info.color_price[2] + ' - &yen;' + window.promote_tip.tip_info.color_price[0] + '</dd>';
                }

                if( window.promote_tip.tip_info.red_price != 0 ) {
                    var str_red_price = '5';

                    if( window.promote_tip.tip_info.red_price > 5 ) {
                        str_red_price += '-' + window.promote_tip.tip_info.red_price;
                    }
                    window.promote_tip.html += '\
                        <dt><span>红包</span></dt> \
                        <dd>支持红包：<span>&yen;' + str_red_price + '</span></dd>';
                }

                window.promote_tip.html += '\
                    </dl>';

                if( window.promote_tip.tip_info.item_prop.substr(2, 1) == "1" ) {
                    window.promote_tip.html += '\
                    <div class="ft"> \
                        <img src="http://static.paipaiimg.com/my/favorite/man.png" alt="满立减，满立送" /> \
                        <span>参与商家促销</span> \
                    </div>';
                }
            },

            // 更新促销浮层节点
            updateTip: function() {
                // 更新节点内容
                window.promote_tip.genTipContent();
                window.promote_tip.node.innerHTML = window.promote_tip.html;

                // 更新节点位置
                window.promote_tip.node.style.left = window.promote_tip.getTipPos().x + 'px';
                window.promote_tip.node.style.top = window.promote_tip.getTipPos().y + 'px';

                // 修复“掉class name”
                window.promote_tip.node.className = "promote_layer";
            },

            // 展示促销浮层
            drawTip: function() {
                // 更新内容及位置并显示
                window.promote_tip.updateTip();
                window.promote_tip.node.style.display = 'block';

                //$loadCss( "http://static.paipaiimg.com/my/favorite/favorite.css" );
            },

            // 隐藏促销浮层
            hideTip: function() {
                // 隐藏
                window.promote_tip.node.style.display = 'none';
            }
        };

        window.promote_tip.initNode();

        window.promote_tip.touched = true;
    }

    // 调用入口函数
    local.main();
}
function $address(obj) {
    var option = {
        uin: "",
        dom: "",
        addressId: "",
        regionId: "",
        addressStr: "",
        referProvince: "",
        showAll: false,
        autoInput: false,
        defAddrId: "",
        defAddrIndex: 0,
        tipTxt: '请填写该商品的收货地址。',
        dataSource: '',
        list: [],
        curIdx: -1,
        float: "",
        style: "2",
        cssUrl: "http://static.paipaiimg.com/my/recv_address.css",
        oneAfterShow: function (obj) {
            return true;
        },
        onListShow: function (obj) {
            return true;
        },
        onSelectItem: function (obj) {
            return true;
        },
        onLogout: function (obj) {
            $setCookie("returnurl", location.href, 1, "/", "paipai.com");
            location.href = "http://member.paipai.com/cgi-bin/login_entry";
        },
        tp: '【none】<div id="addressFrame" class="addresslist"><dl><dt >收货地址</dt><dd >您还没有收货地址，请填写收货地址以保证您购买的商品能顺利送达。<input type="button" value="填写收货地址" class="subbtn bw8" onclick="showAddressEditor(\'\')"/></dd></dl></div>【none】【start】<div id="addressFrame" class="set_address address_type{#style#}"> <table id="headtable" class="module_my_tblist" width="100%"><colgroup><col width="87%"><col width="13%"></colgroup><thead><tr><th class="first">收货地址</th><th class="last">操作</th></tr></thead></table><ul class="list_address">【start】【list】<li style="display: {#hideThis#}"  id="addressItem_{#index#}" isSelected="0" for="addressCheckList_{#index#}" listIndex="{#index#}"><label  id="addressLabel_{#index#}" isSelected="0" for="addressCheckList_{#index#}" listIndex="{#index#}"><input class="radio" style="display:{#radioshow#}" type="radio" name="addressCheckList" id="addressCheckList_{#index#}" autocomplete="off" type="radio" iserror="0"  value="{#addressId#}" listIndex="{#index#}" addressStr="{#address#}，邮编：{#addCode#}，收货人：{#name#}，联系电话：{#phone#}"/>{#addressCut#} <br />收货人：{#name#}，联系电话：{#phone#}{#addCodeStr#}</label><p class="edit_address" id="addressEditButton_{#index#}" listIndex="{#index#}"><a href="javascript:var  editAddress=showAddressEditor({#index#});" listIndex="{#index#}">[修改]</a> <a listIndex="{#index#}" href="javascript:var editAddress=deleteAddress({#addressId#});">[删除]</a><br/>{#setAddress#}</p></li>【list】【error】<li style="display: {#hideThis#}" id="addressItem_{#index#}" isSelected="0" for="addressCheckList_{#index#}" listIndex="{#index#}"><label  id="addressLabel_{#index#}" isSelected="0" for="addressCheckList_{#index#}" listIndex="{#index#}"><input class="radio" type="radio" name="addressCheckList" id="addressCheckList_{#index#}" autocomplete="off" type="radio" iserror="0"  value="{#addressId#}" listIndex="{#index#}" addressStr="{#address#}，邮编：{#addCode#}，收货人：{#name#}，联系电话：{#phone#}"/>{#addressCut#} <br />收货人：{#name#}，联系电话：{#phone#}{#addCodeStr#}</label><p class="edit_address" id="addressEditButton_{#index#}" listIndex="{#index#}">您的收货地址因缺少必要信息，现已不能选择使用，请及时<a href="javascript:var  editAddress=showAddressEditor({#index#})">更新</a>或者<a listIndex="{#index#}" href="javascript:var editAddress=deleteAddress({#addressId#});" >删除</a>。</p></li>【error】【add】<dd class="linkother"><label><a href="javascript:var addNewAddress=showAddressEditor(\'\')" class="linkother">增加新的地址</a></label></dd>【add】【showadd】<p class="add_address"><button onclick="javascript:var addNewAddress=showAddressEditor(\'\')">新增收货地址</button></p><p class="view_all"><a href="javascript:;" id="addressListShowAll">显示全部地址</a><br /><a href="javascript:var addNewAddress=showAddressEditor(\'\')">新增收货地址</a></p>【showadd】【ulend】</ul>【ulend】【end】</div>【end】【edit】<form action="" onsubmit="return false;"><div class="tipswarn" id="tipswarn">{#tipTxt#}</div><div class="bcontentlist"><table width="100%" border="0" cellspacing="0" cellpadding="0"><tr id="address_regionId_tr"><th>所在地区：</th><td><div class="area" id="regionArea"></div><input type="hidden" name="address_regionId" id="address_regionId"><input type="hidden" name="address_regionStr" id="address_regionStr"></td><td class="txterror" id="address_regionId_error">请选择所在地区。</td></tr><tr id="address_street_tr"><th>街道地址：</th><td><input name="address_street" type="text" id="address_street" size="40" maxlength="255" /><span class="remark">(请填写您的详细地址，不需要重复填写省、市、地区)</span></td><td class="txterror"  id="address_street_error">请填写街道地址。</td></tr><tr id="address_code_tr"><th>邮编：</th><td><input name="address_code" type="text" id="address_code" maxlength="6" style="ime-mode:disabled;text-transform: lowercase;" /><span class="remark" ></span></td><td class="txterror" id="address_code_error">请填写邮编。</td></tr><tr id="address_name_tr"><th>收货人姓名：</th><td><input name="address_name"  type="text" id="address_name" maxlength="30" /><span class="remark"></span></td><td class="txterror" id="address_name_error">请填写收货人姓名。</td></tr><tr id="address_mobile_tr"><th>手机号码：</th><td><input name="address_mobile" type="text" id="address_mobile" maxlength="11" style="ime-mode:disabled;text-transform: lowercase;" /><span class="remark">(手机和电话至少填写一项)</span></td><td rowspan="2" class="txterror" id="address_mobile_error">请填写手机或电话。</td></tr><tr id="address_phone_tr"><th>电话号码：</th><td><input name="address_phone0" type="text" id="address_phone0" size="5" maxlength="4" style="ime-mode:disabled;text-transform: lowercase;" /> - <input name="address_phone1" type="text" id="address_phone1" size="10" maxlength="9" style="ime-mode:disabled;text-transform: lowercase;" /> - <input name="address_phone2" type="text" id="address_phone2" size="5" maxlength="6" style="ime-mode:disabled;text-transform: lowercase;" /><span class="remark" >(格式：区号-电话号码-分机，分机可不填)</span></td></tr></table><p class="operate"><input name="address_ok" type="submit" class="subbtn bw2" id="address_ok" value="确 定"/><input name="address_cancel" type="button" class="subbtn bw2" id="address_cancel" value="取 消"/><input type="hidden" name="address_id" id="address_id"><input type="hidden" name="address_type" id="address_type" value="0"><input type="hidden" name="address_uin" id="address_uin" value=""><input type="hidden" name="address_var" id="address_var" value=""></p></div></form>【edit】【noaddress】<li>您还没有收货地址，请填写收货地址以保证您购买的商品能顺利送达。</li>【noaddress】'
    };
    for (var i in obj) {
        option[i] = obj[i];
    }
    if (option.cssUrl) {
        $loadCss(option.cssUrl);
    }
    var regionMap = $getRegionMap();
	
	//返回码统计对象_retCoder
	var path = "http://my.paipai.com/cgi-bin/recvaddr/asyncprocessrecvaddr";
	var _retCoder=null;
	
    option.tp = option.tp.replace("{#tipTxt#}", option.tipTxt);
    option.check = getCheckedAddress;
    option.selectAddress = selectAddress;
	window.addressOption = option;
    window.userAddressCallBack = userAddressCallBack;
    window.showAddressList = showAddressList;
    window.showAddressEditor = showAddressEditor;
    window.deleteAddress = deleteAddress;
    window.setAddress = setAddress;
    if (option.dataSource) {
        userAddressCallBack(option.dataSource);
    } else {
        $id(option.dom).innerHTML = '<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0"><tr><td align="center" valign="middle" style="font-size:13px; color:#333333; text-align:center;vertical-align: middle; " width="100%" height="100%"><img src="http://static.paipaiimg.com/assets/common/loading2.gif" /><br />收货地址列表信息加载中……<a href="javascript:var addressload=$address(addressOption);">点击重试</a></td></tr></table>';
		//期待回调userAddressCallBack
        _retCoder=$returnCode({url:path});
		$loadScript("http://my.paipai.com/cgi-bin/recvaddr/asyncprocessrecvaddr?action=list&actionid=null&attrtype=0&t=" + Math.random(), "userAddressList");
    }
    return addressOption;

    function selectAddress(id) {
        if (id > 2) {
            showHideAddress();
        }
        var temp = $id("addressFrame").getElementsByTagName("input");
        var radios = [];
        for (var i = 0; i < temp.length; i++) {
            if (temp[i].type == "radio" && temp[i].getAttribute("iserror") != "1") {
                radios.push(temp[i]);
                var li = temp[i].parentNode.parentNode;
                if ((parseInt(id) + 1) == radios.length) {
                    temp[i].checked = true;
                    li.className = "current";
					
                    if (!option.onSelectItem(option)) {
                        return false;
                    }
                } else {
                    temp[i].checked = false;
                    li.className = "";
                }
            }
        }
    }

    function getCheckedAddress(onceFunc) {
        var option = addressOption;
        var error = [];
        var returnVar = "";
        if (option.list.length < 1) {
            if (onceFunc) {
                option.oneAfterShow = onceFunc;
            }
            option.addressId ? $id(option.addressId).value = "" : "";
            option.addressStr ? $id(option.addressStr).value = "" : "";
            option.regionId ? $id(option.regionId).value = "" : "";
            showAddressEditor();
            return false;
        }
        var temp = $id("addressFrame").getElementsByTagName("input");
        var radios = [];
        for (var i = 0; i < temp.length; i++) {
            if (temp[i].type == "radio" && temp[i].getAttribute("iserror") != "1") {
                radios.push(temp[i]);
                if (temp[i].checked) {
                    checkIndex = radios.length;
                    returnVar = temp[i].getAttribute("listIndex");
                }
            }
        }
        if (returnVar != "" && !option.showAll && checkIndex > 3) {
            returnVar = "";
        }
        if (!returnVar) {
            error.push("请选择一条收货地址！");
            return error;
        }
        option.curIdx = returnVar;
        option.addressId ? $id(option.addressId).value = option.list[returnVar].Id : "";
        option.addressStr ? $id(option.addressStr).value = $id("addressCheckList_" + returnVar).getAttribute("addressStr") : "";
        option.regionId ? $id(option.regionId).value = option.list[returnVar].RegionId : "";
        return true;
    }

    function userAddressCallBack(obj) {

		
		//返回码上报
		if(_retCoder){
			_retCoder.report((obj.isError=="0"?true:false),obj.isError);
			_retCoder=null;
		}
		
        if (obj.isError > 0) {
            if (obj.isError == 13) {
                window.addressOption.onLogout();
                return;
            }
            alert(obj.msg);
            return false;
        }
        var aList = [];
        for (var i = 0; i < obj.list.length; i++) {
            if (obj.list[i] != null) {
                aList[i] = obj.list[i];
                for (var j in aList[i]) {
                    aList[i][j] = (aList[i][j].toString()).replace(new RegExp("(^ *)|( *$)", "g"), "");
                }
            }
        }
        if (obj.action != "default") {
            window.addressOption.list = aList;
			window.addressOption.defAddrIndex=0;
        } else {
            for (var j = 0, jl = window.addressOption.list.length; j < jl; j++) {
                window.addressOption.list[j].IsDefault = j == window.defaultAddressIndex ? "1" : "0"
            }
        }
        showAddressList();
    };

    function showAddressList() {
        var option = window.addressOption;
        var hc = [];
        try {
            option.float.onClose ? option.float.onClose = function () {
                return true;
            } : "";
            option.float.close();
        } catch (e) {}
        if (option.list.length < 1) {
            hc.push(((new RegExp("【start】(.*)【start】", "ig")).exec(option.tp)) ? RegExp.$1.replace(/{#style#}/ig, option.style) : "");
            hc.push(((new RegExp("【noaddress】(.*)【noaddress】", "ig")).exec(option.tp)) ? RegExp.$1 : "");
            hc.push(((new RegExp("【showadd】(.*)【showadd】", "ig")).exec(option.tp)) ? RegExp.$1 : "");
            hc.push(((new RegExp("【ulend】(.*)【ulend】", "ig")).exec(option.tp)) ? RegExp.$1 : "");
            hc.push(((new RegExp("【end】(.*)【end】", "ig")).exec(option.tp)) ? RegExp.$1 : "");
            $id(option.dom).innerHTML = hc.join("");
            if (!option.onListShow(option)) {
                return false;
            }
            if (option.addressId) {
                if ($id(option.addressId).value != "") {
					
                    if (!option.onSelectItem(option)) {
                        return false;
                    }
                }
            }
            if (option.autoInput) {
                showAddressEditor();
            }
            return;
        }
        hc.push(((new RegExp("【start】(.*)【start】", "ig")).exec(option.tp)) ? RegExp.$1.replace(/{#style#}/ig, option.style) : "");
        var thc = {};
        thc.list = ((new RegExp("【list】(.*)【list】", "ig")).exec(option.tp)) ? RegExp.$1 : "";
        thc.error = ((new RegExp("【error】(.*)【error】", "ig")).exec(option.tp)) ? RegExp.$1 : "";
        for (var i = 0; i < option.list.length; i++) {
            var temp = (option.list[i].RegionId && option.list[i].RegionId != "0") ? (thc.list) : (thc.error);
            temp = temp.replace(/{#setAddress#}/ig, option.list[i].IsDefault == 1 ? '已设为默认地址' : '<a href="javascript:var editAddress=setAddress({#addressId#},{#index#});" listIndex="{#index#}">[设为默认地址]</a>');
            temp = temp.replace(/{#radioshow#}/ig, option.style == 1 ? 'none' : '');
            temp = temp.replace(/{#index#}/ig, option.list[i].Index);
            temp = temp.replace(/{#name#}/ig, option.list[i].Name);
            temp = temp.replace(/{#addCode#}/ig, option.list[i].Code);
            temp = temp.replace(/{#addCodeStr#}/ig, option.list[i].Code ? ("，邮编：" + option.list[i].Code) : "");
            temp = temp.replace(/{#phone#}/ig, (option.list[i].Mobile && option.list[i].Phone) ? (option.list[i].Mobile + "、" + option.list[i].Phone) : (option.list[i].Mobile ? option.list[i].Mobile : option.list[i].Phone));
            var addr = $regionGetStr(option.list[i].RegionId) + option.list[i].Address;
            var addrCut = $stringSplitByLength(addr, 75, "<br />");
            temp = temp.replace(/{#address#}/ig, addr);
            temp = temp.replace(/{#addressCut#}/ig, addrCut.replace("北京省", ""));
            temp = temp.replace(/{#hideThis#}/ig, ((!option.showAll && i > 2) ? "none" : "block"));
            temp = temp.replace(/{#addressId#}/ig, option.list[i].Id);
            hc.push(temp);
        }
        hc.push(((new RegExp("【showadd】(.*)【showadd】", "ig")).exec(option.tp)) ? RegExp.$1 : "");
        hc.push(((new RegExp("【ulend】(.*)【ulend】", "ig")).exec(option.tp)) ? RegExp.$1 : "");
        hc.push(((new RegExp("【end】(.*)【end】", "ig")).exec(option.tp)) ? RegExp.$1 : "");
        $id(option.dom).innerHTML = hc.join("");
		
		//是否显示头
		$id("headtable").style.display = option.style=="2"?"none":"";
		
        var fdom = $id("addressFrame");
        if (!fdom) {
            return;
        }
        var llist = fdom.getElementsByTagName("li");
        for (var i = 0, n = llist.length; i < n; i++) {
            if (llist[i].getAttribute("iserror") == "1" || (llist[i]).id.indexOf("addressItem_") < 0) {
                continue;
            }
            $addEvent(llist[i], "mouseout", function (event) {
                var _this = event.srcElement || event.target;
                showItemEditor(_this.getAttribute("listIndex"), llist, 0);
            });
            $addEvent(llist[i], "mouseover", function (event) {
                var _this = event.srcElement || event.target;
                showItemEditor(_this.getAttribute("listIndex"), llist, 1);
            });
           // $addEvent($id(llist[i].getAttribute("for")), "propertychange", function (event) {
//				var _this = event.srcElement || event.target;
//                showItemEditor(_this.getAttribute("listIndex"), llist, 1);
//                if (_this.checked == true) {
//                    if (!option.onSelectItem(option)) {
//                        return false;
//                    }
//                }
//            });
            $addEvent($id(llist[i].getAttribute("for")), "click", function (event) {

				window.addressOption.action = "select";
				var _this = event.srcElement || event.target;
                showItemEditor(_this.getAttribute("listIndex"), llist, 1);
                if (_this.checked == true) {
					if (!option.onSelectItem(option)) {
                        return false;
                    }
                }
            });
        }
        if ($id("addressListShowAll")) {
            $addEvent($id("addressListShowAll"), "click", function (event) {
                showHideAddress();
            });
        }
        if (!option.onListShow(option)) {
            return false;
        }
        if (option.defAddrId != "") {
            for (var i = 0; i < option.list.length; i++) {
                if (option.list[i].Id == option.defAddrId) {
                    option.defAddrIndex = option.list[i].Index;
                }
            }
        }
        //$addEvent(window, "load", function (event) {
     	//	selectAddress(option.defAddrIndex);
        //});
        if (option.oneAfterShow) {
            option.oneAfterShow();
            option.oneAfterShow = "";
        }
        selectAddress(option.defAddrIndex);
    };

    function showHideAddress() {
        var llist = $id("addressFrame").getElementsByTagName("li");
        for (var i = 0; i < llist.length; i++) {
            llist[i].style.display = "block";
            if (i > 2 && llist[i].id.indexOf("addressItem_") == 0) {
                $id(llist[i].id.replace("addressItem_", "addressCheckList_")).checked = false;
            }
        }
        $id("addressListShowAll").style.display = "none";
        window.addressOption.showAll = true;
    }

    function showAddressEditor(id) {
        var option = window.addressOption;
		option.action = (parseInt(id) >= 0) ? "edit":"new";
        if (option.list.length >= 10 && id.toString() == "") {
            alert("您最多可以保存10条收货地址。\n\r请点击确定返回，删除不用的收货地址后，再添加新的收货地址。");
            return false;
        }
        var float = $floatTip({
            cover: true,
            style: "stand",
            title: (parseInt(id) >= 0) ? "修改收货地址：" : '请填写新的收货地址：',
            width: "580",
            html: (((new RegExp("【edit】(.*)【edit】", "ig")).exec(option.tp)) ? RegExp.$1 : ""),
            onClose: function () {
                if (checkAddressEdit()) {
                    if (!confirm("您刚才修改的信息尚未保存。\n\r您确定不保存所做改动就离开吗？\n\r按\"确定\"离开，或按\"取消\"返回。")) {
                        return false;
                    }
                }
                return true;
            }
        });
        option.float = float;
        var initAddressId = initRegionId = initStreet = initCode = initName = initMobile = initPhone = "";
        if (parseInt(id) >= 0) {
            for (var i = 0; i < option.list.length; i++) {
                if (parseInt(option.list[i].Index) == parseInt(id)) {
                    initAddressId = option.list[i].Id;
                    initRegionId = option.list[i].RegionId;
                    initStreet = option.list[i].Address;
                    initCode = option.list[i].Code;
                    initName = option.list[i].Name;
                    initMobile = option.list[i].Mobile;
                    initPhone = option.list[i].Phone;
                }
            }
        }
        var region = $regionInit({
            div: "regionArea",
            regionId: (parseInt(id) >= 0) ? initRegionId : $regionGetIdByProvinceName(option.referProvince),
            onChange: function (obj) {
                var regionId = "";
                if ((obj.currId)[2]) {
                    regionId = (obj.currId)[2];
                }
                if ((obj.currId)[6]) {
                    regionId = (obj.currId)[4] ? (obj.currId)[4] : (obj.currId)[2];
                }
                $id("address_regionId").value = regionId;
                return true;
            }
        });
        $id("address_id").value = initAddressId;
        $id("address_street").value = initStreet;
        $id("address_code").value = initCode;
        $id("address_name").value = initName;
        $id("address_mobile").value = initMobile;
        try {
            var tempPhone = initPhone.split("-");
            $id("address_phone0").value = tempPhone[1] ? tempPhone[0] : "";
            $id("address_phone1").value = tempPhone[1] ? tempPhone[1] : "";
            $id("address_phone2").value = tempPhone[2] ? tempPhone[2] : "";
        } catch (e) {}
        $id("address_var").value = getAddressString();
        $addEvent($id("address_ok"), "click", function (event) {
            var _this = event.srcElement || event.target;
            if (checkAddressForm()) {
                var phone = $id("address_phone0").value + "-" + $id("address_phone1").value + ($id("address_phone2").value ? ("-" + $id("address_phone2").value) : "");
                if (phone == "-") {
                    phone = "";
                }
				_retCoder=$returnCode({url:path});
				//期待回调userAddressCallBack
                $loadScript("http://my.paipai.com/cgi-bin/recvaddr/asyncprocessrecvaddr?action=save&actionid=null&attrtype=0&dwRecvAddressID=" + $id("address_id").value + "&sRecvPostCode=" + $id("address_code").value + "&sRecvMobile=" + $id("address_mobile").value + "&sRecvPhone=" + phone + "&PRegionId=" + $id("address_regionId").value + "&sRevcName=" + $id("address_name").value + "&sRecvAddress=" + $xss($id("address_street").value, "none") + "&t=" + Math.random(), "userAddressList");
            }
        });
        $addEvent($id("address_cancel"), "click", function (event) {
            var _this = event.srcElement || event.target;
            if (checkAddressEdit()) {
                if (!confirm("您刚才修改的信息尚未保存。\n\r您确定不保存所做改动就离开吗？\n\r按\"确定\"离开，或按\"取消\"返回。")) {
                    return;
                }
            }
            float.close();
        });
    };

    function deleteAddress(id) {
		window.addressOption.action = "delete";
        if (confirm("您确定要删除该收货地址？")) {
            //如果删除的为默认地址
			if(id==window.addressOption.defAddrId){
				window.addressOption.defAddrId="";
			}
			_retCoder=$returnCode({url:path});
			//期待回调userAddressCallBack
			$loadScript("http://my.paipai.com/cgi-bin/recvaddr/asyncprocessrecvaddr?action=delete&actionid=null&attrtype=0&dwRecvAddressID=" + id + "&t=" + Math.random(), "userAddressList");
        } else {
            return false;
        }
    }

    function setAddress(id, index) {
		window.addressOption.action = "set_default";
        window.defaultAddressIndex = index;
		//期待回调userAddressCallBack
        _retCoder=$returnCode({url:path});
		$loadScript("http://my.paipai.com/cgi-bin/recvaddr/asyncprocessrecvaddr?action=default&actionid=null&attrtype=0&dwRecvAddressID=" + id + "&t=" + Math.random(), "userAddressList");
    }

    function showItemEditor(index, list, show) {
        for (var i = 0; i < list.length; i++) {
            var li = list[i];
            if (li.getAttribute("iserror") == "1") {
                continue;
            }
            var cindex = li.getAttribute("listIndex");
            if (!cindex) {
                continue;
            }
            var input = $id("addressCheckList_" + cindex),
                edit = $id("addressEditButton_" + cindex),
                btns = $id("addressEditButton_" + cindex);
            if (input.checked) {
                li.className = "current";
				//设置为默认地址
				window.addressOption.defAddrId=input.value;
            } else if (cindex == index) {
                li.className = show == "1" ? "current" : "";
            } else {
                li.className = "";
            }
        }
    }

    function checkAddressForm() {
        var checked = true;
        if ($id("address_regionId").value == "") {
            $id("address_regionId_tr").className = "list_error";
            $id("address_regionId_error").innerHTML = "请选择所在地区。";
            checked = false;
        } else {
            $id("address_regionId_tr").className = "";
            $id("address_regionId_error").innerHTML = "";
        }
        $id("address_street").value = $id("address_street").value.replace(/^ *| *$/g, "").replace(/\?/g, "？").replace(/&/g, "?").replace(/~/g, "").replace(/\^/g, "").replace(/\$/g, "?").replace(/"/g, "?").replace(/'/g, "＇").replace(/#/g, "?");
        if ($id("address_street").value.length < 1) {
            $id("address_street_tr").className = "list_error";
            $id("address_street_error").innerHTML = "街道地址错误。<em>您没有填写街道地址，请填写所在街道地址。</em>";
            checked = false;
        } else if ($id("address_street").value.replace(/[^\x00-\xff]/g, "aa").length < 4) {
            $id("address_street_tr").className = "list_error";
            $id("address_street_error").innerHTML = "街道地址错误。<em>您输入的街道地址过短，请填写正确的街道地址。</em>";
            checked = false;
        } else if ($id("address_street").value.replace(/[^\x00-\xff]/g, "aa").length > 255) {
            $id("address_street_tr").className = "list_error";
            $id("address_street_error").innerHTML = "街道地址错误。<em>您输入的街道地址过长，不能超过255字节。</em>";
            checked = false;
        } else {
            $id("address_street_tr").className = "";
            $id("address_street_error").innerHTML = "请填写街道地址。";
        }
        $id("address_code").value = $id("address_code").value.replace(/[^\d]/g, "");
        if ($id("address_code").value.length > 1 && $id("address_code").value.length < 6) {
            $id("address_code_tr").className = "list_error";
            $id("address_code_error").innerHTML = "邮编错误。<em>邮政编码必须为6位数字。</em>";
            checked = false;
        } else {
            $id("address_code_tr").className = "";
            $id("address_code_error").innerHTML = "请填写邮编错误。";
        }
        $id("address_name").value = $id("address_name").value.replace(/[\?\&\~\^*\%\$\"\']/g, "").replace(/^ *| *$/g, "").replace(/ +/g, " ");
        var tempName = $id("address_name").value.replace(/[^\x00-\xff]/g, "aa")
        if (tempName.length == 0) {
            $id("address_name_tr").className = "list_error";
            $id("address_name_error").innerHTML = "填写的姓名错误。<em>您没有填写收货人姓名，请填写收货人姓名。</em>";
            checked = false;
        } else if (tempName.length > 30) {
            $id("address_name_tr").className = "list_error";
            $id("address_name_error").innerHTML = "填写的姓名错误。<em>姓名必须少于等于30个字节。</em>";
            checked = false;
        } else if (tempName.length < 3) {
            $id("address_name_tr").className = "list_error";
            $id("address_name_error").innerHTML = "您填写的收货人姓名过短。<em>请填写正确的收货人姓名。</em>";
            checked = false;
        } else if (tempName.length > 0 && tempName.length <= 30 && !(/^[A-Za-z ]{3,30}$/).test(tempName)) {
            $id("address_name_tr").className = "list_error";
            $id("address_name_error").innerHTML = "填写的姓名错误。<em>请填写正确的收货人姓名,只能输入中文和字母。</em>";
            checked = false;
        } else {
            $id("address_name_tr").className = "";
            $id("address_name_error").innerHTML = "请填写收货人姓名。";
        }
        $id("address_mobile").value = $id("address_mobile").value.replace(/[ \?\&\~\^*\%\$\"\']/g, "");
        $id("address_phone0").value = $id("address_phone0").value.replace(/[ \?\&\~\^*\%\$\"\']/g, "");
        $id("address_phone1").value = $id("address_phone1").value.replace(/[ \?\&\~\^*\%\$\"\']/g, "");
        $id("address_phone2").value = $id("address_phone2").value.replace(/[ \?\&\~\^*\%\$\"\']/g, "");
        var tempMobile = $id("address_mobile").value;
        var tempPhone = $id("address_phone0").value + "-" + $id("address_phone1").value + ($id("address_phone2").value ? ("-" + $id("address_phone2").value) : "");
        if ($id("address_mobile").value == "" && $id("address_phone0").value == "" && $id("address_phone1").value == "" && $id("address_phone2").value == "") {
            $id("address_mobile_tr").className = "list_error";
            $id("address_phone_tr").className = "list_error exception";
            $id("address_mobile_error").innerHTML = "请填写手机或电话。<em>手机和电话号码至少填写一项</em>";
            checked = false;
        } else if ($isMobile(tempMobile)) {
            if (($id("address_phone0").value != "" || $id("address_phone1").value != "" || $id("address_phone2").value != "") && !$isPhone(tempPhone)) {
                $id("address_mobile_tr").className = "list_error";
                $id("address_phone_tr").className = "list_error exception";
                $id("address_mobile_error").innerHTML = "电话格式输入错误。<em>请按\"区号-电话号码-分机号码\"格式填写,分机可不填。</em>";
                checked = false;
            } else {
                $id("address_mobile_tr").className = "";
                $id("address_phone_tr").className = "";
                $id("address_mobile_error").innerHTML = "";
            }
        } else if ($isPhone(tempPhone)) {
            if ($id("address_mobile").value != "" && !$isMobile(tempMobile)) {
                $id("address_mobile_tr").className = "list_error";
                $id("address_phone_tr").className = "list_error exception";
                $id("address_mobile_error").innerHTML = "手机号码格式不正确。";
                checked = false;
            } else {
                $id("address_mobile_tr").className = "";
                $id("address_phone_tr").className = "";
                $id("address_mobile_error").innerHTML = "";
            }
        } else {
            var eStr = ""
            if ($id("address_mobile").value != "") {
                eStr += "手机号码格式不正确。<br/>"
            }
            if ($id("address_phone0").value != "" || $id("address_phone1").value != "" || $id("address_phone2").value != "") {
                eStr += "电话请按\"区号-电话号码-分机号码\"格式填写,分机可不填。<br/>"
            }
            $id("address_mobile_tr").className = "list_error";
            $id("address_phone_tr").className = "list_error exception";
            $id("address_mobile_error").innerHTML = "号码格式不正确。<em>" + eStr + "</em>";
            checked = false;
        }
        return checked;
    };

    function checkAddressEdit() {
        var edit = false;
        try {
            edit = (getAddressString() != $id("address_var").value) ? true : false;
        } catch (e) {}
        return edit;
    }

    function getAddressString() {
        try {
            var phone = $id("address_phone0").value + "-" + $id("address_phone1").value + ($id("address_phone2").value ? ("-" + $id("address_phone2").value) : "");
            var str = "AddrId=" + escape($id("address_id").value) + "&Uin=" + escape($id("address_uin").value) + "&PostCode=" + escape($id("address_code").value) + "&RecvName=" + escape($id("address_name").value) + "&RecvAddr=" + escape($id("address_street").value) + "&RecvPhone=" + escape(phone) + "&RecvMobil=" + escape($id("address_mobile").value) + "&FRegionId=" + escape($id("address_regionId").value) + "&FAddrType=" + escape($id("address_type").value);
        } catch (e) {}
        return str;
    };
}
function $addressFrame(obj) {
    var option = {
		action:"new",//edit or new. 如果是编辑，必须指定data参数
		data:{
			street:"",//具体的街道信息
			attrType:"0",//未知。请求证于sofawang
			code:"",//邮编
			mobile:"",//手机
			name:"",//姓名
			phone:"",//电话
			regionId:""//地址ID
		},
        uin: "",
        dom: "",
        addressId: "",
        regionId: "",
        addressStr: "",
        referProvince: "",
        showAll: false,
        autoInput: false,
        defAddrId: "",
        defAddrIndex: 0,
        tipTxt: '请填写该商品的收货地址。',
        curIdx: -1,
        floater: undefined,
        style: "2",
        cssUrl: "http://static.paipaiimg.com/my/recv_address.css",
        onConfirm: function (obj) {
            return true;
        },
        tp: '<div id="addressFrameFloat"><div class="tipswarn" id="tipswarn">{#tipTxt#}</div><div class="bcontentlist"><table width="100%" border="0" cellspacing="0" cellpadding="0"><tr id="address_regionId_tr"><th>所在地区：</th><td><div class="area" id="regionArea"></div><input type="hidden" name="address_regionId" id="address_regionId"><input type="hidden" name="address_regionStr" id="address_regionStr"></td><td class="txterror" id="address_regionId_error">请选择所在地区。</td></tr><tr id="address_street_tr"><th>街道地址：</th><td><input name="address_street" type="text" id="address_street" size="40" maxlength="255" /><span class="remark">(请填写您的详细地址，不需要重复填写省、市、地区)</span></td><td class="txterror"  id="address_street_error">请填写街道地址。</td></tr><tr id="address_code_tr"><th>邮编：</th><td><input name="address_code" type="text" id="address_code" maxlength="6" style="ime-mode:disabled;text-transform: lowercase;" /><span class="remark" ></span></td><td class="txterror" id="address_code_error">请填写邮编。</td></tr><tr id="address_name_tr"><th>收货人姓名：</th><td><input name="address_name"  type="text" id="address_name" maxlength="30" /><span class="remark"></span></td><td class="txterror" id="address_name_error">请填写收货人姓名。</td></tr><tr id="address_mobile_tr"><th>手机号码：</th><td><input name="address_mobile" type="text" id="address_mobile" maxlength="11" style="ime-mode:disabled;text-transform: lowercase;" /><span class="remark">(手机和电话至少填写一项)</span></td><td rowspan="2" class="txterror" id="address_mobile_error">请填写手机或电话。</td></tr><tr id="address_phone_tr"><th>电话号码：</th><td><input name="address_phone0" type="text" id="address_phone0" size="5" maxlength="4" style="ime-mode:disabled;text-transform: lowercase;" /> - <input name="address_phone1" type="text" id="address_phone1" size="10" maxlength="9" style="ime-mode:disabled;text-transform: lowercase;" /> - <input name="address_phone2" type="text" id="address_phone2" size="5" maxlength="6" style="ime-mode:disabled;text-transform: lowercase;" /><span class="remark" >(格式：区号-电话号码-分机，分机可不填)</span></td></tr></table><p class="operate"><input name="address_ok" type="submit" class="subbtn bw2" id="address_ok" value="确 定"/><input name="address_cancel" type="button" class="subbtn bw2" id="address_cancel" value="取 消"/><input type="hidden" name="address_id" id="address_id"><input type="hidden" name="address_type" id="address_type" value="0"><input type="hidden" name="address_uin" id="address_uin" value=""><input type="hidden" name="address_var" id="address_var" value=""></p></div></div>'
    };
    for (var i in obj) {
        option[i] = obj[i];
    }
    if (option.cssUrl) {
        $loadCss(option.cssUrl);
    }
    var regionMap = $getRegionMap();
	
	option.tp = option.tp.replace("{#tipTxt#}", option.tipTxt);
    window.addressOption = option;
    window.showAddressEditor = showAddressEditor;
    
	showAddressEditor();
	
    return addressOption;

	//显示选定的地址信息浮层
    function showAddressEditor(id){
        var option = window.addressOption;
        var floater = $float({
            //cover: true,
            style: "stand",
            title: (parseInt(id) >= 0) ? "修改收货地址：" : '请填写新的收货地址：',
            width: 580,
            //html: (((new RegExp("【edit】(.*)【edit】", "ig")).exec(option.tp)) ? RegExp.$1 : ""),
			html: option.tp,
            onClose:function(isOK){
				//如果是点的关闭叉叉或者取消按钮，并且检查有改动，那么就弹出confirm框框
				if(!isOK && checkAddressEdit() &&
					!confirm("您刚才修改的信息尚未保存。\n\r您确定不保存所做改动就离开吗？\n\r按“确定”离开，或按“取消”返回。")){
					return false;
				}
                return true;
            }
        });
        option.floater = floater;
		var data = option.data;
        var region = $regionInit({
            div: "regionArea",
            //regionId: (parseInt(id) >= 0) ? data.initRegionId : $regionGetIdByProvinceName(option.referProvince),
			regionId: data.regionId,
            onChange: function (obj) {
                var _regionId = "";
                if ((obj.currId)[2]) {
                    _regionId = (obj.currId)[2];
                }
                if ((obj.currId)[6]) {
                    _regionId = (obj.currId)[4] ? (obj.currId)[4] : (obj.currId)[2];
                }
                document.getElementById("address_regionId").value = obj.currId[7];
                return true;
            }
        });
        document.getElementById("address_street").value = data.street;
        document.getElementById("address_code").value = data.code;
        document.getElementById("address_name").value = data.name;
        document.getElementById("address_mobile").value = data.mobile;
        try {
            var tempPhone = data.phone.split("-");
            document.getElementById("address_phone0").value = tempPhone[1] ? tempPhone[0] : "";
            document.getElementById("address_phone1").value = tempPhone[1] ? tempPhone[1] : "";
            document.getElementById("address_phone2").value = tempPhone[2] ? tempPhone[2] : "";
        }catch(e){}
        document.getElementById("address_var").value = getAddressString();
        $addEvent(document.getElementById("address_ok"), "click", function (event) {
            if (checkAddressForm()){
				var phone = $id("address_phone0").value + "-" + $id("address_phone1").value + ($id("address_phone2").value ? ("-" + $id("address_phone2").value) : "");
                phone == "-" && (phone = "");
				//取修改后的数据，作为提交。
				option.postData = {
					name:escape($id("address_name").value),
					street:escape($id("address_street").value),
					code:escape($id("address_code").value),
					phone:escape(phone),
					mobile:escape($id("address_mobile").value),
					regionId:escape($id("address_regionId").value)
				};
				option.onSubmit(option);
				option.floater.close(true);
            }
			return true;
        });
        $addEvent(document.getElementById("address_cancel"), "click", function (event) {
            if (checkAddressEdit()) {
                if (!confirm("您刚才修改的信息尚未保存。\n\r您确定不保存所做改动就离开吗？\n\r按“确定”离开，或按“取消”返回。")) {
                    return false;
                }
            }
            floater.close();
        });
    };

	//校验规则检查
    function checkAddressForm(){
        var checked = true;
        if (document.getElementById("address_regionId").value == "") {
            document.getElementById("address_regionId_tr").className = "list_error";
            document.getElementById("address_regionId_error").innerHTML = "请选择所在地区。";
            checked = false;
        } else {
            document.getElementById("address_regionId_tr").className = "";
            document.getElementById("address_regionId_error").innerHTML = "";
        }
        document.getElementById("address_street").value = document.getElementById("address_street").value.replace(/^ *| *$/g, "").replace(/\?/g, "？").replace(/&/g, "?").replace(/~/g, "").replace(/\^/g, "").replace(/\$/g, "?").replace(/"/g, "?").replace(/'/g, "＇").replace(/#/g, "?");
        if (document.getElementById("address_street").value.length < 1) {
            document.getElementById("address_street_tr").className = "list_error";
            document.getElementById("address_street_error").innerHTML = "街道地址错误。<em>您没有填写街道地址，请填写所在街道地址。</em>";
            checked = false;
        } else if (document.getElementById("address_street").value.replace(/[^\x00-\xff]/g, "aa").length < 4) {
            document.getElementById("address_street_tr").className = "list_error";
            document.getElementById("address_street_error").innerHTML = "街道地址错误。<em>您输入的街道地址过短，请填写正确的街道地址。</em>";
            checked = false;
        } else if (document.getElementById("address_street").value.replace(/[^\x00-\xff]/g, "aa").length > 255) {
            document.getElementById("address_street_tr").className = "list_error";
            document.getElementById("address_street_error").innerHTML = "街道地址错误。<em>您输入的街道地址过长，不能超过255字节。</em>";
            checked = false;
        } else {
            document.getElementById("address_street_tr").className = "";
            document.getElementById("address_street_error").innerHTML = "请填写街道地址。";
        }
        document.getElementById("address_code").value = document.getElementById("address_code").value.replace(/[^\d]/g, "");
        if (document.getElementById("address_code").value.length > 1 && document.getElementById("address_code").value.length < 6) {
            document.getElementById("address_code_tr").className = "list_error";
            document.getElementById("address_code_error").innerHTML = "邮编错误。<em>邮政编码必须为6位数字。</em>";
            checked = false;
        } else {
            document.getElementById("address_code_tr").className = "";
            document.getElementById("address_code_error").innerHTML = "请填写邮编错误。";
        }
        document.getElementById("address_name").value = document.getElementById("address_name").value.replace(/[\?\&\~\^*\%\$\"\']/g, "").replace(/^ *| *$/g, "").replace(/ +/g, " ");
        var tempName = document.getElementById("address_name").value.replace(/[^\x00-\xff]/g, "aa")
        if (tempName.length == 0) {
            document.getElementById("address_name_tr").className = "list_error";
            document.getElementById("address_name_error").innerHTML = "填写的姓名错误。<em>您没有填写收货人姓名，请填写收货人姓名。</em>";
            checked = false;
        } else if (tempName.length > 30) {
            document.getElementById("address_name_tr").className = "list_error";
            document.getElementById("address_name_error").innerHTML = "填写的姓名错误。<em>姓名必须少于等于30个字节。</em>";
            checked = false;
        } else if (tempName.length < 3) {
            document.getElementById("address_name_tr").className = "list_error";
            document.getElementById("address_name_error").innerHTML = "您填写的收货人姓名过短。<em>请填写正确的收货人姓名。</em>";
            checked = false;
        } else if (tempName.length > 0 && tempName.length <= 30 && !(/^[A-Za-z ]{3,30}$/).test(tempName)) {
            document.getElementById("address_name_tr").className = "list_error";
            document.getElementById("address_name_error").innerHTML = "填写的姓名错误。<em>请填写正确的收货人姓名,只能输入中文和字母。</em>";
            checked = false;
        } else {
            document.getElementById("address_name_tr").className = "";
            document.getElementById("address_name_error").innerHTML = "请填写收货人姓名。";
        }
        document.getElementById("address_mobile").value = document.getElementById("address_mobile").value.replace(/[ \?\&\~\^*\%\$\"\']/g, "");
        document.getElementById("address_phone0").value = document.getElementById("address_phone0").value.replace(/[ \?\&\~\^*\%\$\"\']/g, "");
        document.getElementById("address_phone1").value = document.getElementById("address_phone1").value.replace(/[ \?\&\~\^*\%\$\"\']/g, "");
        document.getElementById("address_phone2").value = document.getElementById("address_phone2").value.replace(/[ \?\&\~\^*\%\$\"\']/g, "");
        var tempMobile = document.getElementById("address_mobile").value;
        var tempPhone = document.getElementById("address_phone0").value + "-" + document.getElementById("address_phone1").value + (document.getElementById("address_phone2").value ? ("-" + document.getElementById("address_phone2").value) : "");
        if (document.getElementById("address_mobile").value == "" && document.getElementById("address_phone0").value == "" && document.getElementById("address_phone1").value == "" && document.getElementById("address_phone2").value == "") {
            document.getElementById("address_mobile_tr").className = "list_error";
            document.getElementById("address_phone_tr").className = "list_error exception";
            document.getElementById("address_mobile_error").innerHTML = "请填写手机或电话。<em>手机和电话号码至少填写一项</em>";
            checked = false;
        } else if ($isMobile(tempMobile)) {
            if ((document.getElementById("address_phone0").value != "" || document.getElementById("address_phone1").value != "" || document.getElementById("address_phone2").value != "") && !$isPhone(tempPhone)) {
                document.getElementById("address_mobile_tr").className = "list_error";
                document.getElementById("address_phone_tr").className = "list_error exception";
                document.getElementById("address_mobile_error").innerHTML = "电话格式输入错误。<em>请按“区号-电话号码-分机号码”格式填写,分机可不填。</em>";
                checked = false;
            } else {
                document.getElementById("address_mobile_tr").className = "";
                document.getElementById("address_phone_tr").className = "";
                document.getElementById("address_mobile_error").innerHTML = "";
            }
        } else if ($isPhone(tempPhone)) {
            if (document.getElementById("address_mobile").value != "" && !$isMobile(tempMobile)) {
                document.getElementById("address_mobile_tr").className = "list_error";
                document.getElementById("address_phone_tr").className = "list_error exception";
                document.getElementById("address_mobile_error").innerHTML = "手机号码格式不正确。";
                checked = false;
            } else {
                document.getElementById("address_mobile_tr").className = "";
                document.getElementById("address_phone_tr").className = "";
                document.getElementById("address_mobile_error").innerHTML = "";
            }
        } else {
            var eStr = ""
            if (document.getElementById("address_mobile").value != "") {
                eStr += "手机号码格式不正确。<br/>"
            }
            if (document.getElementById("address_phone0").value != "" || document.getElementById("address_phone1").value != "" || document.getElementById("address_phone2").value != "") {
                eStr += "电话请按“区号-电话号码-分机号码”格式填写,分机可不填。<br/>"
            }
            document.getElementById("address_mobile_tr").className = "list_error";
            document.getElementById("address_phone_tr").className = "list_error exception";
            document.getElementById("address_mobile_error").innerHTML = "号码格式不正确。<em>" + eStr + "</em>";
            checked = false;
        }
        return checked;
    };

	//
    function checkAddressEdit(){
        var edit = false;
        try {
            edit = (getAddressString() != document.getElementById("address_var").value) ? true : false;
        } catch (e) {}
        return edit;
    }
	
	//拼接地址信息，用于提交。
    function getAddressString(){
        try {
            var phone = document.getElementById("address_phone0").value + "-" + document.getElementById("address_phone1").value + (document.getElementById("address_phone2").value ? ("-" + document.getElementById("address_phone2").value) : "");
            var str = "AddrId=" + escape(document.getElementById("address_id").value) + "&Uin=" + escape(document.getElementById("address_uin").value) + "&PostCode=" + escape(document.getElementById("address_code").value) + "&RecvName=" + escape(document.getElementById("address_name").value) + "&RecvAddr=" + escape(document.getElementById("address_street").value) + "&RecvPhone=" + escape(phone) + "&RecvMobil=" + escape(document.getElementById("address_mobile").value) + "&FRegionId=" + escape(document.getElementById("address_regionId").value) + "&FAddrType=" + escape(document.getElementById("address_type").value);
        } catch (e) {}
        return str;
    };
}
//把商品加入购物车
function $addToShopcar(obj) {
    var option = {
        commlist: "",
        style: 0,
        left: "",
        top: "",
        checkIframe: false
    };
    option.template = '【添加成功】<div class="box_hint_normal"><span class="icon msg2-icon-right"></span><div class="hint_content"><p class="hint_title"><strong>已成功添加到购物车！</strong></p><p>购物车里已有 {#count#} 种商品。总价 {#total#} 元。</p><div class="hint_op"><button  id="shopcar_b_goon">再逛逛</button><button  id="shopcar_b_watch">去购物车结算</button></div></div></div>【添加成功】【已经存在】<div class="box_hint_normal"><span class="icon msg2-icon-right"></span><div class="hint_content"><p class="hint_title"><strong>购物车中已经有相同商品。您希望：</strong></p><div class="hint_op"><button id="shopcar_b_cancel">不要添加</button><button  id="shopcar_b_cover">多买一件</button><button id="shopcar_b_watch">去购物车结账</button> </div><div class="hint_other"><p style="text-align:right; display:none;"><a href="##">不再显示该提示</a></p></div></div></div>【已经存在】【其他错误】<div class="box_hint_normal"><span class="icon msg2-icon-right"></span><div class="hint_content"><p class="hint_title"><strong>{#error#}</strong></p><div class="hint_op"> <button id="shopcar_b_cancel">取 消</button></div><div class="hint_other"></div></div></div>【其他错误】';
    for (var i in obj) {
        option[i] = obj[i];
    }
    window._shopcarOption = option;
    var s = $$("#shopCarHead");
    if (s.length > 0) {
        $animateFloat({
            startY: s.offset().top,
            startX: s.offset().left,
            startH: s.height(),
            startW: s.width(),
            endY: option.top,
            endX: option.left,
            endH: 130,
            endW: 400,
            callBack: function () {
                doShopcatAction();
                return true;
            }
        })
    } else {
        doShopcatAction();
    }

    function doShopcatAction(type) {
        var option = window._shopcarOption;
        var tips = $float({
            html: '<div class="loading"><img src="http://static.paipaiimg.com/assets/common/icon_loading_large.gif" /><strong>请稍候...</strong></div>',
            left: option.left,
            top: option.top,
            cover: false
        });
        window._shopcarOption.tipHandle = tips;
        $loadScript("http://auction.paipai.com/cgi-bin/shopcart/addcmdy?commlist=" + (option.commlist.replace(/\+/g, encodeURIComponent('+'))) + "&type=" + (type ? type : 0) + "&t=" + Math.random(), "addcmdy");
    }
    window.shopcarAddItemCallBack = function (obj) {
        var option = window._shopcarOption;
        if (obj.errorId == "0") {
            var html = ((new RegExp("【添加成功】(.*)【添加成功】", "ig")).exec(option.template)) ? RegExp.$1 : "";html = html.replace(/{#count#}/g, obj.itemCount);html = html.replace(/{#uin#}/g, obj.uin);html = html.replace(/{#total#}/g, (obj.priceSum / 100).toFixed(2));
        } else if (obj.errorId == "1") {
            var html = ((new RegExp("【已经存在】(.*)【已经存在】", "ig")).exec(option.template)) ? RegExp.$1 : "";html = html.replace(/{#count#}/g, obj.itemCount);html = html.replace(/{#uin#}/g, obj.uin);html = html.replace(/{#total#}/g, (obj.priceSum / 100).toFixed(2));
        } else if (obj.errorId == "2") {
            if (confirm('您的购物车已满！是否确定将本商品加入购物车？\n点击“确定”后，系统将帮您移除最早加入到购物车的商品。')) {
                doShopcatAction(1);
            } else {
                window._shopcarOption.tipHandle.close();
            }
            return;
        } else {
            var html = ((new RegExp("【其他错误】(.*)【其他错误】", "ig")).exec(option.template)) ? RegExp.$1 : "";html = html.replace(/{#error#}/g, obj.errorMsg);
        }
        var tips = $float({
            title: "提示",
            html: html,
            style: "stand",
            left: option.left,
            top: option.top,
            cover: false
        });
        window._shopcarOption.tipHandle = tips;
		var _watch = document.getElementById("shopcar_b_watch"),
			goon = document.getElementById("shopcar_b_goon"),
			cover = document.getElementById("shopcar_b_cover"),
			cancle = document.getElementById("shopcar_b_cancel");
			//check = document.getElementById("shopcar_b_check");
		//查看购物车
        _watch && (_watch.onclick = function(){
            window._shopcarOption.tipHandle.close();
            if (window.parent && option.checkIframe) {
                window.parent.location.href = "http://auction.paipai.com/cgi-bin/shopcart/detail?style=" + window._shopcarOption.style;
            } else {
                location.href = "http://auction.paipai.com/cgi-bin/shopcart/detail?style=" + window._shopcarOption.style;
            }
        });
		//继续购物
		goon && (goon.onclick = function () {
            showCloseAnimat();
            window._shopcarOption.tipHandle.close();
        });
		//仍然购买重复商品
		cover && (cover.onclick = function () {
            window._shopcarOption.tipHandle.close();
            doShopcatAction(1);
        });
		//不购买、取消
		cancle && (cancle.onclick = function () {
            showCloseAnimat();
            window._shopcarOption.tipHandle.close();
        });
		
        function showCloseAnimat() {
            var s = $$("#shopCarHead");
            var f = $$(window._shopcarOption.tipHandle.boxHandel);
            if (s.length > 0) {
                $animateFloat({
                    startY: f.offset().top,
                    startX: f.offset().left,
                    startH: f.height(),
                    startW: f.width(),
                    endY: s.offset().top,
                    endX: s.offset().left,
                    endH: s.height(),
                    endW: s.width(),
                    callBack: function () {
                        return true;
                    }
                });
            }
        }
    };
    return option;
}
function $addVb2ctagSeg(vb2ctag,tagId){
	var arr=vb2ctag.split("_");
	arr[4]=tagId;
	return arr.join("_");
}
function $addWeiboFriend(appkey, name) {
	var options = {
		path : 2,//微博API的类型
		params : {
			format : 'json',//返回接口内容的格式
			appkey : '0b10edf7d7574c32ad14411d62755d73'//appkey 默认为拍拍数码
		},
		login : 1,//是否需要鉴权
		callBack : 'addFriend',//回调函数名
		method : 'post'
	}
	if (name) {
		options.params.name = name;
	}
	if (appkey) {
		options.params.appkey = appkey;
	}

	$loadCss('http://static.paipaiimg.com/module/tshare.css');
	checkLoginAndDo(doAddFriend, false);

	function doAddFriend() {
		var hc = [];
		for ( var i in options) {
			if (i == 'params') {
				var phc = [];
				for ( var j in options[i]) {
					if (j == 'content') {
						phc.push(j + '=' + encodeURIComponent(options[i][j]));
					} else {
						phc.push(j + '=' + options[i][j]);
					}
				}
				hc
						.push(i
								+ '='
								+ encodeURIComponent(encodeURIComponent(phc
										.join('&'))));
			} else {
				hc.push(i + '=' + options[i]);
			}

		}
		var url = 'http://auction1.3c.paipai.com/microBlog.xhtml?'
				+ hc.join('&');
		$loadScript(url);
		window[options.callBack] = function(data) {
			if (data.ret == 0) {
				var opt = {
					title : '收听成功',
					html : '<div class="tshare_suc"><h3><span class="msg3-icon-right"></span>收听成功！</h3><p><span id="closeAddFriendTimer">3</span>秒后窗口自动关闭，<a href="javascript:;" onclick="addFriendFloat.destruct();">立即关闭</a></p><a class="tshare_sucgo" target="_blank" href="http://t.qq.com/'
							+ options.params.name + '">去微博看看</a></div>',
					cName : 'module_box_normal tshare_box',
					cover : true,
					fix : true,
					onInit : function(o) {
						var times = 3;
						addFriendClose = setInterval(function() {
							if (times == 0) {
								addFriendFloat.destruct();
								clearInterval(addFriendClose);
								return;
							}
							$id("closeAddFriendTimer").innerHTML = times;
							times = times - 1;
						}, 1000);
						return true;
					},
					width : '350'
				};
				addFriendFloat = $float(opt);
			} else if (data.ret == 6) {
				var opt = {
					title : '收听微博',
					html : '<div class="tshare_suc"><h3><span class="msg2-icon-warn"></span> 您的QQ号还没有注册微博！</h3><a class="tshare_sucgo" href="http://t.qq.com/invite/?pref=qqcom.mininav" onclick="addFriendFloat.destruct();" target="_blank">马上去注册</a></div>',
					cName : 'module_box_normal tshare_box',
					cover : true,
					fix : true,
					leaver : 3,
					width : '350'
				};
				addFriendFloat = $float(opt);
			} else if (data.ret == 5) {
				checkLoginAndDo(doAddFriend, true);
			}
		}
	}
	function checkLoginAndDo(func, login) {
		if (login || !$isLogin()) {
			var opt = {
				'float' : true, //浮动模式，是否浮窗登录，【true/false】
				model : false, //是否模态登录，如果float为false的时候强制为模态，模态登录显示覆盖背景，不显示关闭窗口
				drag : true, //是否可以拖动，如果float为false时强制为false
				check : false, //是否需要检测用户登录状态?
				quick : true, //是否支持快速登录
				close : true, //模态登录框和非浮动登录框的时候为false
				x : document.documentElement.clientWidth / 2 - 200,
				y : document.documentElement.scrollTop + 150,
				type : "func",
				title : "请您登录后继续",
				action : function() {
					func(options)
				}
			};
			$loginFrame(opt);
		} else {
			func(options);
		}
	}
}
(function(){
	var _adFloaterHandle=null;
	$adFloater=function(obj){
	//页面右下角tips浮动广告组件
		var option={
			html:"",
			right:1,
			bottom:1,
			fix:true,
			closerId:"",
			id:"adFloater",				//id(默认)
			className:"adfloater",		//样式（默认）
			func:$empty()				//设置后执行的函数
		};
		for(var i in obj){
			option[i]=obj[i];
		}
		//关闭掉类似窗口
		if(_adFloaterHandle){
			try{_adFloaterHandle.close();_adFloaterHandle=null;}catch(e){}
		}
		
		var c=document.createElement("div");
		c.id=option.id;	
		c.className=option.className;
		c.style.position="absolute";
		c.innerHTML='<div id="'+option.id+'Content">'+option.html+'</div><div id="'+option.id+'Cover" style="width:0px; height:0px; position:absolute; top:0px; left:0px; z-index:-1;filter:Alpha(Opacity=0,Style=0);opacity:0;"><iframe id="'+option.id+'Iframe" frameborder="0" scrolling="no" style=" " height="0"   width="0"> </div>';
		document.body.appendChild(c);
		//返回操作句柄
		option.content=$id(option.id+"Content");
		option.cover=$id(option.id+"Cover");
		option.iframe=$id(option.id+"Iframe");
		option.cover.style.height=option.iframe.style.height=c.scrollHeight+"px";
		option.cover.style.width=option.iframe.style.width=c.scrollWidth+"px";
		option.frame=c;
		option.frame.style.zIndex ="11111";
		if(option.fix){
			if(navigator.appVersion.split(";")[1].replace(/[ ]/g,"")=="MSIE6.0"){
				//option.frame.style.display ="none";
				//option.frame.setAttribute("hideTag","0");
				setInterval(function(){
					if(option.frame){
						option.frame.style.left=Number(document.documentElement.scrollLeft)+(Number(document.documentElement.clientWidth)-Number(option.frame.scrollWidth)-option.right)+"px";
						option.frame.style.top=Number(document.documentElement.scrollTop)+(Number(document.documentElement.clientHeight)-Number(option.frame.scrollHeight)-option.bottom)+"px";
					}
					var c=parseInt(option.frame.style.top.replace("px",""));
					var o=parseInt(option.frame.getAttribute("oldTop"));
					//var t=parseInt(option.frame.getAttribute("hideTag"));
					(!o)?option.frame.setAttribute("oldTop",c):"";
					//隐藏标记自减或者初始化
					//option.frame.setAttribute("hideTag",o==c?(t-1):15);
					//设置新的原位置
					option.frame.setAttribute("oldTop",c);
					//设置显示隐藏状态
					//option.frame.style.display=(t>0)?"none":"";
				},40);
			}else{
				option.frame.style.position="fixed";
				option.frame.style.right=option.right+"px";
				option.frame.style.bottom=option.bottom+"px";
				option.frame.style.left="";
				option.frame.style.top="";
			}
		}
		option.close=function(){
			option.frame.parentNode.removeChild(option.frame);
			delete option;
		};
		if(option.closerId){
			$id(option.closerId).onclick=option.close;
		};
		option.func(option);
		_adFloaterHandle=option;
		return option;
	}	
})()
function $ajaxCross(url,reqType,codePage){
        var t=(new Date()).toLocaleTimeString().replace(/:/g,"");
        var u1=url.substring(0,url.indexOf("?")),u2=url.substring(url.indexOf("?")+1,url.indexOf("&callback")),u3=url.substr(url.indexOf("&callback"));
        var data=escape(u2+"&t="+t),qUrl=reqType.toUpperCase()=="POST"? u1+"&data="+data+u3:u1+"?"+data+u3;
		if(codePage!="1"){
			codePage="0";
		}
		var div=document.createElement("DIV");
			div.width=1;div.height=1;
			document.body.appendChild(div);
        if($isBrowser("ie")){
			div.innerHTML='<object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=10,0,0,0" width="1" height="1" id="redVip'+t+'">    <param name="movie" value="http://static.paipaiimg.com/flash/release/simpleDataLoader.swf?t='+t+'" /><param value="high" name="quality" /><param name="allowScriptAccess" value="always" /><param name="flashVars" value="charset='+codePage+'&dataUrl='+qUrl+'" /><param name="wmode" value="transparent" /></object>'
        }else{
           div.innerHTML='<object width="1" height="1" id="redVip'+t+'" type="application/x-shockwave-flash" data="http://static.paipaiimg.com/flash/release/simpleDataLoader.swf?t='+t+'"><param value="high" name="quality" /><param name="allowScriptAccess" value="always" /><param name="flashVars" value="charset='+codePage+'&dataUrl='+qUrl+' /><param name="wmode" value="transparent" /></object>';
    	}
}
function $animateFloat(obj){
	//设置一个动画移动的浮层，可展开，可收起（从指定大小，坐标变化为指定大小、坐标，执行完后自动关闭）
	var option={
		startY:0,
		startX:0,
		startH:0,
		startW:0,
		endY:0,
		endX:0,
		endH:0,
		endW:0,
		speed:400,
		callBack:function(){return true;}
	}
	for(var i in obj){
		option[i]=obj[i];
	}
	if(!window._animateFloatHandle){
		var d=document.createElement("div");
		d.id="animateDiv";
		d.style.position="absolute";
		d.style.zIndex=500;
		d.style.background="#ffffff";
		d.style.border="1px solid #666666";
		document.body.appendChild(d);
		window._animateFloatHandle=document.getElementById("animateDiv");
	}
	var d=_animateFloatHandle;
	d.style.height=option.startH+"px";
	d.style.width=option.startW+"px";
	d.style.top=option.startY+"px";
	d.style.left=option.startX+"px";
	$$(d).show();
	$$(d).animate(
		{
			"left":option.endX+"px",
			"top":option.endY+"px",
			"height":option.endH+"px",
			"width":option.endW+"px"
		},
		option.speed,"",
		function(){
			$$(this).hide();
			return option.callBack();
		}
	);
}
function $array_walk(arr,func){
				for(var i=0;i<arr.length;i++){
					func(i,arr[i]);
				}
			}
function $attention(option){
  var opt = {
    uin : "",  //关注目标uin
    type : 1,  //关注操作类型(1:关注,2:取消关注)
    ptag : "",  //上报ptag
    onSuccess : null,  //成功后回调 function(uin,fansNum)
    onFail : null, //失败后回调 function(uin,fansNum)
    onLimit : null  //关注已达上限 function(uin,fansNum)
  };
  for(var o in option){
    opt[o] = option[o];
  }  
  /* @interface:156;
  * 接口url：http://ext.paipai.com/concern/manageconcernshop
  * 接口名称：迷你拍拍-关注--关注操作（添加或、删除）
  * 期待回调：传入callback函数
  * @interfaceEnd*/
  var url = "http://ext.paipai.com/concern/manageconcernshop?callback=attentionCallBack&optype=" + opt.type + "&shopid=" + opt.uin;
  var _retCoder = $returnCode({url:url,frequence:2});
  $loadScript(url, "attentionScript");
  window.attentionCallBack = function(info){
     _retCoder.report(true,info.ret);
     $countRd(opt.ptag);
      switch(info.ret*1){
        case 9:        
          $loginFrame({
             type:'func',
             action: function(){
               $attention(opt);
             }
          });
          break;
        case 0:
		case 10:
          opt.onSuccess && opt.onSuccess(info.shopid, info.num);
          break;
        case 22:
          opt.onLimit && opt.onLimit(info.shopid, info.num);
          break;
        case 40:
          opt.onFail && opt.onFail(info.shopid, info.num);
          break;
        default:
          opt.onFail && opt.onFail(info.shopid, info.num);
          break;
      }
  }
}
function $attentionMini(option){
  var opt = {
    uin : "",  //关注目标uin
    type : 1,  //关注操作类型(1:关注,2:取消关注)
    ptag : "",  //上报ptag
    onSuccess : null,  //成功后回调 function(uin,fansNum)
    onFail : null, //失败后回调 function(uin,fansNum)
    onLimit : null  //关注已达上限 function(uin,fansNum)
  };
  for(var o in option){
    opt[o] = option[o];
  }  
  /* @interface:156;
  * 接口url：http://ext.paipai.com/concern/manageconcernshop
  * 接口名称：迷你拍拍-关注--关注操作（添加或、删除）
  * 期待回调：传入callback函数
  * @interfaceEnd*/
  var url = "http://ext.paipai.com/concern/manageconcernshop?callback=attentionCallBack&optype=" + opt.type + "&shopid=" + opt.uin;
  var _retCoder = $returnCode({url:url,frequence:2});
  $loadScript(url, "attentionScript");
  window.attentionCallBack = function(info){
     _retCoder.report(true,info.ret);
     $countRd(opt.ptag);
      switch(info.ret*1){
        case 9:        
          $loginFrame({
             type:'func',
             action: function(){
               $attentionMini(opt);
             }
          });
          break;
        case 0:
	case 10:
          opt.onSuccess && opt.onSuccess(info.shopid, info.num);
          break;
        case 22:
          opt.onLimit && opt.onLimit(info.shopid, info.num);
          break;
        case 40:
          opt.onFail && opt.onFail(info.shopid, info.num);
          break;
        default:
          opt.onFail && opt.onFail(info.shopid, info.num);
          break;
      }
  }
}
function $autoLoadImages(){
//卖场专用图片按需加载组件，图片把src改为init_src即可，可支持异步加载的数据
	window['_PP_core_autoLoadImages_data']={
		allNum:0,
		nosrcImages:[],
		nosrcLength:0, //无src的图片个数
		ciguid:0,		//临时分配的guid编号
		ptr:null //定时器句柄
	};
	window._PP_core_autoLoadImages_data.ptr = setInterval(function(){
		doScroll()		 
	},100);
	function doScroll(){
		var data=window['_PP_core_autoLoadImages_data'],
			allImage = document.images;
		if(allImage.length>data.allNum){
			for(var i=0,j=allImage.length;i<j;i++){
				var src = allImage[i].getAttribute("init_src");
				if(src && !allImage[i].getAttribute("iguid")){//如果有iguid属性的图片则说明这个图片已经处理过了。
					data.nosrcImages.push([allImage[i],src,$getY(allImage[i])]);	
				}
			}
			data.nosrcLength = data.nosrcImages.length;
			data.allNum=allImage.length;
		}
		//如果没有图片可加载的话
		if(data.nosrcLength==0){
			if(data.ptr){
				clearInterval(data.ptr);
				data.ptr = null;
				data.allNum = 0;
				data.nosrcImages = [];
			}	
			return;
		};
		
		var bodyCache=document.body,
			domCache=(document.compatMode=='BackCompat')?bodyCache:document.documentElement,
			offsetH = window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop,
			visibleH=offsetH + domCache.clientHeight;//可见范围
		
		for(var i=0,j=data.nosrcImages.length;i<j;i++){
			if(!data.nosrcImages[i]){continue;}
			if((visibleH+100)>data.nosrcImages[i][2]){
				var _item=data.nosrcImages[i];
				_item[0].setAttribute("src",_item[1]);
				_item[0].setAttribute("iguid",data.ciguid++);//如果有iguid属性的图片则说明这个图片已经处理过了。
				delete data.nosrcImages[i];
				data.nosrcLength--;
			}
		}		
	}
}
function $backHome(element){
		$addEvent(element,"click",function(e){
					//window.history.back();
					window.location = "http://web2.qq.com/app/pay/index.html"
					e=e||window.event;
					$stopBubble(e);
				});
	}
function $backToTop(opt) {
	// 返回页面顶部
	
	// 预定义的代码
	var option = {
		id: "backToTop",			// 将要创建的回顶部按钮的 id 值
		className: "backToTop",		// 按钮的类名称，用于添加样式
		container: "foot",		// 容器id，用于定位按钮的参照物
		scroll: true,				// 是否在回顶时进行滑动，true 时启用滑动效果
		duration: 500,				// 滑动时长，毫秒
		fps: 50,					// 每秒滑动帧数
		cssUrl: "",					// 按钮所对应的外联样式表，会被内联样式覆盖掉
		
		//以下是内联样式
		background: "url('http://paipai.lady.qq.com/images/magazine6/totop_03.jpg') no-repeat scroll transparent",
		height : "67px",
		width : "19px",
		left: "960px",
		bottom : "10%"
	};
	
	// 合并参数
	$extend(option, opt);
	
	// 计算滑动的执行周期，毫秒
	option.periodical = Math.round(1000 / option.fps);
	// 步长总数，作为滑动的执行次数
	option.step = Math.round(option.duration / option.fps);
	
	// 创建按钮
	createButton(option.cssUrl);
	function createButton(cssUrl) {
		// 检测 id 是否已被其他元素使用，如果是就什么都不做直接返回
		if($id(option.id)) {
			return false;
		}
		
		// 异步加载css,如果 cssUrl 为空则不加载样式
        if (cssUrl){
            $loadCss(cssUrl);
        }
		
		// 创建元素
		var b = document.createElement("div");
		b.id = option.id;
		b.className = option.className;
		
		// 添加样式
		with(b.style) {
			background = option.background;
			display = "inline-block";
			position = "fixed";
			textIndent = "-999em";
			cursor = "pointer";
			height = option.height;
			width = option.width;
			left = "2000px";
			bottom = option.bottom;
		}
		//判断浏览器并锁定按钮水平位置
		$ready(function(){
			$isBrowser('ie6') && (b.style.position = "absolute");
			var ctX = $id(option.container) ? $getX($id(option.container)) : 0;
			b.style.left = ctX + parseInt(option.left) + "px";
			window.onresize = function() {
				var ctX = $id(option.container) ? $getX($id(option.container)) : 0;
				b.style.left = ctX + parseInt(option.left) + "px";
			}
		});		
		// 绑定点击事件
		b.onclick = backToTopHandle(option.scroll, option.step, option.periodical);
		document.body.appendChild(b);
	};
	
	// 点击响应，根据 scroll 的值返回不同的函数（有无滑动效果）
	function backToTopHandle(scroll, step, periodical) {
		if(scroll) {
			// timer 是记步器，用于跟总步数  step 比较，判断执行终点。pageHeight 记录鼠标点击时页面高度，以供记算每步滑动的距离。
			var timer = 0;
			var pageHeight;
			return function scrollPage() {
				// 启动滑动时先计算页面高度，滑动结束后记步器归零。
				if(timer === 0) {
					pageHeight = $getPageScrollHeight();
				}
				if (timer < step) {
					timer += 1;
					scrollStep(timer, pageHeight, -pageHeight, step);
					setTimeout(scrollPage, periodical);
				} else {
					timer = 0;
				}
			}
		} else {
			return function() {
				window.scrollTo(0, 0);
			}
		}
	};
	
	// 执行页面滑动，使用 easeOut 算法
	function scrollStep(timer, begin, target, step) {
		window.scrollTo(0, Math.ceil(-target *(timer/=step)*(timer-2) + begin));
	};
}
function $bindActiveObjects(){
    //初始化市场活动的按钮及输入框相关操作
    $$("#activeQQClicker,#activeOrderClicker").live("click",function(){
        //QQ号抽奖活动
        var activeId=$$(this).attr("activeId");
		var level=$$(this).attr("level");
        if(level){
           $$("#level").val(level)
        };
        if(this.id=="activeQQClicker"){
            if(activeId){
                window.g_sActive=activeId;
            }
            $activeRaffleByQQ();
        }
        //订单号抽奖活动
        if(this.id=="activeOrderClicker"){
            if(activeId){
                window.g_sActive=activeId;
            }
            $activeRaffleByOrderId("","",level,0,$$("#deal_id").val());
        }
    });
	var defalutVal="";
    //订单号输入框事件绑定
    $$("#deal_id").focus(function(){
        var _t=$$(this),
			val=_t.val();
        _t.css("color","#000");
        if(val.indexOf("填写")!=-1){
			defalutVal=val;
            _t.val("");
        }
    }).blur(function(){
        var _t=$$(this),
			val=_t.val();
        if(val=="" ||val.indexOf('填写')!=-1){
            _t.val(defalutVal).css("color","#ccc");
        }else{
            _t.css("color","#000");
        }
    }).blur();
}
function $bindActiveTimecount() {
    //绑定活动的倒计时功能
    var items = $$("[tag='marketCountdown']");
    if (items.length < 1) {
        return;
    }
    setInterval(function () {
        $$("[tag='marketCountdown']").each(function () {
            var s = new Date($$(this).attr("startTime"));
            var e = new Date($$(this).attr("endTime"));
            var n = new Date();
            var temp = "",
				timeLeft = [0, 0, 0, 0];
            if (s > n) { //未开始
                timeLeft = $getTimeDistance(parseInt((s - n) / 1000));
                var css = timeLeft[0] < 1 ? "timeForSaleStart1" : "timeForSaleStart2"
                temp = '<div class="timeForSaleStart"><div class="' + css + '"><span class="s_yy">{#YY#}</span><span class="year text">年</span><span class="s_mm">{#MM#}</span><span class="month text">月</span><span class="s_dd">{#DD#}</span><span class="day text">日</span><span class="s_hh">{#HH#}</span><span class="hour text">时</span><span class="textTime text">活动尚未开始，现在离活动开始还有：</span><span class="dd">{#dd#}</span><span class="days text">天</span><span class="hh">{#hh#}</span><span class="hours text">时</span><span class="mm">{#mm#}</span><span class="minutes text">分</span><span class="ss">{#ss#}</span><span class="secends text">秒</span></div></div>';
            } else if (n > s && n < e) {
                temp = '<div class="timeForSaleing"><span class="s_yy">{#YY#}</span><span class="year text">年</span><span class="s_mm">{#MM#}</span><span class="month text">月</span><span class="s_dd">{#DD#}</span><span class="day text">日</span><span class="s_hh">{#DD#}</span><span class="hour text">时</span><span class="textTime text">活动已开始，离活动结束还有：</span><span class="dd">{#dd#}</span><span class="days text">天</span><span class="hh">{#hh#}</span><span class="hours text">时</span><span class="mm">{#mm#}</span><span class="minutes text">分</span><span class="ss">{#ss#}</span><span class="secends text">秒</span></div>';
                timeLeft = $getTimeDistance(parseInt((e - n) / 1000));
            } else {
                temp = '<div class="timeForSaleEnd">活动已结束</div>';
            }
            for (var i = 0; i < 4; i++) {
                timeLeft[i] = timeLeft[i].toString().length < 2 ? ("0" + timeLeft[i].toString()) : timeLeft[i].toString();
            }
            //日期
            var dtime = this.getAttribute('time') == 'targetTime' ? s : n;
            var yd = dtime.getFullYear().toString();
            var md = (dtime.getMonth() + 1).toString();
            var dd = dtime.getDate().toString();
            var hh = dtime.getHours().toString();
            temp = temp.replace("{#YY#}", yd.length < 2 ? '0' + yd : yd);
            temp = temp.replace("{#MM#}", md.length < 2 ? '0' + md : md);
            temp = temp.replace("{#DD#}", dd.length < 2 ? '0' + dd : dd);
            temp = temp.replace("{#HH#}", hh.length < 2 ? '0' + hh : hh);
            temp = temp.replace("{#dd#}", timeLeft[0]);
            temp = temp.replace("{#hh#}", timeLeft[1]);
            temp = temp.replace("{#mm#}", timeLeft[2]);
            temp = temp.replace("{#ss#}", timeLeft[3]);
            this.innerHTML = temp;
        })
    }, 1000);
}
//绑定自动配置的rd统计
$bindAutoRd=function(oRd){
	for(var it in oRd){
        var o=$id(it);
        if(o!=null&&oRd[it]["rd"]!=""){
			var func=(function(rd){
							   return function(){
								   $countRd(rd);
								   }
						})(oRd[it]["rd"]);
            $addEvent(o,"click",func)
        }
    }
}
function  $bindCommonEvent() {
    window.marketCache.live("click", function () {
        //获取标签及类型
        var _t = $$(this);
        var tag = _t.attr("tag");
        var ptag = _t.attr("ptag");
        var href = _t.attr("href");
        var tagType = this.tagName;
        if (ptag) {
            var rd = $$(this).attr("ptag");
            rd != "" && $countRd(rd);
        }
		switch(tag){
		    case "copyUrl":
			   $copyUrl();
			   break;	
		    case "saveUrl":
				var me = $$(this);
				var sName = me.attr("title");
				var sUrl = me.attr("url");
				if (sUrl && sUrl.indexOf("http") > -1) {
					$saveUrl(sName, sUrl);
				} else {
					$saveUrl();
				}
			   break;		
		    case "shareUrl":
               $shareUrl();
			   break;		
		    case "favoriteComm":
				$favoriteComm({
					cname: $$(this).attr("title"),
					cid: $$(this).attr("cid"),
					uid: $getQQNum(),
					left: $getX(this),
					top: $getY(this)
				});
			   break;
		    case "favoriteShop":
				$favoriteShop({
					sid: $$(this).attr("sid"),
					uid: $getQQNum(),
					left: $getX(this),
					top: $getY(this)
				});
			   break;			   
		    case "showItem":
               $$("#" + $$(this).attr("showId")).show();
			   break;			   
		    case "shareComm":
				$share({
					cid: $$(this).attr("cid"),
					cname: $$(this).attr("cname"),
					uid: $getQQNum()+"",
					stype:2
				});
			   break;
		    case "loginBtn":
				if (!$isLogin()) {
					$loginFrame({
						model: false, 
						type: "func",
						check: false,
						action: function () {
							PP.market.base.initLoginState();
							return false;
						}
					});
				}
			   break;			   
		    case "logoutBtn":
               location.href = "http://member.paipai.com/cgi-bin/c2cUser_LoginOut";
			   break;
		    case "friendsSelector":
				$shareToFriend({
					status: $$(this).attr("status"),
					//0 全部   1 在线  2 离线  3离开
					title: $$(this).attr("title"),
					actionId: $$(this).attr("actionId"),
					detail: $$(this).attr("detail"),
					validityId: $$(this).attr("validityId")
				});
			   break;	
		    case "paipaiSearchBtn":
               if ($$("[tag='paipaiSearchInput']").val() == "" || $$("[tag='paipaiSearchInput']").val() == "请输入关键字") {
                return $float({ title: "温馨提示", html: "请输入搜索关键字" });
            }
               window.open("http://search1.paipai.com/cgi-bin/comm_search1?g_tk=159400072&g_ty=fr&sClassid=&KeyWord=" + $$("[tag='paipaiSearchInput']").val());
			   break;	
		    case "saleMail":
				$setSaleMail({
						mid: $$(this).attr("mailId"),
						ptag: $$(this).attr("pTag")
				});
			   break;	
		    case "aioSub":
                $setAioSub({
                aid: $$(this).attr("aioid"),
                ptag: $$(this).attr("pTag"),
                x: 0,
                y: 0
                });
			   break;			   
		    case "remindQQ":
               $remindQQ($$(this).attr("title"), $$(this).attr("content"), $$(this).attr("cType"), $$(this).attr("cTime"), $$(this).attr("CParam"));
			   break;
		    case "shareQzone":
               window.open("http://rc.qzone.qq.com/myhome/share/#action=post&url=" + encodeURIComponent(location.href));
			   break;
		    case "shareWb":
               //微博收听
				var appkey = '060743ad174843ad824bed3528ed608a';
				var myURL = $parseUrl(window.location);
				for (var i = 0; i < PP.market.base.appkey.length; i++) {
					if (myURL.host == PP.market.base.appkey[i].host) {
						appkey = PP.market.base.appkey[i].appkey;
					}
				}
				$shareWeiboMessage(appkey, ($$("#shareWbcon").val()||$$(this).attr('content')), ($$(this).attr('img') || $$("#area0").attr('src')));
			   break;			   
		    case "careWb":
				var appkey = '060743ad174843ad824bed3528ed608a';
				var myURL = $parseUrl(window.location);
				for (var i = 0; i < PP.market.base.appkey.length; i++) {
					if (myURL.host == PP.market.base.appkey[i].host) {
						appkey = PP.market.base.appkey[i].appkey;
					}
				}
				$addWeiboFriend(appkey, $$(this).attr("name"));
			break;		
		    case "activeQQClicker":
	            var activeId = $$(this).attr("g_sActive");
				activeId && (window.g_sActive = activeId);
				var my=$$(this);
				if (!$isLogin()) { //判断登录
					$loginFrame({
						model: false,
						type: 'func',
						check: false,
						action: function () {
							PP.market.base.initLoginState(
								function () {
									var activelevel = (window.vipLevel && window.vipLevel[window.vipState]) ? window.vipLevel[window.vipState] : my.attr("level");
									$activeRaffleByQQ(window.startFun, window.resultFun, activelevel);
								});
						}
					});
				} else {
					var activelevel = (window.vipLevel && window.vipLevel[window.vipState]) ? window.vipLevel[window.vipState] : my.attr("level");
					$activeRaffleByQQ(window.startFun, window.resultFun, activelevel);
				}
			   break;
		    case "activeOrderClicker":
                window.lvl_text = window.lvl_order ? window.lvl_order : (window.lvl_text ? window.lvl_text : "");
                hasRegistered(function (isRegistered) {
                if (isRegistered) {
                    var activeId = $$("[tag='activeOrderClicker']").attr("g_sActive");
                    if (activeId) {  window.g_sActive = activeId; }		
					if(!window.activeoderflag){
					     window.activeoderflag=function(flag){  $activeRaffleByOrderId(window.startFun, window.resultFun, $$("[tag='activeOrderClicker']").attr("level"), $$("[tag='deal_id']").attr("kind"), $$("[tag='deal_id']").val());	}
					}								
					$ordernumberFlag($$("[tag='deal_id']").val(),window.activeoderflag);	

					return;				                    
                } else {
                    var errStr = window.baomingErr ? window.baomingErr : "您还没有报名，请先报名再参加本次活动。";
                    $float({
                        title: "温馨提示",
                        html: errStr
                    })
                    return;
                }
               });
			   break;
		    case "activeJoin":
				if (!$isLogin()) { //判断登录
								$loginFrame({
									model: false,
									type: 'func',
									check: false,
									action: function () {
										register();
										PP.market.base.initLoginState();
									}
								});
							} else {
								register();
				}
			   break;	  			   			   			   			   		
		};
        function register() {
            hasRegistered(function (isRegistered) {
                var level = $$("[tag ='activeJoin']").attr("level");			
                if (isRegistered) {
                    var errStr = $$("[tag ='activeJoin']").attr("success") ? $$("[tag ='activeJoin']").attr("success") : (((window.lvl_text && window.lvl_text[level]) ? window.lvl_text[level] : "恭喜您，报名成功！"));
					if (typeof errStr == "function") {return errStr(); }
                    $float({
                        title: "温馨提示", 
                        html: errStr
                    })
                    return;
                }
				var temp_text=["","恭喜您，报名成功！"];
                window.lvl_text = window.lvl_baoming ? window.lvl_baoming : (window.lvl_text ? window.lvl_text :temp_text);
                $activeRaffleByQQ(window.startFun, window.resultFun, level);
            });
        };	
		
		
        //检查是否已经报名
        function hasRegistered(callback) {
			if($$("[tag ='activeJoin']").length==0){isRegistered = true;callback(isRegistered);return;}
			var activeId = $$("[tag='activeJoin']").attr("g_sActive");			
            if (activeId) {
                window.g_sActive = activeId;
            }
			
            window.AfterQueryActiveBingo = function (retCode, bingoInfo) { //成功获取中奖信息
                if (retCode != 0) {
                    return $float({ title: "温馨提示", html: "系统繁忙，请稍后再试！" });
                }
				if(bingoInfo=="对不起，服务器忙，请稍后再试。"){ return $float({ title: "温馨提示", html: "系统繁忙或服务尚未启动，请稍后再试！" });}
                var isRegistered = false;
                for (var i = 0; i < bingoInfo.length; i++) {
                    if (bingoInfo[i]["level"] == $$("[tag='activeJoin']").attr("level")) { //若已经中过一等奖
                        isRegistered = true;
                        break;
                    }
                }
                callback(isRegistered);
            };
            window.showpaipailogin = function () {
                $loginFrame({
                    model: false,
                    type: "func",
                    check: false,
                    action: function () {
                        $loadScript("http://party.paipai.com/cgi-bin/cxpl_query_bingo?active=" + window.g_sActive);
                    }
                });
            };
            $loadScript("http://party.paipai.com/cgi-bin/cxpl_query_bingo?active=" + window.g_sActive);
        };
    });

}
function $bingInfoShow(){	
//输出抽奖相关数据
    var tag = window.marketCache.filter("[tag='bingoInfo']");
    if (tag.length > 0 && window.g_sActive) {
        //查询活动中奖情况的接口
        $loadScript("http://party.paipai.com/cgi-bin/cxpl_prizecount?active=" + window.g_sActive);
        window.ShowSimpPrizeInfo = function (obj) {
            var list = window.marketCache.filter("[tag='bingoInfo']").find("[tag][level]");
			var bingoTotal=0;
            list.each(function () {
                var _t = $$(this),
					tag = _t.attr("tag"),
					level = _t.attr("level");
				switch(tag){
					case "activeTotal":
					     _t.html(obj[level] ? obj[level].total : 0);
					break;
					case "activeMaxDailyBingos":
					     _t.html(obj[level] ? obj[level].maxdailybingos : 0);
					break;
					case "activeMaxHourBingos":
					     _t.html(obj[level] ? obj[level].maxhourbingos : 0);
					break;
					case "activeTotalBingos":
					    _t.html(obj[level] ? obj[level].totalbingos : 0);
					break;
					case "activeDailyBingos":
					    _t.html(obj[level] ? obj[level].dailybingos : 0);
					break;
					case "activeHourBingos":
					    _t.html(obj[level] ? obj[level].hourbingos : 0);
					break;
					case "activeLeaveBingos":
				     	_t.html(obj[level] ? obj[level].maxdailybingos - obj[level].dailybingos : 0);
					break;
					case "activeLeaveBingosAll":
						_t.html(obj[level] ? parseInt(obj[level].total - obj[level].totalbingos) : 0);
						bingoTotal += parseInt(obj[level].totalbingos);
					break;
					case "activeLeaveBingosHour":
						_t.html(obj[level] ? obj[level].maxhourbingos - obj[level].hourbingos : 0);
					break;
				};                
            });
			$$("[tag='bingoTotal']").html(bingoTotal);//剩余总数
        }
    }
}
function $cataDrawList(o){
	/*
	//类目下拉选择菜单
	//20100720 create by homerhuang 
	*/
	var cataDrawItem = {
		drawItem:"drawCata",
		drawListItem:"drawCataList",
		formName:"searchForm",
		drawType:"0",		//下拉导航类型
		logValue:"1001",
		showType:"1",		//下拉菜单展示样式
		curSort:"",
		arrFirstSort:[],
		arrShopSort:[],
		arrMapSort:{},
		template:'<li class="{#cssName#}"><a attr="{#clsId#}" title="{#clsName#}" href="#h" lg="{#sLog#}" pos="{#sPos#}">{#clsName#}</a></li>',		//模版
		timerHandle:null,
		timeDelay:300,
		showClassList:function(){
			var tempArr = [[0,"所有分类"]],cataSelect = document.forms[cataDrawObj["formName"]].elements["sClassid"],tempSort;
			var cataItem = $id(cataDrawObj["drawListItem"]).getElementsByTagName("ul")[0],tempStr,tempNodes,tempHtml = "",len = 0,clsGroup = false;
			if (typeof(cataDrawObj["curSort"]) == "object"){
				tempSort = tempArr.concat(cataDrawObj["curSort"]);
				cataDrawObj["showType"] = 1;
			}else{
				tempSort = (cataDrawObj["drawType"] == 0)?cataDrawObj["arrFirstSort"]:cataDrawObj["arrShopSort"]
				cataDrawObj["showType"] = 2;
			}
			for (var n = 0; n < tempSort.length; n++){
				if (typeof(tempSort[n]) == "object"){
					tempStr = cataDrawObj["template"];
					if (cataDrawObj["showType"] == "1"){
						if (!clsGroup){
							tempStr = tempStr.replace("{#cssName#}","");
						}else{
							tempStr = tempStr.replace("{#cssName#}","c_bg");
						}
					}else{
						tempStr = tempStr.replace("{#cssName#}","s_" + len);
						len++;
					}
					tempStr = tempStr.replace("{#clsId#}",tempSort[n][0]);
					tempStr = tempStr.replace("{#sLog#}",cataDrawObj["logValue"]);
					tempStr = tempStr.replace("{#sPos#}",n);
					tempStr = tempStr.replace(/\{\#clsName\#\}/gi,tempSort[n][1]);
					tempHtml += tempStr;
				}else{
					if (tempSort[n] == 1){
						clsGroup = true;
					}else{
						clsGroup = false;
					}
				}
			}
			if (cataDrawObj["showType"] != "1"){cataItem.className = "all";}
			cataItem.innerHTML = tempHtml;
			tempNodes = cataItem.getElementsByTagName("a");
			for (var i = 0; i < tempNodes.length; i++){
				tempNodes[i].onclick = cataDrawObj.callFunction;
			}
		},
		callFunction:function(e){
			var event = e || window.event,srcEls;
			srcEls = event.target || event.srcElement;
			var cataSelect = document.forms[cataDrawObj["formName"]].elements["sClassid"],sfSelect = document.forms[cataDrawObj["formName"]].elements["sf"],sId = this.getAttribute("attr");
			cataSelect.value = sId;
			sfSelect.value = "77";
			if (cataDrawObj["drawType"] == 1){
				document.forms[cataDrawObj["formName"]].elements["shoptype"].value = cataDrawObj["arrMapSort"][sId]?cataDrawObj["arrMapSort"][sId]:0;
			}
			//$id(cataDrawObj["drawItem"]).innerHTML = this.getAttribute("title") + "<span></span>";
			$id(cataDrawObj["drawListItem"]).className = "h";
			$submitToSearch(cataDrawObj["formName"]);
		}
	};
	for (var n in o){cataDrawItem[n] = o[n]}
	window.cataDrawObj = cataDrawItem;
	//事件绑定
	$id(cataDrawObj["drawListItem"]).onmouseout = function(){
		$id(cataDrawObj["drawItem"]).setAttribute("attr",1);
		$id(cataDrawObj["drawItem"]).className = "";
		this.className = "h";
		var tempNode = $id(cataDrawObj["drawItem"]).getElementsByTagName("span")[0];
		tempNode.className = "";
	};
	$id(cataDrawObj["drawItem"]).onmouseout = function(){
		if (cataDrawObj["timerHandle"]){clearTimeout(cataDrawObj["timerHandle"]);}
		$id(cataDrawObj["drawListItem"]).className = "h";
		this.className = "";
		var tempNode = $id(cataDrawObj["drawItem"]).getElementsByTagName("span")[0];
		tempNode.className = "";
	};
	$id(cataDrawObj["drawItem"]).onmouseover = function(){
		if (this.getAttribute("attr") && this.getAttribute("attr") == 1){
			$id(cataDrawObj["drawListItem"]).className = "";
			this.className = "all";
			var tempNode = $id(cataDrawObj["drawItem"]).getElementsByTagName("span")[0];
			tempNode.className = "ex";
			this.setAttribute("attr",0);
		}else{
			cataDrawObj["timerHandle"] = setTimeout(function(){
				$id(cataDrawObj["drawListItem"]).className = "";
				$id(cataDrawObj["drawItem"]).className = "all";
				var tempNode = $id(cataDrawObj["drawItem"]).getElementsByTagName("span")[0];
				tempNode.className = "ex";
			},cataDrawObj["timeDelay"]);
		}
	};
	$id(cataDrawObj["drawListItem"]).onmouseover = function(){
		this.className = "";
		$id(cataDrawObj["drawItem"]).className = "all";
		var tempNode = $id(cataDrawObj["drawItem"]).getElementsByTagName("span")[0];
		tempNode.className = "ex";
	};
	cataDrawObj.showClassList();
	$id(cataDrawObj["drawListItem"]).onmousewheel = function(){return false};
}
function $changeType(o){
	/*
	//顶部搜索导航商品店铺切换Tab
	//20110809 wingwan修正商品和店铺搜索切换时，表单action未切换的bug
	//20100720 create by homerhuang 
	*/
	var searchTypeItem = {
		tabName:"searchTab",		//切换按钮父节点
		tabItem:"p",				//切换按钮标签节点
		curTab:0,
		formName:"searchForm",       //搜索表单id
		typeInpueName:"searchType",	//切换时保存对应搜索导航的input
		//点击时的切换函数
		changeFun:function(){		
			var t = this.getAttribute("attr");
			for (var n = 0; n < typeNodes.length; n++){
				if (n == t){
					typeNodes[n].className = "now";
					$id(searchTypeObj["typeInpueName"]).value = t;
				}else{
					typeNodes[n].className = "";
				}
			}
			searchTypeObj["evenFunc"](t);
		},
		//切换Tab的同时是否执行其他操作逻辑
		evenFunc:function(){
			var t = arguments[0],tempForm=$id(searchTypeObj["formName"]);
			if (t == "0"){
				if (window["smartDrawObj"]){smartDrawObj["isAvai"] = true;}
				tempForm.action="http://search1.paipai.com/cgi-bin/comm_search1";
			}else{
				if (window["smartDrawObj"]){smartDrawObj["isAvai"] = false;}
				tempForm.action="http://shopsearch.paipai.com/SearchShopAction.xhtml";
			}
			if (window["cataDrawObj"]){
				cataDrawObj["drawType"] = t;
				cataDrawObj["showClassList"]();
			}
		}
	};
	for (var n in o){searchTypeItem[n] = o[n]}
	window.searchTypeObj = searchTypeItem;
	var typeTab = $id(searchTypeObj["tabName"]),typeItem;
	var typeNodes = typeTab.getElementsByTagName(searchTypeObj["tabItem"]);
	for (var i = 0; i < typeNodes.length; i++){
		typeNodes[i].setAttribute("attr",i);
		typeNodes[i].onclick = searchTypeObj["changeFun"];
		if (i == searchTypeObj["curTab"]){
			typeNodes[i].className = "now";
			$id(searchTypeObj["typeInpueName"]).value = searchTypeObj["curTab"];
		}else{
			typeNodes[i].className = "";
		}
	}
	if (searchTypeObj["curTab"] == "1" && window["cataDrawObj"]){
		if (window["smartDrawObj"]){smartDrawObj["isAvai"] = false;}	
		cataDrawObj["drawType"] = searchTypeObj["curTab"];
		cataDrawObj["showClassList"]();
	}
}
(function(){

var helpInfo = {
	//未开通
	"1":{
		html:"{#start#}<p>抱歉！您尚未开通财付通！请您<a title='点此注册财付通'  href='https://www.tenpay.com/zft/register_1.shtml'  target='_blank'>点此注册财付通</a></p>{#end#}",
		certState:1,
		closeAble:false
	},
	//未注册数字证书
	"2":{
		html:"{#start#}<p>抱歉！您尚未注册成为财付通的数字证书用户！请您<a title='点此注册财付通数字证书'  href='https://www.tenpay.com/cgi-bin/v1.0/crt_install.cgi ' target='_blank'>点此注册财付通数字证书</a></p>{#end#}",
		certState:2,
		closeAble:false
	},
	//已冻结证书
	"3":{
		html:"{#start#}<p>抱歉！您的财付通的数字证书已被冻结！请您<a title='点此向财付通申诉' href='https://www.tenpay.com/zft/cs/cs.shtml?tid=1' target='_blank'>点此向财付通申诉</a></p>{#end#}",
		certState:3,
		closeAble:false
	},
	//证书校验失败
	"4":{
		html:"{#start#}<p>抱歉！您的财付通数字证书验证失败！请您重试或<a  title='点此注销数字证书后重新安装' href='https://www.tenpay.com/v2.0/main/cancelAccount1.shtml ' target='_blank'>点此注销数字证书后重新安装</a></p>{#end#}",
		certState:0,
		closeAble:false
	},
	//证书验证出错
	"8":{
		html:"{#start#}<p>验证出错！请<a id='linkClose' href='#nolink' title='点此关闭提示框'>点此关闭提示框</a>继续您的操作！</p>{#end#}",
		certState:0,
		closeAble:true
	},
	//系统错误
	"9":{
		html:"{#start#}<p>系统错误！请尝试<a onclick='location.reload()' href='#nolink' title='刷新' style='color:#014ccc;text-decoration:underline'>刷新</a>页面！</p>{#end#}",
		certState:9,
		closeAble:false
	},
	//前端验证未安装证书
	"certNotFound":{
		html:"{#start#}<p>抱歉！本机未安装财付通数字证书！请您<a href='https://www.tenpay.com/cgi-bin/v1.0/crt_install.cgi' title='点此安装财付通数字证书' target='_blank'>点此安装财付通数字证书</a></p>{#end#}",
		certState:0,
		closeAble:false
	},
	//前端验证未安装控件
	"controlNotFound":{
		html:"{#start#}<p>抱歉！您未安装安全控件！请您<a href='https://www.tenpay.com/download/qqedit.exe' target='_blank'>点此安装安全控件</a></p>{#end#}",
		certState:0,
		closeAble:false
	},
	//其他信息
	"end":"</b><br/><p>数字证书是使用账户资金的身份凭证，可保障资金不被盗用。\
	<a href='http://help.tenpay.com/cgi-bin/helpcenter/help_center.cgi?id=9&type=2 ' target='_blank'>了解更多</a><br/>\
	为了保证资金与物品安全，拍拍虚拟自动发货卖家必须安装数字证书<br/>\
	Windows Vista 操作系统无法申请安装数字证书的解决办法。<a href='http://help.tenpay.com/cgi-bin/helpcenter/help_center.cgi?id=66559&type=0 ' target='_blank'>点此了解</a></p>\
	<br/><p><a id='linkGoBack' href='#goback'>返回上一步</a></p></div></div>",
	//标签
	"start":'<div class="box_hint_normal"><span class="icon msg2-icon-info"></span><div class="hint_content"><b>'
}


$checkCert=function(option){
	var opt ={
		certState:0,
		tenpayId:"",
		certList:""
	}
	
	for(var i in option){
		opt[i] = option[i];
	}
	
	opt = $qqcert(opt);
	
	//不存在这种错误状态,就进行前端验证
	if(!helpInfo[opt.certState]){
		if(!opt.status){
			//控件不可用
			opt.certState = "controlNotFound";
		}else if(!opt.cn){
			//无效证书编号
			opt.certState = "certNotFound";
		}
	}
	
	//如果存在错误状态
	if(helpInfo[opt.certState]){
		//错误提醒浮层
		var info = helpInfo[opt.certState];
		var certErrorTip = $float({
			title:"拍拍网提醒您",
			html:$formatStr(info.html,helpInfo),
			width:460,
			fix:true,
			style:"stand",
			cover:true,
			onInit:function(){opt.certState =info.certState;return true},
			onClose:function(){
				if(info.closeAble){
					return true;
				}else{
					if(window.history.length>1){
						window.history.back();
					}else{
						//跳到卖家首页
						location.href = "http://my.paipai.com/cgi-bin/myppindex/seller";
					}
					return false;
				}
				
			}
		});
		
		//关闭按钮
		if($id("linkClose")){
			$id("linkClose").onclick=function(){
				certErrorTip && (certErrorTip.close());
				return false;
			}
		}
		
		//后退按钮
		if($id("linkGoBack")){
			//如果无法回退
			if(window.history.length<=1){
				$id("linkGoBack").href = "http://my.paipai.com/cgi-bin/myppindex/seller";
				$id("linkGoBack").title = "当前无法后退";
			}else{
				$id("linkGoBack").onclick=function(){
					window.history.back();
					return false;
				}
			}
		}
	}
	
	return opt;
}

})()
function $checkOrderIsVirtual(oid,callback){
	window._PP_checkOrder_data={"oid":oid,"callback":callback}
	//检查订单是否是虚拟类商品
	$loadScript('http://party.paipai.com/cgi-bin/cxpl_deal_profile?deal_id='+oid+'&checkmod=comm_id');
	//订单状态回调
	window.AfterCheckDealCommId=function(uin, ret, errmsg){
		var sClassIds = ",3119,24590,200021,200082,200110,200024,28039,200023,200022,12001,100000003,100000002,100000001,"; 
		var vFlag=0;
		if(ret=='0'){
			var commIds=errmsg.split(',');
			for(var i=0;i<commIds.length;i++){
				if(commIds[i]&&sClassIds.indexOf(','+commIds[i]+',')!=-1){
					vFlag=1;
					break;
				}
			}
			//回调,flag=0非虚拟商品，flag=1虚拟商品
			_PP_checkOrder_data.callback(vFlag);
		}else if(ret=='2'){//登录超时
			$loginFrame({
				model:false,
				type:"func",
				check:false,
				x:0,
				y:0,
				action:function(){
					$checkOrderIsVirtual(_PP_checkOrder_data.oid,_PP_checkOrder_data.callback);
				}
			})
		}else{
			showFlashResult("error",errmsg)//(errmsg);
		}
	}
}
function $chooseCommodity(obj){
//商品选择组件
  var option={
    type:"1",    //1为选择多个商品，0为选择单个商品
    title:"商品选择", //title
    limit:10,  //最多可选择商品个数
    ids: "",      //已经选择的商品id串
    onChoose:function(obj){return true;}
  }
  
  $extend(option,obj);
  
  //样式载入
  window.setTimeout(function(){
		$loadCss("http://static.paipaiimg.com/module/select_goods.css");
	},0);

  
  showAddItemFloat();
  
  var globleInfos = {
    //主/辅商品显示区的li模板
    //itemTpl:"",
    //已经选择的主商品
    selectedMainItem : null,
    //已经选择的套餐商品序列 
    selectedComboItems : [],
    float_tpl_right:'<tr itemid="{#itemId#}"><td class="pic"><img src="{#logo#}"/></td><td class="title"><p><a  href="http://auction1.paipai.com/{#itemId#}" target="_blank">{#title#}</a></p></td><td class="op"><a href="javascript:;" tag="delItem"><img tag="delItem" src="http://static.paipaiimg.com/my/co_fitting_op_close.png" alt="取消" title="取消选择"/></a></td></tr>'
  };
  
  //弹出商品选择浮窗
  function showAddItemFloat(){
    //设置主商品还是设置辅商品
    var isMain = option.type=="0";
    
    //获取店铺分类接口
    var url = 'http://my.paipai.com/cgi-bin/mycategory/showjson';
    //返回码：发起请求前用cgi的url初始化一个上报对象,1/2采样上报
    var _retCoder=$returnCode({url:url,frequence:2});

    
    $ajax({
      url:url,
      method:'get',
      type:'json',
      onSuccess:function(data){
        _retCoder.report(true,data.retCode);
        if(data.errCode=="0"){
          var template='<div class="select_goods"style="display:"><div class="sg_cnt"><div class="sg_tab"><div class="sg_tab_hd"><ul><li tag="addByLink"class="">商品链接添{#actionName#}</li><li class="current"tag="addByList">列表{#actionName#}</li></ul></div><div class="sg_tab_bd"><!--商品链接添加--><div style="display:none;"class="sg_url"><p>输入商品链接：<br/><input type="text"size="25"style="ime-mode:disabled;"tag="commUrl">&nbsp;<button tag="addCommUrlBtn">{#actionName#}</button><br/><span style="display:none;"tag="warnHint"class="dp_hint">您选择的商品已满{#limit#}件，请删减后再选择。</span> </p></div><!--列表添加--><div style=""class="sg_list"><div style=" border-bottom:1px solid #9ec9e9; background-color:#f4fbff;"class="sg_list_hd"><p>商品分类：<select style="width:110px"search="1"tag="category"><option selected="selected"value="0000000000">所有分类</option>{#cateOptions#}</select></p><p>商品关键字：<input type="text"maxlength="10"size="14"tag="kw"style="width:104px"/>&nbsp;<button tag="searchButton">搜索</button></p></div><div class="sg_list_bd"><table cellspacing="0"cellpadding="0"border="0"width="100%"tag="relatedList"class="sg_tblist"><tbody></tbody></table><div style="margin:10px 10px 0 0 ;"tag="pagenator"></div></div></div></div></div><div style=""tag="selected"class="sg_selected"><div class="sg_selected_des">还可以选择<strong tag="selectedCount">{#limit#}</strong> 件商品</div><div class="sg_selected_tb"><table cellspacing="0"cellpadding="0"border="0"width="100%"tag="selectedItems"class="sg_tblist"><tbody></tbody></table></div></div></div><p tag="submitArea"class="dp_submit"><button tag="confirmAdd">确认添加</button> <button tag="cancleAdd">取消</button></p></div>'; 
          
          
        
        
          var optiontemp = '<option value="{#cateid#}">{#catename#}</option>';
          var optionarr=[];
          var catesl=data.data.length-1;
          for(var j=0;j<catesl;j++){
            optionarr.push(optiontemp.replace(/{#cateid#}/i,data.data[j].cate_id).replace(/{#catename#}/i,data.data[j].cate_name))
          }
          
          //公用一个浮层
          //console.info($$("#addGoodsList").html().replace(/{#actionName#}/g, isMain ? "选择":"添加"))
          var _f = $float({
            title:option.title,
            html: template.replace(/{#actionName#}/g, isMain ? "选择":"添加").replace(/{#cateOptions#}/i,optionarr.join("")).replace(/{#limit#}/g,option.limit),
            width: (isMain ? 300 : 525)
          }), 
          bh = $$(_f.boxHandel);
          
          if(!isMain){
            bh.find("div.[tag=selected]").show();
          }
          window._floater = _f;
          //如果是主商品，那么右边的已选择列表区域和底下的按钮区域不显示
          if(isMain){
            bh.find("div.[tag=selected],p[tag=submitArea]").hide();
          }
          //【公用】头部tab切换功能
          floatAddtypeToggle(true, bh);
          //【公用】对用户输入商品链接进行前端验证；如果是套餐则push到已选择列表的逻辑
          
          
          bh.find(":button[tag=addCommUrlBtn]").click(function(){
            //1,套餐数量检查
            if(bh.find("strong[tag=selectedCount]").text()<=0){
              return bh.find("[tag=warnHint]").show();
            }
            //2,格式校验
            var id = floatItemCheck(true, bh);
            if(!id){
              return false;
            }
            //3,如果是主商品则直接选定，关掉浮层，如果是套餐商品则push到右边的已选择列表
            if(isMain){
              window.selectItem(0, id)
            }else{
              window.pushItem(0, id);
            }
          });
          //【公共】显示可供选择商品列表
          showFloatItemList("", "", 1);
          //【公共】显示列表添加界面下的“商品分类”，“商品关键字”，“搜索”按钮和分页组件
          bindFilterItems();
          //【辅商品】显示已选择列表
          if(!isMain){  
            showFloatSelectedItems(true, option.ids);
          }
          //【主商品】的“选择”事件
          
          //【辅商品】的“添加”事件
          
          //【辅商品】的“确认添加”事件
          bh.find(":button[tag=confirmAdd]").click(function(){
            var trs = bh.find("table[tag=selectedItems] tr:not(:hidden)"),
              itemsList = (function(){
                var r = [];
                for(var i=0,len = trs.length ; i<len;i++){
                  r.push(trs.eq(i).attr("itemid"));
                }
                return r;
              })();
            option.onChoose(itemsList.join('|'));
            _f.close();
            //将目标商品插入到主显示区域中
          });
          //【辅商品】的“取消”事件
          bh.find(":button[tag=cancleAdd]").click(function(){_f.close();});
        }
      },
      onError:function(msg){
        _retCoder.report(false);
      }    
    });
  };
  
  //展示浮层中的供选择商品列表
  function showFloatItemList(catagory, keyWord, currPage){
    var bh = $$(window._floater.boxHandel);
    //根据商品分类、商品关键字、当前页码来显示商品列表
    var _retCoderItemRelatedlist=$returnCode({url:"http://my.paipai.com/cgi-bin/mypaipai/relatedlist"});      
    $$.ajax({
      url:"http://my.paipai.com/cgi-bin/mypaipai/relatedlist?KeyWord="+escape(keyWord),
      data:{
        CategoryId: catagory,
        //KeyWord: keyWord,
        Page: currPage||1,
        PageSize: 5,
        virtual: 1
      },
      cathe:false,
      type:"GET",
      dataType:"json",
      error:function(){
      _retCoderItemRelatedlist.report(false,120);
      },
      success: function(json){//alert("success");   
      _retCoderItemRelatedlist.report(true,0);
        //显示列表数据
        var hc = [],
          ils = json.ItemList,
          listTable = bh.find("[tag=relatedList]");
        //
        for(var i=0, len = ils.length; i<len; i++){
          var il = ils[i];
          //1.去掉cgi可能产生的空值.
          if(!il){
            continue;
          }
          //2,对于已经选择在右边的列表数据以及当前选中的源商品，灰掉处理.
          var itemTitle = il.Title;
          if ( itemTitle.length > 20 ) itemTitle = itemTitle.substring( 0, 20 ) + "...";
          var tpl = '<tr style="background-color:【bgcolor】;" itemid="{#itemid#}"><td class="pic"><img src="{#logo#}"></td><td class="title"><a href="http://auction1.paipai.com/{#itemid#}" target="_blank">{#itemname#}</a></td><td class="op"><a href="javascript:;" onclick="【returnAlertOnError】{#methodName#}(1,\'{#itemid#}\',\'{#itemname#}\',\'{#logo#}\', this);">选取&raquo;</a></td></tr>';
          tpl = tpl.replace(/{#logo#}/g, il.Logo).replace(/{#itemid#}/g, il.ItemId).replace(/{#itemname#}/g, itemTitle).
            replace(/{#methodName#}/, option.type=="0"?"selectItem":"pushItem");
          var isInComboList = $$.map($$("#optionalComboItem ul li:visible"),function(x){
              return $$(x).attr("cid");
            }).join("|").indexOf(il.ItemId)>-1;
          var isInMain = $$("#optionalMainItem ul li:visible").attr("cid")==il.ItemId;
          tpl = tpl.replace(/【bgcolor】/, (isInComboList || isInMain)? '#EEE':'#FFF');
          if(isInComboList){
            tpl = tpl.replace(/【returnAlertOnError】/, '');//'return alert(\"已经选为套餐商品\");');
          }else if(isInMain){
            tpl = tpl.replace(/【returnAlertOnError】/, '');//'return alert(\"已经选为主商品\");');
          }else{
            tpl = tpl.replace(/【returnAlertOnError】/, '');
          }
          hc.push(tpl);
        }
        listTable.html(hc.join(""))/*.find("tr:visible").each(function(){
          var tr = $$(this),
            id = tr.attr("iemid"),
            main
            
        });*/
        //分页
        $page({
          type: "miniSimple",
          pageCount: (json.TotalSize -1 + 5 )/5, //总记录数
          currentPage:currPage,    //当前页码
          domList:[bh.find("div[tag=pagenator]")[0]],
          action:"func",
          func:function(index){
            //showList(ctg.val(), kw.val(), index);
            showFloatItemList(bh.find("[tag=category]").val(), bh.find("[tag=kw]").val(), index);
            return true;
          }
        });
      }
    });
  };
  
  //校验商品链接格式
  function floatItemCheck(flag, bh){
    if(!flag){return false;}
    var v = bh.find(":text[tag=commUrl]").val();
      if(/^\s*$/.test(v)){
        alert("请输入商品链接");
        return false;
      }
      var m = v.match(/^http:\/\/auction[1|2]\.paipai\.com\/(\w{32})/),
        id = m ? m[1] : undefined;
      if(!id){
        alert("商品链接格式不正确");
        return false;
      }
      return id;
  };
  
  //url添加和列表选择添加tab切换
  function floatAddtypeToggle(flag, bh){
    //【主/辅都有】头部tab切换功能
    //_s: 设置一开始打开的是“链接添加”还是“列表添加”的开关标志位。
    if(!flag){
      return false;
    }
    var linkLi = bh.find("li[tag=addByLink]"),
      listLi = bh.find("li[tag=addByList]"),
      linkDiv = bh.find("div.sg_url"),
      listDiv = bh.find("div.sg_list");
    linkLi.click(function(){
      listLi.removeClass("current") && linkLi.addClass("current");
      listDiv.hide() && linkDiv.show();
      bh.find(":text[tag=commUrl]").focus();//链接添加时默认鼠标位于输入框
      window._s = 0;
    });
    listLi.click(function(){
      linkLi.removeClass("current") && listLi.addClass("current");
      linkDiv.hide() && listDiv.show();
      bh.find("[tag=keyWords]").focus();//关键字搜索框选中
      window._s = 1;
    });
    (window._s == 0 ? linkLi : listLi).click();//记忆上次选择的tab
  };  
  
  //绑定浮层中的“选择”事件【仅添加主商品】。链接添加中的选择按钮事件(格式校验完成后)
  //以及列表添加中每一个tr的最后一个“选择”的链接.
  window.selectItem = function(type, itemid){
    var _f = window._floater,
      bh = $$(window._floater.boxHandel);
    //如果是输入连接，则先进行校验
    if(type==0 && !floatItemCheck(true, bh)){
      return false;
    }
    var comboItemsIdList = $$.map($$("#optionalComboItem ul li:visible"),function(x){return $$(x).attr("cid");}).join("|");
    if(comboItemsIdList.indexOf(itemid)>-1){
      return alert("已经选择该商品作为套餐商品");
    }
    window.itemCommInfoCallBack = function(obj){
      _retCodeItemCheck.report(true,0);
      if(obj.ErrCode!=0 || (obj.ItemList && obj.ItemList.length<1)){
        return alert(obj.ErrMsg);
      }
      if(obj.ItemList[0].ItemErr!=0){
        return alert(obj.ItemList[0].ErrMsg);
      }
      $$("#optionalMainItemNone").hide();
      //设置主商品的显示区
      
      _f.close();
    }
    window._retCodeItemCheck=$returnCode({url:"http://my.paipai.com/cgi-bin/item_view/item_check"});
    $loadScript("http://my.paipai.com/cgi-bin/item_view/item_check?virtual=1&t="+ Math.random() +"&sItemid="+itemid);
  }
  
  //id:商品id， type：点击来源，0是链接，1是列表
  window.pushItem =function(type, id, name, logo, dom){
    var bh = $$(window._floater.boxHandel),
      table = bh.find("table[tag=selectedItems] tr:not(:hidden)");
    if($$("#optionalMainItem li[tag=itemLi]:visible").attr("cid")==id){
      return alert("已经选定此商品为主商品");
    }
    if($$.map(table,function(x){return $$(x).attr("itemid");}).join(",").indexOf(id)>-1){
      return alert("不能重复添加此商品");
    }
    var bh = $$(window._floater.boxHandel),
      counter = bh.find("[tag=selectedCount]");
    if(parseInt(counter.text())<=0){
      return alert("已经选择了"+option.limit+"件商品，请删减后重新添加");
    }
    //对于链接类型的需要执行格式校验
    if(type==0){
      if(!floatItemCheck(true, bh)){
        return false;
      }else{
        //window.getItemsInfo = function(obj){
        window.itemCommInfoCallBack = function(obj){
          _retCodeItemCheck2.report((obj.ErrCode=="0"?true:false),obj.ErrCode);
          if(obj.ErrCode!=0){
            return alert(obj.ErrMsg);
          }
          var _i = obj.ItemList[0];
          if(_i.ItemErr!=0){
            return alert(_i.ErrMsg);
          }
          appendToSelected(_i.Item.strItemId, _i.Item.strTitle, _i.Item.strLogoUrl, dom);
          //counter.text(parseInt(counter.text())+1);
        }
        window._retCodeItemCheck2=$returnCode({url:"http://my.paipai.com/cgi-bin/item_view/item_check"});
        $loadScript("http://my.paipai.com/cgi-bin/item_view/item_check?virtual=1&t="+ new Date().valueOf() +"&sItemid="+id);
      }
    }else{
      appendToSelected(id, name, logo, dom);
    }
    
    function appendToSelected(id, name, logo, dom){
      bh.find("table[tag=selectedItems]").append(globleInfos.float_tpl_right.
        replace(/{#itemId#}/g, id).replace(/{#logo#}/g, logo)
        .replace(/{#title#}/g, name));
      $$(dom).parents("tr:first").css("backgroundColor", "#EEE").find("a").css("color", "#CCC");
      counter.text(parseInt(counter.text())-1);
    }
  }
  
  //绑定列表添加界面的搜索事件
  function bindFilterItems(){
    bh = $$(window._floater.boxHandel);
    //搜索按钮
    bh.find(":button[tag=searchButton]").click(function(){
      showFloatItemList(bh.find("[tag=category]").val(), bh.find("[tag=kw]").val(), 1);
    });
    //商品分类的change事件
    bh.find("[tag=category]").change(function(){
      showFloatItemList(this.value, bh.find("[tag=kw]").val(), 1);

    });
    bh.find("[tag=kw]").keydown(function(e){
      if(e.which ==13){
        showFloatItemList(bh.find("[tag=category]").val(), this.value, 1);
      }
    });
  };
  
  function showFloatSelectedItems(flag, ids){
    if(!flag){
      return false;
    }
    
    var bh = $$(window._floater.boxHandel),
      sItemsTable = bh.find("table[tag=selectedItems]");//已选择商品列表的table
    
    sItemsTable.click(function(e){
      var dom = e.srcElement||e.target,
        jqDom = $$(dom),
        bh = $$(window._floater.boxHandel);
      if(jqDom.attr("tag")=="delItem"){
        var tr = jqDom.parents("tr:first").hide();//隐藏当前tr
        bh.find("[tag=selectedCount]").text(option.limit-bh.find("[tag=selectedItems] tr:not(:hidden)").length);//重设计数器
        bh.find("[tag=relatedList] tr[itemid="+ tr.attr("itemid") +"]").
          css("backgroundColor", "#FFF").find("a").css("color", "#014CCC");//设置tr颜色样式
        bh.find("[tag=warnHint]").hide();//隐藏链接添加的草错提示
      }
      //停止冒泡。
    });
    //当传入了id列表才执行异步取数据操作
    if(ids!=""){
      window.getSelectItems = function(obj){
        _retCodeItemListRt3.report(true,0);
        var items = obj.stocks,
          res = [];
        for(var i=0,len = items.length;i<len;i++){
          var _i = items[i];
          res.push(globleInfos.float_tpl_right.replace(/{#itemId#}/g, _i.strItemId).replace(/{#logo#}/g, _i.strLogoUrl).
            replace(/{#title#}/g, _i.strTitle));
        }
        sItemsTable.find("tbody").html(res.join(""));
        //设置已选择数量
        bh.find("[tag=selectedCount]").text(option.limit-res.length);
      }
      window._retCodeItemListRt3=$returnCode({url:"http://my.paipai.com/cgi-bin/item_view/item_list_rt"});    
      $loadScript("http://my.paipai.com/cgi-bin/item_view/item_list_rt?callback=getSelectItems&t="+ Math.random() +"&sItemid="+ids);
    }
  };
}
function $classAttr(obj){ 
	//返回码上报
	//类目属性的上报
	var retCodeForAttr=null;
	//SPU数据的上报
	var retCodeForSpu=null;
	var option = {
        area: "", //显示区域的id，jquery语法
        var1: "", //返回编码1的inputid，jquery语法
        var2: "", //返回自定义值编码的input id，jquery语法
		spuID:"#productid",//返回spuid的input id，jquery语法。默认productid
		updateTypeInput: "#iUpdateType", //编辑还是新增的状态值， 默认iUpdateType
        saleAttr: {}, //关键库存属性串，用于b2c回填库存
        classId: "", //类目的id
        hiddenId: "", //如果没属性的时候就把这个id对象隐藏掉，jquery语法
        showHelp: true, //默认显示帮助链接
        subAttrRule: [], //子属性规则库，运行中有用，不要覆盖
        activeAttr: [], //用户操作过的属性id列表，运行中有用
        urlList: [], //请求数据的url的列表，用于防止死循环
        isB2C: false, //是否b2c,当"true"的时候从不同路径拉取数据
        isSPU: false, //是否拉取SPU(Standard Product Unit)数据
        isCheck: true, //是否进行验证，后台可能不需要验证
        isKeyEdit: true, //是否能够编辑关键路径，编辑的时候可能不允许关键属性路径的修改
        isHideSale: false,//是否隐藏销售属性
		hasInited:false,//是否完成第一次spu的初始化
        showHideAttr: false,//是否显示隐藏属性
		txtLen:20,	//自定义文本的长度
        onInited: function(obj){
            return true;
        },
        onChange: function(dom, obj){
            return true;
        },
		onStockChange:function(input){
			return true;
		},
        onLoadSPU: function(cId, pId, pvId){
            return true;
        },//当载入SPU数据后执行操作
		onSPUChange:function(obj){
			return true;
		},
        _keyAttrList:[],//存放完整的关键属性id列表
		_keyAttrStr:""//关键属性值编码串
		
    };
    for (var i in obj) {
        option[i] = obj[i];
    }
	option.areaHandel = $$(option.area); //显示区域的jQ对象
	option.showAttrList = showAttrList;//渲染属性列表
	option.isAdd = $$(option.updateTypeInput).val()=="";//判断是新增还是编辑
	option.spuIdHandel = $$(option.spuID);//存放spuid的jQ对象
    option.check = checkProperty; //检查属性选择的完整状态
	option.loadSpuInfo=loadSpuInfo;//加载spu数据
	//默认选择状态
    option._var1 = strToAttr($$(option.var1).val().replace("^", ""));
    //自定义属性值
    option._var2 = strToAttr($$(option.var2).val().replace("^", ""));
	//创建支持SPU的白名单。【后期这个需要从后台取得， 目前在此放开】
	//["203320","203360","203380", "203381",   "203386", "****",    211540,   211500,   225220,  4034,           211520,           226500,      201121]
	//[手机、    笔记本、 数码相机、数码摄像机、数码单反、{化妆品}、耳机耳麦、单反镜头、滤镜、   闪光灯及附件、  三脚架/云台(新)、{化妆品BB霜}、MP3/MP4、读卡器 、相机贴膜 、蓝牙耳机 、手机充电器 、手机线控耳机 、手机电池 、手机数据线 、笔记本电脑包 、笔记本电池 、笔记本电源 、笔记本内存 、键盘 、鼠标 、键鼠套装 、笔记本硬盘]
	//option._spuList = ["203320","203360","203380","203381","203386", 27487, 24639, 36305, 20084, 20083, 203060, 203061, 24640, 27494, 27493, 27495, 203082, 203083, 27496, 20160, 20085, 20185, 27593, 20086, 20089, 20197, 26912, 203080, 26913, 27079, 27078, 26998, 20087, 27077, 203081, 27486, 27534, 27535, 20093, 27559, 27543, 27542, 27541, 27540, 27539, 27536, 27537, 27538, 203100, 203101, 203102, 27523, 20162, 20163, 20092, 20091, 36308, 20180, 20182, 20181, 20179, 27848, 27850, 27851, 34528, 34529, 34530, 34531, 34532, 34533, 34534, 203300, 203301, 203302, 20175, 27843, 27844, 27845, 203106, 27846, 20153, 20154, 20152, 20156, 20151, 203104, 203105, 20159, 20068, 20071, 20067, 203020, 203021, 20069, 20070, 20074, 20166, 20169, 203114, 203115, 203116, 203117, 203118, 203303, 203119, 203120, 203304, 20171, 203240, 34517, 20077, 27484, 27489, 36307, 36306, 203040, 203041, 27488, 203042, 20076, 26936, 26937, 20073, 20078, 29226, 29227, 27492, 20088, 203109, 203108, 203110, 203107, 203111, 203112, 203113, 26916, 26934, 26932, 27490, 203208, 203209, 203210, 203121, 203122, 203123, 203124, 203125, 203126, 203127, 203128, 203129, 203130, 203131, 24659, 24661, 24663, 24666, 24669, 20164, 20172, 20173, 203132, 203133, 203134, 203135, 203136, 203138, 203137, 26935, 203139, 203140, 203141, 203142, 203145, 203146, 203147, 203143, 203144, 20157, 203163, 203161, 203160, 203162, 203164, 203165, 203172, 203166, 203170, 203167, 203168, 203169, 203171, 203182, 203173, 203174, 203175, 203340, 203200, 203201, 203202, 203203, 203204, 203205, 203206, 203207, "211540","211500","225220","4034","211520", 226500,"201121", 228861, 228920, 229064, 211421, 229796, 211440, 211480, 48, 230249, 46, 204078, 204077, 204081, 204082, 204086, 3083,3081, 211481,28325,225520, 220520,228340, 35744, 27374, 204060];
	//取得当前类目是否在SPU白名单中的布尔值
	//option._isInSPUList = checkClassID.call(option);
	//window.hasSpuData = false;//当前类目是否SPU化并且包含有有效的SPU数据
	//如果是新增状态，productid默认为0
	if(option.isAdd){
		option.spuIdHandel.val("0");
	}
	//写入全局变量
    window._classAttrOption = option;
    //请求类目配置数据的回调函数。 如;选择手机，那么就取回手机相关的所有的厂商，型号，颜色，重量，等等。
    window.classAttrCallBack = classAttrCallBack;
    //选择对象操作的处理事件
    window.attrChange = attrChange;
    //检查列表的输入是否合法
    window.setTipsState = setTipsState;
	//载入SPU信息
	window.findSpuByKeyAttrSuccess = findSpuByKeyAttrSuccess;
    //开始渲染
    option.showAttrList();
    //属性描述信息的框
    $$("body").append('<div id="classAttrDesc" class="classAttrDesc" ></div>');
	//加上提示信息
	//option.showSPUinfo();
	return option;
    
    //检查属性选择的完整状态1
    function checkProperty(){
        //如果当前类目没有属性，则直接返回真
        if (!this.aidList) {
            $$(this.var1).val("");
            $$(this.var2).val("");
            return true;
        }
        if (this.aidList.length < 1) {
            $$(this.var1).val("");
            $$(this.var2).val("");
            return true;
        }
        var _var1 = window._classAttrOption._var1;
        var _var2 = window._classAttrOption._var2;
        _var1 = [];
        _var2 = [];
        var _t = [], _e = [], _eItems = [];
        for (var i = 0; i < this.aidList.length; i++) {
            _t.push("#f_" + this.aidList[i]);
        }
        $$(_t.join(",")).each(function(){
            var _this = $$(this);
            var _v = getAttrNewValue(window._classAttrOption, _this.attr("attrId"), _this.attr("parentId"), _this.attr("parentAttrId"));
            var stype = _this.attr("stype");
            if (window._classAttrOption.isCheck) {
                window.onerror = "";
                //必选但是没有选择
                if (_v[4] && _v[0] == "" && stype != 'txt') {
                    var _item = _this.find("select,:checkbox,:text").filter(":first").get(0);
                    _eItems.push(_item ? _item : "");
                    _e.push("请选择“" + _this.attr("attrName") + "”");
                    $$("#e_" + _this.attr("attrId")).html("请选择“" + _this.attr("attrName") + "”").show();
                }
                //文本属性必填情况
                if (_v[4] && stype == 'txt' && _v[1] == "") {
                    var _item = _this.find("select,:checkbox,:text").filter(":first").get(0);
                    _eItems.push(_item ? _item : "");
                    _e.push("请填写“" + _this.attr("attrName") + "”");
                    $$("#e_" + _this.attr("attrId")).html("请填写“" + _this.attr("attrName") + "”").show();
                }
                //选了其他，但是没有填内容
                if (_v[3] && _v[1] == "") {
                    var _item = _this.find(":text").filter(":first").get(0);
                    _eItems.push(_item ? _item : "");
                    _e.push("请填写“" + _this.attr("attrName") + "”的自定义属性值");
                    $$("#e_" + _this.attr("attrId")).html("请填写“" + _this.attr("attrName") + "”的自定义属性值").show();
                }
            }
            //选择了值就压入
            if (_v[0].length > 0) {
                //如果是复选则按照id拼成16进制串，单选则直接转换成16进制数
                _var1.push([_this.attr("attrId"), getByteFromIdList(_v[0], _this.attr("attrId"), window._classAttrOption)])
            };
            //选择了值，并且有其他值，并且不为空
            (_v[0] && _v[3] && _v[1]) ? _var2.push([_this.attr("attrId"), _v[1]]) : "";
            //文本属性的情况【选中值，自定义值，是否有子属性，是否有其他值，是否必选值】
            if (_v[0].length == 0 && !_v[3] && _v[1]) {
                //if (!option.isB2C) {
                    _var1.push([_this.attr("attrId"), 1]);
               // }
                _var2.push([_this.attr("attrId"), _v[1]]);
            }
        });
        if (_e.length < 1) {
            $$(this.var1).val(attrsToStr(_var1, 16));
            $$(this.var2).val(attrsToStr(_var2, 16));
            return true;
        }
        else {
            this.errorItems = _eItems;
            try {
                _eItems[0] ? _eItems[0].focus() : "";
            } 
            catch (e) {
            }
            return _e;
        }
    }
    //选择框、文本框的用户操作事件
    function attrChange(dom){
		//if(dom.id=="r_15960_1"){return false;}
		var option = window._classAttrOption; 
		var attrType = $$(dom).attr("atag");//select、input、text
        var aid = parseInt($$(dom).attr("attrid")); 
        var aoid = (attrType == "select" || attrType == "checkbox") ? dom.value : "";
        var apid = $$(dom).attr("parentId");
        var apaid = $$(dom).attr("parentAttrId");
        var attrText = dom.value;
        var property = $$(dom).attr("property");
        //自定义内容文本框
		
        if (attrType == "text" || attrType == "txt") {
            //输入的内容验证
            //替换：|
            if ($strTrim(attrText," ") != attrText) {
                attrText = $strTrim(attrText," ");
                dom.value = attrText;
            }
            if (attrText.replace(/[-:\|\^"\\\/<>]/g, "") != attrText) {
                attrText = attrText.replace(/\:/g, "：").replace(/\|/g, "｜").replace(/\^/g, " ").replace(/\"/g, "“").replace(/\\/g, " ").replace(/\//g, " ").replace(/\'/g, "‘").replace(/</g, "＜").replace(/>/g, "＞").replace(/-/g, "~");
                dom.value = attrText;
            };
            //长度检查
			var tLen=option.txtLen;
            if ($strLenGB(attrText) > tLen) {
                attrText = $strLenGB($strSubGB(attrText,0, tLen)) >= tLen ? $strSubGB(attrText,0, tLen-1) : attrText;
                dom.value = attrText;
            }
        };
        var t_var = getAttrNewValue(option, aid, apid, apaid);
        //根据属性的选择状态设置自定义内容文本框的显示隐藏（先判断现在状态是否等于目标状态，不等才修改）
        document.getElementById("i_" + aid).style.display = t_var[3] ? "" : "none";
        //判断是否有子属性的变化
        var childChange = false;
        //发生改变的元素(属性值)列表,复选框只有一个当前元素，单选框则还要加上原来的值
        var changeItemList = [aoid, (attrType == "select") ? getAttrDefValue(option, aid, apid, apaid)[0].toString() : ""];
        //判断发生改变的元素是否具有子属性，如果有的话则说明一定有变化
        for (var i = 0; i < option.attr.attrList.length; i++) {
            var _attr = option.attr.attrList[i];
            if (!option.attr.attrList[i]) {
                continue;
            }
            if (_attr.id == aid && _attr.parentId == apid && _attr.parentAttrId == apaid) {
                //判断所有改变的元素是否有子属性
                for (var j = 0; j < option.attr.attrList[i].opList.length; j++) {
                    if (!option.attr.attrList[i].opList[j]) {
                        continue;
                    }
                    for (var k = 0; k < changeItemList.length; k++) {
                        (changeItemList[k] != "" && parseInt(option.attr.attrList[i].id) == parseInt(aid) && parseInt(_attr.opList[j][0]) == parseInt(changeItemList[k]) && _attr.opList[j][2] > 0) ? childChange = true : "";
                    }
                }; 
                //判断完了以后，顺便把最新的值写入
                _attr.defaultVar = t_var[0].join(",");
                _attr.defaultTxt = t_var[1];
            }
        };
        //把当前属性id插入到用户操作过的属性列表中，便于还原提示状态
        (("," + option.activeAttr + ",").indexOf("," + aid + "_" + apid + "_" + apaid + ",") < 0) ? option.activeAttr.push(aid + "_" + apid + "_" + apaid) : "";
        setTipsState(option);
        option.onChange(dom, option);
        //判断是否需要重新渲染选择区域
        if (childChange) {
            window._classAttrOption.showAttrList();
        };
		option.loadSpuInfo();
		if (attrType == 'select' || attrType == "txt") {
			if (parseInt(property) & 0X80000) {			
				if (option.isSPU) {
                    //如果需要载入SPU数据	
					if (option.isB2C) {
						//注意，文本框也可能是关键属性，例如图书的ISBN号码
                        var isKey = attrType == "txt" ? 1 : 0;
                        var attrValue = isKey ? dom.value : aoid;
                        option.onLoadSPU(option.classId, aid, attrValue, isKey);
                    }
                }
            };
		};
	};
    //输出所有用户操作过的属性的提示信息
    function setTipsState(obj){
		var _alist = obj.attr.attrList;
        var _t = [];
        for (var i = 0; i < obj.activeAttr.length; i++) {
            var _to = obj.activeAttr[i].split("_");
            var _mess = ""; //提示信息
            for (var j = 0; j < _alist.length; j++) {
                if (!_alist[j]) {
                    continue;
                }
                if (_alist[j].id == parseInt(_to[0]) && _alist[j].parentId == parseInt(_to[1]) && _alist[j].parentAttrId == parseInt(_to[2])) {				
				    //如果是子属性的提示信息，在父属性改变时，ID已经改变
					//getAttrNewValue方法优化，如果是改变了的子属性，就返回NULL
                    var _v = getAttrNewValue(obj, _alist[j].id, _alist[j].parentId, _alist[j].parentAttrId);
					//忽略这个已经删除掉的子属性
					if(_v==null){
						continue;
					}
                    var prop = _alist[j].property;
                    //必选并且没有选择并且不为文本属性
                    _mess = ((prop & 0x20000) && _v[0].length < 1 && !(prop & 0x8)) ? "请选择‘" + _alist[j].name + "’" : _mess;
                    _mess = ((prop & 0x8) && _v[1] == "") ? "请填写‘" + _alist[j].name + "’" : _mess;
                    _mess = (_v[3] && _v[1] == "") ? "请填写“" + _alist[j].name + "”的自定义属性值" : _mess;
                }
            }
            (_mess) ? $$("#e_" + _to[0]).html(_mess).show() : $$("#e_" + _to[0]).html("").hide();
            //这里只保留未检查通过的id
            (_mess) ? _t.push(obj.activeAttr[i]) : "";
        }
        obj.activeAttr = _t;
    }
    //获取某个属性的当前选中值【选中值，自定义值，是否有子属性，是否有其他值，是否必选值】
    function getAttrNewValue(option, aid, pid, paid){
        var r = [[], '', false, false, false];
        for (var i = 0; i < option.attr.attrList.length; i++) {
            var a = option.attr.attrList[i];
            if (!a) {
                continue;
            }
            if (a.id == aid && a.parentId == pid && a.parentAttrId == paid) {
                r[4] = (a.property & 0x20000) ? true : false;
                //选中对象的处理
                var items = (a.property & 0x4) ? option.areaHandel.find(":checked[name='r_" + aid + "']") : ((a.property & 0x2) ? option.areaHandel.find("#s_" + aid) : option.areaHandel.find("#x_" + aid));
                items.each(function(){
                    this.value ? r[0].push(this.value) : "";
                    for (var j = 0; j < a.opList.length; j++) {
                        if (!a.opList[j]) {
                            continue;
                        }
                        //判断是否有其他值、子属性
                        (a.opList[j][0] == parseInt(this.value, 10) && a.opList[j][2] > 0) ? r[2] = true : "";
                       // (a.opList[j][0] == parseInt(this.value) && a.opList[j][1].indexOf("其他") >= 0 && !option.isB2C) ? r[3] = true : "";
                        (a.opList[j][0] == parseInt(this.value, 10) && a.opList[j][1].indexOf("其他") >= 0) ? r[3] = true : "";
                    }
                });
                var _vv = $$("#c_" + aid).val();
				if(_vv==undefined){
					return null;
				}
				var tLen=option.txtLen;
                if ($strLenGB(_vv) > tLen) {
                    _vv = $strLenGB($strSubGB(_vv,0, tLen)) >= tLen ? $strSubGB(_vv,0, tLen-1) : _vv;
                    $$("#c_" + aid).val(_vv);
                }
                r[1] = _vv;
                if (a.property & 0x8) {
                    //当为文本输入的时候，清空r[0]，值放置如r[1]
                    r[0] = [];
                    r[1] = $$("#x_" + aid).val();
					r[3]=false;
                }
            }
        }
        return r;
    }
    //获取某属性的默认选址,参数：大对象，属性id，属性的父属性id，属性的父属性属性值id,
    function getAttrDefValue(obj, aid, apid, apaid){
        for (var i = 0; i < obj.attr.attrList.length; i++) {
            if (obj.attr.attrList[i].id == aid && obj.attr.attrList[i].parentId == apid && obj.attr.attrList[i].parentAttrId == apaid) {
                //返回参数:[选中元素的id列表，自定义值，16进制标表示的选中值]
                return [obj.attr.attrList[i].defaultVar.split(","), obj.attr.attrList[i].defaultTxt ? obj.attr.attrList[i].defaultTxt : "", getByteFromIdList(obj.attr.attrList[i].defaultVar.split(","), obj.attr.attrList[i].id, obj)];
            }
        }
        return [[], "", ""];
    }
    //渲染属性列表
    function showAttrList(){
        //如果没有attr变量则表示是第一次请求
        if (!this.attr) {
            this.areaHandel.html('<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0"><tr><td align="center" valign="middle" style="font-size:13px; color:#333333; text-align:center;vertical-align: middle; " width="100%" height="100%" style="padding:5px;"><img src="http://static.paipaiimg.com/assets/common/loading2.gif" /><br />数据加载中……</td></tr></table>');
            //期待回调函数：classAttrCallBack
            var url = "http://my.paipai.com/cgi-bin/" + (this.isB2C ? "b2c_" : "") + "commoditypublish_genjsdata?classid=1&mc=" + this.classId + "&attrid=" + attrsToStr(this._var1, 16) + "&tagid=";
            if (("," + this.urlList.join(",") + ",").indexOf("," + url + ",") >= 0) {
                alert("类目属性请求出错，请刷新页面重试，如果多次出现这种情况请联系客服处理。");
                return;
            }
            this.urlList.push(url);
			//返回码注册
			retCodeForAttr = $returnCode({url:url,frequence:1});
            $loadScript(url + ((new Date).getTime()), "getRootAttr");
            return;
        }
        //从第0级开始加载数据
        this.aidList = [];
		//清空关键属性列表
		this._keyAttrList=[];
        var hc = getCodesByParentId(this, 0, 0);
        //如果数据不完整则中断，等待下次被唤起
        if (this.noFullData) {
            return;
        }
		//如果当前商品是SPU商品，那么增加spu的提示
		//if(this._isInSPUList){
		//	var helpDom = '<DIV id="spuAlertInfo" style="display:none;"><span class="warning" style="font-weight:bold; color:#F00; margin-left:20px; padding-right:5px; width:460px; background:url(http://pics.paipai.com/common/icon/noteHint.gif) no-repeat scroll 5px 2px #F5FFF1; border:1px solid #ABDC97; ">为节省您发布商品的时间，商品属性自动加载标准产品信息。<a href="http://bbs1.paipai.com/g40005c3i1049s0p0.html" target="_blank" style="text-decoration:underline;">反馈>></a></span></DIV>';
		//}
        this.areaHandel.html(hc);
		setTipsState(this);
        if (this.showHelp) {
            //给所有的tip帮助链接绑定tips事件
//			$$("#classAttrDesc").unbind("mouseover").mouseover(function(){
//				$$(this).show();
//			}).mouseout(function(){
//				$$(this).hide();
//			});
//            this.areaHandel.find("[atag='tiplink']").unbind("mouseover").mouseover(function(){
//                var infoId = this.id.replace("a_", "t_");
//                $$("#classAttrDesc").css("position", "absolute").css("left", $getX(this)).css("top", $getY(this) + 15).html($$("#" + infoId).html()).show().children("div").css("width", "395").css("display", "block").append('<iframe frameBorder="0" style="position:absolute;left:0;top:0;width:100%;z-index:-1;filter:Alpha(Opacity=0);border:none;" id="classAttrDesc_iframe"></iframe>');
//                $$("#classAttrDesc_iframe").css("height", $$("#classAttrDesc").height() + 15)
//            }).mouseout(function(){
//                $$("#classAttrDesc").hide();
//            });
            this.areaHandel.find("[atag='tiplink']").unbind("mouseover").mouseover(function(){var infoId = this.id.replace("a_", "t_");window._showTips=$showTip({title:'',content:$$("#"+infoId).html(),left:$getX(this)-25,top:$getY(this)+20,width:350,height:0,type:"1"})}).mouseout(function(){ window._showTips && window._showTips.close();});
        }
        else {
            this.areaHandel.find("[atag='tiplink']").remove();
        }
		
		//渲染完成，判断spu数据的调用
		this.loadSpuInfo(true);
        //初始化完成事件
		this.onInited(this);
    }
    //根据父id生成列表,参数：obj，父属性id，16进制父属性的默认值（可能是多选项目的子属性，所以一定要是选择后的值）
    function getCodesByParentId(obj, pid, paid){
        if (obj.noFullData) {
            return "";
        }
        //销售属性分开装配
        var html = [], htmlSale = [];
        //把组合属性值转换成属性值id列表
        for (var i = 0, len = obj.attr.attrList.length; i < len; i++) {
            //属性值id列表
            var nowAttr = obj.attr.attrList[i];
            //遍历所有的属性节点，找到当前父节点选中值下的子节点
            if (nowAttr && nowAttr.parentId == pid && ("," + getListFromIdByte(paid, pid, obj) + ",").indexOf("," + nowAttr.parentAttrId + ",") >= 0) {
                //构造组件的html代码				
                html.push(getAttrCode(nowAttr));
            }
        }
        //如果这里没有找到任何一个元素，并且不是根目录的话，就说明数据不完整，要重新请求数据后重新渲染。
        if (html.length < 1 && pid != 0) {
            //期待回调classAttrCallBack，参数:nt是否返回跟属性数据，mc当前类目id，attrid属性id及选中属性的值
            var url = "http://my.paipai.com/cgi-bin/" + (obj.isB2C ? "b2c_" : "") + "commoditypublish_genjsdata?classid=0&mc=" + obj.attr.classId + "&attrid=" + parseInt(pid, 10).toString(16) + ":" + paid + "&tagid=";
            if (("," + obj.urlList.join(",") + ",").indexOf("," + url + ",") >= 0) {
                alert("类目属性请求出错，请刷新页面重试，如果多次出现这种情况请联系客服处理。");
                return "";
            }
            obj.urlList.push(url);
			//返回码注册
			retCodeForAttr = $returnCode({url:url,frequence:1});
            $loadScript(url + ((new Date).getTime()), "getYeziAttr");
            return "";
        }
        //返回代码
        return html.join("");
        
        //生成某条属性的代码
        function getAttrCode(al){
            obj.aidList.push(al.id);//记录当前使用中的属性
            var dvar = getAttrDefValue(obj, al.id, al.parentId, al.parentAttrId); //默认选择的属性值[选择值，自定义值,选中元素的id数组]
            var hasChild = false; //当前属性的选择结果中是否有子属性,条件：但前选中值有子属性
            var hasOther = false; //是否显示其他内容，条件：当前选中项中有其他值存在
            var ss = []; //选择框的代码串
            var ap = parseInt(al.property);
			//判断是否关键属性，如果是关键属性，压入关键属性列表
			if(ap & 0x80000){
				obj._keyAttrList.push([al.id,al.parentId, al.parentAttrId]);
			}
			//文本属性
            if (ap & 0x8) {
                //输入框
                var autoValue = "";
                //当属性为必选属性，且被隐藏时默认值- （被显示时不设置默认值）
                if ((!obj.isB2C && (ap & 0x200000)) || (obj.isB2C && (ap & 0x400000))) {
					if (!obj.showHideAttr) {
						autoValue = "-";
					}
                }
                ss.push( '<input type="text" id="x_' + al.id + '" onchange="attrChange(this)" atag="txt" noblank="' + ((ap & 0x20000) ? "true" : "false") + '" attrId="' + al.id + '" attrName="' + al.name + '" parentId="' + al.parentId + '" parentAttrId="' + al.parentAttrId + '" property="' + al.property + '" value="' + (dvar[1] ? dvar[1] : autoValue) + '" />');
            };
            //单选属性
            if (ap & 0x2) {
                ss.push( '<select id="s_' + al.id + '" onchange="attrChange(this)" atag="select" noblank="' + ((ap & 0x20000) ? "true" : "false") + '" attrId="' + al.id + '" attrName="' + al.name + '" parentId="' + al.parentId + '" parentAttrId="' + al.parentAttrId + '" property="' + al.property + '"><option value="" style="color:#999;">未选择</option>');
                for (var ii = 0; ii < al.opList.length; ii++) {
                    if (!al.opList[ii]) {
                        continue;
                    }
                    var autoSelectThis = false;
                    //当属性为必选属性，且被隐藏时默认选择第一个
                    if (ii == 0 && (parseInt(al.property) & 0x20000) && ((!obj.isB2C && (parseInt(al.property) & 0x200000)) || (obj.isB2C && (parseInt(al.property) & 0x400000)))) {
                        autoSelectThis = true;
                    }
                    ss.push('<option value="' + al.opList[ii][0] + '" ' + (("," + dvar[0] + ",").indexOf("," + al.opList[ii][0] + ",") >= 0 ? 'selected="selected"' : '') + ' subAttrIds="' + al.opList[ii][2] + '" ' + (autoSelectThis ? 'selected="selected"' : '') + '>' + al.opList[ii][1] + '</option>');
                    (("," + dvar[0] + ",").indexOf("," + al.opList[ii][0] + ",") >= 0 && al.opList[ii][2]) ? hasChild = true : '';
                    //(("," + dvar[0] + ",").indexOf("," + al.opList[ii][0] + ",") >= 0 && al.opList[ii][1].indexOf("其他") >= 0 && !option.isB2C) ? hasOther = true : '';
                    (("," + dvar[0] + ",").indexOf("," + al.opList[ii][0] + ",") >= 0 && al.opList[ii][1].indexOf("其他") >= 0 ) ? hasOther = true : '';
                }
                ss.push('</select>');
            }
            //复选框，属性值借助数组进行排序
            var isSale = false;//是否销售属性，下面隐藏也需要
            if (ap & 0x4) {
                //如果是销售属性，按照如下格式构造：{384010047:['颜色',1,0,{684044389:'白色',384001735:'橙色',384001745:'淡蓝色',384001743:'淡紫色',384001712:'粉色',384001713:'褐色',684004234:'褐色',384001703:'黑色',384001704:'红色',384001715:'灰色',684044383:'桔色',384001711:'金色',384001706:'蓝色',684044580:'蓝色',384001705:'绿色',384006300:'米色',384001714:'其它',684044306:'银色',384001742:'紫色',384001729:'棕色',684100369:'炫银、莹白、霓红'}],684003201:['套装',1,0,{684055954:'普通',684055958:'套装一',684055960:'套装二'}]}
                isSale = ap & 0x10000;
                //如果是销售属性，则构造数据
                isSale ? obj.saleAttr[al.id] = [al.name, 1, 0, {}] : '';
                //ss += "<div class='input-css'>"
                for (var ii = 0; ii < al.opList.length; ii++) {
                    if (!al.opList[ii]) {
                        continue;
                    }
                    var autoSelectThis = false;
                    //当属性为必选属性，且被隐藏时默认选择第一个
                    if (ii == 0 && (parseInt(al.property) & 0x20000) && ((!obj.isB2C && (parseInt(al.property) & 0x200000)) || (obj.isB2C && (parseInt(al.property) & 0x400000)))) {
                        autoSelectThis = true;
                    }
                    isSale ? obj.saleAttr[al.id][3][al.opList[ii][0]] = al.opList[ii][1] : '';
                    ss.push('<label for="r_' + al.id + '_' + al.opList[ii][0] + '"><input type="checkbox" onclick="attrChange(this)" name="r_' + al.id + '" id="r_' + al.id + '_' + al.opList[ii][0] + '" value="' + al.opList[ii][0] + '"  ' + ((("," + dvar[0] + ",").indexOf("," + al.opList[ii][0] + ",") >= 0 || autoSelectThis) ? 'checked="checked"' : '') + ' attrId="' + al.id + '" attrName="' + al.name + '" text="' + al.opList[ii][1] + '" atag="checkbox" stock="' + ((ap & 0x10000) ? "1" : "0") + '" noblank="' + ((ap & 0x20000) ? "true" : "false") + '" parentId="' + al.parentId + '" parentAttrId="' + al.parentAttrId + '" />' + al.opList[ii][1] + '</label>');
                    (("," + dvar[0] + ",").indexOf("," + al.opList[ii][0] + ",") >= 0 && al.opList[ii][2]) ? hasChild = true : '';
                    //(("," + dvar[0] + ",").indexOf("," + al.opList[ii][0] + ",") >= 0 && al.opList[ii][1].indexOf("其他") >= 0 && !option.isB2C) ? hasOther = true : '';
                    (("," + dvar[0] + ",").indexOf("," + al.opList[ii][0] + ",") >= 0 && al.opList[ii][1].indexOf("其他") >= 0 ) ? hasOther = true : '';
                }
                //ss += "</div>";
				//判断多选框是否大于2个，大于2个增加全选框
				if(ss.length>2){
					ss.push('<label for="r_' + al.id + '_selectAll"><input type="checkbox" name="r_' + al.id +'" id="r_' + al.id + '_selectAll" value="selectAll" attrId="' + al.id + '" attrName="' + al.name + '" text="全选" atag="checkbox" stock="' + ((ap & 0x10000) ? "1" : "0") + '" noblank="false" parentId="' + al.parentId + '" parentAttrId="' + al.parentAttrId + '" /><b>全选</b></label>');
				}
            };
            var hc = '<li atag="attrItem" id="f_{#attrId#}" stype="{#type#}" attrId="{#attrId#}" attrName="{#name#}" parentId="{#parentId#}" parentAttrId="{#parentAttrId#}"  style="display:{#showThis#};"><div class="attr_tit"><em class="asterisk">{#must#}</em>{#name#}：</div><div class="attr_cnt"><span atag="select" class="cts1">{#selector#}</span><span atag="input" id="i_{#attrId#}" class="cts2" style="{#showOtherVar#}"><input name="c_{#attrId#}" onchange="attrChange(this)"  type="text" id="c_{#attrId#}" noblank="" attrId="{#attrId#}" value="{#otherVar#}" parentId="{#parentId#}" parentAttrId="{#parentAttrId#}" size="'+option.txtLen+'" atag="text" /></span><a class="cts3 msg0-icon-help" href="javascript:;" id="a_{#attrId#}" style="{#showAbout#}" atag="tiplink">?</a></div><div class="attr_tips"><span class="cts4" atag="error" id="e_{#attrId#}" style="display:none"></span><p id="t_{#attrId#}" style="display:none">{#description#}</p></div></li>';
            hc = hc.replace(/{#attrHide#}/g, obj.isHideSale && isSale ? "display:none;" : "");
            hc = hc.replace(/{#must#}/g, (ap & 0x20000) ? "*" : "");//是否必填
            if (!obj.isB2C) {//c2c属性的隐藏
                hc = hc.replace(/{#showThis#}/g, (ap & 0x200000) ? "none" : "");//是否显示
            }
            else {//b2c属性的隐藏
                hc = hc.replace(/{#showThis#}/g, (ap & 0x400000) ? "none" : "");//是否显示
            }
			hc = hc.replace(/{#attrId#}/g, al.id);//属性id号
            hc = hc.replace(/{#parentId#}/g, al.parentId);//属性id号
            hc = hc.replace(/{#parentAttrId#}/g, al.parentAttrId);//属性id号
            hc = hc.replace(/{#name#}/g, al.name);//属性名称
            hc = hc.replace(/{#showAbout#}/g, (al.desc == "null" || al.desc == "" || !al.desc) ? "display:none;" : "")
            hc = hc.replace(/{#description#}/g, al.desc);//属性描述文字
            hc = hc.replace(/{#selector#}/g, ss.join(""));//选择框
            hc = hc.replace(/{#otherVar#}/g, dvar[1]);//自定义属性值
            hc = hc.replace(/{#showOtherVar#}/g, hasOther ? "" : "display:none;");//自定义属性值
            hc = hc.replace(/{#tips#}/g, "");//tips内容
            hc = hc.replace(/{#type#}/g, (ap & 0x2) ? "select" : ((ap & 0x4) ? "checkbox" : "txt"));//选项类别：单选，复选，文本
            //如果当前属性的选中属性值有子属性，则把子属性的内容输出出来,参数：obj，当前属性id，当前属性默认值
            if (hasChild) {
                //递归调用当前节点的子节点属性
                hc += getCodesByParentId(obj, al.id, dvar[2]);
            }
			return hc;
        }
    };
	//加载商品spu数据
	function loadSpuInfo(isFirst){
		//b2c下不加载spu数据
		if(this.isB2C){return false;}
		// 现在不再设置spu开放的数组，全开放访问，具体由返回数据状态决定。
		var obj=this;
		var keyValue=getSpuStr();	
		//如果当前品类是spu化的，但是用户在编辑时，首次打开都呈现可修改状态，
		//一旦用户修改某个非关键属性，立即变成重新加载spu的状态。
		
		//如果关键属性未发生变化，则什么也不做。
		if(!isKeyValueChange()){//1----------关键属性未发生变化，则返回，什么也不做。
			//..todo 
			//console.info("1----------关键属性未发生变化，则返回，什么也不做。");
			
		}else if(!isKeyValueSelect()){//如果关键属性发生变化，但是未全部选中，则：取消其他属性的只读状态
			//console.info("如果关键属性发生变化，但是未全部选中，则：取消其他属性的只读状态");
			//如果是首次编辑的时候自动填充的属性区，那么不执行清空操作
			if(!isFirst){
				//_cleanHtml();
				$$(obj.area).find(":disabled").removeAttr("disabled");
			}
			option.onSPUChange(option,false);
		}else{//如果关键属性发生变化，并且全部选中，则加载spu数据
			option.onSPUChange(option,false);
			//console.info("如果关键属性发生变化，并且全部选中，则加载spu数据");
			//如果当前item不是关键属性或者其父属性，那么解锁并清空所有非关键属性项，关键属性项及其父属性不改变
			if(!isFirst){
				option.spuIdHandel.val("0");
				//$$(option.area).find(":checkbox:checked:visible:not([stock=1])").attr("checked",false); 
				_cleanHtml();
				//option.onSPUReset();
			}
			//如果是【发布新商品】或者【编辑商品的时候手动选择关键属性】，导致关键属性选齐且变化，那么先清掉之前选择项，再填充新的spu数据
			/**/
			//if(option.isAdd || !isFirst){
				//_cleanHtml();
				$$(obj.area).find(":disabled").removeAttr("disabled");
				if(keyValue.length<1){
					return ;
				}
				var kv;
				(function(){
					var s = [],	len=keyValue.length, x; 
					for(var i=0; i<len; i++){
						x = keyValue[i];
						//s.push((x[1]?"1":"0") + ":" +x[5]  + ":" + x[0]);//格式：是否文本：属性ID:选项ID
						//dukechen的参数顺序发生调整:   
						s.push(x[5] + ":" +x[0]  + ":" + (x[3]?"1":"0"));//格式：属性ID:选项ID:是否文本(其他值)
					}
					window.spuLoading = $$("#e_"+keyValue[len-1][5]); 
					kv =  s.join("|");
				})();
				window.spuLoading.html('<span style="margin-left:5px;">正在加载标准产品信息，请稍候……</span>').show();
				//期待回调getSpuInfoCallBack
				//loadScript("http://sale.brand.paipai.com/getSPUInfoByAttrs.xhtml?cid="+ this.classId +"&encode=10&keyattrstr="+kv);
				//CGI变更：sale.brand.paipai.com被回收，改用新的api.paipai.com. 期待回调findSpuByKeyAttrSuccess. 接口数据结构保持不变(http://pop.paipai.com/bin/view/Main/findSpuByKeyAttr 接口文档)
				//返回码注册
				retCodeForSpu = $returnCode({url:"http://api.paipai.com/spu/findSpuByKeyAttr.xhtml",frequence:1});
				$loadScript("http://api.paipai.com/spu/findSpuByKeyAttr.xhtml?needParseAttr=1&classId="+ this.classId +"&keyAttrs="+kv);
				//loading.html("").hide();
			//}
		} 
		obj._keyAttrStr=getSpuStr();
		//清理HTML元素,除关键属性和其父属性外，其他置空。
		function _cleanHtml(){
			//计算出关键属性和其父属性.
			function getParentAttrByItem(id){
				var al=window._classAttrOption.attr.attrList;
				var _t;
				for(var i=0;i<al.length;i++){
					if(al[i].id==id){_t=al[i];}
				}
				if(!_t){return "";}
				if(_t.parentId=="0"){
					return id+"";
				}
				for(var i=0;i<al.length;i++){
					if(al[i].id==_t.parentId){
						var returnVar=getParentAttrByItem(al[i].id);
						return id+","+getParentAttrByItem(al[i].id);
					}
				}
			}
			var keyList=[];
			for(var i=0;i<obj._keyAttrList.length;i++){
				keyList=keyList.concat(getParentAttrByItem(obj._keyAttrList[i][0]).split(","));
			}
			for(var i =0;i<keyList.length;i++){
				keyList[i]="#f_"+keyList[i];
			}
			keyList=keyList.join(",");
			//$$(obj.area).find(":checkbox:not("+ _voidItems("r").join(",") +")").attr("checked", false); //checkbox 不做清除。【重新打开， tintin的需求】
			//$$(obj.area).find("div[id^=f_]:visible select:not("+ _voidItems("s").join(",") +")").val("");//将所有SELECT都置为空
			try{
				var theDivs = $$(obj.area).find("li[id^=f_]:not("+keyList+"):visible");
				/*theDivs.find("select").filter(function(){
					var t = $$(this).attr("property");
					return !!(parseInt(t,16) & 0X10000);	
				}).val("");//将所有SELECT都置为空*/
				theDivs.find("select").val("");//清空所有单选属性
				//theDivs.find(":checkbox:not([stock=1])").attr("checked", false);//所有非库存的CHECKBOX都置为空
				theDivs.find(":checkbox").attr("checked", false);//所有非库存的CHECKBOX都置为空
				theDivs.find(":text[id^=x_]").val("");//将所有INPUT-TEXT都置为空
				theDivs.find(" span[atag=input][id^=i_] :text:visible").val("").hide(); //将“其他”项隐藏
				theDivs.find(" span[atag=error][id^=e_]").html("").hide(); //将“其他”项的提示信息隐藏
				//window.g_Stocks.resetStock();
			}catch(e){}
			//$$(obj.area).find("div[id^=f_]:visible li[atag=input]:not("+ _voidItems("i").join(",") +")").val("").hide(); //将“其他”项隐藏
			//$$(obj.area).find("div[id^=f_]:visible li[atag=error]:not("+ _voidItems("e").join(",") +")").html("").hide(); //将“其他”项的提示信息隐藏
		}
		//判断是否所有属性都已经选中
		function isKeyValueSelect(){
			for(var i=0;i<keyValue.length;i++){
				var curr = keyValue[i];
				if(curr[0].length<1 || (curr[3] && curr[1]=="")){
					return false;
				}
			}
			return true;
		}
		//判断关键属性是否发生变化
		function isKeyValueChange(){
			return keyValue.toString()==obj._keyAttrStr ? false : true ;
		}
		//获取关键属性编码串  
		//格式：【选中值，自定义值，是否有子属性，是否有其他值，是否必选值，属性id】
		function getSpuStr(){
			var str=[];
			var x;
			for(var i=0;i<obj._keyAttrList.length;i++){
				x = obj._keyAttrList[i];
				str.push(getAttrNewValue(obj, x[0], x[1],x[2]).concat(x[0]));
			}
			return str;
		}
	}
    //把值数组，合并为一个长字符串。
    function getByteFromIdList(list, aid, obj){
        if (list == "") {
            return "";
        }
        var t = "select";
        //取当前属性的类型
        for (var i = 0; i < obj.attr.attrList.length; i++) {
            if (obj.attr.attrList[i].id == aid) {
                t = (obj.attr.attrList[i].property & 0x4) ? "checkbox" : "select";
            }
        }
        //如果是复选属性则拼成256位16进制字符串，单选属性则直接转为16进制
        if (t == "select") {
            return parseInt(list, 10).toString(16);
        }
        else 
            if (t == "checkbox") {
                if (obj.isB2C) {
                    for (var i = 0, len = list.length; i < len; i++) {
                        list[i] = parseInt(list[i], 10).toString(16);
                    };
                    return list + '';
                };
                var bytes = [0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0];
                
                //把所有选中的id按照32位拆分，分别写入对应的字段
                for (var i = 0; i < list.length; i++) {
                    bytes[Math.ceil(list[i] / 32) - 1] += Math.pow(2, (list[i] - 1) % 32);
                }
                //转为16位字符串
                for (var i = 0; i < bytes.length; i++) {
                    bytes[i] = get16Char(bytes[i]);
                }
                //去零，反转
                return $strTrimLeft(bytes.reverse().join(""),"0");
            }
        
        function get16Char(i){
            i = i.toString(16);
            var s = "";
            for (var j = 0; j < (8 - i.length); j++) {
                s += "0";
            }
            return s + i.toString();
        }
    };
    //把属性字符串转换成一个id数组
    function getListFromIdByte(str, aid, obj){
        if (str == "0") {
            return ["0"];
        }
        var t = "select";
        //取当前属性的类型
        for (var i = 0; i < obj.attr.attrList.length; i++) {
            if (obj.attr.attrList[i].id == aid) {
                t = (obj.attr.attrList[i].property & 0x4) ? "checkbox" : "select";
            }
        }
        if (obj.isB2C) {
            var arr = str.split(',');
            for (var i = 0, len = arr.length; i < len; i++) {
                arr[i] = parseInt(arr[i], 16).toString(10);
            };
            return arr;
        };
        //如果是复选属性则把字符串，转成256位长自己再出id列表，如果是单选属性则直接转成10进制id
        if (t == "select") {
            return [parseInt(str, 16)];
        }
        if (t == "checkbox") {
            //把str转为2进制串
            var s = "", r = [];
            for (var i = 0; i < str.length; i++) {
                s += ["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"][parseInt(str.substr(i, 1), 16)];
            }
            //把字符串补齐为256位2进制串
            str = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000".substr(0, 256 - s.length) + s;
            //按位数返回位的id，（最右边位第一位）
            for (var i = 0; i < str.length; i++) {
                if (str.substr(i, 1) == "1") {
                    r.push(256 - i);
                }
            }
            return r.reverse()
        }
    };
    //把内存中的属性选择传转换为字符串,参数：编码串，id的进制
    function attrsToStr(attr, type){
        var ct = type == 10 ? 10 : 16;
        var ct2 = type == 10 ? 16 : 10;
        var t = [];
        for (var i = 0; i < attr.length; i++) {
            if (!attr[i][0]) {
                continue;
            }
            t.push(parseInt(attr[i][0], ct2).toString(ct) + ":" + attr[i][1]);
        }
        return t.join("|");
    };
    //字符串转换为属性选择状态对象
    function strToAttr(str){
        //数据结构：33:13|34:3|35:2|37:1|38:1|39:1|515:1|516:1|517:1|573:2|30:14|null
        var attr = str ? str.replace("^", "").split("|") : [];
        //去掉最后的空元素
        if (attr[attr.length - 1] == "") {
            attr.pop();
        }
        for (var i = 0; i < attr.length; i++) {
            attr[i] = attr[i].split(":");
            //兼容旧的3位属性值,自动转码，去掉第一位，并转为16进制id
            if (attr[i].length > 2) {
                attr[i].reverse();
                attr[i].pop();
                attr[i].reverse();
            }
            attr[i][0] = parseInt(attr[i][0], 16)
        }
        
        //转换结果51,13,52,3,53,2,55,1,56,1,57,1,1301,1,1302,1,1303,1,1395,2,48,14,49,6^
        return attr;
    };
    //回调函数：请求类目配置数据的回调
    function classAttrCallBack(obj){
        //上报
		retCodeForAttr && (retCodeForAttr.report((obj.errcode=="0"?true:false),obj.errcode));
		if (!window._classAttrOption) {
            return;
        }
        var option = window._classAttrOption;
        //如果是请求全新的数据的时候就先创建对象
        if (!option.attr) {
            option.attr = {
                classId: obj.classId,
                className: obj.className,
                attrList: []
            };
            if (obj.attrList.length < 1 && option.hiddenId != "") {
                $$(option.hiddenId).hide();
            }
        }
        //合并属性列表
        for (var i = 0; i < obj.attrList.length; i++) {
            if (option.showHideAttr && (obj.attrList[i].property & 0x200000)) {
                obj.attrList[i].property = obj.attrList[i].property - 0x200000
            }
	    //增加一条验证，不显示平台代充信息 sivachen 2011/12/15
	    if(obj.attrList[i]['opList']&&obj.attrList[i]['opList'][2]&&obj.attrList[i]['opList'][2][1]=='平台代充'){
		obj.attrList[i]['opList'].splice(2,1);
	     }
            option.attr.attrList.push(obj.attrList[i]);
        }
        //如果有默认值，则把默认值覆盖系统默认值
        for (var i = 0; i < option._var1.length; i++) {
            for (var j = 0; j < option.attr.attrList.length; j++) {
                if (option.attr.attrList[j].id == option._var1[i][0]) {
                    option.attr.attrList[j].defaultVar = getListFromIdByte(option._var1[i][1], option._var1[i][0], option).join(",");
                }
            }
        }
        for (var i = 0; i < option._var2.length; i++) {
            for (var j = 0; j < option.attr.attrList.length; j++) {
                if (option.attr.attrList[j].id == option._var2[i][0]) {
                    option.attr.attrList[j].defaultTxt = option._var2[i][1];
                }
            }
        }
		//
        option._var1 = [];
        option._var2 = [];
        //标记全局变量：当前数据设为完整，可以继续渲染
        option.noFullData = false;
        //回调重新渲染
        window._classAttrOption.showAttrList();
    }
	//判断当前类目是否在SPU白名单中
	/*function checkClassID(){
		for(var i=0; i<option._spuList.length; i++){
			if(option.classId==option._spuList[i]){
				return true;
			}
		}
		return false;
	}*/
	
	/**
	 * 处理SPU信息的函数
	 * 取回的SPU信息应该全部是非关键属性，而不应该有关键属性在里面。
	 */
	function findSpuByKeyAttrSuccess(config){
		retCodeForSpu && (retCodeForSpu.report((config.errorCode=="0"?true:false),config.errorCode));
		window.spuLoading.html("").hide();
		//error 0:得到正确值; 1:无SPU信息; >1:错误中断。
		var e = config.errorCode; 
		var option=window._classAttrOption;
		option.spuIdHandel.val( e==0 ? config.productId||"0" : "0");//填入spuid。productId
		var hasStock=false;
		if(config.productId==0){
			hasStock=window.stockOption && window.stockOption.stockSwitch;
		}else{
			hasStock=!!(config &&config.stockAttr.length)			
		}
		//有SPU，有Product，则将图片信息传出
		option.onSPUChange(option,e==0 && config.productId && config.picList);
		if(window.stockOption){
			window.stockOption.stockSwitch = hasStock;
			window.stockOption.setStockSwitch();
		}
		
		//重置库存值
		if(option.hasInited && window.stockOption){
			//清空库存
			window.stockOption.resetStock();
			//将库存开关打开
			window.stockOption.stockSwitch = hasStock;
			window.stockOption.setStockSwitch();
		}
		if(e==0){
			/*//重置库存值
			if(option.hasInited && window.g_Stocks){
				//清空库存
				g_Stocks.resetStock();
				//将库存开关打开
				window.stockOption.stockSwitch = true;
				g_Stocks.setStockSwitch();
			}*/
			
			//当前商品是否SPU化
			//window.hasSpuData = true;
			var spuList = listing(); 
			//定义for要用到的临时变量(i,j)、关键属性列表
			var i ,j ,item, _kItemList=[];
			//var stockAreas = [];//找到那些库存属性的区域列表。预定义一个空的jq对象
			for(i in spuList){
				var container = $$("#f_"+i);//区块容器(DIV)
				var st = container.attr("stype");
				//如果当前属性是关键属性，或者是关键属性的父属性，过滤掉。
				item = container.find("[property]");
				if(item.length>0 && (parseInt(item.attr("property")) & 0X80000 )){
					_kItemList.push(item);
					continue;
				}
				switch(st){//根据dom参数判断数据类型（没有property属性）
					case "select" : 
						//因为是单选。正确的SPU信息只会让这个for执行一次或两次。执行两次是因为包含“其他**”值
						var x, opts = spuList[i].options;
						//如果“其他**” 被选中，并且缺少对应值，那么认为是一项无效数据，丢弃。
						for(x in opts){
							var s = container.find("#s_"+i);//找到select
							//1）如果拿到的值非法(不在select的option列表里面)，那么就丢掉(非法数据无法通过value来赋值)
							//var isErrorData = s.val(x).val()=="";
							//2）如果含有“其他**”，但是并没对应的值，将该项数据丢弃，不影响操作。
							// if(opts[x].indexOf("其他")>=0 && s.find("option[value=" + x + "]").length>0){
							//	todo...
							// }
							//s.attr("disabled", isErrorData ? false : true );
							var option_dom = s.find("option[value="+ x +"]");
							//if(opts[x].indexOf("其他")>=0 || option_dom.length==0 || option_dom.html().indexOf("其他")>=0){
							if(option_dom.length==0 || option_dom.html().indexOf("其他")>=0){
								s.attr("disabled", false);
								break; // break the for(x in opts) loop.
							}else{
								s.attr("disabled", s.val(x).val()!=="");
							}
						}
						break;// break for switch(st).
					case "checkbox":
						////如果多选项已经有值的话，就不再给默认值了【meeliao时期规则，暂时废除】
//						//if(container.find(":checkbox:checked").length>0){
//						//	continue;//return;
//						//}else{
//						//如果没有选中的复选框，那么将SPU中的选项值变成可选，其余disable。
//							//container.find(":checkbox").attr("disabled", true);
//							var jqStr = [], opts = spuList[i].options;
//							var _other = "", _hasOther = false; //为了“其他”项准备数据
//							for(var x in opts){
//								//判断单选项下拉框里面的“其他”
//								if(x==0){
//									_other = opts[x];
//									continue;
//								}else{
//									jqStr.push("#r_"+i+"_"+x);
//									if(opts[x]=="其他"){
//										_hasOther = true;
//										//continue;
//									}//else{
//									if($$("#r_"+i+"_"+x).attr("stock")>0){
//										option.onStockChange($$("#r_"+i+"_"+x));
//									}
//									//}
//								}
//							} 
//							if(_hasOther && _other){
//								$$("#c_" + i).val(_other).attr("disabled", true);
//								$$("#i_" + i).show();//显示“其他”的内容 
//							}
//							container.find(jqStr.join(",")).attr("checked", true);
//						//}
//						break;
						//【★: 20100412讨论组意见：回到原始需求，SPU多选项不做处理】
						//【★: tintinliu给出的意见是强化spu特性，不允许用户增删多选属性（包括库存属性）】
						//if(container.find(":checkbox:checked").length>0){
						//	continue;//用户已经有选择，不拿SPU数据做任何操作
						//}else{
							var jqStr = [], opts = spuList[i].options, all_ckbs = container.find(":checkbox");
							//将之前选择的库存属性值清零
							//all_ckbs.attr("checked", false);
							//window.g_Stocks && g_Stocks.delAttr(g_Stocks, all_ckbs.eq(0).attr("attrname"));
							
							for(var x in opts){
								if("其他"!=opts[x]){
									jqStr.push("#r_"+i+"_"+x);//维护一个jq格式的元素ID串
									if($$("#r_"+i+"_"+x).attr("stock")>0){
										//option.onStockChange($$("#r_"+i+"_"+x));//库存属性打上标



										//stockAreas.push("#"+container.attr("id"));
										hasStock = true;
									}
								}
							}

							var spuItems = all_ckbs.filter(jqStr.join(","));//.attr("checked", true);//将SPU数据选上
							//不是spu属性的灰掉
							all_ckbs.not(spuItems).attr("disabled", true);
							//灰掉的非spu属性取消选择 但保留库存
							all_ckbs.filter(":disabled:checked").each(function(){
								$$(this).attr("checked",false);
								window.stockOption && $$(this).attr("stock")>0 && option.onStockChange($$(this));
							});//.attr("checked",false);
							//保证编辑状态第一次打开时，有库存情况下库存不被修改
							if(all_ckbs.filter(":checked").length<1 || option.hasInited){
								spuItems.each(function(){
									$$(this).attr("checked",true);
									window.stockOption && $$(this).attr("stock")>0 && option.onStockChange($$(this));
								});//.attr("checked", true);
							}
							
						//}
						break;
					case "txt":
						//如果是文本属性则直接赋值, 这个for也只会执行1次，道理同上面的select。
						var _opts = spuList[i].options;
						for(var x in _opts){
							container.find("#x_"+i).val(_opts[x]).attr("disabled", true);
						}
						break;
				}
			}
			//option.hasInited=true;
			//$$(stockAreas.join(",")).find(":checkbox:not(:checked)").attr("disabled", true);
			//找到关键属性的父属性，也让他可选
			for(var i=0; i<_kItemList.length;i++){
				$$("select[attrid="+_kItemList[i].attr("parentid")+"]").attr("disabled", false);
			}
			//对于spu完全没有配置的c2c属性，直接锁掉，让用户无法提交而投诉，运营来修改。
			$$.each(window._classAttrOption.attr.attrList, function(x){
				var id = this.id;
				//如果在spu里面找到了对应的配置信息，那么跳过。
				if(spuList[id]){
					return  true;
				}
				var p = parseInt(this.property, 10);
				//C2C隐藏 || B2C隐藏 || 前台隐藏 || 关键属性 || 关键属性的父属性  --除去这几类。
				if((p&0X200000) || (p&0X400000) || (p&p&0x10) || (p&0X80000)){
					return true;
				}else{
					if(p&0x02){//单选
						$$("#s_"+id).attr("disabled", true);
					}else if(p&0x04){//多选
						$$("#f_"+id+" :checkbox").attr("disabled", true);
					}
				}
			});
		}else{
			$$("#spuAlertInfo").hide();
			//window.hasSpuData = false;
			
		}
		option.hasInited=true;
		//option.onSPUChange(option,hasStock);
		//如果有库存选项，那么库存开关不允许用户关闭 
		//$$("#stockSwitch").attr("disabled", hasStock);
		//如果当前商品是SPU化的商品，那么不允许编辑。
		//$id("addStockAttrs") && ($id("addStockAttrs").parentNode.parentNode.style.display = window.hasSpuData ? "none" : "");
		//整理SPU信息，得到一个合理的数据结构。方便后续调用：
		// e.g: res = { "12230":{ "name":"颜色", 	"options":{"4":"红色","7":"绿色"} },  "2":{name:"网络类型", options:{"5":"3G"} },
		//					"2316":{  "name":"尺寸色",  "options":{"1":"超大","3":"中","4":"小"} }  } 
		function listing(){
			var i,
				al = config.attrList,
				len = al.length;
			var res = {};
			for(i=0;i<len; i++){
				var item = al[i];
				if(item.attrID=="2089"){continue;}//对于商品成色做个特殊处理
				var _r = res[item.attrID];
				if(!_r){
					_r = {};
					_r.name = item.attrName;
					_r.options = {};
					_r.options[item.attrOptionID] = item.attrOptionValue;
					res[item.attrID] = _r;
				}else{
					//注意ID是1的情况
					if(!_r.options[item.attrOptionID] || _r.options[item.attrOptionID]=="1"){
						_r.options[item.attrOptionID] = item.attrOptionValue;
					}
				}
			}
			return res;
		}
	}
}
// JavaScript Document
(function(){
//全局变量
//获取属性
var _getProperty=function(p){
	if(isNaN(p))return null;
	p = parseInt(p,10);
	return {
		isSingleVal: !!(p&0x2),//单选属性
		isMultiVal:!!(p&0x4),//多选属性
		isTxtVal:!!(p&0x8),//文本属性
		//is??:!!(p&0x10),//关键属性
		isStock:!!(p&0x10000),//库存属性
		isRequired:!!(p&0x20000),//必填属性
		isKey:!!(p&0x80000),//关键属性
		isHide:!!(p&0x200000),//隐藏属性
		isB2cHide:!!(p&0x400000)//b2c隐藏属性
	}
}

//根据ID列表生成 选择项的16进制字符串
var _getHexStrByID=function(ids){
	//空id
	if(!ids){return "";}
	//id数组
	if(ids.join){
		//id数组转换成256位=64*16进制数
		var baseAr = new Array(257).join("0").split("");
		for(var i=0,l=ids.length;i<l;i++){
			baseAr[256-ids[i]]=1;
		}
		var result="";
		//分64次获取
		var baseStr = baseAr.join("");
		for(var i=0;i<64;i++){
			result+= parseInt(baseStr.substr(i*4,4),2).toString(16);
		}
		return result.replace(/^0+/,"");
	}else{
		//单个ID直接转成16进制字符串
		return parseInt(ids,10).toString(16);
	}
}

//根据选择项的16进制字符串生成ID列表
var _getIDByHexStr=function(hexStr){
	var result=[];
	if(!hexStr)return result;
	var binAr=[];
	//补齐64位
	var hexAr=(new Array(65-hexStr.length).join("0")+hexStr).split("");
	//转成256位2进制
	for(var i=0,l=hexAr.length;i<l;i++){
		binAr[binAr.length]=["0000", "0001", "0010", "0011", "0100", "0101", "0110", "0111", "1000", "1001", "1010", "1011", "1100", "1101", "1110", "1111"][parseInt(hexAr[i],16)];
	}
	var binStr = binAr.join("");
	//根据位数得到ID
	for(var i=0,l=binStr.length;i<l;i++){
		if(binStr.substr(i,1)=="1"){
			result.push(256-i);
		}
	}
	return result.reverse();
	
}

//返回码上报
//类目属性
var _attrRetCode={
	d:null,
	init:function(){
		try{
			this.d=$returnCode({url:"http://my.paipai.com/cgi-bin/commoditypublish/genjsdata",frequence:1});
		}catch(e){}
	},
	report:function(b,d){
		try{
			this.d && (this.d.report(b,d));
		}catch(e){}
	}
}

var _spuRetCode={
	d:null,
	init:function(){
		try{
			this.d=$returnCode({url:"http://api.paipai.com/spu/findSpuByKeyAttr2.xhtml",frequence:1});
		}catch(e){}
	},
	report:function(b,d){
		try{
			this.d && (this.d.report(b,d));
		}catch(e){}
	}
}
//类目属性生成器
$classAttrNew =function(obj){
	var option = {
        area: "", //显示区域的id，jquery语法
        var1: "", //返回编码1的inputid，jquery语法
        var2: "", //返回自定义值编码的input id，jquery语法
        classId: "", //类目的id
		hasStock:false,//是否含有库存项
		isAdd:true, //编辑还是新增的状态值， 默认iUpdateType
		itemHtml:"",//属性项模板
		//初始化结束
        onInited: function(obj){
            return true;
        },
		//属性变化
        onChange: function(dom, obj){
            return true;
        },
		//SPU变化
		onSPUChange:function(obj){
			return true;
		},
		//属性加载完毕(只执行一次)
		onLoaded:function(obj){
			return true;
		},
		//库存名 库存选项 增加|删除
		changeStock:function(name,text,action){
			return true;
		},
		//重置库存
		resetStock:function(){
			return true;
		},
		//深层展示方法
		showFunc:function(){
			return true;
		}
    };
	//赋默认值
	for (var i in obj) {
        option[i] = obj[i];
    }
	
	//是否已经加载SPU信息
	var loadedSpuInfo=false;
	
	//获取数据的方法
	var DAO={
		//初始化方法
		init:function(classID){
			this.cache.classID=classID;
		},
		//缓存
		cache:{
			//拉取过的地址防止死循环
			activedUrl:[],
			classID:"",
			attrUrl:"http://my.paipai.com/cgi-bin/commoditypublish/genjsdata?classid={#isfull#}&mc={#classid#}&attrid={#attrval#}&tagid=",
			spuUrl:"http://api.paipai.com/spu/findSpuByKeyAttr2.xhtml?needParseAttr=1&classId={#classid#}&keyAttrs={#keyattrs#}"
		},
		//获取数据
		getData:function(isfull,attrVal){
			var obj={};
			obj.isfull=isfull?"1":"0";
			obj.classid=this.cache.classID;
			//属性值中可能有^分隔符
			obj.attrval= (attrVal && attrVal.replace(/\^+/g,""));
			var url = $formatStr(this.cache.attrUrl,obj);
			//如果已经请求过，说明进入了死循环
			if((","+this.cache.activedUrl.join(",")+",").indexOf(","+url+",") >-1){
				alert("类目属性请求出错，请刷新页面重试，如果多次出现这种情况请联系客服处理。");
			}else{
				this.cache.activedUrl.push(url);
				_attrRetCode.init();
				$loadScript(url+new Date().getTime());
			}
		},
		//获取SPU数据
		getSPUData:function(keyattrs){
			var obj={};
			obj.classid = this.cache.classID;
			obj.keyattrs = keyattrs;
			var url = $formatStr(this.cache.spuUrl,obj);
			_spuRetCode.init();
			$loadScript(url);
		}
	}
	
	//属性相关
	var ATTR={
		//缓存
		cache:{
			//属性值
			val:{},
			//属性项
			items:{},
			//属性项数组
			itemsAr:[],
			//正在展示的属性项
			itemsInShow:[],
			//关键属性项及其父属性用于判断是否拉取SPU
			itemsInKey:[],
			//关键属性缓存str串，allVal是否都有值
			keyStatus:{str:"",allVal:false,keyAttrs:""},
			//储存值的节点
			valDom:null,
			txtDom:null
		},
		init:function(valDom,txtDom){
			this.cache.valDom=valDom;
			this.cache.txtDom=txtDom;
			this.initVal();
		},
		//值初始化
		initVal:function(){
			//初始化值
			this.initValByType(this.cache.valDom.value,"val");
			//初始化文本
			this.initValByType(this.cache.txtDom.value,"txt");
		},
		initValByType:function(str,type){
			str && (str = str.replace(/\^+/g,""));
			if(str){
				var strAr = str.split("|"),item=null;
				for(var i=0,l=strAr.length;i<l;i++){
					item = strAr[i].split(":");
					//老3位处理，去掉第一位
					if(item.length==3){
						item.shift();
					}
					//只对正确的2位处理，其他抛弃
					if(item.length==2 && item[0]){
						//属性ID对应属性值
						this.cache.val[ parseInt(item[0],16)+""]||(this.cache.val[ parseInt(item[0],16)+""]={});
						this.cache.val[ parseInt(item[0],16)+""][type]=item[1];
					}
				}
			}
		},
		//获取属性值
		getVal:function(){
			var valAr=[];
			var txtAr=[];
			for(var i=0,l=this.cache.itemsInShow.length;i<l;i++){
				var item =this.cache.itemsInShow[i];
				//有值
				if(item.defaultVar){
					//id转换成16进制 多选值转换为16进制串 单选和文本值转换成16进制值
					valAr[valAr.length] = (parseInt(item.id,10).toString(16)+":"+(item.property.isMultiVal?_getHexStrByID(item.defaultVar.split(",")):parseInt(item.defaultVar,10).toString(16)));
				}
				
				if(item.defaultTxt){
					txtAr[txtAr.length] = (parseInt(item.id,10).toString(16)+":"+item.defaultTxt);
				}
			}
			this.cache.valDom.value = valAr.join("|");
			this.cache.txtDom.value = txtAr.join("|");
		},
		//是否有库存属性
		hasStock:function(){
			for(var i=0,l=this.cache.itemsInShow.length;i<l;i++){
				var item =this.cache.itemsInShow[i];
				if(item.property.isStock){
					return true;
				}
			}
			return false;
		},
		//添加数据
		setData:function(attrList){
			if(attrList && attrList.length){
				//遍历
				for(var i=0,l=attrList.length;i<l;i++){
					//放入hash前的处理
					//将属性改为对象
					attrList[i].property = _getProperty(attrList[i].property);
					//默认值
					var valInfo = this.cache.val[attrList[i].id];
					//存在值
					if(valInfo){
						//值
						if(valInfo.val){
							//多选属性
							if(attrList[i].property.isMultiVal){
								//特殊处理
								attrList[i].defaultVar=_getIDByHexStr(valInfo.val).join(",");
							}else{
								//其他的转成10进制
								attrList[i].defaultVar=parseInt(valInfo.val,16)+"";
							}
						}
						//文本
						if(valInfo.txt){
							attrList[i].defaultTxt=valInfo.txt;
						}
						//用完后就删除掉
						//继续使用可能会影响子属性
						this.cache.val[attrList[i].id]=null;
					}
					
					//文本属性的默认值为1
					if(attrList[i].property.isTxtVal){
						attrList[i].defaultVar="1";
					}
					
					//隐藏属性的值
					if(attrList[i].property.isHide){
						if(attrList[i].property.isTxtVal){
							//默认文本为"-"
							attrList[i].defaultTxt="-";
						}else{
							//默认选项为1
							attrList[i].defaultVar="1";	
						}
					}
					//唯一标识
					attrList[i].keyid = attrList[i].id+"_"+attrList[i].parentAttrId;
					//放入数组和hash中
					if(!this.cache.items[attrList[i].keyid]){
						this.cache.itemsAr.push(attrList[i]);
					}
					this.cache.items[attrList[i].keyid]=attrList[i];
				}
			}	
		},
		//从缓存中生成要展示的属性数组
		show:function(){
			var size={"0":[1]};
			//构造好的父放入展示项中
			var retAr=this.cache.itemsInShow =[{id:"0",parentId:"0",parentAttrId:"0",defaultVar:"0",keyid:"0",opList:[[0,"其他",1]]}];
			//清空关键属性列表
			this.cache.itemsInKey.length=0;
			//关键属性唯一标
			var uniqKey={};
			
			var itemsAr = this.cache.itemsAr;
			for(var i=0;i<retAr.length;i++){
				//当前父
				var ar = retAr[i];
				//当前长度
				var currentLength = retAr.length;
				//判断是否有子
				var haveChild = false;
				//通过默认值判断
				if(ar.defaultVar){
					for(var m=0,n=ar.opList.length;m<n;m++){
						//默认值是否有子
						if(ar.defaultVar==ar.opList[m][0]){
							//老CGI第三项||新CGI第四项
							haveChild = ((ar.opList[m][3]||ar.opList[m][2])==1)?true:false;
							break;
						}
					}
				}
				
				if(haveChild){
					//遍历数据找子
					for(var j=0,k=itemsAr.length;j<k;j++){
						//有父子关系
						if(itemsAr[j].parentId==ar.id && itemsAr[j].parentAttrId==ar.defaultVar){
							//复制父属性keyid
							itemsAr[j].parentKeyid = ar.keyid;
							//计算深度
							size[itemsAr[j].id]=size[ar.id].concat([]);
							size[itemsAr[j].id].push(j);
							//打入展示列表
							retAr[retAr.length]=itemsAr[j];
							//如果是关键属性将它以及父属性打入itemsInKey
							if(itemsAr[j].property.isKey){
								var keyItem = itemsAr[j];
								//打入关键属性列表
								while(keyItem && keyItem.id !="0"){
									//存在重复项
									if(uniqKey[keyItem.keyid]){
										break;
									}
									//防止重复
									uniqKey[keyItem.keyid]=1;
									//打入
									this.cache.itemsInKey.push(keyItem);
									//其父属性
									keyItem = this.cache.items[keyItem.parentKeyid];
								}
							}
						}
					}
					
					//如果没找到子 且默认值是单个的值
					if(retAr.length==currentLength && ar.defaultVar.indexOf(",")<0){
						//数据不完整异步去拉取该属性
						var attrVal = parseInt(ar.id,10).toString(16)+":"+parseInt(ar.defaultVar,10).toString(16);
						//拉取数据
						DAO.getData(false,attrVal);
						return false;
					}
				}
			}
			
			//完成后将构造的父删除
			retAr.shift();
			//展示属性排序
			retAr.sort(function(a,b){
				var asize = size[a.id];
				var bsize = size[b.id];
				for(var i=0,l=Math.max(asize.length,bsize.length);i<l;i++){
					if((~~asize[i]) != (~~bsize[i])){
						return (~~asize[i])-(~~bsize[i]);
					}
				}
				return 0;
			});
			
			//拉取新数据后就去检验SPU是否齐全
			this.checkSPU();
			//重新渲染
			UI.show(retAr);
		},
		//生成关键属性串
		genKeyStr:function(){
			var strAr =[];
			var keyAr=[];
			var allVal=true;
			var keyItems=this.cache.itemsInKey,item=null;
			for(var i=0,l=keyItems.length;i<l;i++){
				var item = keyItems[i];
				//如果是关键属性
				keyAr.push(item.id+":"+item.defaultVar+":"+(item.property.isTxtVal?"1":"0"));
				strAr.push(item.id+":"+item.defaultVar);
				//没值
				if(!item.defaultVar){
					allVal=false;
				}
			}
			var str = strAr.join("|");
			var key = keyAr.join("|");
			//关键属性串为空值，则关键属性不全
			return {"str":str,"allVal":(str?allVal:false),"keyAttrs":key};
		},
		//SPU拉取或者清理
		checkSPU:function(){
			var crtStatus = this.genKeyStr();
			var oldStatus = this.cache.keyStatus;
			//不同与缓存中的串
			if(crtStatus.str!=oldStatus.str){
				//发生改变后，首先清除不可用状态
				this.removeDisabled();
				//值改变，并且全部命中
				if(crtStatus.allVal){
					//拉SPU信息
					DAO.getSPUData(crtStatus.keyAttrs);
				}else if(!crtStatus.allVal && oldStatus.allVal){
					//回调
					option.onSPUChange(null);
				}
				//改变状态
				this.cache.keyStatus = crtStatus;
			}
		},
		//清楚不可用状态
		removeDisabled:function(){
			//遍历移除正在显示元素的disabled状态
			for(var i=0,l=this.cache.itemsInShow.length;i<l;i++){
				this.cache.itemsInShow[i].disabled=false;
			}
		},
		//激活所有属性
		activeAll:function(){
			for(var i=0,l=this.cache.itemsInShow.length;i<l;i++){
				this.cache.itemsInShow[i].actived=true;
			}
		}
	}
	
	//
	var UI={
		//缓存
		cache:{
			//显示区域DOM节点
			area:null,
			//模板
			template:{
				//默认模板
				itemHtml:'<div class="attr_tit"><em class="asterisk">{#must#}</em>{#name#}：</div><div class="attr_cnt"> \
					  		<span class="cts1"><input type="hidden" id ="v_{#attrId#}" value="{#defaultVar#}" atag="{#showType#}" stock="{#haveStock#}" text="{#defalutSelectTxt#}" {#disabled#} options="{#options#}" onchange="classAttrNew_onchange(this)" /></span> \
					    	<span class="cts2" style="display:{#showElse#}"><input type="text" id="x_{#attrId#}" value="{#defaultTxt#}" size="20" onchange="classAttrNew_onchange(this)"/></span> \
							<a class="cts3 msg0-icon-help" href="javascript:;" id="a_{#attrId#}" style="display:{#showAbout#}" onmouseover="classAttrNew_showAbout(this)">?</a> \
					  	  </div> \
					 	  <div class="attr_tips" style="display:none"> \
					  		<span class="cts4" id="e_{#attrId#}" style="display:none"></span> \
							<p id="t_{#attrId#}" style="display:none">{#desc#}</p> \
					  	  </div>'
			}
		},
		//初始化方法
		init:function(area,html){
			this.cache.area=$id(area);
			if(html){
				this.cache.template.itemHtml = html;
			}
		},
		//显示属性项
		show:function(attr){
			//辅助删除没有的元素
			var hash={};
			//遍历
			for(var i=0,l=attr.length;i<l;i++){
				var lid = "l_"+attr[i].keyid;
				//如果已经存在，进行更新
				if($id(lid)){
					var vdom = $id("v_"+attr[i].keyid);
					if(vdom){
						//会变的也就只有value
						vdom.value =attr[i].defaultVar;
						//可选范围
						if(attr[i].defaultRange){
							vdom.setAttribute("range",attr[i].defaultRange);
						}
						//这里用readonly代替disabled 因为disabled了不能触发onchange事件
						vdom.readonly = attr[i].disabled?true:false;
					}
				}else{
					var li = document.createElement("li");
					li.id=lid;
					//判断是否隐藏
					li.style.display=attr[i].property.isHide?"none":"";
					var obj={};
					obj.attrId = attr[i].keyid;
					obj.must= attr[i].property.isRequired?"*":"";
					obj.name= attr[i].name;
					obj.defaultVar = attr[i].defaultVar;
					obj.defaultTxt = attr[i].defaultTxt;
					obj.desc = attr[i].desc;
					obj.haveStock = attr[i].property.isStock?"1":"0";
					obj.showAbout = attr[i].desc?"":"none";
					//选中项的文本值的串
					obj.defalutSelectTxt = "";
					obj.showType = attr[i].property.isSingleVal?"select":attr[i].property.isMultiVal?"checkbox":"txt";
					//文本属性或者defaultTxt有值的，显示用户自定义文本框
					obj.showElse = (attr[i].property.isTxtVal || attr[i].defaultTxt)?"":"none";
					obj.disabled = attr[i].disabled?"readonly='readonly'":"";
					//选项
					obj.options = attr[i].opList.join("|");

					li.innerHTML = $xss($formatStr(this.cache.template.itemHtml,obj),"none");
					//将li插入
					var beforeNode = null;
					if(attr[i-1]){
						beforeNode = $id("l_"+attr[i-1].keyid).nextSibling;
					}
					this.cache.area.insertBefore(li,beforeNode);
				}
				//标记
				hash[lid]=1;
			}
			
			//去掉没有的元素
			var lis = this.cache.area.childNodes,delNodes=[];
			for(var i=0,l=lis.length;i<l;i++){
				//不是本次生成的
				if(!hash[lis[i].id]){
					//放入删除列表
					delNodes.push(lis[i]);
				}
			}
			//集中删除
			for(var i=0,l=delNodes.length;i<l;i++){
				this.cache.area.removeChild(delNodes[i]);
			}
			//初始化选择器等
			this.deepShow();
			//第一次初始化完毕
			//加载完毕
			if(option.onLoaded){
				//是否含有库存
				option.hasStock = ATTR.hasStock();
				option.onLoaded(option);
				option.onLoaded=false;
			}
		},
		//进一步展示
		deepShow:function(){
			//自定义的展示方法
			option.showFunc(this.cache.area);
		},
		//给属性展示错误
		showError:function(attr){
			var errAr=[];
			for(var i=0,l=attr.length;i<l;i++){
				var oldLen =errAr.length;
				//显示错误的Dom
				var errDom = $id("e_"+attr[i].keyid);
				//其他框
				var cusDom = $id("x_"+attr[i].keyid);
				var selectedText = ($id("v_"+attr[i].keyid) && $id("v_"+attr[i].keyid).getAttribute("text")+"") || "";
				//只检验激活属性
				if(attr[i].actived){
					//必选属性没有值
					if(attr[i].property.isRequired && !attr[i].defaultVar){
						errAr[errAr.length]="请选择“"+attr[i].name+"”";
					}
					
					//其他输入框的显示和隐藏
					if(!attr[i].property.isTxtVal){
						if(selectedText.indexOf("其他")>-1){
							cusDom && (cusDom.parentNode.style.display="");
						}else{
							cusDom && (cusDom.parentNode.style.display="none");
						}
					}
					
					//选择了其他但是没有填值
					if(selectedText.indexOf("其他")>-1 && !attr[i].defaultTxt){
						if(attr[i].property.isTxtVal){
							//文本值且要求必填时
							if(attr[i].property.isRequired){
								errAr[errAr.length]="请填写“"+attr[i].name+"”";
							}
						}else{
							errAr[errAr.length]="请填写“"+attr[i].name+"”的自定义属性值";
						}
					}
					
					//判断是否有错误信息
					if(errAr.length >oldLen){
						//显示
						errDom && (errDom.innerHTML =$xss(errAr[errAr.length-1],"none"),errDom.style.display="",errDom.parentNode.style.display="");
					}else{
						//隐藏
						errDom && (errDom.innerHTML =$xss("","none"),errDom.style.display="none",errDom.parentNode.style.display="none");
					}
					
				}else{
					//隐藏
					errDom && (errDom.innerHTML =$xss("","none"),errDom.style.display="none",errDom.parentNode.style.display="none");
				}
			}
			
			//返回错误信息
			if(errAr.length){
				return errAr;
			}else{
				return true;
			}
		}
	}
	
	//拉去类目属性的回调
	var classAttrCallBack = function(obj){
        //返回码上报
		_attrRetCode && (_attrRetCode.report((obj.errcode=="0"?true:false),obj.errcode));
		//回调成功且返回了属性
		if(obj.errcode=="0" && obj.attrList && obj.attrList.length){
			//填充数据
			ATTR.setData(obj.attrList);
			//获取正在展示的选项
			ATTR.show();
			
		}else{
			//拉去属性不成功的处理
			alert("数据有误，请刷新页面重试");
		}
    };
	
	//SPU错误回调
	var findSpuByKeyAttrFail = function(){
		_spuRetCode && (_spuRetCode.report(false,-1));
		option.onSPUChange(null);
	}
	
	//SPU回调
	var findSpuByKeyAttrSuccess=function(obj){
		//返回码上报
		_spuRetCode && (_spuRetCode.report(true,obj.errcode));
		//设置回调
		option.onSPUChange(obj);
		//获得正确的SPU数据
		if(obj.errorCode=="0" && obj.attrList && obj.attrList.length >0){
			//解析数据
			var attr = obj.attrList;
			//{"attrid":[optionid,optionid]}
			var spuData={};
			for(var i=0,l=attr.length;i<l;i++){
				//过滤掉商品成色
				if(attr[i].attrID=="2089")continue;
				
				if(!spuData[attr[i].attrID]){
					spuData[attr[i].attrID]={val:[],txt:[]};
				}
				//填充值
				spuData[attr[i].attrID].val.push(attr[i].attrOptionID);
				//填充文本
				spuData[attr[i].attrID].txt.push(attr[i].attrOptionValue);
			}
			
			//通过得到的值填充显示属性
			var showAttr = ATTR.cache.itemsInShow;
			var keyAttr = ATTR.cache.itemsInKey;
			for(var i=0,l=showAttr.length;i<l;i++){
				//如果SPU数据中有这个属性
				if(spuData[showAttr[i].id]){
					//SPU数据直接不可改
					//编辑时，首次加载SPU，多选内容保留
					if( !loadedSpuInfo && !option.isAdd && showAttr[i].property.isMultiVal){
						//值的范围
						showAttr[i].defaultRange = spuData[showAttr[i].id].val.join(",");
						//如果有选中值
						
						if(showAttr[i].defaultVar){
							//找到在值范围中的选中值
							var resultAr=[];
							var selectValAr =showAttr[i].defaultVar.split(",");
							for(var j=0,k=selectValAr.length;j<k;j++){
								if(selectValAr[j] && ((","+showAttr[i].defaultRange+",").indexOf(","+selectValAr[j]+",") >-1)){
									resultAr.push(selectValAr[j]);
								}
							}
							//如果有值
							if(resultAr.length){
								showAttr[i].defaultVar = resultAr.join(",");
							}else{
								//无选中值就全选
								showAttr[i].defaultVar = showAttr[i].defaultRange;
							}
							
						}else{
							showAttr[i].defaultVar = showAttr[i].defaultRange;
						}
					}else{
						showAttr[i].defaultRange = spuData[showAttr[i].id].val.join(",");
						showAttr[i].defaultVar = spuData[showAttr[i].id].val.join(",");
					}
					showAttr[i].disabled=true;
				}else{
					//其他数据如果不是隐藏属性，直接清空灰掉
					//将数据锁住，等用户投诉
					if(!showAttr[i].property.isB2cHide && !showAttr[i].property.isHide){
						showAttr[i].disabled=true;
					}
				}
			}
			
			//关键属性恢复可选
			for(var i=0,l=keyAttr.length;i<l;i++){
				keyAttr[i].disabled = false;
			}
			
			//spu完毕后所有属性都被激活
			ATTR.activeAll();
			//重新渲染
			UI.show(ATTR.cache.itemsInShow);
			//展示错误
			UI.showError(ATTR.cache.itemsInShow);
			//库存相关处理
			//已经加载过SPU，更换SPU时才对库存进行操作
			//预防用户首次加载SPU后，将用户的库存清空
			if(loadedSpuInfo || option.isAdd){
				//1.清空库存-用户自定义方法
				option.resetStock();				
				//2.用当前的库存属性初始化库存
				for(var i=0,l=showAttr.length;i<l;i++){
					//是库存属性且是多选框
					if(showAttr[i].property.isStock && showAttr[i].property.isMultiVal){
						var vDom = $id("v_"+showAttr[i].keyid);
						//重新设置库存
						
						//如果有库存值
						if((vDom.getAttribute("text")+"")){
							var items = (vDom.getAttribute("text")+"").split("||");
							option.changeStock(showAttr[i].name,items,0);
						}
					}
				}
			}
			loadedSpuInfo=true;
		}
	}
	
	//用户操作引起的变化
	var classAttrNew_onchange=function(dom){
		var matchs = dom.id.match(/^(v|x)_(\d+_\d+)$/);
		//匹配成功且缓存中有这个属性
		if(matchs && ATTR.cache.items[matchs[2]]){
			var item = ATTR.cache.items[matchs[2]];
			//选项被操作过
			item.actived=true;
			
			if(matchs[1]=="v"){
				//选项值改变
				item.defaultVar=dom.value;
				//自定义文本框是否显示
				if((dom.getAttribute("text")+"").indexOf("其他")>-1){
					//显示其他选项
					$id("x_"+item.keyid) && ($id("x_"+item.keyid).parentNode.style.display="");
				}else{
					//隐藏
					var cDom = $id("x_"+item.keyid);
					//隐藏并清理值
					if(cDom){
						//输入框清空
						cDom.value="";
						//缓存值清空
						item.defaultTxt="";
						cDom.parentNode.style.display="none";
					}
				}
				//库存属性改变回调
				if(item.property.isStock && item.property.isMultiVal){
					//改变库存
					var targetDom = $id(dom.getAttribute("targetid")+"");
					//其他项不影响库存
					if(targetDom && (targetDom.getAttribute("text")+"").indexOf("其他")<0){
						//全选项的text="",就去找整个选择项的text
						option.changeStock(item.name,(targetDom.getAttribute("text")+"") || (dom.getAttribute("text") && ((dom.getAttribute("text")+"").split("||"))),targetDom.checked?1:-1);
					}else{
						//option.changeStock(item.name,dom.getAttribute("text") && (dom.getAttribute("text").split("||")),0);
					}
				}
				//属性改变回调
				option.onChange(dom,item);
				//重新渲染
				ATTR.show();
				
			}else{
				//自定义值改变
				var attrText = dom.value;
				//过滤特殊符号
				if (attrText.replace(/[-:\|\^"\\\/<>]/g, "") != attrText) {
					attrText = attrText.replace(/\:/g, "：").replace(/\|/g, "｜").replace(/\^/g, " ").replace(/\"/g, "“").replace(/\\/g, " ").replace(/\//g, " ").replace(/\'/g, "‘").replace(/</g, "＜").replace(/>/g, "＞").replace(/-/g, "~");
					dom.value = $strTrim(attrText);
				};
				item.defaultTxt=dom.value;
			}
			//值校验，错误提示
			UI.showError(ATTR.cache.itemsInShow);
		}
	}
	
	//鼠标滑过更多
	var classAttrNew_showAbout=function(dom){
		var descDom = $id(dom.id.replace("a_","t_"));
		if(descDom && descDom.innerHTML){
			var tipShow = $showTip({
				title:'',
				content:$xss(descDom.innerHTML,"none"),
				left:$getX(dom)-25,
				top:$getY(dom)+20,
				width:350,
				height:0,
				type:"1"
			});
			//设置移开事件
			var mout = function(e){
				tipShow && (tipShow.close());
				$delEvent(dom,"mouseout",mout);
			}
			$addEvent(dom,"mouseout",mout);
		}
	}
	
	//提交前检查
	var submitCheck=function(){
		//全部激活
		ATTR.activeAll();
		//检查激活属性是否完整并返回错误信息
		var result = UI.showError(ATTR.cache.itemsInShow);
		if(result==true){
			ATTR.getVal();
			return true;
		}else{
			return result;
		}
	}
	
	
	//数据访问初始化
	DAO.init(option.classId);
	//属性相关初始化
	ATTR.init($id(option.var1),$id(option.var2));
	//展示区初始化
	UI.init($id(option.area),option.itemHtml);
	
	//开始访问数据
	DAO.getData(true,$id(option.var1).value);
	
	//定义回调
	window.classAttrCallBack = classAttrCallBack;
	window.findSpuByKeyAttr2Success =findSpuByKeyAttrSuccess;
	window.classAttrNew_onchange = classAttrNew_onchange;
	window.classAttrNew_showAbout=classAttrNew_showAbout;
	window.findSpuByKeyAttr2Fail = findSpuByKeyAttrFail;
	//执行初始化结束的回调
	option.onInited();
	
	//设置一下外部调用的方法
	option.check=submitCheck;
	//方法结束
	return option;
}
})()
(function () {
    /**
    * 选择类目三联动下拉框 
    */
    $classChooseList = function (conf) {
        //选中的类目全路径数组
        var selectedNames = [],
            selectedValue = '', //选中的类目id
            clsItemCache = [],  //第一级类目dom元素缓存
            curOption = {},
            _conf = {},
            targetUl;

        //初始化函数
        function init(conf) {
            //合并配置文件
            _conf = $extend({
                root: '',
                //是否需要添加删除操作
                hasOperate: true,
                //展示层数
                clsMaxLevel: 5,
                //存储选中类目id的对象
                selectedTxt: null
            }, conf);

            var p = $id(_conf.root),
                clsStrArr = [], //类目框html字符串
                contentStr = '<div class="wrapper_search"><div class="wp_sort" style="position: relative;"><div class="wp_sort_block" attrtag="clsMainDiv">{#content#}</div></div></div>'; //主框架

            //创建一组类目选择框
            for (var i = 0; i < 5; i++) {
                clsStrArr.push(createClsList(i));
            }

            if (_conf.hasOperate) {
                clsStrArr.push(createEditList());
            }
            //删除原来绑定事件
            $destoryDomEvents(p);
            p.innerHTML = p.innerHTML.replace(/<div class=\"wrapper_search\">.*<\/div>$/, '');
            //组装类目外层结构
            p.innerHTML += $xss(contentStr.replace('{#content#}', clsStrArr.join('')), 'none');
            //获取选中类目框
            targetUl = $$(p).find('ul[attrtag=clsEditList]')[0];
            //初始化第一级类目复选框
            initOption(p);
            //选中默认的项目
            showSelected(p);
            //绑定list的事件
            bindEventForClsList(p);
        }

        //初始化第一级类目复选框
        function initOption(p) {
            //顶级类目
            var classIds = LData['c1'],
                selectObj = $attr('attrtag', 'clsList', p)[0]; //LData，类目js定义的全局变量
            if (!clsItemCache[0]) {
                selectObj = fill(selectObj, classIds);
                clsItemCache[0] = selectObj.cloneNode(true);
            } else {
                selectObj.parentNode.replaceChild(clsItemCache[0].cloneNode(true), selectObj);
            }
        }

        //加载类目数据到列表中
        function fill(obj, classIds) {
            if (classIds) {
                var itemModel = '<li attrtag="clsItem" dataClsId="{#clsId#}">{#clsName#}</li>',
                    itemsStr = [],
                    clsMainDiv = $$(obj).parents('div[attrtag=clsMainDiv]');
                for (var i = 0, len = classIds.length; i < len; i++) {
                    itemsStr.push($strReplace(itemModel, {
                        '{#clsId#}': classIds[i],
                        '{#clsName#}': arrData[classIds[i]][0]
                    }));
                }
                //添加子节点
                obj.innerHTML = $xss(itemsStr.join(''), 'none');

                //内容不为空，展示该list
                if (classIds.length > 0) {
                    $$(obj).parents('div.sort_show').removeClass().addClass('sort_show');
                } else {
                    $$(obj).parents('div.sort_show').addClass('blank');
                }
            }
            var selects = clsMainDiv.find('div[attrtag=clsDiv] ul'),
                index = parseInt(obj.getAttribute('index'));

            //清除此类目框下级的类目框
            for (var i = index; i < 5; i++) {
                clearClsContent(selects[i]);
            }
            return obj;
        }

        //绑定list的事件
        function bindEventForClsList(pContent) {
            var me = $classChooseList;
            //点击列表事件
            pContent.onclick = function () {
                var e = e || window.event,
                    src = e.srcElement || e.target,
                    me = $classChooseList,
                    tag = src.getAttribute('attrtag'),
                    keyCode = e.keyCode;
                if (tag) {
                    switch (tag) {
                        case 'addClass':
                            editClsItem(src, 'add'); break;
                        case 'delClass':
                            editClsItem(src, 'delete'); break;
                        case 'clsItem':
                            showSelectClass(src);
                            setSelectValue(src);
                            break;
                        case 'targetClsItem':
                            showSelectClass(src); break;
                    }
                }
            }
            //搜索框事件
            $$(pContent).find('input[attrtag=filter]').keyup(function () {
                var ulJqObj = $$(this).parents('div.sort_show').find('ul'),
                    val = this.value;
                clearTimeout(me.searchTimeTag);
                me.searchTimeTag = setTimeout((function () {
                    return function () {
                        searchClsList(val, ulJqObj);
                    }
                })(val, ulJqObj), 300);
            });
        }

        //创建类目选择列表
        function createClsList(i) {
            return '<div class="sort_list" attrtag="clsDiv">\
                                    <div class="sort_show ' + (i > 0 ? 'blank' : '') + '">\
                                        <div class="wp_search_sort">\
                                            <input type="text" maxlength="10" attrtag="filter"><div style="clear: both"></div>\
                                        </div>\
                                        <div class="wp_category_list">\
                                            <div class="category_list">\
                                                <ul attrtag="clsList" index="' + (i + 1) + '"></ul>\
                                            </div>\
                                        </div>\
                                    </div>\
                                </div>'
        }

        //创建选中的类目列表
        function createEditList() {
            return '<div style="clear:both;padding:10px 0px;">\
                            <button attrtag="addClass" type="button">添 加</button><button type="button" attrtag="delClass">删 除</button>\
                            <div>\
                                <div class="sort_list" attrtag="clsEditDiv" style="padding:10px 0px;">\
                                    <div class="sort_show w">\
                                        <div class="wp_search_sort">\
                                            <input type="text" maxlength="10" attrtag="filter"><div style="clear: both"></div>\
                                        </div>\
                                        <div class="wp_category_list w">\
                                            <div class="category_list w">\
                                                <ul attrtag="clsEditList" class="wUl"></ul>\
                                            </div>\
                                        </div>\
                                    </div>\
                                </div>\
                            </div>\
                        </div>';
        }

        //展示已经选择的类目，用于导入卖场时使用
        function showSelected(p) {
            var selectedTxt = $id(conf.selectedTxt);
            if (targetUl && selectedTxt) {
                var reValues = $strTrim(selectedTxt.value, ',').split(','),
                    itemStrArr = [];
                //遍历已选择的类目id，添加到目标类目框中
                for (var i = 0, len = reValues.length; i < len; i++) {
                    //fix data bug
                    if (reValues[i] != '') {
                        if (arrData[reValues[i]]) {
                            var names = [arrData[reValues[i]][0]],
                                        fullPath,
                                        data = arrData[reValues[i]];
                            //回溯完整类目路径
                            while (data[1] != 0) {
                                var key = data[1];
                                names.unshift(arrData[key][0]);
                                data = arrData[key];
                            }
                            fullPath = names.join('>');

                            itemStrArr.push('<li attrtag="targetClsItem" dataClsId="' + reValues[i] + '" title="' + fullPath + '">' + fullPath + '</li>');
                        }
                    }
                }
                targetUl.innerHTML = $xss(itemStrArr.join(''), 'none');
            }
        }

        //展示类目选择框的类目
        function showSelectClass(src) {
            var ul = src.parentNode,
                index = parseInt(ul.getAttribute('index')),
                selectClsId = src.getAttribute('dataClsId'),
                classIds = [],
                cIndex = index + 1,
                cSelect = getSelectByIndex(index, src),
                uls = $$(src).parents('div[attrtag=clsMainDiv]').find('div[attrtag=clsDiv] ul');

            //设置高亮样式
            var items = ul.getElementsByTagName('LI');
            for (var i = 0, len = items.length; i < len; i++) {
                var className = items[i].className;
                className = className.replace('selected', '');
                if (items[i] == src) {
                    className += ' selected';
                }
                items[i].className = className;
            }

            ul.setAttribute('selectClsId', selectClsId);
        }

        //设置选中的类目id和名称全路径
        function setSelectValue(src) {
            var ul = src.parentNode,
                index = parseInt(ul.getAttribute('index')),
                selectClsId = src.getAttribute('dataClsId'),
                classIds = [],
                cIndex = index + 1,
                cSelect = getSelectByIndex(index, src),
                uls = $$(src).parents('div[attrtag=clsMainDiv]').find('div[attrtag=clsDiv] ul');

            //清除原有数据
            clearClsContent(cSelect);

            //填充下一个类目框的内容
            if (cIndex <= _conf.clsMaxLevel) {
                classIds = NData[selectClsId];
                fill(cSelect, classIds);
            }

            //规整选中后的类目路径和id
            //设置选中的value到list上
            ul.setAttribute('selectClsName', $strTrim(src.innerHTML));

            //遍历所有类目框，组合类目的全路径名称和id
            for (var i = 0; i < 5; i++) {
                if (i <= index - 1) {
                    if (!uls[i].getAttribute('selectClsId')) {
                        break;
                    }
                    selectedNames[i] = uls[i].getAttribute('selectClsName');
                    if (i == index - 1) {
                        selectedValue = uls[i].getAttribute('selectClsId');
                    }
                } else if (i > index - 1) {
                    selectedNames[i] = '';
                }
            }
        }

        //根据index获取对应的类目框
        function getSelectByIndex(index, obj) {
            return $$(obj).parents('div[attrtag=clsMainDiv]').find('ul')[index];
        }

        //删除类目框内的子节点，并且清空选中的类目id和名称
        function clearClsContent(obj) {
            for (var i = obj.childNodes.length - 1; i > -1; i--) {
                obj.removeChild(obj.childNodes[i]);
            }
            obj.setAttribute('selectClsId', '');
            obj.setAttribute('selectClsName', '');
        }

        //添加删除类目项
        function editClsItem(src, type) {
            var selectedTxt = $id(_conf.selectedTxt),
                me = $classChooseList;
            if (targetUl) {
                if (type == 'add') {
                    var selNames = selectedNames,
                        selValue = selectedValue,
                        isExist = getItemByClsId(selValue, targetUl) ? true : false;
                    //添加时判断是否已经添加过此类目，并且将要添加的项目id不为空
                    if (!isEmptyStr(selValue) && !isExist) {
                        var name = $strTrim(selNames.join('>'), '>');
                        liStr = '<li attrtag="targetClsItem" dataClsId="' + selValue + '" title="' + name + '">' + name + '</li>';

                        targetUl.innerHTML += liStr;
                    }
                } else {
                    var delItemId = targetUl.getAttribute('selectClsId'),
                            delItem = getItemByClsId(delItemId, targetUl);

                    if (delItem) {
                        targetUl.removeChild(delItem);
                    }
                    targetUl.setAttribute('selectClsId', '');
                    targetUl.setAttribute('selectClsName', '');
                }
                selectedTxt.value = getSelectedItems(targetUl)[0].join(',');
            }

        }

        //获取选中类目id和路径
        function getSelectedItems(targetUl) {
            var lis = targetUl.getElementsByTagName('LI'),
                clsIds = [],
                clsPaths = [];
            for (var i = 0, len = lis.length; i < len; i++) {
                clsIds.push(lis[i].getAttribute('dataClsId'));
                clsPaths.push($strTrim(lis[i].innerHTML));
            }

            return [clsIds, clsPaths];
        }

        //根据关键词查询符合的项并高亮
        function searchClsList(val, ulJqObj) {
            var index = parseInt(ulJqObj[0].getAttribute('index')) - 1,
                me = $classChooseList,
                cache = clsItemCache[index],
                lis = ulJqObj[0].getElementsByTagName('LI'),
                matchArr = [],
                unMatchArr = [];

            if (!cache) {
                cache = ulJqObj[0].innerHTML;
            }

            if (isEmptyStr(val)) {
                val = '学kp搞个永远都不会匹配到的无敌关键词，除非你作弊！';
            }
            //关键词匹配
            for (var i = 0, len = lis.length; i < len; i++) {
                var li = lis[i];
                li.className = li.className.replace('hight_light', '');
                if (li.innerHTML.toLowerCase().indexOf(val.toLowerCase()) > -1) {
                    $addClass(li, 'hight_light');
                    matchArr.push(getItemHtml(li));
                } else {
                    unMatchArr.push(getItemHtml(li));
                }
            }

            //按照默认方法进行排序
            matchArr.sort();
            unMatchArr.sort();
            //按照分好组的顺序重新生成列表
            ulJqObj.html(matchArr.join('') + unMatchArr.join(''));
            //滚动置顶
            ulJqObj.parents('div.wp_category_list').attr("scrollTop", "0");
        }

        //获取类目项的html，类似于outerHTML
        function getItemHtml(item) {
            return '<li class="' + item.className +
                        '" attrtag="' + item.getAttribute('attrtag') +
                        '" dataClsId="' + item.getAttribute('dataClsId') + '">' +
                        $strTrim(item.innerHTML) + '</li>';
        }

        //根据类目id查找列表项 
        function getItemByClsId(clsId, ul) {
            var lis = ul.getElementsByTagName('LI');
            for (var i = 0, len = lis.length; i < len; i++) {
                if (lis[i].getAttribute('dataClsId') === clsId) {
                    return lis[i];
                }
            }
        }

        $loadCss('http://static.paipaiimg.com/css/express/boss/boss_class_choose.css?t=20110907');

        init(conf);

        //提供返回对象和接口
        var chooseListObj = {
            //配置对象
            conf: conf,
            //获取选中的id和名称
            getSelectedItems: function () {
                return getSelectedItems(targetUl);
            },
            //更新选中值
            updateSelectedTxt: function () {
                var selectedTxt = $id(_conf.selectedTxt);
                selectedTxt.value = getSelectedItems(targetUl)[0].join(',');
            }
        }

        //添加到列表组缓存中
        $classChooseList.addList(conf.root, chooseListObj);

        return chooseListObj;
    }

    //列表组缓存
    $classChooseList.listsObj = {};

    $classChooseList.addList = function (id, obj) {
        this.listsObj[id] = obj;
    };

    $classChooseList.deleteList = function (id) {
        delete this.listsObj[id];
    };
    //根据root获取list
    $classChooseList.getChooseListByRoot = function (id) {
        return this.listsObj[id];
    }

    function isEmptyStr(str) {
        return (/^\s*$/).test(str);
    };
})()
$classHeadSearch = function () {
    var categoryType = $id("categoryType"),
        searchForm = $id("searchForm"),
        drawTypeList = $id("drawTypeList"),
        searchType = $getQuery("searchtype") || "1";
    searchForm.setAttribute("type", searchType);
    $id("currentSearch").innerHTML = $xss($id('drawTypeList' + searchType).innerHTML, 'none');
    var kw = $getQuery("keyword");
    if (kw) {
        $id("headKeyWord").value = decodeURIComponent(kw);
    }
    categoryType.onmouseover = function () {
        $delClass(drawTypeList, "h");
    };
    categoryType.onmouseout = function () {
        $addClass(drawTypeList, "h");
    };
    drawTypeList.onclick = function (evt) {
        var target = $getTarget(evt);
        if (target.tagName == "A") {
            searchForm.setAttribute("type", target.getAttribute("type"));
            $id("currentSearch").innerHTML = $xss(target.innerHTML, 'none');
            $addClass(this, "h");
        }
    };
    searchForm.onsubmit = function () {
        var type = this.getAttribute("type");
        if (type != "1") {
            var KeyWord = $id('headKeyWord');
            var kw = $strTrim(KeyWord.value);
            if (kw == "") {
                KeyWord.focus();
                return false;
            }
            if (kw.length > 60) {
                alert('请不要超出60个字符');
                return false;
            }
            window.location.href = this.getAttribute("action" + type) + encodeURIComponent(kw);
            return false;
        }
    };
}
(function () {
    $classMutiChoose = function (conf) {
        var _conf = $extend({
            dataStore: LData['c1'],
            root: '',
            selectedTxt: null
        }, conf),
                clsList,
                isPressCtrl = false;

        function init() {
            var p = $id(_conf.root),
                    html = [],
                    contentStr = '<div class="wp_sort_block" style="text-align:left;" attrtag="clsMainDiv">{#content#}</div>'; //主框架

            //创建类目选择框
            html.push(createClsList());
            //清除属性事件
            $destoryDomEvents(p);
            //组装类目外层结构
            p.innerHTML += $xss(contentStr.replace('{#content#}', html.join('')), 'none');

            clsList = $attr('attrtag', 'clsList', p)[0];
            //填充数据
            fill(clsList);
            //绑定事件
            bindEventForClsList(p);
            //导入数据
            showSelected(p)
        }

        //加载类目数据到列表中
        function fill(obj) {
            var classIds = _conf.dataStore;
            if (classIds) {
                var itemModel = '<li attrtag="clsItem" dataClsId="{#clsId#}">{#clsName#}</li>',
                        itemsStr = [];
                for (var i = 0, len = classIds.length; i < len; i++) {
                    itemsStr.push($strReplace(itemModel, {
                        '{#clsId#}': classIds[i],
                        '{#clsName#}': arrData[classIds[i]][0]
                    }));
                }
                //添加子节点
                obj.innerHTML = $xss(itemsStr.join(''), 'none');
            }
        }

        //创建类目选择列表
        function createClsList() {
            return '<div class="sort_list" attrtag="clsDiv">\
                                    <div class="sort_show">\
                                        <div class="wp_search_sort">\
                                            <input type="text" maxlength="10" attrtag="filter"><div style="clear: both"></div>\
                                        </div>\
                                        <div class="wp_category_list">\
                                            <div class="category_list">\
                                                <ul attrtag="clsList" onselectstart="return false;" ></ul>\
                                            </div>\
                                        </div>\
                                    </div>\
                                </div>'
        }

        //展示已经选择的类目，用于导入卖场时使用
        function showSelected(p) {
            var selectedTxt = $id(conf.selectedTxt);
            if (selectedTxt) {
                var reValues = $strTrim(selectedTxt.value, ',').split(','),
                        lis = clsList.getElementsByTagName('LI');
                //遍历已选择的类目id，添加到目标类目框中
                for (var i = 0, len = reValues.length; i < len; i++) {
                    if (reValues[i] != '') {
                        for (var j = 0, listLen = lis.length; j < listLen; j++) {
                            if (lis[j].getAttribute('dataClsId') == reValues[i]) {
                                lis[j].className += ' selected';
                            }
                        }
                    }
                }
            }
        }
        //绑定list的事件
        function bindEventForClsList(pContent) {
            var me = $classMutiChoose;
            //点击列表事件
            pContent.onclick = function (e) {
                var e = e || window.event,
                        src = e.srcElement || e.target,
                        tag = src.getAttribute('attrtag');
                if (tag) {
                    switch (tag) {
                        case 'clsItem':
                            showSelectClass(src, !isPressCtrl);
                            break;
                    }
                }
            }

            $$(document.body).keydown(function (e) {
                var e = e || window.event,
                        keyCode = e.keyCode;
                if (keyCode == 17) {
                    isPressCtrl = true;
                }
            }).keyup(function (e) {
                var e = e || window.event,
                        keyCode = e.keyCode;
                if (keyCode == 17) {
                    isPressCtrl = false;
                }
            });

            //搜索框事件
            $$(pContent).find('input[attrtag=filter]').keyup(function () {
                var val = this.value;
                clearTimeout(me.searchTimeTag);
                me.searchTimeTag = setTimeout((function () {
                    return function () {
                        searchClsList(val);
                    }
                })(val), 300);
            });
        }

        //展示类目选择框的类目
        function showSelectClass(src, isReset) {
            var selectClsId = src.getAttribute('dataClsId'),
                        items = $$(clsList).find('li'),
                        selectedTxt = $id(_conf.selectedTxt),
                        clsArr = [];

            if (isReset) {
                items.removeClass('selected');
            }

            //设置高亮样式
            for (var i = 0, len = items.length; i < len; i++) {
                var className = items[i].className;
                if (items[i] == src) {
                    className += ' selected';
                    items[i].className = className;
                }
                if (className.indexOf('selected') > -1) {
                    clsArr.push(items[i].getAttribute('dataClsId'));
                }
            }

            selectedTxt.value = clsArr.join(',');
        }

        //根据关键词查询符合的项并高亮
        function searchClsList(val) {
            var lis = clsList.getElementsByTagName('LI'),
                    matchArr = [],
                    unMatchArr = [];

            if (isEmptyStr(val)) {
                val = '学kp搞个永远都不会匹配到的无敌关键词，除非你作弊！';
            }
            //关键词匹配
            for (var i = 0, len = lis.length; i < len; i++) {
                var li = lis[i];
                li.className = li.className.replace('hight_light', '');
                if (li.innerHTML.toLowerCase().indexOf(val.toLowerCase()) > -1) {
                    $addClass(li, 'hight_light');
                    matchArr.push(getItemHtml(li));
                } else {
                    unMatchArr.push(getItemHtml(li));
                }
            }

            //按照默认方法进行排序
            matchArr.sort();
            unMatchArr.sort();
            //按照分好组的顺序重新生成列表
            clsList.innerHTML = $xss(matchArr.join('') + unMatchArr.join(''), 'none');
            //滚动置顶
            $$(clsList).parents('div.wp_category_list').attr("scrollTop", "0");
        }

        //获取类目项的html，类似于outerHTML
        function getItemHtml(item) {
            return '<li class="' + item.className +
                        '" attrtag="' + item.getAttribute('attrtag') +
                        '" dataClsId="' + item.getAttribute('dataClsId') + '">' +
                        $strTrim(item.innerHTML) + '</li>';
        }

        //获取选中类目id和路径
        function getSelectedItems() {
            var lis = clsList.getElementsByTagName('LI'),
                    clsIds = [],
                    clsPaths = [];
            for (var i = 0, len = lis.length; i < len; i++) {
                if (lis[i].className.indexOf('selected') > -1) {
                    clsIds.push(lis[i].getAttribute('dataClsId'));
                    clsPaths.push($strTrim(lis[i].innerHTML));
                }
            }

            return [clsIds, clsPaths];
        }

        $loadCss('http://static.paipaiimg.com/css/express/boss/boss_class_choose.css?t=20110907');
        init();

        return {
            getSelectedItems: getSelectedItems,
            //更新选中值
            updateSelectedTxt: function () {
                var selectedTxt = $id(_conf.selectedTxt),
                        lis = clsList.getElementsByTagName('LI'),
                        clsIdArr = [];
                for (var i = 0, len = lis.length; i < len; i++) {
                    if (lis[i].className.indexOf('selected') > -1) {
                        clsIdArr.push(lis[i].getAttribute('dataClsId'));
                    }
                }
                selectedTxt.value = clsIdArr.join(',');
            }
        }
    }
    
    function isEmptyStr(str) {
        return (/^\s*$/).test(str);
    };
    
})()
//商品发布路径选择组件
function $classPath(obj){
	var option={
		objAreaId:"selectArea",		//区域的id
		loadDomId:"dataLoading",	//加载中状态条的id
		template:'<li class="{#isHightLight#} {#isSelect#}" path="0,{#path#}" leaf="{#leaf#}" cid="{#classId#}" id="classItem_{#classId#}"><span class="{#isLeaf#}">{#className#}</span></li>',		//选择框中的单个元素结构
		initClassId:"0",	//初始化时的classid，用于默认选中
		onSelect:function(){return true;},	//选中一个节点时的事件
		selectPath:["","","","",""],		//用户要选中的路径，在还原数据的时候按照这个依次进行。
		currState:["","","","",""],		//当前选择状态
		list:{},				//缓存的类目信息列表，key为classid，值为一个json配置信息
		leaf:""			//当前最后一级节点的数据，指针，其实是访问list里面的数据
	};
	for(var i in obj){
		option[i]=obj[i]
	}
	//初始化全局cache
	window._PP_classPath_data=option;
	var cache=window._PP_classPath_data;
	//初始化对象方法
	cache.areaObj=$$("#"+option.objAreaId);//初始化cache
	cache.loadObj=$$("#"+option.loadDomId);//初始化loading对象
	cache.selectClassItem=selectClassItem;//选中一个classitem
	cache.initClassList=initClassList;//初始化类目选择框数据
	cache.getItemHtml=getItemHtml;//根据类目数据生成该类目的html代码，h表是否显示为高亮
	cache.orderClassList=orderClassList;//对一列类目数据进行排序
	cache.setClassCache=setClassCache;//把返回的类目数据存入缓存
	cache.reSelect=reSelect;//重新渲染
	cache.selectFullPath=selectFullPath;//选择一条完整路径
	cache.selectLeafPath=selectLeafPath;//选择一条叶子节点
	bindActions();
	//类目信息初始化
	cache.selectLeafPath(cache.initClassId?cache.initClassId:"0")
	return cache;
	//初始化事件绑定：类目元素、快速筛选框、排序按钮
	function bindActions(){
		//用户点击一个类目元素
		cache.areaObj.find(".category_list li").live("click",function(){
			cache.selectClassItem(this.id.replace("classItem_",""));
			//清除掉当前选项后面下一级别的选择状态
			$$(this).parents(".sort_list").next(".sort_list").find("li.selected").removeClass("selected");
			if(this.getAttribute("leaf")=="0"){//选择路径就开始加载下一级
				cache.initClassList(this.getAttribute("path"));
			}else{
				var path=this.getAttribute("path").split(",");
				path.pop();
				cache.initClassList(path.join());
			}
		});
		//类目快速筛选框
		cache.areaObj.find(":input[tag='filter']").blur(function(){
			if(this.value==""){
				this.value="输入名称或拼音首字母";
				$$(this).css("color","#999");
			}
		}).focus(function(){
			if(this.value=="输入名称或拼音首字母"){
				this.value="";
				$$(this).css("color","#000");
			}
			if(this.value!=""){
				//$$(this).keyup();
			}
		}).keyup(function(){
			var k=this.value;
			var lid=$$(this).attr("lid");
			cache.orderClassList(lid,"1",k);
			//把排序按钮状态重置
			cache.areaObj.find("a[tag='orderList'][lid='"+lid+"']").removeClass("down").removeClass("up").addClass("current").attr("state","0").attr("title","点击按首字母z-a排序");
			//内容滚动到最上面
			$$("#sortShowC"+lid).find(".wp_category_list").attr("scrollTop","0");
		}).val("输入名称或拼音首字母").attr("title","输入名称或拼音首字母");
		//排序按钮
		cache.areaObj.find("a[tag='orderList']").click(function(){
			var t=$$(this);
			var state=parseInt(t.attr("state"));
			if(state==0){
				t.removeClass("current").addClass("down").attr("state","1").attr("title","点击按首字母a-z排序");
			}else if(state==1){
				t.removeClass("down").addClass("up").attr("state","2").attr("title","点击返回系统默认排序");
			}else if(state==2){
				t.removeClass("up").addClass("current").attr("state","0").attr("title","点击按首字母z-a排序");
			}
			cache.orderClassList(t.attr("lid"),"2",t.attr("state"));
			//把对应的搜索框内容重置
			$$(":input[tag='filter'][lid='"+t.attr("lid")+"']").val("").blur();
			$$("#sortShowC"+t.attr("lid")).find(".wp_category_list").attr("scrollTop","0");
			return false;
		}).attr("state","0").attr("title","点击按首字母z-a排序");
	}
	//对一列类目数据进行排序
	//参数：rid为要排序的列id,排序方法、排序依据；当tp=1时，为关键词排序，key表关键词，tp=2时，表拼音排序，key为排序方法：0默认，1降序，2升序
	function orderClassList(rid,tp,key){
		var dlist=[],list=[],olist=[];
		for(var i in cache.list){
			if(cache.list[i].parentId==cache.currState[parseInt(rid)]){
				dlist.push(cache.list[i])
			}
		}
		//如果为拼音排序的话
		if(tp=="2"){
			if(key==1){
				dlist=dlist.sort(function(a,b){
					return b.pinyin.localeCompare(a.pinyin);
				});
			}
			if(key==2){
				dlist=dlist.sort(function(a,b){
					return a.pinyin.localeCompare(b.pinyin);
				})
			}
			
			for(var i=0;i<dlist.length;i++){
				if(dlist[i].className.indexOf("其他")==0 || dlist[i].className.indexOf("其它")==0){
					olist.push(dlist[i]);
				}else{
					list.push(cache.getItemHtml(dlist[i]));
				}
			}
			for(var i=0;i<olist.length;i++){
				list.push(cache.getItemHtml(olist[i]));
			}
		}
		//如果为关键词排序的话
		if(tp=="1"){
			var t=0,i=0,idl=[];
			if(key==""){
				key="无所不能绝对不会被匹配到的强悍文字kpxu";
			}
			key=key.toUpperCase();
			//类目名匹配
			while(i<dlist.length && t<2){
				if((","+idl+",").indexOf(","+dlist[i].classid+",")<0){//没有被匹配过
					//类目名和拼音匹配
					if(t==0&&dlist[i].strs.indexOf(key)>=0){
						idl.push(dlist[i].classid);
						list.push(cache.getItemHtml(dlist[i],true));
					}
					//这里可以扩展其他的匹配方式，增加t的取值范围即可。不同的t值，匹配优先级不一样
					//剩下的
					if(t==1){
						list.push(cache.getItemHtml(dlist[i]));
					}
				}
				if(++i==dlist.length && t<3){
					i=0;
					t++;
				}
			}
		}
		$$("#classList"+rid).html(list.join(""));
	}
	//选中一个classitem，设置为选中状态,展示节点信息到信息区
	function selectClassItem(cid){
		//选择0表示清空所有选择状态
		if(cid=="0"){
			cache.areaObj.find(".selected").removeClass("selected");
			cache.leaf="";
			cache.onSelect();
			return false;
		}
		var t=$$("#classItem_"+cid);
		if(t.length>0){
			t.parent().children(".selected").removeClass("selected");
			t.addClass("selected");
		}
		cache.leaf=cache.list[cid];
		cache.onSelect();
		return true;
	};
	//把返回的类目数据存入缓存
	function setClassCache(o){
		//要把名称为其他的放在后面。。。
		var otherList=[];
		for(var i=0,j=o.data.length;i<j;i++){
			o.data[i].strs=(o.data[i].className+o.data[i].pinyin).toUpperCase();
			//o.data[i].property=parseInt(o.data[i].property.substr(0,8),16);
			/*收到的输出串是个不定长度的16进制字符串，不过一定是8个整数位，拿到后需要转为二进制串	老属性串中0x4应该是新得到属性字符串中的从左0起第29位是否0，不懂就来找kpxu吧。写下这段算法和注释的时候，我也是泪流满面。上面注释的一行代码其实也是可以跑的，不过codydeng说以后属性串可能不止8个，会有，16、24甚至更多
		说明一下格式化以后用到的几个字段含义：
			CLASS_PROPERTY_PRE_DELETE = 31,//0x01,       //预删除
			CLASS_PROPERTY_VIRTUAL = 30,//0x02,          //虚拟类目A
			CLASS_PROPERTY_HALF_VIRTUAL = 29,//0x04,     //半虚拟类目B
			CLASS_PROPERTY_5188 = 28,//0x08,             //只能是5188来用
			CLASS_PROPERTY_MULTI_PARENT = 27,//0x10,     //复合类目
			CLASS_PROPERTY_HAS_ATTR_INFO = 26,//0x20,    //属性类目
			CLASS_PROPERTY_SEX_TOOLS = 25,// 0x40,    //成人用品类目
			CLASS_PROPERTY_AUTO_SEND = 24,//0x80,    //自动发货类目
			CLASS_PROPERTY_ATTRIBUTE_HIDDEN = 23,//0x100,    // 搜索属性屏蔽
			CLASS_PROPERTY_NO_EXTRACT = 22,//0x200,      //折叠
			CLASS_PROPERTY_TENCENT_PRODUCTS  = 21,// 0x400,    //腾讯相关商品
			CLASS_PROPERTY_ONE_ITEM_PER_USER = 20,// 0x800,       //一个类目只能发一个商品类目
			CLASS_PROPERTY_TAKE_WHEN_PAYED   = 19,// 0x1000,    // 拍下不买类目
			CLASS_PROPERTY_BEAUTY_LADY       = 18,//0x2000,    // 女装类目
			CLASS_PROPERTY_FAST_SEND          = 17,//0x4000,    // 诚保代充
			CLASS_PROPERTY_MOBILE             = 16,//0x8000,    // 新手机类目
			//0x10000 类目标红
			//0x20000 类目排前
			//0x40000 实物类
			CLASS_PROPERTY_QCC                = 12,//0x80000,   // QCC 品类
			CLASS_PROPERTY_SECOND_SP_CHENGBAO = 11,//0x100000,  // 二手商品支持诚保
			CLASS_PROPERTY_GAME_RECHARGE      = 10,//0x200000,  // 游戏充值类目
			CLASS_PROPERTY_MOBIL_RECHARGE     = 9,//0x400000,  // 手机充值类目
			CLASS_PROPERTY_QQ_RECHARGE        = 8,//0x800000,  // QQ充值类目
			CLASS_PROPERTY_ONLY_CHENGBAO_LICENCE  = 7,//0x1000000,  // 只有城保或者商家认证用户才能发布//skydu add 20090517
			CLASS_PROPERTY_STOCK              = 6,//0x2000000,  // 库存类目标记
			CLASS_PROPERTY_NEED_PLEDGE        = 5,//0x4000000,  // 需要缴纳保证金类目 by Doncheng
			CLASS_PROPERTY_ONLYMAINCLASSIN  = 4,//0x8000000,//只允许主营类目为本类目的卖家发布
			CLASS_PROPERTY_C2CCLASS         = 3,//0x10000000,//c2c使用
			CLASS_PROPERTY_VIPMALLCLASS     = 2,//0x20000000,//会员商城使用
			CLASS_PROPERTY_SPUCLASS         = 1,//0x40000000,//spu使用
			*/
			var p="";
			for(var k=0;k<o.data[i].property.length;k++){
				var t="0000"+parseInt(o.data[i].property.substr(k,1),16).toString(2);
				t=t.substr(t.length-4,4);
				p=p+t;
			}
			o.data[i].propertyStr=p;
			
			if(o.data[i].className.indexOf("其他")==0 || o.data[i].className.indexOf("其它")==0){
				otherList.push(o.data[i]);
			}else{
				cache.list[o.data[i].classid]=o.data[i];
			}
		}
		//最后把其他压入
		for(var i=0,j=otherList.length;i<j;i++){
			cache.list[otherList[i].classid]=otherList[i];
		}
	};
	//根据类目数据生成该类目的html代码，h表是否显示为高亮
	function getItemHtml(o,h){
		var t=cache.template;
		//判断是否预删除
		if(o.propertyStr.substr(31,1)==1){
			return "";
		}
		//判断当前节点是否处于选中状态
		var isselect=false;
		if((","+cache.selectPath+",").indexOf(","+o.classid+",")>0){
			isselect=true;
		}else if(cache.leaf){
			if(cache.leaf.classid==o.classid){
				isselect=true;
			}
		}
		//判断是否高亮
		t=t.replace(/{#isHightLight#}/,h?"hight_light":"");
		t=t.replace(/{#isSelect#}/,isselect?"selected":"");
		t=t.replace(/{#classId#}/g,o.classid);
		t=t.replace(/{#isLeaf#}/,o.isLeaf=="0"?"has_leaf":"");
		t=t.replace(/{#leaf#}/,o.isLeaf);
		t=t.replace(/{#className#}/,o.className);
		t=t.replace(/{#path#}/g,o.classpath);
		return t;
	}
	//初始化类目选择框数据,默认显示第一级数据，参数pid从0开始，无参数的时候重复上次的展示情况
	function initClassList(pid){
		//根据pid计算出要显示的完整路径，有参数说明要展示的路径有新的变化了，无参数说明只是上次失败，这次重新展示一下
		if(pid){
			cache.selectPath=pid.split(",");
		}
		//执行类目列表显示	//分别有4级数据，全部展示
		for(var i=0;i<5;i++){
			//如果当前要展示的类目数据id跟已展示数据的id一致则不做任何数据处理
			if(cache.selectPath[i]==cache.currState[i] ){
				//选择状态还是要设置的,数据相同，则判断下一级是否存在，如果存在就要在当前级选中改分类
				if(cache.selectPath[i+1]){
					//清理当前已经选中的状态
					$$("#classList"+i).find(".selected").removeClass("selected");
					//选中一个类目
					$$("#classItem_"+cache.selectPath[i+1]).addClass("selected");
				}
				continue;
			}
			//该列的数据发生变化时对应的搜索过滤关键词及排序还原为默认状态
			$$("a[tag='orderList'][lid='"+i.toString()+"']").attr("state","0").removeClass().addClass("btn_sort").addClass("current").attr("title","点击按首字母z-a排序");
			$$(":input[tag='filter'][lid='"+i.toString()+"']").val("").blur();
			//如果当级数据不为空则开始循环输出该级数据的列表
			if(cache.selectPath[i]){
				var pid=cache.selectPath[i];
				var list=[];
				for(var j in cache.list){
					if(cache.list[j].parentId==pid){
						list.push(cache.getItemHtml(cache.list[j]));
					}
				}
				//类目数据存在
				if(list.length>=1){
					$$("#classList"+i).html(list.join(""));
					$$("#sortShowC"+i).removeClass("blank");
					cache.currState[i]=cache.selectPath[i];
					cache.selectClassItem(cache.currState[i]);
				}else if(cache.list[pid.toString()] && cache.list[pid.toString()].isLeaf=="1"){//如果是叶子节点则直接选择他
					cache.selectClassItem(pid);
					$$("#classList"+i).html("");
					$$("#sortShowC"+i).addClass("blank");
				}else{//说明该级别的子类目数据为空，立即去加载数据回来，然后重新唤起渲染操作
					if(cache.selectPath[i+1]){//有好多数据都不全的话，直接拉一次全量数据
						var p=[];
						for(var j=0;(i+j)<cache.selectPath.length;j++){
							p.push(cache.selectPath[i+j]);
						}
						cache.loadObj.show();
						var url="http://my.paipai.com/cgi-bin/itementry/classdata?callback=getClassCallback&classpath="+p.join()+"&checkpath=0&getfullpath=0&g_ep=600"
						var _retCoder=$returnCode({url:url});
						$loadScript(url);
					}else{
						cache.loadObj.show();
						var url="http://my.paipai.com/cgi-bin/itementry/classdata?callback=getClassCallback&classpath="+cache.selectPath[i]+"&checkpath=0&getfullpath=0&g_ep=600";
						var _retCoder=$returnCode({url:url});
						$loadScript(url);
					}
					window.getClassCallback=function(o){
						
						cache.loadObj.hide();
						//错误判断。。。
						if(o.data.length<1){
							_retCoder.report(false,o.errCode);
							alert("无法获取到数据，请刷新重试！");
							return;
						}
						_retCoder.report((o.errCode=="0"?true:false),o.errCode);
						//缓存数据
						cache.setClassCache(o);
						//重新返回内容展示状态
						cache.initClassList();
					}
					return;
				}
			}else{
				//类目未被选择，则清空内容并隐藏
				$$("#classList"+i).html("");
				$$("#sortShowC"+i).addClass("blank");
				cache.currState[i]="";
			}
		}
	};
	//重新渲染
	function reSelect(){
		if(cache.leaf){
			cache.selectClassItem(cache.leaf.classid);
		}
	}
	//选择一条完整路径
	function selectFullPath(path){
		//清理掉当前选中的类目,避免出现同路径的上级导致被跳过
		cache.currState=["0","","","",""];
		cache.initClassList(path);
	}
	//直接选择一个叶子节点
	function selectLeafPath(cid){
		cache.selectFullPath();
		if(!cache.list[cid]){//没有数据的话拉一个全量的数据，取到path后处理缓存，调用initClassList展示
			cache.searchId=cid;
			var getFull=(cid=="0")?"0":"1";
			var url="http://my.paipai.com/cgi-bin/itementry/classdata?callback=getFullClassCallback&classpath="+cid+"&checkpath=0&getfullpath="+getFull+"&g_ep=600";
			var _retCoder=$returnCode({url:url});
			$loadScript(url);
			window.getFullClassCallback=function(o){
				_retCoder.report((o.errCode=="0"?true:false),obj.errCode);
				//缓存数据
				cache.setClassCache(o);
				//重新返回内容展示状态
				if(cache.searchId=="0"){
					cache.initClassList("0");
				}else{
					cache.initClassList("0,"+cache.list[cache.searchId].classpath);
				}
			}
		}else{//如果有缓存数据就直接取了路径，然后调用initClassList展示
			//重新返回内容展示状态
			cache.initClassList("0,"+cache.list[cid].classpath);
		}	
	}
}
function $commid2QQ(commid) {
    var s = commid;
    s = s.substring(0, 8);
    s = s.substring(2, 4) + s.substring(0, 2) + s.substring(6, 8) + s.substring(4, 6);
    s = s.substring(4, 8) + s.substring(0, 4)
    s = s.replace(/^0*/g, "")
    s = parseInt(s, 16)
    return s;
}
function $countRd(rd){
	var arrRd=rd.split(".");
	var jsrdUrl="http://service.paipai.com/cgi-bin/ping?u=http://jsrd.paipai.com&fu=http://jsrd.paipai.com%3FPTAG%3D"+rd+"&resolution=1024*768";
	//添加用户行为支持
	jsrdUrl+="&fpageId="+arrRd[0]+"&fdomainId="+arrRd[1]+"&flinkId="+arrRd[2];
	if(document.domain.match(/paipai\.com/)){
		//用于uv统计,参数u，fu，resolution无意义但不能为空
		$report(jsrdUrl);
	}else{
		//外站点击统计
		$report($makeRd(rd));
		//$report(jsrdUrl);
	}
}
var $createCGICallback = (function() {
	if (window["$createCGICallback"]) {
	 return window["$createCGICallback"];
	 }
	var GLOBALCACHE = {};
	var GLOBALCALLCACHE = {};
	return function(cgiRule, success, cacheTime, seed, waitTime, noCall) {
		var useGlobleCache = true;
		var cache = {};
		var callCache = {};
		var getSeedValue;
		var hasData;
		var getData;
		if( typeof cacheTime == "object") {
			var object = cacheTime;
			cacheTime = object.cacheTime;
			seed = object.seed;
			waitTime = object.waitTime;
			noCall = object.noCall;
			useGlobleCache = object.useGlobleCache;
			getSeedValue = object.getSeedValue;
			hasData = object.hasData;
			getData = object.getData;
		}
		if(useGlobleCache) {
			cache = GLOBALCACHE;
			callCache = GLOBALCALLCACHE;
		}
		if(waitTime) {
			waitTime *= 1000;
		}
		if(!cacheTime) {
			cacheTime = 0;
		}
		getSeedValue = getSeedValue ||
		function() {
			return new Date().getTime();
		};

		hasData = hasData ||
		function() {
			return typeof window[success] != "undefined";
		};

		getData = getData ||
		function() {
			return window[success];
		};

		if( typeof cgiRule === "string") {
			var cgistr = cgiRule;
			cgiRule = function(param) {
				param = param || {};
				return cgistr.replace(/{#(\w+)#}/g, function($0, $1) {
					return param[$1] || "";
				});
			};
		}
		if(cacheTime < 0) {
			cacheTime = Number.MAX_VALUE;
		} else {
			cacheTime = parseInt("" + cacheTime) * 1000;
		}
		return function(param, callback) {
			var url = cgiRule(param);
			var key = escape(url);
			if(noCall) {
				if(hasData()) {
					callback.apply(null, [getData()]);
					return;
				}
			} else {
				if(cacheTime > 0) {
					var value = cache[key];
					if(value && (new Date().getTime() - value.time) < cacheTime) {
						window.setTimeout(function() {
							var v = callback.apply(null, value.data); ( typeof v == "undefined" || v) ? 0 :
							delete cache[key];
						}, 0);
						return;
					}
				}
			}
			if(waitTime && callCache[key] && (noCall || cacheTime > 0)) {
				var lastCallTime = callCache[key];
				if(new Date().getTime() - lastCallTime < waitTime) {
					var callFunc = arguments.callee;
					window.setTimeout(function() {
						callFunc(param, callback);
					}, 1);
					return;
				} else {
					delete callCache[key];
				}
			}
			if(noCall) {(function checkHasData() {
					if(hasData()) {
						delete callCache[key];
						callback.apply(null, [getData()]);
						return;
					}
					window.setTimeout(checkHasData, 1);
				})();
			} else {
				window[success] = function() {
					delete callCache[key];
					if(cacheTime > 0) {
						cache[key] = {
							time : new Date().getTime(),
							data : arguments
						};
					}
					var v = callback.apply(null, arguments); ( typeof v == "undefined" || v) ? 0 :
					delete cache[key];
				};
			}
			if(waitTime) {
				callCache[key] = new Date().getTime();
			}
			if(seed) {
				var seedValue = getSeedValue();
				arguments.callee.seed = seedValue;
				url = $replaceParam(seed, seedValue, url, true);
			}
			$loadScript(url);
		};
	};
})()
function $cusInfoMini(option){
  var CusInfoObj = window['pp_mini_cus_info_obj'];
  if(CusInfoObj){
    if(option.show){
      CusInfoObj.show(option);
    }else CusInfoObj.hide();
    return;
  }
  var opt = {
    uin : "",  //目标tips用户--必选非空
    myUin : "",  //当前登录用户
    left : 0,
    top : 0,
    width : 0,  //元素宽度
    height : 0,  //元素高度
    offsetUp : 0,  //上角标偏移量(角标模式)
    offsetDown : 0,  //下角标偏移量(角标模式)
    showArr : true,  //true:角标模式(在对像上方或下方显示)
    show : true,  //此属性为false时为隐藏浮层,以上其他属性均可不填--必选true|false
    attState : null,  //关注状态1:已关注,0:未关注(需动态与页面上其他关注按钮互动时可设置此属性)
    attSucFun : null //关注操作回调(参数ope:1关注成功,2取消成功)
  },
  talentNames = {  //达人对应类型描述
     "1" : "男装达人",
     "2" : "女装达人",
     "3" : "母婴达人", 
     "4" : "数码达人",
     "5" : "居家达人", 
     "6" : "美食达人", 
     "7" : "美容达人"     
  },
  sysTalents = {  //官方认证达人
    "518800321" : true,  //拍拍乐享
    "518800398" : true,  //拍拍团购
    "518801527" : true,   //拍拍购物更放心
    "518800333" : true,  //拍拍网
    "518800381" : true,  //拍拍女装
    "518800397" : true,  //拍拍数码
    "518800971" : true,  //拍拍运动
    "518801537" : true,  //拍拍箱包
    "518801576" : true,  //拍拍女鞋
    "518800370" : true,  //拍拍美容美妆
    "518801505" : true,  //拍拍网游
    "518800268" : true  //腾讯美食
  },
  isShow = false,
  cou = 0,
  templete = '<div class="photo_details_shadow"><div class="photo-details-cotainer"><div class="push_user_head"><a class="push_user_img" target="" href="http://t.paipai.com/{#uin#}?preview=1&PTAG=20083.25.1"><img width="50" height="50" src="{#logoUrl#}"></a><div class="popup_r"><p class="push_user_detail"><a class="push_user_name" target="_blank" href="http://t.paipai.com/{#uin#}?preview=1&PTAG=20083.25.1">{#nickName#}</a><span title="{#talentTitle#}" class="{#talentClass#}">&nbsp;</span><span class="push_user_type">{#talentType#}</span></p><p class="push_user_constellation" style="display:{#horoDisplay#}">星座：<span>{#horo#}</span></p><p class="push_user_city" style="display:{#locatDpMark#}">所在地：<span>{#locat#}</span></p><p class="push_user_care">关注:<a href="http://t.paipai.com/{#uin#}/following?PTAG=20083.25.2" target="_blank">{#attNum#}</a>粉丝:<a href="http://t.paipai.com/{#uin#}/follower?PTAG=20083.25.3" target="_blank">{#fanNum#}</a>分享:<a href="http://t.paipai.com/{#uin#}?preview=1&PTAG=20083.25.4" target="_blank">{#shaNum#}</a></p></div><p class="push_user_atten" style="display:none" id="cusInfoAttBlock"><span class="atten" style="display:none" id="cusInfoAttBtn">关注</span><span class="atten_off" style="display:none" id="cusInfoCanAttBtn">|<span class="atten_off_tempmark">取消</span></span></p></div><div class="push_user_tag" style="display:{#tagDpMark#}"><span>标签：</span><span class="push_user_tagname">{#tagList#}</span></div><div class="push_user_fav"><strong>你可能还感兴趣：</strong><ul>{#otherAtt#}</ul></div></div></div><span class="arrow" id="cusInfoArrow"></span>',
  loadTemplete = '<div class="photo_details_shadow"><div class="photo-details-cotainer"><img class="photo_popup_loading" src="http://static.paipaiimg.com/assets/common/loading2.gif" alt="loading..." /></div></div><span class="arrow" id="cusInfoArrow"></span>',
  peTemplete = '<li title="{#nickName#}"><a href="http://t.paipai.com/{#uin#}?preview=1&PTAG=20083.25.5" target="_blank"><img src="http://qlogo2.store.qq.com/qzone/{#uin#}/{#uin#}/50" width="36" height="36" /></a></li>',
  xzs = ["","水瓶座","双鱼座","白羊座","金牛座","双子座","巨蟹座","狮子座","处女座","天秤座","天蝎座","射手座","摩羯座"],
  infoBlock,
  cusInfos = {},  //昵称信息缓存
  talentMarks = {},  //达人信息缓存
  status = {};  //关注状态
  function show(option){
    isShow = true;
    cou++;
    window.setTimeout(function(){
      cou--;
      if(!isShow || cou > 0) return;
      for(var o in option){
        opt[o] = option[o];
      }
      (opt.attState != null) && (status[opt.uin] = opt.attState);
      infoBlock = $id("nickInfoBlock");
      if(!infoBlock){
        infoBlock = document.createElement("div");
        infoBlock.id = "nickInfoBlock";
        infoBlock.className = "photo_details_popup";
        infoBlock.style.zIndex = 101;
        infoBlock.style.display = "none";
        infoBlock.setAttribute("uin", "");
        document.body.appendChild(infoBlock);
        infoBlock.onmouseover = function(e){
          isShow = true;
        }
        infoBlock.onmouseout = function(e){
          hide();
        }
        infoBlock.onclick = function(e){
          var tar = $getTarget(e),
              cn = tar.className;              
          if(cn && cn.indexOf("atten") != -1){  //关注按钮
            var teUin = infoBlock.getAttribute("uin");
            if(cn == "atten"){  //关注
               $attentionMini({
                 uin : teUin,
                 type : 1,
                 ptag : "1063.20.1",
                 onSuccess : function(uin){
                     $displayHide("cusInfoAttBtn");
                     $display("cusInfoCanAttBtn");
                     status[uin]=1;
                     opt.attSucFun && opt.attSucFun(1);
                 },
                 onLimit : function(){
                   alert("您的关注已达上限！");
                 }
               });
            }else{   //取消关注
               $attentionMini({
                 uin : teUin,
                 type : 2,
                 ptag : "1063.20.2",
                 onSuccess : function(uin){
                     $displayHide("cusInfoCanAttBtn");
                     $display("cusInfoAttBtn");
                     status[uin]=0;
                     opt.attSucFun && opt.attSucFun(0);
                 }
               });
            }
          }
        };
      }
      var eleUin = infoBlock.getAttribute("uin");
      if(eleUin == opt.uin){  //与上一次显示的同一人
        _show();
        return;
      }
      infoBlock.setAttribute("uin", opt.uin);
      infoBlock.innerHTML = $xss(loadTemplete, "none");
      _show();
      var cusObj = cusInfos[opt.uin];  //从缓存中获取信息
      if(cusObj){
        infoBlock.innerHTML = $xss(fillContent(cusObj),"none");
        _show();
      }else{
        getInfo();
      }
    },500);
  }
  function getInfo(){
     var tempObj = {uin: opt.uin};
     var count = 0;
     /* @interface:166;个人主页左侧 */
     var infoUrl = "http://ext.paipai.com/profile/getsimpleprofile?callback=setCusTipsInfo&userid=" + opt.uin;
     var _infoRetCoder = $returnCode({url:infoUrl,frequence:2});     
     window.setCusTipsInfo = function(info){
       _infoRetCoder.report(true,info.ret);
       tempObj.nickName = $strTrim(info.nickname);  //昵称
       !tempObj.nickName && (tempObj.nickName = opt.uin);
       tempObj.horoscope = info.horoscope;  //星座
       var tagList = info.tagslist;  //标签
       var len = tagList.length;
       !tagList[len - 1] && (len -= 1);
       var tempTag = [];
       for(var i = 0; i < len; ++i){
         var tTag = $strTrim(tagList[i].tags);
         if(tTag == "") continue;
         tempTag.push("<em>" + tTag + "</em>");
       }
       tempObj.tagList = tempTag.join("");
       //城市
       if(info.province > "0" && info.city > "0"){
         var cityStr;
         try{
           cityStr = $regionGetStr(info.city);
         }catch(e){}
         if(cityStr){
           tempObj.locat = cityStr;
         }
       }
       //认证类型              
       if(info.authlevel == 1){
         tempObj.talentTypeName = talentNames[info.subauthlevel + ""];
       }else if(info.authlevel == 2){
         tempObj.talentTypeName = "明星店铺"; 
       }else{
         tempObj.talentTypeName = "";
       }
       if(++count == 4){
         cusInfos[opt.uin] = tempObj;
         infoBlock.innerHTML = $xss(fillContent(tempObj),"none");
         _show();
       }
     }
     $loadScript(infoUrl, "userBaseScript");
     
     /* @interface:151;获取关注信息 */
     var url = "http://ext.paipai.com/concern/concerninfo?callback=setCusTipsState&userid=" + opt.uin;
     var _retCoder = $returnCode({url:url,frequence:2});     
     window.setCusTipsState = function(info){
       _retCoder.report(true,info.ret);
       status[opt.uin] = info.data.state*1;
       tempObj.attNum = info.data.followNum;
       tempObj.fanNum = info.data.fansNum;
       tempObj.shaNum = info.data.shareNum;
       if(++count == 4){
         cusInfos[opt.uin] = tempObj;
         infoBlock.innerHTML = $xss(fillContent(tempObj),"none");
         _show();
       }
     };
     $loadScript(url, "rinfoStateScript");
     
     /* @interface:159;获取关注列表 */
     var attListUrl = "http://ext.paipai.com/concern/followlist?callback=setTipsAtt&pageid=1&pagesize=20&userid=" + opt.uin;
     var _attRetCoder = $returnCode({url:attListUrl,frequence:2}),
        tempAttList = [];
     window.setTipsAtt = function(info){
       _attRetCoder.report(true,info.ret);
       var attList = info.data.followList,
            attLen = attList.length;
       !attList[attLen - 1] && (attLen -= 1);
       for(var i = 0; i < attLen; ++i){
         var att = attList[i];
         tempAttList.push({"uin" : att.uin, "nickName" : att.nickName});
       }
       tempObj.attList = tempAttList;
       if(tempAttList.length < 4){  //关注人数不足4个,从达人列表拉取补充
         if(cusInfos["talent"]){
           ++count;
         }else{
           /* @interface:175;top达人 */
           var topTalUrl = "http://ext.paipai.com/talentchannel/gettoptalent?callback=setTipsTalent&optype=1&top=30&userid=" + opt.uin;
           var _tuRetCoder = $returnCode({url:topTalUrl,frequence:2});   
           window.setTipsTalent = function(info){
             _tuRetCoder.report(true,info.ret);
             var taList = info.topshare,
                  taLen = taList.length,
                  tempTaList = [];
             !taList[taLen - 1] && (taLen -= 1);
             for(var i = 0; i < taLen; ++i){
               var ta = taList[i];
               tempTaList.push({"uin" : ta.userid, "nickName" : ta.nickname});
             }
             cusInfos["talent"] = tempTaList;
             if(++count == 4){
               cusInfos[opt.uin] = tempObj;
               infoBlock.innerHTML = $xss(fillContent(tempObj),"none");
               _show();
             }
           };
           $loadScript(topTalUrl);
         }
       }else ++count;
       if(++count == 4){
          cusInfos[opt.uin] = tempObj;
          infoBlock.innerHTML = $xss(fillContent(tempObj),"none");
          _show();
       }
     };
     $loadScript(attListUrl, "tipsAttScript");
  }
  function fillContent(cusObj){
      var qqNum = parseInt(cusObj.uin.replace(/^o0/g,""), 10);
      var logoUrl = 'http://qlogo'+(parseInt(qqNum)%4+1)+'.store.qq.com/qzone/'+qqNum+'/'+qqNum+'/50';
      //填充头像与链接
      var temp = templete.replace(/{#uin#}/g,cusObj.uin).replace("{#logoUrl#}",logoUrl).replace("{#nickName#}",$strSubGB(cusObj.nickName,0,16,"..."));
      //填充达人认证
      var talentType = talentMarks[cusObj.uin],
          talentTitle = "", 
          talentClassName = "";
      if(sysTalents[cusObj.uin]){  //官方认证号       
         talentClassName = "mj-icon mj-icon-a";
         talentTitle = "拍拍认证";
         cusObj.talentTypeName = "拍拍认证";
      }else if(talentType != null && (typeof talentType != 'undefined')){
        switch(talentType + ""){
          case "1" :
            talentClassName = "mj-icon mj-icon-a";
            talentTitle = "拍拍认证-购物达人";
          break;
          case "2" :
            talentClassName = "mj-icon mj-icon-b";
            talentTitle = "拍拍认证-明星店铺";
          break;
        }
      }
      temp = temp.replace("{#talentTitle#}", talentTitle).replace("{#talentClass#}", talentClassName).replace("{#talentType#}", cusObj.talentTypeName);
      temp = temp.replace("{#locat#}", cusObj.locat).replace("{#attNum#}", cusObj.attNum).replace("{#fanNum#}",cusObj.fanNum).replace("{#shaNum#}",cusObj.shaNum);
      temp = temp.replace("{#tagList#}", cusObj.tagList);
      var horoDisplay = "none";
      if(cusObj.horoscope && cusObj.horoscope > 0){
        temp = temp.replace("{#horo#}", xzs[cusObj.horoscope]);
        horoDisplay = "";
      }
      temp = temp.replace("{#horoDisplay#}",horoDisplay);
      var locatDisplay = "";
      !cusObj.locat && (locatDisplay = "none");
      temp = temp.replace("{#locatDpMark#}", locatDisplay);
      var tagDisplay = "";
      if(!cusObj.tagList || cusObj.tagList.length == 0){
        tagDisplay = "none";
      }
      temp = temp.replace("{#tagDpMark#}", tagDisplay);
      var tempAtts = [];
      if(cusObj.attList){
        var ranAttList = randomList(cusObj.attList, 4);
        for(var j = 0, len = ranAttList.length; j < len; ++j){
          var ra = ranAttList[j];
          tempAtts.push(peTemplete.replace(/{#uin#}/g,ra.uin).replace(/{#nickName#}/g,ra.nickName));
        }
      }
      var tempLen = tempAtts.length,
          talents = cusInfos["talent"];
      if(tempLen < 4 && talents){
        var tempTaList = randomList(talents, Math.min(talents.length, 4) - tempLen);
        for(var j = 0, len = tempTaList.length; j < len; ++j){
          var ra = tempTaList[j];
          tempAtts.push(peTemplete.replace(/{#uin#}/g,ra.uin).replace(/{#nickName#}/g,ra.nickName));
        }
      }
      temp = temp.replace("{#otherAtt#}", tempAtts.join(""));
      return temp;
  }
  function _show(){
    _showAtt(); 
    infoBlock.style.display = "block";
    var pageSh = $getPageScrollHeight();
    if(opt.showArr){
      $display("cusInfoArrow");
      infoBlock.style.left = (opt.left - 28 + opt.width / 2) + "px";
      if(opt.top - infoBlock.offsetHeight - 10 > pageSh){
        $id("cusInfoArrow").className = "arrow";
        infoBlock.style.top = (opt.top - infoBlock.offsetHeight - opt.height + opt.offsetUp + 10) + "px";
      }else{
        $id("cusInfoArrow").className = "arrow_up";
        infoBlock.style.top = (opt.top + opt.height + opt.offsetDown + 12) + "px";
      }
    }else{
      $displayHide("cusInfoArrow");
      var oleft = 8;
      $isBrowser("ie6") && (oleft = 10);
      infoBlock.style.left = (opt.left - oleft) + "px";
      infoBlock.style.top = (opt.top - 10) + "px";
    }
  }
  function _showAtt(){  //显示关注状态    
    if($id("cusInfoAttBlock")){
      if(opt.myUin == opt.uin){
         $displayHide("cusInfoAttBlock");
      }else{
        $display("cusInfoAttBlock");
        if(status[opt.uin] == 1){
           $displayHide("cusInfoAttBtn");
           $display("cusInfoCanAttBtn");
        }else{
           $displayHide("cusInfoCanAttBtn");
           $display("cusInfoAttBtn");
        }
      }
    }
  }
  function randomList(list, size){
    var num = Math.min(size, list.length);
    list.sort(function(){return 0.5 - Math.random();});
    return list.slice(0, num);
  };
  function hide(){
    isShow = false;
    window.setTimeout(function(){
      if(isShow) return;
      infoBlock && (infoBlock.style.display = "none");
    },500);    
  }
  
  CusInfoObj = window['pp_mini_cus_info_obj'] =  {
    show : function(option){
      show(option);
    },
    hide : hide
  };
  CusInfoObj.show(option);
}
function $cutdownFloat(opt) {
    var option = {
        time: 0,
        title: "提示",
        html: "",
        left: "",
        top: "",
        width: '300',
        height: "",
        fix: false, //是否固定居中随屏幕滚动，如果为true则left和top无效
        style: "stand", //stand\none\poptip
        cover: false, //显示覆盖背景
        leaver: 2,
        showTime: false
    };
    option = $extend(option, opt);
    option.onClose = function () { clearInterval(window.cutdownInterval); return true; }  //关闭事件
    var autoClose = parseInt(option.time) == 0 ? false : true;
    option.html = '<table style="width:100%;height:100%"><tr><td style="vertical-align:top;width:32px;"><span class="msg3-icon-info"></span></td><td>' + option.html + '</td></tr><tr><td style="text-align:center;" colspan=2><br /><p><button id="__btn__ok">确　定</button><span id="__seconds__" style="margin-left:10px;display:none;">' + (autoClose ? parseInt(option.time) / 1000 : '') + '</span></p></td></tr></table>';
    var alertFloat = $float(option);
    if (option.showTime) {
        $$("#__seconds__").show();
    }
    if (autoClose) {
        window.cutdownInterval = setInterval(function () {
            var time = parseInt(option.time);
            if (time > 1000) {
                option.time -= 1000;
                $$("#__seconds__").html(time / 1000 - 1);
            } else {
                alertFloat.close();
            }
        }, 1000);
    }
    $$("#__btn__ok").click(function () {
        alertFloat.close();
    });
}
$cxCalculator=function(option,itemFee){
//车险保费计算函数
	var equtions={
		thirdParty:function(option){
			var province=option.info.province;
			var benefit=option.tpBenefit;
			//第三者责任保险
			var map={
				"北京市":[516,746,850,924,1043,1252,1630],"天津市":[568,820,935,1016,1147,1376,1792],"河北省":[561,811,925,1005,1135,1362,1774],"山西省":[604,873,994,1080,1219,1463,1906],"内蒙古自治区":[604,873,994,1080,1219,1463,1906],"辽宁省":[625,902,1029,1117,1262,1514,1972],"大连":[596,862,982,1067,1205,1445,1882],"吉林省":[686,992,1130,1229,1386,1663,2166],"黑龙江省":[686,992,1130,1229,1386,1663,2166],"上海市":[533,768,877,952,1075,1289,1680],"江苏省":[567,817,933,1013,1144,1372,1787],"浙江省":[573,827,942,1024,1156,1387,1806],"宁波":[686,992,1130,1229,1386,1663,2166],"安徽省":[687,992,1131,1230,1388,1665,2169],"福建省":[561,811,925,1005,1135,1362,1774],"江西省":[686,992,1130,1229,1386,1663,2166],"山东省":[604,873,994,1080,1219,1463,1906],"青岛":[596,862,982,1067,1205,1445,1882],"河南省":[598,863,985,1070,1208,1450,1887],"湖北省":[625,902,1029,1117,1262,1514,1972],"湖南省":[686,992,1130,1229,1386,1663,2166],"广东省":[543,782,892,970,1095,1315,1711],"深圳":[651,939,1071,1165,1315,1576,2052],"广西省":[561,811,925,1005,1135,1362,1774],"海南省":[567,818,933,1013,1145,1373,1788],"重庆市":[604,873,994,1080,1219,1463,1906],"四川省":[604,873,994,1080,1219,1463,1906],"贵州省":[604,873,994,1080,1219,1463,1906],"陕西省":[625,902,1029,1117,1262,1514,1972],"云南省":[594,856,976,1061,1197,1437,1871],"甘肃省":[625,902,1029,1117,1262,1514,1972],"青海省":[625,902,1029,1117,1262,1514,1972],"新疆维吾尔自治区":[596,862,982,1067,1205,1445,1882]
			};
			var pMap=[5,10,15,20,30,50,100];
			for(var i=0;i<pMap.length-1;i++){
				if(pMap[i]<=benefit&&pMap[i+1]>benefit){
					break;
				}
			}
			return map[province]?map[province][i]:0;
		},
		carDamnify:function(option){
			var province=option.info.province;
			var price=option.info.price;
			var year=option.info.year;
			//车辆损失保险
			var map={
				"北京市":[[459,1.0880],[437,1.0370],[432,1.0285],[445,1.0540]],"天津市":[[527,1.2495],[502,1.1900],[497,1.1815],[512,1.2155]],"河北省":[[505,1.1985],[480,1.1390],[476,1.1305],[490,1.1645]],"山西省":[[527,1.2495],[502,1.1900],[497,1.1815],[512,1.2155]],"内蒙古自治区":[[536,1.2750],[510,1.2155],[505,1.1985],[521,1.2410]],"辽宁省":[[536,1.2750],[510,1.2155],[505,1.1985],[521,1.2410]],"大连":[[536,1.2750],[510,1.2155],[505,1.1985],[521,1.2410]],"吉林省":[[536,1.2750],[510,1.2155],[505,1.1985],[521,1.2410]],"黑龙江省":[[536,1.2750],[510,1.2155],[505,1.1985],[521,1.2410]],"上海市":[[505,1.1985],[480,1.1390],[476,1.1305],[490,1.1645]],"江苏省":[[513,1.2155],[489,1.1645],[484,1.1475],[499,1.1815]],"浙江省":[[482,1.1475],[459,1.0880],[454,1.0795],[467,1.1135]],"宁波":[[482,1.1475],[459,1.0880],[454,1.0795],[467,1.1135]],"安徽省":[[536,1.2750],[510,1.2155],[505,1.1985],[521,1.2410]],"福建省":[[482,1.1475],[459,1.0880],[454,1.0795],[467,1.1135]],"江西省":[[550,1.3090],[524,1.2410],[518,1.2325],[534,1.2665]],"山东省":[[536,1.2750],[510,1.2155],[505,1.1985],[521,1.2410]],"青岛":[[536,1.2750],[510,1.2155],[505,1.1985],[521,1.2410]],"河南省":[[536,1.2750],[510,1.2155],[505,1.1985],[521,1.2410]],"湖北省":[[527,1.2495],[502,1.1900],[497,1.1815],[512,1.2155]],"湖南省":[[527,1.2495],[502,1.1900],[497,1.1815],[512,1.2155]],"广东省":[[459,1.0880],[437,1.0370],[432,1.0285],[445,1.0540]],"深圳":[[527,1.2495],[502,1.1900],[497,1.1815],[512,1.2155]],"广西省":[[472,1.1220],[449,1.0710],[445,1.0540],[459,1.0880]],"海南省":[[459,1.0880],[437,1.0370],[432,1.0285],[445,1.0540]],"重庆市":[[482,1.1475],[459,1.0880],[454,1.0795],[467,1.1135]],"四川省":[[482,1.1475],[459,1.0880],[454,1.0795],[467,1.1135]],"贵州省":[[527,1.2495],[502,1.1900],[497,1.1815],[512,1.2155]],"陕西省":[[550,1.3090],[524,1.2410],[518,1.2325],[534,1.2665]],"云南省":[[527,1.2495],[502,1.1900],[497,1.1815],[512,1.2155]],"甘肃省":[[550,1.3090],[524,1.2410],[518,1.2325],[534,1.2665]],"青海省":[[505,1.1985],[480,1.1390],[476,1.1305],[490,1.1645]],"新疆维吾尔自治区":[[459,1.0880],[437,1.0370],[432,1.0285],[445,1.0540]]
			}
			var yMap=[0,1,2,6];
			for(var i=0;i<yMap.length-1;i++){
				//按年份确定年份归类
				if(yMap[i]<=year&&yMap[i+1]>year){
					break;
				}
			}
			var fee=0;
			if(map[province]){
				var item=map[province][i];
				//price万单位，item[1]是%
				fee=item[0]+item[1]*price*10000*0.01;
			}
			return fee;
		},
		driver:function(option){
			var province=option.info.province;
			var benefit=option.dBenefit;
			//司机责任险
			var map={
				"北京市":1.0540,"天津市":1.2155,"河北省":1.1645,"山西省":1.2155,"内蒙古自治区":1.2410,"辽宁省":1.2410,"大连":1.2410,"吉林省":1.2410,"黑龙江省":1.2410,"上海市":1.1645,"江苏省":1.1815,"浙江省":1.1135,"宁波":1.1135,"安徽省":1.2410,"福建省":1.1135,"江西省":1.2665,"山东省":1.2410,"青岛":1.2410,"河南省":1.2410,"湖北省":1.2155,"湖南省":1.2155,"广东省":1.0540,"深圳":1.2155,"广西省":1.0880,"海南省":1.0540,"重庆市":1.1135,"四川省":1.1135,"贵州省":1.2155,"陕西省":1.2665,"云南省":1.2155,"甘肃省":1.2665,"青海省":1.1645,"新疆维吾尔自治区":1.0540
			}
			//数值是%,额度是万单位
			return map[province]?map[province]*benefit*10000*0.01:0;
		},
		passenger:function(option){
			var province=option.info.province;
			var benefit=option.pBenefit;
			//乘客责任险
			var map={
				"北京市":0.2210,"天津市":0.2210,"河北省":0.2210,"山西省":0.2295,"内蒙古自治区":0.2295,"辽宁省":0.2295,"大连":0.2210,"吉林省":0.2210,"黑龙江省":0.2295,"上海市":0.2295,"江苏省":0.2210,"浙江省":0.2210,"宁波":0.2295,"安徽省":0.2210,"福建省":0.2210,"江西省":0.2210,"山东省":0.2295,"青岛":0.2210,"河南省":0.2210,"湖北省":0.2295,"湖南省":0.2295,"广东省":0.2295,"深圳":0.0850,"广西省":0.2210,"海南省":0.2210,"重庆市":0.2210,"四川省":0.2210,"贵州省":0.2210,"陕西省":0.2210,"云南省":0.2210,"甘肃省":0.2210,"青海省":0.2210,"新疆维吾尔自治区":0.2295
			}
			//数值是%，乘客固定4座来计算,额度是万单位
			return map[province]?map[province]*benefit*10000*0.01*(option.seat-1):0;
		},
		carLosing:function(option){
			var province=option.info.province;
			var price=option.info.price;
			var year=option.info.year;
			var date=option.info.date;
			//车辆盗抢保险
			var map={
				"北京市":[102.00,0.4505],"天津市":[102,0.3570],"河北省":[102,0.3570],"山西省":[102,0.3910],"内蒙古自治区":[102,0.3995],"辽宁省":[102,0.4165],"大连":[102,0.3400],"吉林省":[102,0.4760],"黑龙江省":[102,0.4760],"上海市":[102,0.3485],"江苏省":[102.00,0.3570],"浙江省":[102.00,0.3485],"宁波":[102.00,0.3570],"安徽省":[102,0.3570],"福建省":[102,0.4250],"江西省":[102,0.3570],"山东省":[102.00,0.4165],"青岛":[102.00,0.4165],"河南省":[102.00,0.3570],"湖北省":[102,0.4165],"湖南省":[102,0.3485],"广东省":[102.00,0.4165],"深圳":[102.00,0.4420],"广西省":[102,0.3570],"海南省":[102.00,0.4250],"重庆市":[102,0.4760],"四川省":[102.00,0.4165],"贵州省":[102,0.3570],"陕西省":[102.00,0.3570],"云南省":[102,0.3570],"甘肃省":[102,0.3570],"青海省":[102,0.6715],"新疆维吾尔自治区":[102,0.3910]
			}
			var fee=0;
			if(map[province]){
				var now=new Date();
				var buy=$parseDate(year+'-'+date+'-01');
				var month=parseInt((now.valueOf()-buy)/(86400000*30));
				var item=map[province];
				//车价需要折旧，一个月减0.006
				fee=item[0]+price*10000*(1-month*0.006)*item[1]*0.01;
			}
			return fee;
		},
		glass:function(option){
			var province=option.info.province;
			var price=option.info.price;
			var imp=option.imp;
			//玻璃破碎保险
			var map={
				"北京市":[0.1615,0.2635],"天津市":[0.1615,0.2720],"河北省":[0.1615,0.2635],"山西省":[0.1615,0.2550],"内蒙古自治区":[0.1615,0.2635],"辽宁省":[0.1615,0.2635],"大连":[0.1615,0.2550],"吉林省":[0.1615,0.2635],"黑龙江省":[0.1615,0.2635],"上海市":[0.1615,0.2635],"江苏省":[0.1615,0.2635],"浙江省":[0.1785,0.3060],"宁波":[0.1615,0.2635],"安徽省":[0.1615,0.2635],"福建省":[0.1615,0.2635],"江西省":[0.1615,0.2635],"山东省":[0.1615,0.2635],"青岛":[0.1615,0.2550],"河南省":[0.1615,0.2635],"湖北省":[0.1615,0.2635],"湖南省":[0.1615,0.2720],"广东省":[0.1700,0.2805],"深圳":[0.1700,0.2805],"广西省":[0.1615,0.2720],"海南省":[0.1615,0.2720],"重庆市":[0.1615,0.2720],"四川省":[0.1615,0.2550],"贵州省":[0.1615,0.2550],"陕西省":[0.1615,0.2550],"云南省":[0.1530,0.2550],"甘肃省":[0.1615,0.2635],"青海省":[0.1530,0.2550],"新疆维吾尔自治区":[0.1700,0.2890]
			}
			//是否进口玻璃，国产：1,进口：2
			imp=imp?imp:0;
			return map[province]&&imp?map[province][imp-1]*price*10000*0.01:0;
		},
		scrape:function(option){
			var price=option.info.price;
			var year=option.info.year;
			var benefit=option.sBenefit;
			var date=option.info.date;
			//车身划痕损失保险
			//map[车龄][保额][车价]
			var map=[[[340 ,497,723],[485 ,765,935],[646 ,995,1275],[969 ,1513,1913]],[[519 ,765,935],[723 ,1148,1275],[1105 ,1530,1700],[1615 ,2210,2550]]];
			var bMap=[0,2000,5000,10000,20000];
			for(var bIndex=0;bIndex<bMap.length-1;bIndex++){
				if(bMap[bIndex]<=benefit&&bMap[bIndex+1]>benefit){
					break;
				}
			}
			var now=new Date();
			var buy=$parseDate(year+'-'+date+'-01');
			//2年车龄分界
			var yIndex=now.valueOf()-buy>=63072000000?1:0;
			var pMap=[0,30,50];
			for(var i=0;i<pMap.length-1;i++){
				if(pMap[i]<=price&&pMap[i+1]>price){
					break;
				}
			}
			return map[yIndex][bIndex][i];
		},
		noDeductible:function(key,fee){
			//不计免赔
			var map={
				"scrape":0.15,
				"carLosing":0.20,
				"passenger":0.15,
				"driver":0.15,
				"carDamnify":0.15,
				"thirdParty":0.15
			}
			return map[key]?fee*map[key]:0;
		}
	}
	if(itemFee&&equtions[itemFee]){
		//只计算单项费用
		return equtions[itemFee](option);
	}
	var ins=option.ins;
	var fee=0;
	var discount=option.discount?Number(option.discount):1;
	var feeMap={};
	//常规险种计算
	for(var i=0;i<ins.length;i++){
		var key=ins[i];
		feeMap[key]=parseInt(equtions[key](option)*discount);
		fee=fee+feeMap[key];
	}
	//不计赔付
	if(option.nd){
		for(var i=0;i<option.nd.length;i++){
			var key=option.nd[i];
			feeMap['nd_'+key]=parseInt(equtions.noDeductible(key,feeMap[key])*discount);
			fee=fee+feeMap['nd_'+key];
		}
	}
	option.feeMap=feeMap;
	option.fee=fee;
	return fee;
	
}
function $deserializeCxPlan(xmlStr){
	//解析车险套餐xml
	var plan={ins:[],nd:[],info:{},feeMap:{},jq:{fee:0,carTax:0},rawMap:[]};
	var benefitMap={
		"thirdParty":"tpBenefit",
		"driver":"dBenefit",
		"passenger":"pBenefit",
		"scrape":"sBenefit"
	};
	var keyMap={
		"thirdParty":"第三者责任保险",
		"carDamnify":"机动车损失保险",
		"driver":"司机座位责任险",
		"passenger":"乘客座位责任险",
		"scrape":"车身划痕损失险",
		"carLosing":"机动车盗抢保险",
		"glass":"玻璃单独破碎险",
		"nd_thirdParty":"不计免赔率特约条款-第三者责任保险",
		"nd_carDamnify":"不计免赔率特约条款-机动车损失保险",
		"nd_carLosing":"不计免赔率特约条款-机动车盗抢保险",
		"nd_passenger":"不计免赔率特约条款-乘客座位责任险",
		"nd_driver":"不计免赔率特约条款-司机座位责任险",
		"nd_scrape":"不计免赔率特约条款-车身划痕损失险"
	}
	var xml=$loadXmlString(xmlStr).documentElement;
	for(var i=0;i<xml.childNodes.length;i++){
		var item=xml.childNodes[i];
		if(item.nodeType!=1){
			continue;
		}
		var tn=item.tagName.toLowerCase();
		if(tn=='vehicle_info'){
			for(var j=0;j<item.childNodes.length;j++){
				var item2=item.childNodes[j];
				if(item2.nodeType!=1){
					continue;
				}
				var v=item2.firstChild.nodeValue;
				switch(item2.tagName.toLowerCase()){
					case 'vehicle_license_code':
					plan.info.vehicleCode=v;
					break;
					case 'vehicle_price':
					plan.info.price=Number(v);
					break;
					case 'city_name':
					plan.info.city=v;
					break;
					case 'city_code':
					plan.info.cityCode=v;
					break;
					case 'province_name':
					plan.info.province=v;
					break;
					case 'province_code':
					plan.info.provinceCode=v;
					break;
					case 'vehicle_first_register_date':
					plan.info.regDate=v;
					break;
					case 'vehicle_year':
					plan.info.year=v;
					break;
					case 'vehicle_month':
					plan.info.date=v;
					break;
					case 'insured_name':
					plan.info.owner=v;
					break;
					case 'vehicle_auto_model_chn_code':
					plan.info.model=v;
					break;
					case 'vehicle_frame_no':
					plan.info.vin=v;
					break;
					case 'vehicle_engine_no':
					plan.info.engine=v;
					break;
					case 'vehicle_seats':
					plan.seat=Number(v);
					break;
					case 'transfer_date':
					plan.info.trans=v;
					break;
				}
			}
		}else if(tn=='commerce'){
			for(var o=0;o<item.childNodes.length;o++){
				var item2=item.childNodes[o];
				var tn2=item2.tagName.toLowerCase();
				if(tn2=='duty_list'){
					for(var j=0;j<item2.childNodes.length;j++){
						var item3=item2.childNodes[j];
						var temp={};
						for(var k=0;k<item3.childNodes.length;k++){
							var item4=item3.childNodes[k];
							temp[item4.tagName.toLowerCase()]=item4.firstChild.nodeValue;
						}
						plan.rawMap.push(temp);
						plan.feeMap[temp.duty_key]=Number(temp.duty_premium);
						if(temp.duty_key.indexOf('nd_')==0){
							plan.nd.push(temp.duty_key.replace('nd_',''));
						}else{
							plan.ins.push(temp.duty_key);
							if(temp.duty_key=='glass'){
								plan.imp=temp.duty_insured_amount=='国产玻璃'?1:2;
							}else if(temp.duty_key=='driver'||temp.duty_key=='passenger'){
								plan.seat=Number(temp.duty_seats);
							}
							if(benefitMap[temp.duty_key]){
								plan[benefitMap[temp.duty_key]]=Number(temp.duty_insured_amount);
							}
						}
						
					}
				}else if(tn2=='basic_info'){
					for(var j=0;j<item2.childNodes.length;j++){
						var item3=item2.childNodes[j];
						if(item3.nodeType!=1){
							continue;
						}
						var tn3=item3.tagName.toLowerCase();
						var v=item3.firstChild.nodeValue;
						switch(tn3){
							case 'insurance_pay_fee':
							plan.fee=Number(v);
							break;
							case 'insurance_begin_time':
							plan.info.validDate=v;
							break;
							case 'package_type':
							plan.planName=v;
							break;
							case 'policy_no':
							plan.policyNo=v;
							break;
							case 'apply_policy_no':
							plan.applyPolicyNo=v;
							break;
							case 'expire_pay_time':
							plan.expirePayTime=v;
							break;
						}
					}
				}
			}
		}else if(tn=='insured_info'){
			for(var j=0;j<item.childNodes.length;j++){
				var item2=item.childNodes[j];
				if(item2.nodeType!=1){
					continue;
				}
				var v=item2.firstChild.nodeValue;
				switch(item2.tagName.toLowerCase()){
					case 'insured_name':
					plan.info.owner=v;
					break;
					case 'insured_certificate_type':
					plan.info.idType=v;
					break;
					case 'insured_certificate_no':
					plan.info.idNo=v;
					break;
					case 'insured_mobile_no':
					plan.info.mobile=v;
					break;
				}
			}
		}else if(tn=='complus'){
			plan.info.jq=1;
			for(var o=0;o<item.childNodes.length;o++){
				var item2=item.childNodes[o];
				var tn2=item2.tagName.toLowerCase();
				if(tn2=='duty_list'){
					for(var j=0;j<item2.childNodes.length;j++){
						var item3=item2.childNodes[j];
						var temp={};
						for(var k=0;k<item3.childNodes.length;k++){
							var item4=item3.childNodes[k];
							temp[item4.tagName.toLowerCase()]=item4.firstChild.nodeValue;
						}
						plan.jq[temp.duty_key]=Number(temp.duty_premium);
					}
				}else if(tn2=='basic_info'){
					for(var j=0;j<item2.childNodes.length;j++){
						var item3=item2.childNodes[j];
						if(item3.nodeType!=1){
							continue;
						}
						var tn3=item3.tagName.toLowerCase();
						var v=item3.firstChild.nodeValue;
						switch(tn3){
							case 'insurance_pay_fee':
							plan.jq.fee=Number(v);
							break;
							case 'insurance_begin_time':
							plan.jq.validDate=v;
							break;
							case 'policy_no':
							plan.jq.policyNo=v;
							break;
							case 'apply_policy_no':
							plan.jq.applyPolicyNo=v;
							break;
							case 'expire_pay_time':
							plan.jq.expirePayTime=v;
							break;
						}
					}
				}
			}
		}
	}
	return plan;
}
function $deserializeInsForm(xmlStr){
	try{
		var xml=$loadXmlString(xmlStr);
		if(!xml&&!xml.documentElement){
			return null;
		}
		xml=xml.documentElement.firstChild;
		var form={data:{},insured:[]};
		for(var i=0;i<xml.childNodes.length;i++){
			var node=xml.childNodes[i];
			var ntn=node.tagName.toUpperCase();
			if(ntn!='INSUREDLIST'&&ntn!='TRAVEL'){
				form.data[node.tagName.toUpperCase()]=node.firstChild?$xss(node.firstChild.data,'htmlEp').replace(/\&\#45\;/g,'-'):"";
			}else if(ntn=='TRAVEL'){
				form.travel={};
				for(var j=0;j<node.childNodes.length;j++){
					var node2=node.childNodes[j];
					form.travel[node2.tagName.toUpperCase()]=node2.firstChild?$xss(node2.firstChild.data,'htmlEp').replace(/\&\#45\;/g,'-'):"";
				}
			}else if(ntn=='INSUREDLIST'){
				for(var j=0;j<node.childNodes.length;j++){
					var node2=node.childNodes[j];
					var insured={};
					for(var k=0;k<node2.childNodes.length;k++){
						var node3=node2.childNodes[k];
						var tn=node3.tagName.toUpperCase();
						if(tn!='BENEFITORLIST'&&tn!='HEALTHLIST'&&tn!='SUBINSURANCELIST'){
							insured[node3.tagName.toUpperCase()]=node3.firstChild?$xss(node3.firstChild.data,'htmlEp').replace(/\&\#45\;/g,'-'):"";
						}else if(tn=='BENEFITORLIST'){
							insured.benefit=[];
							for(var p=0;p<node3.childNodes.length;p++){
								var node4=node3.childNodes[p];
								var benefit={};
								for(var r=0;r<node4.childNodes.length;r++){
									var node5=node4.childNodes[r];
									benefit[node5.tagName.toUpperCase()]=node5.firstChild?$xss(node5.firstChild.data,'htmlEp').replace(/\&\#45\;/g,'-'):"";
								}
								insured.benefit.push(benefit);
							}
						}else if(tn=='HEALTHLIST'){
							insured.health={};
							for(var p=0;p<node3.childNodes.length;p++){
								var node4=node3.childNodes[p];
								var code=$xss(node4.getAttribute('ID'),'htmlEp').replace(/\&\#45\;/g,'-');
								var value=$xss(node4.firstChild.data,'htmlEp').replace(/\&\#45\;/g,'-');
								insured.health[code]=value;
							}
						}else if(tn='SUBINSURANCELIST'){
							insured.subinsurance=[];
							for(var p=0;p<node3.childNodes.length;p++){
								var node4=node3.childNodes[p];
								var subins={};
								for(var r=0;r<node4.childNodes.length;r++){
									var node5=node4.childNodes[r];
									subins[node5.tagName.toUpperCase()]=node5.firstChild?$xss(node5.firstChild.data,'htmlEp').replace(/\&\#45\;/g,'-'):"";
								}
								insured.subinsurance.push(subins);
							}
						}
					}
					form.insured.push(insured);
				}
			}
		}
		return form;
	}catch(ex){
		return null;
	}
}
function $dialog(opts) {
	var options = {
		head : '网购提示',
		title : '',
		content : '',
		width : 450,
		height : 140,
		cover : true,
		yesShow : true,
		noShow : false,
		yesText : '确定',
		noText : '取消',
		closeClick : function() {
			return true;
		},
		yesClick : function() {
			return true;
		},
		noClick : function() {
			return true;
		}
	};
	for(var key in opts) {
		options[key] = opts[key];
	}
	//计数器
	typeof $dialog.counter == 'undefined' ? $dialog.counter = 0 : $dialog.counter++;
	var _t = '<div class="layer_inner"><div class="hd"><h3>{#head#}</h3><span class="close" id="wg_close_btn_{#counter#}"><a href="javascript:;">×</a></span></div><div class="bd"><i class="icon_tips_32 icon_32_error"></i><div class="tips_cont"><h4>{#title#}</h4>{#content#}<div class="tips_cont_btn"><a id="wg_ok_btn_{#counter#}" href="javascript:;" class="mod_btn mod_btn_red" {#yesShow#}><i class="bod_left"></i><span class="inner">{#yesText#}</span><i class="bod_right"></i></a>&nbsp;<a id="wg_no_btn_{#counter#}" href="javascript:;" class="mod_btn" {#noShow#}><i class="bod_left"></i><span class="inner">{#noText#}</span><i class="bod_right"></i></a></div></div></div></div>';
	var _win = $float({
		title : '',
		cName : 'layer_common',
		html : _t.replace(/{#counter#}/g, $dialog.counter).replace(/{#yesShow#}/g, options.yesShow ? '' : ' style="display:none"').replace(/{#noShow#}/g, options.noShow ? '' : ' style="display:none"').replace(/{#yesText#}/g, options.yesText).replace(/{#noText#}/g, options.noText).replace(/{#title#}/g, options.title).replace(/{#head#}/g, options.head).replace(/{#content#}/g, '<p>' + options.content + '</p>'),
		fix : true, //是否固定居中随屏幕滚动，如果为true则left和top无效
		style : "", //stand\none\poptip
		cover : options.cover, //显示覆盖背景
		width : options.width,
		height : options.height,
		cssUrl : '',
		onInit : function() {
			return true;
		},
		onClose : function() {
			return true;
		}, //关闭事件
		dragble : false
	});
	$id('wg_close_btn_' + $dialog.counter).onclick = function() {
		if(options.closeClick()) {
			fCloseWin();
		}
		return false;
	};
	if(options.yesShow) {
		$id('wg_ok_btn_' + $dialog.counter).onclick = function() {
			if(options.yesClick()) {
				fCloseWin();
			}
			return false;
		};
	}
	if(options.noShow) {
		$id('wg_no_btn_' + $dialog.counter).onclick = function() {
			if(options.noClick()) {
				fCloseWin();
			}
			return false;
		};
	}
	function fCloseWin() {
		try {
			$id('wg_ok_btn_' + $dialog.counter).onclick = null;
			$id('wg_no_btn_' + $dialog.counter).onclick = null;
			$id('wg_close_btn_' + $dialog.counter).onclick = null;
		}
		catch(e) {
		}
		_win.close();
	}

}
function $district(opts) {
	//地址栏组件
	var option = {
		"ids" : [], //必选，select控件的id。
		"code" : "", //可选，地区唯一编号,多级编号用逗号分隔。
		"clsName" : "", //可选，select控件的样式类名
		"onChange" : function(opt, elm, oldvalue) {
		}//可选，下拉框选项变化时触发
	};
	for(var k in opts) {
		option[k] = opts[k];
	}
	option.code = option.code.split(",").reverse();
	//去除直辖市的二级地区id，110000  北京市  120000  天津市   500000  重庆市 310000  上海市
	/*
	 for (var i = 0, l = option.code.length; i < l; i++) {
	 if ([110000, 120000, 500000, 310000].join(',').indexOf(option.code[i]) != -1) {
	 option.code.splice(1, 1);
	 break;
	 }
	 }
	 */
	var _elm1, _elm2, _elm3;
	if(!window['bbc.districtdata.js']) {
		$loadScript('http://static.gtimg.com/js/data/bbc.districtdata.js?v=1.0.2', 'getdistrictdata', {
			isToken : false,
			onload : function() {
				init();
			},
			charset : "utf-8"
		});
	}
	else {
		init();
	}
	return;
	//初始化控件
	function init() {
		var _rd = bbc_district_data;
		if(!_rd) {
			return;
		}
		_elm1 = $id(option.ids[0]);
		_elm2 = $id(option.ids[1]);
		_elm3 = $id(option.ids[2]);
		if(_elm1.inited) {
			setData(option.code);
			return;
		}
		_elm2.disid = _elm3.disid = _elm1.id;
		_elm1.option = option;
		_elm1.onchange = function() {
			var opt = this.option, value = this.value;
			c1(opt, value);
			if(opt._value1 != value && typeof opt.onChange == "function") {
				opt.onChange(opt, this, opt._value1);
				opt._value1 = value;
			}
		};
		_elm2.onchange = function() {
			var opt = $id(this.disid).option, value = this.value;
			c2(opt, value);
			if(opt._value2 != value && typeof opt.onChange == "function") {
				opt.onChange(opt, this, opt._value2);
			}
		};
		_elm3.onchange = function() {
			var opt = $id(this.disid).option, value = this.value;
			if(opt._value3 != value && typeof opt.onChange == "function") {
				opt.onChange(opt, this, opt._value3);
			}
		};
		if(option.clsName) {
			_elm1.className = option.clsName;
			_elm2.className = option.clsName;
			_elm3.className = option.clsName;
		}
		_elm2.style.display = 'none';
		_elm3.style.display = 'none';
		//初始化省份下拉框
		$addSelect(_elm1, ' - 选择省 - ', -1);
		for(var key in _rd) {
			$addSelect(_elm1, typeof _rd[key] == 'string' ? _rd[key] : _rd[key][0], key);
		}
		//设置数据
		setData(option.code);
		//初始化完成
		_elm1.inited = true;
		//防止内存泄漏
		_elm1 = null;
		_elm2 = null;
		_elm3 = null;
	}

	//设置数据
	function setData(code) {
		if(code.length > 0 && code[0]) {
			_elm1.value = code[0];
			c1(option, code[0]);
			if(code.length > 1 && code[1]) {
				_elm2.value = code[1];
				c2(option, code[1]);
				if(code.length > 2 && code[2]) {
					_elm3.value = code[2];
				}
				else {
					_elm3.value = "-1";
				}
			}
			else {
				_elm2.value = "-1";
				c2(option, '-1');
			}
		}
		else {
			_elm1.value = "-1";
			c1(option, '-1');
		}
	}

	function c1(opt, code) {
		var r1 = code, o = $id(opt.ids[1]), _rd = bbc_district_data;
		o.options.length = 0;
		if( typeof _rd[r1] == "object" && _rd[r1].length > 1 && !isEmptyObject(_rd[r1][1])) {
			var d = _rd[r1][1], bLevel3 = false;
			for(var key in d) {
				$addSelect(o, typeof d[key] == 'string' ? d[key] : d[key][0], key);
				if( typeof d[key] == "object" && d[key].length > 1) {
					bLevel3 = true;
				}
			}
			if(bLevel3) {
				o.insertBefore(o.options[o.options.length] = new Option(' - 选择市 - ', -1), o.options[0]);
			}
			else {
				o.insertBefore(o.options[o.options.length] = new Option(' - 选择区 - ', -1), o.options[0]);
			}
			//设置默认选择
			o.selectedIndex = 0;
			c2(opt, '-1');
			o.style.display = '';
		}
		else {
			o.style.display = 'none';
			$id(opt.ids[2]).style.display = 'none';
		}
		o = null;
	}

	function c2(opt, code) {
		var r1 = $id(option.ids[0]).value, r2 = code, o = $id(opt.ids[2]), _rd = bbc_district_data;
		o.options.length = 0;
		if( typeof _rd[r1] == "object" && _rd[r1].length > 1 && typeof _rd[r1][1][r2] == "object" && _rd[r1][1][r2].length > 1 && !isEmptyObject(_rd[r1][1][r2][1])) {
			var d = _rd[r1][1][r2][1];
			$addSelect(o, ' - 选择区 - ', -1);
			for(var key in d) {
				$addSelect(o, d[key], key);
			}
			//设置默认选择
			o.selectedIndex = 0;
			o.style.display = '';
		}
		else {
			o.style.display = 'none';
		}
		o = null;
	}

	function isEmptyObject(obj) {
		var count = 0;
		for(var k in obj) {
			count++;
		}
		return count > 0 ? false : true;
	}

}
function $dragWebqqWin(element){
		//说明：使用该方法需引用webqq库
		Jet().event.on(element,"drag",function(){alloy.window.startDrag();});
		}
function $execFuncByScroll(obj){
//根据页面滚动状态按需执行js函数
	//初始化要加载的内容
	if(!window._scriptExecMap){
		window._scriptExecMap={
			dCount:0,
			body_cache:document.body,
			doe_cache:document.compatMode=='BackCompat'?body_cache:document.documentElement,
			funcList:[]
		};
	}
	if(obj){
		var _o=window._scriptExecMap;
		(_o.funcList[obj.height])?_o.funcList[obj.height].push(obj.func):_o.funcList[obj.height]=[obj.func];
		_o.dCount++;
	}
	
	var _o=window._scriptExecMap;
	//判断是否需要继续监控	获取当前页面滚动的距离  可见高度+已经滚动的高度
	if(_o.dCount<1){return;}
	var offsetH=(window.MessageEvent&&!navigator.userAgent.toLowerCase().indexOf('firefox')==-1)?_o.body_cache.scrollTop:_o.doe_cache.scrollTop;//已经滚动的高度
	var visioH=offsetH+_o.doe_cache.clientHeight;
	for(var i in _o.funcList){
		if(visioH>i){
			for(var l=0;l<_o.funcList[i].length;l++){
                   	   setTimeout(_o.funcList[i][l],0);

			}
			delete _o.funcList[i];
			_o.dCount--;
		}
	}
	setTimeout($execFuncByScroll,100);
}
/**
* tab菜单切换控件
* @param {object} conf：自定义配置参数
    {array} tabs: 菜单对象数组
    {array} contents: 展示内容对象数组
    {string} activeStyle: 菜单激活样式
    {string} disableStyle: 菜单禁用样式
    {string} activeCStyle: 内容激活样式
    {string} disableCStyle: 内容禁用样式
    {number} defaultIndex: 默认激活的索引
    {string} event: 触发激活的菜单事件
    {string} menuTag: 菜单tagname
    {function} selected: 激活菜单后的事件
    {function} filter: 获取触发事件的对象方法
* @return {object} 返回接口对象
    {function} setActiveContent：设置激活的内容区
    {function} setActiveTab：设置激活的菜单
*/
function $expTabChange(conf) {
    var _conf = {
        tabs: [],
        contents: [],
        activeStyle: "",
        disableStyle: "",
        activeCStyle: "",
        disableCStyle: "none",
        defaultIndex: 0,
        event: 'click',
        menuTag: 'LI',
        selected: function (index, _conf) {
        },
        filter: function (e) {
            return e.srcElement || e.target;
        }
    }
    for (var key in conf) {
        if (conf[key]) {
            _conf[key] = conf[key];
        }
    }
_conf.menuTag = _conf.menuTag.toLowerCase();
    for (var i = 0, len = _conf.tabs.length; i < len; i++) {
        $addEvent(_conf.tabs[i], _conf.event, activeTab);
        if (_conf.contents[i]) {
            if (i != _conf.defaultIndex) {
                //disabled
                setStyle(_conf.contents[i], 2);
            }
            else {
                //active
                setStyle(_conf.contents[i], 1);
            }
        }
    }
    if (_conf.tabs[_conf.defaultIndex]) {
        //active
        setStyle(_conf.tabs[_conf.defaultIndex], 1, 'tab');
    }
    function activeTab(e) {
        var e = e || window.event;
        var self = _conf.filter(e), index;
        if (!self) { return; }
        //active
        setStyle(self, 1, 'tab');
        for (var i = 0, len = Math.max(_conf.tabs.length, _conf.contents.length); i < len; i++) {
            if (_conf.tabs[i] === self || _conf.tabs[i] == getMenu(self, _conf.menuTag)) {
                if (_conf.contents[i]) {
                    //active
                    setStyle(_conf.contents[i], 1);
                }
                index = i;
            }
            else {
                //disabled
                if (_conf.contents[i]) {
                    setStyle(_conf.contents[i], 2);
                }
                if (_conf.tabs[i]) {
                    setStyle(_conf.tabs[i], 2, 'tab');
                }
            }
        }
        _conf.selected(index, _conf);
    }
    //设置对象激活/禁用样式
    function setStyle(obj, type, tag) {
        var activestyle = _conf.activeCStyle, disabledstyle = _conf.disableCStyle;
        if (tag == 'tab') {
            if (obj.tagName.toLowerCase() != _conf.menuTag) {
                obj = getMenu(obj.parentNode, _conf.menuTag)
                if (!obj) {
                    return false;
                }
            }
            activestyle = _conf.activeStyle;
            disabledstyle = _conf.disableStyle;
        }
        if (type == 1 || type == "active") {
            if (disabledstyle) {
                $delClass(obj, disabledstyle);
            }
            if (activestyle) {
                $addClass(obj, activestyle);
            }
        } else {
            if (activestyle) {
                $delClass(obj, activestyle);
            }
            if (disabledstyle) {
                $addClass(obj, disabledstyle);
            }
        }
    }
    function getMenu(obj, tag) {
        while (obj && obj.tagName && (obj.tagName.toLowerCase() != tag.toLowerCase())) {
            obj = obj.parentNode;
        }
        return obj;
    }
    return {
        setActiveTab: function (index) {
            for (var i = 0, len = _conf.tabs.length; i < len; i++) {
                if (_conf.tabs[i]) {
                    if (i != index) {
                        //disabled
                        setStyle(_conf.tabs[i], 2, 'tab');
                    }
                    else {
                        //active
                        setStyle(_conf.tabs[i], 1, 'tab');
                    }
                }
            }
        },
        setActiveContent: function (index) {
            for (var i = 0, len = _conf.contents.length; i < len; i++) {
                if (_conf.contents[i]) {
                    if (i != index) {
                        //disabled
                        setStyle(_conf.contents[i], 2);
                    }
                    else {
                        //active
                        setStyle(_conf.contents[i], 1);
                    }
                }
            }
        }
    }
}
function $expValidator() {
    /**
    * 校验控件
    */
    window.expValidator = {
        msgTemplate: '<span class="msg-para-warn re_ibx" style="margin:0px;"><span class="msg0-icon-warn"></span>{#msg#}</span>',
        get: function (id) {
            if (typeof id === 'string') {
                return document.getElementById(id);
            }
            return id;
        },
        /**
        * 初始化校验控件
        * @param {string|object} el：绑定的校验元素
        * @param {string} action：触发校验的事件
        * @param {object} conf：校验参数
        {string} valiType：校验类型
        {number} min：允许的最小值
        {number} max：允许的最大值
        {object} compareTo：需要对比的dom对象
        {string} compareType：两个值对比的类型：<,>,=
        {string} msgId：错误提示的dom id
        {string} caption：错误提示的主语
        {bool} isGb：是否区分中英文，true为区分，false为不区分
        {function} getValiState：获取校验开关状态，校验开返回true，校验关返回false
        {string} switchName：开关名称
        {string} unit：数量单位
        {number} valiTag：验证元素标识
        */
        init: function (el, action, conf) {
            var _conf = {
                valiType: '',                               //校验类型
                min: 0,                                     //允许的最小值
                max: null,                                  //允许的最大值
                compareTo: null,                            //需要对比的dom对象
                compareType: '',                            //两个值对比的类型：<,>,=
                msgId: '',                                  //错误提示的dom id
                caption: '',                                //错误提示的主语
                isGb: 1,                                 //中文算两个长度为1，按字节长度为0
                getValiState: function () { return true },  //获取校验开关状态，校验开返回true，校验关返回false
                switchName: '',                             //开关名称
                unit: '',                                    //数量单位
                valiTag: 'vali',
                showFloatMsg: false                         //展示float的提示框
            }
            for (var key in conf) {
                var v = conf[key];
                if (v !== '' && v !== null && v !== undefined) {
                    _conf[key] = conf[key];
                }
            }
            el = expValidator.get(el);

            //写入校验开关事件
            if (_conf.switchName) {
                expValidator.registerSwitch(_conf.switchName, _conf.getValiState);
            }
            delete _conf.getValiState;  //开关按钮方法注册完毕可以扔掉，不需要写入到元素中

            _conf.valiResult = true; //校验结果，通过为true，不通过为false，默认为true

            //将校验属性写入到元素中
            for (var key in _conf) {
                if (_conf[key] != '' && _conf[key] != null) {
                    el.setAttribute(key, _conf[key]);
                }
            }

            //添加校验触发事件
            $addEvent(el, action, function () {
                expValidator.doValidator(el);
            });

            //绑定校验对比方法中，被对比元素的校验事件
            if (_conf.compareTo) {
                //设置对比类型
                var _compareConf = _conf, self = expValidator.get(_conf.compareTo);
                if (_compareConf.compareType.indexOf('<') > -1) {
                    _compareConf.compareType = _compareConf.compareType.split('<').join('>');
                } else {
                    _compareConf.compareType = _compareConf.compareType.split('>').join('<');
                }

                //将校验属性写入到被对比的元素中
                _compareConf.compareTo = el.id;
                for (var key in _compareConf) {
                    self.setAttribute(key, _compareConf[key]);
                }

                //添加校验触发事件
                $addEvent(self, action, function () {
                    expValidator.doValidator(self);
                });
            }
        },
        /**
        * 对元素进行校验
        * @param {object} el：待校验的元素
        * @return {string} 返回校验结果（true为成功，false为失败）。
        */
        doValidator: function (el) {
            var valiType = el.getAttribute('valiType').split(','),
            switchName = el.getAttribute('switchName'),
            _valiResult = true;
            //如果校验开关为false，则不进行校验
            if (switchName && expValidator.switchs[switchName] && !expValidator.switchs[switchName]()) {
                _valiResult = true;
                //直接校验通过
                expValidator.right(el);
            } else {
                for (var i = 0, len = valiType.length; i < len; i++) {
                    var valiObj = expValidator.valiFunc[valiType[i]],
                        valiFunc = typeof valiObj === 'function' ? valiObj : expValidator.valiFunc['common'];

                    if (!valiFunc(el, valiObj)) {
                        _valiResult = false;
                        //scrollThisItem(el);
                        break;
                    }
                }

                var compareTo = expValidator.get(el.getAttribute('compareTo'));
                if (compareTo && _valiResult) {
                    var cValiType = el.getAttribute('valiType').split(',');
                    for (var j = 0, len = cValiType.length; j < len; j++) {
                        var valiObj = expValidator.valiFunc[cValiType[j]],
                            valiFunc = typeof valiObj === 'function' ? valiObj : expValidator.valiFunc['common'];
                        if (!valiFunc(compareTo, valiObj)) {
                            _valiResult = false;
                            //scrollThisItem(el); 
                            break;
                        }
                    }
                }
            }
            //触发校验回调函数，返回校验结果
            var callback = el.getAttribute('callback');
            if (callback) {
                window[callback](_valiResult);
            }
            return _valiResult;
        },
        /**
        * 校验类型
        */
        valiFunc: {
            'require': function (el) {
                if ((el.value.replace(/^\s*|\s*$/g, '')) === '') {
                    expValidator.error(('请填写' + el.getAttribute('caption')), el);
                    return false;
                } else {
                    expValidator.right(el);
                    return true;
                }
            },
            'length': function (el) {
                var min = parseInt(el.getAttribute('min')) || null,
                max = parseInt(el.getAttribute('max')) || null,
                isGb = Boolean(el.getAttribute('isGb')),
                caption = el.getAttribute('caption') || '',
                unit = el.getAttribute('unit') || '';
                //如果区分中英文，将上下限转成字节数
                var _min = min, _max = max;
                if (isGb) {
                    _min = min * 2;
                    _max = max * 2;
                }
                if (_min && ((isGb ? $strLenGB(el.value) : el.length) < _min)) {
                    expValidator.error((caption + '不能小于' + min + unit), el);
                } else if (_max && ((isGb ? $strLenGB(el.value) : el.length) > _max)) {
                    expValidator.error((caption + '不能大于' + max + unit), el);
                } else {
                    expValidator.right(el);
                    return true;
                }
                return false;
            },
            'compare': function (el) {
                var compareTo = expValidator.get(el.getAttribute('compareTo')),
                    compareType = el.getAttribute('compareType'),
                    reg = /^((\d{1,}\.\d{1,})|(\d{1,}))$/,
                    caption = el.getAttribute('caption'),
                    value1,
                    value2;
                if (reg.test(el.value)) {
                    value1 = parseFloat(el.value);
                    value2 = parseFloat(compareTo.value);
                } else {
                    value1 = (el.value);
                    value2 = (compareTo.value);
                }
                if (!value1 || !value2) {
                    value1 = el.value;
                    value2 = expValidator.get(compareTo).value;
                }
                var re = compareValue(value1, value2);

                if ((value1 != value2) && (value1 == '' || value2 == '')) {   //当两者其中一个值为空时，提示错误
                    expValidator.error((el.getAttribute('compareMsg') || '请正确输入' + caption + '的值的范围'), el);
                    return false;
                } else if ((value1 == '' && value2 == '') || (compareType.indexOf(re) > -1) || (re.indexOf(compareType) > -1)) {    //二者同时为空和大小符合的情况为校验通过

                    expValidator.right(el);
                    return true;
                } else {    //其他情况展示错误
                    expValidator.error((el.getAttribute('compareMsg') || '请正确输入' + caption + '的值的范围'), el);
                    return false;
                }
                function compareValue(v1, v2) {
                    if (v1 === v2) {
                        return '=';
                    } else if (v1 > v2) {
                        return '>';
                    } else {
                        return '<';
                    }
                }
            },
            'float': function (el) {
                var msgId = el.getAttribute('msgId'),
                caption = el.getAttribute('caption'),
                value = el.value,
                decimalNum = el.getAttribute('decimalNum') || 2;
                //默认保留两位小数
                var reg = decimalNum == 2 ? (/^((\d{1,}\.\d{1,2})|(\d{1,}))$/) : new RegExp('^((\\d{1,}\\.\\d{1,' + decimalNum + '})|(\\d{1,}))$');
                if (value != '' && !reg.test(value)) {
                    expValidator.error(('输入的' + caption + '格式不正确（小数部分不超过' + decimalNum + '位）'), el);
                    return false;
                } else {
                    expValidator.right(el);
                    return true;
                }
            },
            'int': /^\d{1,}$/,
            'price': /^((\d{1,}\.\d{1,2})|(\d{1,}))$/,
            email: /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/,
            cellphone: /^(1[3584]\d{9})$/,
            phone: /^(\d{3,4}\-)?\d{7,9}(\-\d{1,5})?$/,
            zip: /^[0-9]\d{5}$/,
            qq: /^[1-9]\d{4,9}$/,
            'common': function (el, reg) {
                var msgId = el.getAttribute('msgId'),
                    caption = el.getAttribute('caption'),
                    value = el.value;
                if (value != '' && !reg.test(value)) {
                    expValidator.error(('输入的' + caption + '格式不正确'), el);
                    return false;
                } else {
                    expValidator.right(el);
                    return true;
                }
            },
            'range': function (el) {
                var min = parseFloat(el.getAttribute('min')) || null,
                max = parseFloat(el.getAttribute('max')) || null,
                caption = el.getAttribute('caption'),
                value = parseFloat(el.value),
                unit = el.getAttribute('unit') || '';

                if (min && (value < min)) {
                    expValidator.error((caption + '不能小于' + min + unit), el);
                } else if (max && (value > max)) {
                    expValidator.error((caption + '不能大于' + max + unit), el);
                } else {
                    expValidator.right(el);
                    return true;
                }
                return false;
            },
            'url': function (el) {
                var reg = /^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&_~`@[\]\':+!]*([^\s<>\"\"])*$/,
                caption = el.getAttribute('caption') || '网址';
                if (reg.test(el.value) || el.value == '') {
                    expValidator.right(el);
                    return true;
                } else {
                    expValidator.error('请输入正确' + caption + '，例：http：//www.paipai.com', el);
                    return false;
                }
            },
            'check': function (el) {
                var caption = el.getAttribute('caption');
                if (el.checked) {
                    expValidator.right(el);
                    return true;
                } else {
                    expValidator.error(('请选择' + caption), el);
                    return false;
                }
            }
        },
        /**
        * 校验失败事件
        * @param {string} msg：错误提示语
        * @param {object} el：被校验元素
        */
        error: function (msg, el) {
            if (el.getAttribute('showFloatMsg') == 1) {
                var floatObj = $float({
                    title: '提示',
                    html: '<div class="box_hint_normal"><span class="icon msg3-icon-warn"></span><div class="hint_content" style="padding:5px;"><p class="hint_title"><strong>' + msg + '</strong></p><div class="hint_op"><button id="float_ok" name="float_ok" style="">关 闭</button></div></div></div>',
                    width: 450
                });
                $id('float_ok').onclick = function () {
                    floatObj.close();
                    var i = el.value.length;
                    if (el.selectionStart) {//非IE浏览器
                        el.selectionStart = 0;
                        el.selectionEnd = i;
                    } else {//IE
                        var range = el.createTextRange();
                        range.select();
                    }
                }
            } else {
                var msgObj = document.getElementById(el.getAttribute('msgId'));
                if (msgObj) {
                    msgObj.innerHTML = expValidator.msgTemplate.split('{#msg#}').join(msg);
                    msgObj.style.display = '';
                    expValidator.scrollThisItem(msgObj);
                }
            }
            el.setAttribute('valiResult', false);
        },
        /**
        * 校验成功事件
        * @param {object} el：被校验元素
        */
        right: function (el) {
            var msgObj = document.getElementById(el.getAttribute('msgId'));
            if (msgObj) {
                msgObj.style.display = 'none';
            }
            el.setAttribute('valiResult', true);
        },
        /**
        * 注册校验开关
        * @param {string} name：开关名称
        * @param {function} func：开关方法
        */
        registerSwitch: function (name, func) {
            expValidator.switchs[name] = func;
        },
        /**
        * 删除校验开关
        * @param {string} name：开关名称
        */
        deletSwitch: function (name) {
            delete expValidator.switchs[name];
        },
        //校验开关
        switchs: {},
        /**
        * 增加校验规则
        * @param {string} name：校验类型名称
        * @param {function} func：校验方法
        */
        addRule: function (name, func) {
            expValidator.valiFunc[name] = func;
        },
        /**
        * 批量验证
        * @param {object} pEl：包含被校验元素的父元素
        * @return {bool} 校验结果（true为校验成功，false为失败）
        */
        batchValidator: function (pEl, breakWhenError) {
            pEl = expValidator.get(pEl);
            if (pEl) {
                var els = $attr('valiTag', 'vali', pEl), //$$(pEl).find('*[valiTag=1]'),
                isPass = true;
                for (var i = 0, len = els.length; i < len; i++) {
                    var temp = expValidator.doValidator(els[i]);
                    if (isPass && !temp) {
                        isPass = temp;
                        var msgObj = document.getElementById(els[i].getAttribute('msgId'));
                        if (msgObj) {
                            expValidator.scrollThisItem(msgObj);
                        }

                        if (breakWhenError) {
                            break;
                        }
                    }
                }
                return isPass;
            }
            return false;
        },
        scrollThisItem: function (el) {
            var objY = $getY(el),
                top = $getPageScrollHeight(),
                bottom = top + $getWindowHeight();
            if (objY < top) {
                setTimeout(function () { window.scrollTo(0, objY - 80) }, 0);
            } else if (objY > bottom - 50) {
                setTimeout(function () { window.scrollTo(0, objY + 120 + top - bottom) }, 0);
            }
        }
    }
}
//扩展直充下单支持点卡
function $extendAuotCharge(prix,zone,type,callback,gep){//面值、省份、类型,data:{min:[0.90,0.90,0.90],max:[1.35,1.35,1.35]},gep价格拉取区间
	var loadMobileCardData= function(){
		if(!PP||!PP.chong||!PP.chong.data||!PP.chong.data.mobileCard){
			$loadScript("http://static.paipaiimg.com/sinclude/jsi/pp.chong.data.mobileCard.js","_load_mobile_card_data_");
		}else{
			clearInterval(load_mobile_card_data);
			getMobileCardInfo(prix,zone,type,callback,gep);
		}		
	}
	var load_mobile_card_data=setInterval(loadMobileCardData,500);
};
function getMobileCardInfo(prix,zone,type,callback,gep){
	var cardJson={},prixJson={};
	var oMobileCard=PP.chong.data.mobileCard;
	var oZone=oMobileCard.zone;
	var prop1=oZone[zone] ? oZone[zone] : 0;
	var prop2=oMobileCard.type[prix];
	var gep=gep||{min:[0.90,0.90,0.90],max:[1.35,1.35,1.35]};
	if(this.data&&this.data.loadTime){
		this.data.loadTime++;
	}else{
		this.data ? (this.data.loadTime=0):(this.data={},this.data.loadTime=0);
	}
	this.data.prixPara={//价格参数
			BeginPrice:'',
			EndPrice:'',
			sClassid:'',
			NewProp:'',
			Tagid:'',
			t:'',
			ac:1,
			Appid:8,
			PageSize:10,
			onlineState:0,
			OrderStyle:6,
			Property:1048712	
		}
	prixJson.NewProp	= '10084,'+prop1+'-10080,'+prop2+'-10120,1';
	switch(type){
		case '移动':
			prixJson.BeginPrice	= prix *gep.min[0];
			prixJson.EndPrice	= prix *gep.max[0];					
			prixJson.sClassid	= "200462";
			break;
		case '联通':
			prixJson.BeginPrice	= prix * gep.min[1];
			prixJson.EndPrice	= prix *gep.max[1];
			prixJson.sClassid	= "200463";
			break;
		case '电信':
			prixJson.BeginPrice	= prix * gep.min[2];
			prixJson.EndPrice	= prix *gep.max[2];
			prixJson.sClassid	= "200464";
			break;
		default :
	};
	prixJson.t				=	(new Date).getTime();
	prixJson.Tagid='mobileCardPrix'+prix;
	$extend(this.data.prixPara,prixJson);
	//配置card的参数
	cardJson.KeyWord		=	zone + " OR 全国";
	cardJson.PTAG			="";//	'30053.'+this.opt.from+".9";
	cardJson.sClassid		=	prixJson.sClassid;
	$extend(this.data.prixPara,cardJson);	
	$loadScript("http://kc1.paipai.com/js?"+$makeUrl(this.data.prixPara),'mobileCardPrix');
	window.backChargeNow=function(a,b,c){
		if(typeof(callback)=="function"){
			callback(a,b,c.replace("mobileCardPrix",""));
		}
	}
}
function $favor(obj){
	//商品收藏组件
	var option={
		cname:"", //商品名称
		cid:"", //商品id
		uid:"",
		sid:"", //店铺id
		left:0,
		top:0,
		favortype:0,  //0:收藏商品 1:收藏店铺
		cssUrl:"http://static.paipaiimg.com/module/collection.css",
		tp:'<div class="box_hint_normal"> <span class="icon msg2-icon-warn"></span> <div class="hint_content"> <p class="hint_title"><strong>{#topinfo#}{#username#}（{#uin#}）{#title#}{#topinfo#}</strong>{#errorLink#}<p>您可以在“<a href="http://my.paipai.com/cgi-bin/favorite_new/Entry?type=item&PTAG=20024.1.18" target="_blank">我的拍拍-我的收藏夹</a>”管理您已收藏的商品</p>{#errorLink#}{#shopError#}<p>您可以在<a href="http://my.paipai.com/cgi-bin/my_collect_list?iType=2&PTAG=20024.1.21" target="_blank"> 我的拍拍-我的收藏夹</a>管理您已收藏的店铺</p>{#shopError#}</div></div>',
		newfavor:'<div class="box_hint_normal"> <span class="icon msg2-icon-{#icontype#}"></span>\
	  <div class="hint_content">\
		<div class="fl_collect">\
			<p class="hint_title"><strong>{#favortitle#}</strong></p>\
			<p class="collect_link">您已收藏{#favornum#}个商品 <a href="http://my.paipai.com/cgi-bin/favorite_new/Entry?type=item&PTAG=20024.1.18" target="_blank">查看我的收藏夹&raquo;</a></p>\
			<p class="collect_op"><a href="#nolink" id="pfhlkd_fshare" title="分享给QQ好友和拍拍用户"><span class="ico_share"></span>分享给好友</a>　<a href="#nolink" id="pfhlkd_fshop" title="收藏该店铺"><span class="ico_collect"></span>收藏该店铺</a></p>\
			<p class="msg-para-right block" style="display:none"><span class="msg0-icon-right"></span><span class="msg-para-hint" id="pfhlkd_warn">成功分享商品！</span></p>\
		</div>\
	</div>\
  </div>',
  		shopfavor:'<div class="box_hint_normal"> <span class="icon msg2-icon-{#icontype#}"></span>\
	  <div class="hint_content">\
		<div class="fl_collect">\
			<p class="hint_title"><strong>{#favortitle#}</strong></p>\
			<p class="collect_link">您已收藏{#favornum#}个店铺 <a href="http://my.paipai.com/cgi-bin/my_collect_list?iType=2&PTAG=20024.1.21" target="_blank">查看我的收藏夹&raquo;</a></p>\
		</div>\
	</div>\
  </div>'
	};
	for(var i in obj){
		option[i]=obj[i];
	}
	
	if(option.cssUrl)
	$loadCss(option.cssUrl);
	

	
	
	var path = "http://my.paipai.com/cgi-bin/favorite/additem?itemid="+option.cid+"&callback=addFavorComm&t="+Math.random();
	var _retCoder=$returnCode({url:path,frequence:1});
	
	if(option.favortype=="1"){
		path = "http://my.paipai.com/cgi-bin/favorite/addshop?shopid=" + option.sid+"&callback=addFavorShop&t="+Math.random();
		_retCoder=$returnCode({url:path,frequence:1});
		//上报店铺收藏点击
		$countRd("40042.1.7");
	}
	//期待收藏回调：addFavorComm		
	$loadScript(path,"favor");
	window.addFavorComm = function(obj){
		_retCoder.report(true,obj.retCode);
		//上报商品收藏点击
		$countRd("20024.1.18");
		var hc=["",""];//浮层标题和内容
		if(obj.errCode=="0"){
			if(obj.bAlreadyFaved=="0"){
				hc=["提示",option.newfavor.replace(/{#favortitle#}/,"收藏商品成功！").replace(/{#icontype#}/,"right").replace(/{#favornum#}/g,obj.totalnum)];
			}else{
				hc=["提示",option.newfavor.replace(/{#favortitle#}/,"您已收藏过此商品！").replace(/{#icontype#}/,"warn").replace(/{#favornum#}/g,obj.totalnum)];
			}
		}else if(obj.errCode=="13"){
			$loginFrame({type:'func',check:false,model:false,action:function(){$favor(option)},"x":option.left,"y":option.top});
			return;
		}else{
			hc=["提示",option.tp.replace(/{#topinfo#}.*?{#topinfo#}/,obj.msg).replace(/{#errorLink#}/g,"").replace(/{#shopError#}.*?{#shopError#}/,"")];
		}
		
		option.float=$float({
			cover:false,
			style:"stand",
			title:hc[0],
			html:hc[1],
			left:option.left,
			top:option.top
		});
		
		var warndom = $id("pfhlkd_warn");
		var parent = warndom.parentNode;
		var previous = warndom.previousSibling;
		
		$id("pfhlkd_fshare")?$addEvent($id("pfhlkd_fshare"),'click',function(){							 
					//上报收藏后分享商品点击
					$countRd("20024.1.19");
					


					var contents = ['我刚刚收藏了这件商品，分享给大家！','不错，很喜欢这个，推荐下！','喜欢就要分享！','我喜欢的，希望你也能喜欢！','藏之有道，享之有益'];
					
					var rand = parseInt(Math.random()*contents.length);
					
					var path = "http://ext.paipai.com/share/addshare?callback=addShareCore&posttype=1&synqzone=0&synwb=0&sharetype=2&src=1&context="+encodeURIComponent(contents[rand])+"&id="+option.cid+"&srcshareid=&srcuin=&srcposttime=&logo=&desc=&url=";

            		var _retCoder1=$returnCode({url:path,frequence:2});
					
					//期待回调addShareCore
            		$loadScript(path);

					window.addShareCore=function(info){
						//返回码上报
						_retCoder1.report(true);
						var msg="";
						
						switch(info.ret+""){
							 case "0":
								parent.style.display = "";
								parent.className = "msg-para-right block";
								warndom.innerHTML = "成功分享商品！";
								previous.className = "msg0-icon-right";
							 break;
							 default:
								parent.style.display = "";
								parent.className = "msg-para-warn block";
								warndom.innerHTML = "未分享成功，请稍候再试。";
								previous.className = "msg0-icon-warn";
							 break;
						};
					};   
					
		}):"";
		
		$id("pfhlkd_fshop")?$addEvent($id("pfhlkd_fshop"),'click',function(){	
				//上报收藏后收藏店铺点击
				$countRd("20024.1.20");														   
				var path = "http://my.paipai.com/cgi-bin/favorite/addshop?shopid=" + option.sid+"&callback=simAddFavorShop&t="+Math.random();
				//返回码统计对象_retCoder
				var _retCoder=$returnCode({url:path,frequence:2});
    			//期待回调：ManageShopCallBack
		
    			$loadScript(path, 'favoriteshop');
				
				 window.simAddFavorShop=function(obj){
				//返回码上报
					_retCoder.report(true,obj.retCode);
					message=obj.msg;
					parent.style.display = "";
					previous.className = "msg0-icon-warn";
					
					if(obj.errCode=="0"){
						if(obj.bAlreadyFaved=="0"){
							message = "成功收藏店铺！";
							previous.className = "msg0-icon-right";	
							parent.className = "msg-para-right block";
						}else{
							parent.className = "msg-para-warn block";
							message = "您已经收藏过本店铺。";
						}
					}else{
						parent.className = "msg-para-warn block";
						message = obj.msg;
					}
					
					warndom.innerHTML = message;
				}
		}):"";
	}
	
	
	window.addFavorShop = function(obj){
		_retCoder.report(true,obj.retCode);
		var hc=["",""];//浮层标题和内容
		if(obj.errCode=="0"){
			
			if(obj.bAlreadyFaved=="0"){
				hc=["提示",option.shopfavor.replace(/{#favortitle#}/,"收藏店铺成功！").replace(/{#icontype#}/,"right").replace(/{#favornum#}/g,obj.totalnum)];
			}else{
				hc=["提示",option.shopfavor.replace(/{#favortitle#}/,"您已收藏过此店铺！").replace(/{#icontype#}/,"warn").replace(/{#favornum#}/g,obj.totalnum)];
			}
		}else if(obj.errCode=="13"){ 
			$loginFrame({type:'func',check:false,model:false,action:function(){$favor(option)},"x":option.left,"y":option.top});
			return;
		}else{	
			hc=["提示",option.tp.replace(/{#topinfo#}.*?{#topinfo#}/,obj.msg).replace(/{#errorLink#}.*?{#errorLink#}/g,"").replace(/{#shopError#}/g,"")];
		}
		
		option.float=$float({
			cover:false,
			style:"stand",
			title:hc[0],
			html:hc[1],
			left:option.left,
			top:option.top
		});
	}
}
function $favoriteComm(obj){
	//商品收藏组件
	var option={
		autoShare:true,	//true收藏成功后展示分享提示，否则不展示
		cname:"",
		cid:"",
		uid:"",
		left:0,
		top:0,
		tp:'<div class="box_hint_normal"> <span class="icon msg2-icon-right"></span> <div class="hint_content"> <p class="hint_title"><strong>{#topinfo#}{#username#}（{#uin#}）{#title#}{#topinfo#}</strong>{#onshare#}<p>您是否愿意向QQ好友、拍拍用户分享此收藏？<a href="http://help.paipai.com/content/help_20117.shtml?PTAG=6.6.6" target="_blank"><span class="iconhelp"></span></a></p><div class="hint_op"><input type="button" value="愿意分享" id="favoriteDoshare"/> <input type="button" value="不愿意" id="favoriteNoshare" /></div>{#onshare#}{#errorLink#}<p>您可以在“<a href="http://my.paipai.com/cgi-bin/my_collect_list?isBuyLink=02&PTAG=6.6.7" target="_blank">我的拍拍-我的收藏夹</a>”管理您已收藏的商品</p><div class="hint_op"><input type="button" value="关闭窗口" id="favoriteCloser" /></div>{#errorLink#}{#shareLink#}<p>您可以在“<a href="http://my.paipai.com/cgi-bin/feed_mgr?type=1&PTAG=6.6.9" target="_blank">我的拍拍-购物分享信息设置</a>”管理您已分享的收藏</p><div class="hint_op"><input type="button" value="关闭窗口" id="favoriteCloser" /></div>{#shareLink#}</div></div>',
		template:'<div class="share_to_friend"> <div class="box_hint_normal"> <span class="icon msg2-icon-right"></span> <div class="hint_content"> <p class="hint_title"><strong>{#username#}（{#uin#}）收藏商品成功！</strong></p> <p>您是否愿意向QQ好友、拍拍用户分享此收藏商品？</p> <div class="hint_op"> <button id="favoriteDoshare">愿意分享</button> <button id="favoriteNoshare">暂不分享</button></div> </div> </div> </div> ',
		//不展示分享提示的模板
		noShareTemplate:'<div class="share_to_friend"> <div class="box_hint_normal"> <span class="icon msg2-icon-right"></span> <div class="hint_content"> <p class="hint_title"><strong>{#username#}（{#uin#}）收藏商品成功！</strong></p><p>您可以在“<a href="http://my.paipai.com/cgi-bin/my_collect_list?isBuyLink=02&PTAG=6.6.7" target="_blank">我的拍拍-我的收藏夹</a>”管理您已收藏的商品</p><div class="hint_op"><button type="button" value="关闭窗口" id="favoriteCloser">关闭窗口</button></div> </div> </div> </div> '
	};
	for(var i in obj){
		option[i]=obj[i];
	}
	if(!option.autoShare){
		//如果不展示分享，覆盖模板
		option.template=option.noShareTemplate;
	}
	window._PP_core_favoriteComm_data=option;
	//期待收藏成功回调：AddFavoriteItemCallback/失败回调：ErrAddFavoriteCallback
	$loadScript("http://my.paipai.com/cgi-bin/my_collect_add1?iType=1&sItemId="+option.cid+"&t="+Math.random(),"favorityCommodity");
	//商品收藏失败的回调函数
	window.ErrAddFavoriteCallback=function(msg,name){
		FavoriteCommCallback(1,msg,"");
	};
	//商品收藏成功的回调函数message:返回信息内容,有用户名是为用户的昵称		xiajiaMess:下架方面的状态值,		stype:收藏结果的类型}
	window.AddFavoriteItemCallback=function(msg,xjMess,stype){
		FavoriteCommCallback(0,msg.replace("$","＄"),stype);
	};
	//统一回调:回调结果、返回的信息，收藏结果
	function FavoriteCommCallback(type,msg,stype){
		var option=window._PP_core_favoriteComm_data;
		var hc=["",""];//浮层标题和内容
		//登陆超时
		if(type==1 && (msg.indexOf("登录超时")>=0||msg.indexOf("登录后再试")>=0||msg.indexOf("登陆超时")>=0)){
			$loginFrame({type:'func',check:false,model:false,action:function(){$favoriteComm(option)},"x":option.left,"y":option.top});
			return;
		}
		//其他错误
		if(type==1){
			hc=["提示",option.tp.replace(/{#topinfo#}.*?{#topinfo#}/,msg).replace(/{#onshare#}.*?{#onshare#}/,"").replace(/{#shareLink#}.*?{#shareLink#}/,"").replace(/{#errorLink#}/g,"")]
		}
		//正常
		if(type==0){
			if((stype>=10 && stype<100) || (stype>101)){
				hc=["提示",option.tp.replace(/{#username#}（{#uin#}）/,msg).replace(/{#title#}/,"您已收藏过此商品！").replace(/{#onshare#}.*?{#onshare#}/g,"").replace(/{#shareLink#}.*?{#shareLink#}/g,"").replace(/{#errorLink#}/g,"").replace(/{#topinfo#}/g,"")];
			}else{
				hc=["收藏商品",option.template.replace(/{#username#}（{#uin#}）/,msg)];
			}
		}
		option.userInfo=msg;
		option.float=$float({
			cover:false,
			style:"stand",
			title:hc[0],
			html:hc[1],
			left:option.left,
			top:option.top,
			onInit:function(){
				$$("#favoriteNoshare,#favoriteCloser").click(function(){
					window._PP_core_favoriteComm_data.float.close();
				});
				$$("#favoriteDoshare").click(function(){
					var option=window._PP_core_favoriteComm_data;
					option.float.close();
					
					$shareComm({
						cname:option.cname,
						cid:option.cid,
						left:option.left,
						top:option.top,
						uid: $getUin(),
						stype:'1'
					});
				});
				return true;
			}
		});
	}
}
function $favoriteShop(obj){
//店铺收藏组件
    var option={
        sid:"",
        uid:"",
        left:0,
        top:0,
        tp:'<div class="box_hint_normal"> <span class="icon {#iconClass#}"></span> <div class="hint_content"> <p class="hint_title"><strong>{#topinfo#}{#username#}（{#uin#}）{#title#}{#topinfo#}</strong>{#onshare#}<p>您可以在“<a href="http://t.paipai.com/{#qqNum#}" target="_blank">拍拍乐享</a> > <a href="http://t.paipai.com/{#qqNum#}/following" target="_blank">我的关注</a>”</p><p>查看您所关注的店铺。</p><p style="margin: 10px -35px; padding: 10px 35px 0px;"><input type="button" value="关闭窗口" id="favoriteNoshare" /></p></div>{#onshare#}{#errorLink#}<p>您可以在“<a href="http://t.paipai.com/{#qqNum#}" target="_blank">拍拍乐享</a> > <a href="http://t.paipai.com/{#qqNum#}/following" target="_blank">我的关注</a>”</p><p>查看您所关注的店铺。</p><div class="hint_op"><input type="button" value="关闭窗口" id="favoriteCloser" /></div>{#errorLink#}{#shareLink#}<p>您可以在“<a href="http://t.paipai.com/{#qqNum#}" target="_blank">拍拍乐享</a> > <a href="http://t.paipai.com/{#qqNum#}/mine" target="_blank">我的分享</a>”</p><p>查看和管理您已分享的店铺</p><div class="hint_op"><input type="button" value="关闭窗口" id="favoriteCloser" /></div>{#shareLink#}</div> </div>'
    };
    //<p style="margin: 10px -35px; padding: 10px 35px 0px;border-top:1px solid #CCEAFF">您现在可以向您的好友、拍拍用户分享此关注啦！<a href="http://help.paipai.com/content/help_20117.shtml?PTAG=6.6.6" target="_blank"><span class="iconhelp"></span></a></p><div class="hint_op"><input type="button" value="分 享" id="favoriteDoshare"/> 
    for(var i in obj){
        option[i]=obj[i];
    }
//统计点击数	
$countRd("1038.3.3");
	
	var path = 'http://ext.paipai.com/concern/manageconcernshop?optype=1&shopid=' + option.sid+"&t="+Math.random();
	//返回码统计对象_retCoder
	var _retCoder=$returnCode({url:path,frequence:2});
    //期待回调：ManageShopCallBack
    $loadScript(path, 'doconcer_script');
    //店铺关注的回调函数obj:{ret//状态吗，msg//错误提示}
    window.ManageShopCallBack=function(obj){
		//返回码上报
		_retCoder.report((obj.ret=="0"?true:false),obj.ret);
        message=obj.msg;
        var hc=option.tp;
		hc = hc.replace(/{#qqNum#}/g,option.uid);
        if(obj.ret == "0"){
//统计关注成功数
$countRd("1038.3.4");

            hc=hc.replace(/{#username#}（{#uin#}）/,"").replace(/{#title#}/,"关注店铺成功！").replace(/{#onshare#}/g,"").replace(/{#shareLink#}.*?{#shareLink#}/,"").replace(/{#topinfo#}/g,"").replace(/{#errorLink#}.*?{#errorLink#}/,"").replace("{#iconClass#}","msg2-icon-right");
        }else{//其他异常情况
            if(obj.ret == "10"){//您已关注过此店铺
                hc=hc.replace(/{#username#}（{#uin#}）/,"").replace(/{#title#}/,"您已关注过此店铺！").replace(/{#onshare#}.*?{#onshare#}/g,"").replace(/{#shareLink#}.*?{#shareLink#}/,"").replace(/{#errorLink#}/g,"").replace(/{#topinfo#}/g,"").replace("{#iconClass#}","msg2-icon-right");
            }else if(obj.ret=="9"){//未登录
                $loginFrame({type:'func',check:false,model:false,action:function(){$favoriteShop(option)},"x":option.left,"y":option.top});
                return;
            }else{
                if(obj.ret == "22"){//添加关注达到上限的提示语特殊处理
                    message = "您关注的店铺数已达上限！";
                } else if(obj.ret == "40"){
					message = "对不起，您不能关注自己的店铺！";
				}else{
					message = "添加关注错误。"
				}
                hc = hc.replace(/{#topinfo#}.*?{#topinfo#}/,message).replace(/{#onshare#}.*?{#onshare#}/,"").replace(/{#shareLink#}.*?{#shareLink#}/,"").replace(/{#errorLink#}/g,"").replace("{#iconClass#}","msg2-icon-warn");
            }
        }
        var float=$float({
            cover:false,
            style:"stand",
            title:"关注店铺",
            html:hc,
            left:option.left,
            top:option.top
        });
        var favoriteNoshare = document.getElementById("favoriteNoshare"),favoriteCloser=document.getElementById("favoriteCloser"),favoriteDoshare=document.getElementById("favoriteDoshare");
        favoriteNoshare?favoriteNoshare.onclick=function(){float.close();}:"";
        favoriteCloser?favoriteCloser.onclick=function(){float.close();}:"";
        favoriteDoshare?favoriteDoshare.onclick=function(){
            try{$loadScript("http://member.paipai.com/cgi-bin/recommend_to_friend?Pshopid="+option.sid+"&Pitemid="+option.cid+"&Fshare=1&Ptype=5","shareMyfavorite");}catch(e){}
            float.close();
            var float2=$float({
                cover:false,
                style:"stand",
                title:"分享店铺",
                html:option.tp.replace(/{#username#}（{#uin#}）/,"").replace(/{#title#}/,"已分享此关注！").replace(/{#shareLink#}/g,"").replace(/{#onshare#}.*?{#onshare#}/g,"").replace(/{#errorLink#}.*?{#errorLink#}/,"").replace(/{#topinfo#}/g,"").replace("{#iconClass#}","msg2-icon-right"),
                left:option.left,
                top:option.top

            });
            document.getElementById("favoriteCloser").onclick=function(){float2.close();};
        }:"";
    };
}
function $fillAddress(obj){
	var option={
		regionUrl:"http://static.paipaiimg.com/js/regiondata.js?t=20091111",//默认地址数据地址
		province:"",
		city:"",
		area:"",
		provId:"",
		cityId:"",
		areaId:"",
		initValue:"",
		onSelect:function(){return true;},
		onSelectBlankProv:function(){return true;},
		onSelectBlankCity:function(){return true;}		
	}
	for(var i in obj)option[i] = obj[i];
	
	option.provinceHander=option.province==""?null:$id(option.province);
	option.cityHander=option.city==""?null:$id(option.city);
	option.areaHander=option.area==""?null:$id(option.area);
	
    if(option.provinceHander){
		option.provinceHander.setAttribute("stype","province");
		option.provinceHander.setAttribute("vprovince",option.province);
		option.provinceHander.setAttribute("vcity",option.city);
		option.provinceHander.setAttribute("varea",option.area);
	}
	if(option.cityHander){
		option.cityHander.setAttribute("stype","city");
		option.cityHander.setAttribute("vprovince",option.province)
		option.cityHander.setAttribute("vcity",option.city)
		option.cityHander.setAttribute("varea",option.area)
	}
	if(option.areaHander){
		option.cityHander.setAttribute("stype","area");
		option.cityHander.setAttribute("vprovince",option.province)
		option.cityHander.setAttribute("vcity",option.city)
		option.cityHander.setAttribute("varea",option.area)
	}
	
option.initaddress=init;
$loadScript(option.regionUrl);
var regionMap = $getRegionMap();

//初始化地址选择下拉框
init();	 
return option;



function init(){
	setPath();
	addListener();
	fillProv();
	fillCity();
	fillArea();
}

	 
function setPath(){
	if(option.initValue){
		for(var i in regionMap){
			if(i.toString()===option.initValue.toString()){		//如果从省目录中找到就直接设置，不进行下一步操作
				option.provId=option.initValue;
				return;
			}else{	//当前省不是默认则找这个省的市数据，然后在进行下一步
				if (typeof(regionMap[i][2])=="object"){	//如果这个省有市的数据则在市数据中找
					var tempProv=i;
					for(var j in regionMap[i][2]){	
						if(j.toString()===option.initValue.toString()){	//在市数据中找到，就直接把这个省和市的数据写入设置中，并退出循环
							option.provId=tempProv;
							option.cityId=j;
							return;
						}else{//找地区数据
							var tempaeralist=regionMap[i][2][j][2];
							if(typeof(tempaeralist)=="object"){
								var tempCity=j;
								for(var k in tempaeralist){//在地区数据中找
									if (k.toString()===option.initValue.toString()){//找到
										option.provId=tempProv;
										option.cityId=tempCity;
										option.areaId=k;
										return;
									}
								}
							}
						}
					}
				}
			}
		}
	}
};

function fillProv(){
	var _theprovince=option.provinceHander
	if(_theprovince){
		if(_theprovince.options.length > 0) return;
		$addSelect(_theprovince,"","");
		for(var i in regionMap){
			$addSelect(_theprovince,regionMap[i][0],i);
		}
		if(option.provId){
			_theprovince.value = option.provId;
		}
	}
};

function fillCity(){
	var _thecity=option.cityHander;
	if(_thecity){
		if (!option.provId){return ;}
		var cityList=regionMap[option.provId][2];
/*		var hasIt = false;
		for(var j=0;j<_thecity.options.length;j++){
			if(_thecity.options[j].value.toString()==option.cityId && _thecity.options[j].value.toString()!=""){
				hasIt = true;
				break;
			}
		}
		if(hasIt){return;}*/
		_thecity.options.length = 0;
		$addSelect(_thecity,"","");
		for(var i in cityList){
			$addSelect(_thecity,cityList[i][0],i);
		}
		if(option.cityId){
			_thecity.value = option.cityId;
		}
	}
};


function fillArea(){
	var _thearea=option.areaHander;
	if(_thearea && option.area){
		var areaList;
		if(!option.cityId){
			_thearea[0].options.length = 0;
			return;
		}
		areaList=regionMap[option.provId][2][option.cityId][2];
		_thearea.options.length = 0;
		$addSelect(_thearea,"","");
		for(var i in areaList){
			$addSelect(_thearea,areaList[i][0],i);
		}
		if(option.areaId){
			_thearea.val(option.areaId)
		}
	}
};

function addListener(){
	
	function changeAction(){		
		vprovince=this.getAttribute("vprovince");
		vcity=this.getAttribute("vcity");
		varea=this.getAttribute("varea");
		var stype = this.getAttribute("stype");
		var thevalue = this.value;
		var thisselectvar = thevalue
		option.onSelect(this,stype);
		if(stype=="province" && thevalue==""){
 option.onSelectBlankProv(this);
			$id(vcity)?$id(vcity).options.length = 0:"";
			(varea && $id(varea))?$id(varea).options.length = 0:"";
		}
		if(stype=="city" && thevalue==""){
			option.onSelectBlankCity(this);
			thisselectvar=$id(vprovince).value;
		}
		
		option.provId="";
		option.cityId="";
		option.areaId="";
		option.initValue = thisselectvar;
		init();
	}
	if(option.cityHander){
		option.provinceHander.onchange="";
		option.provinceHander.onchange=changeAction;
	}
	if(option.areaHander){
		option.cityHander.onchange = "";
		option.cityHander.onchange = changeAction
	}
};

}
function $float(obj) {
	//显示浮窗,支持各种形态
	var option = {
		id : "", //	唯一id
		title : "",
		html : "",
		left : "",
		top : "",
		width : "400",
		showClose : true,
		closeId : "",
		height : "",
		leaver : 2, //浮层等级
		fix : false, //是否固定居中随屏幕滚动，如果为true则left和top无效
		style : "stand", //stand\none\poptip
		cName : "module_box_normal",
		contentStyle:undefined,//自定义content的style，默认是class="box_content"，无style
		autoResize : false, //自动调整高度
		cover : true, //显示覆盖背景
		zindex : 255, //把zindex作为参数传入
		cssUrl : "http://static.paipaiimg.com/module/module_box.css",
		dragble : false, //title部分手否可拖动。默认不可拖动
		onInit : $empty(), //显示完成事件
		onClose : $empty()//关闭事件
	};
	for(var i in obj)
	option[i] = obj[i];
	//初始化
	window._PP_core_float_data ? "" : floatInit(option.cssUrl);
	//获得唯一标记
	window._PP_core_float_data.zIndex++;
	option.id = option.id ? option.id : window._PP_core_float_data.zIndex;
	//关闭浮层的方法
	option.close = closeFloat;
	//销毁浮层的方法
	option.destruct = destructFloat;
	//关闭同等级或者低等级的浮层
	option.closeOther = closeOther;
	//保持浮层随屏幕滚动
	option.keepBoxFix = keepBoxFix;
	//调整浮层大小
	option.resize = resize;
	//显示浮层内容
	option.show = showBox;
	//执行操作
	option.closeOther();
	option.show();
	window._PP_core_float_data.list.push(option);
	//如果标题title可拖动那么执行拖动操作
	if(option.dragble) {
		$initDragItem({
			barDom : option.boxTitleHandel,
			targetDom : option.boxHandel
		});
	}
	return option;
	//关闭浮层的方法
	function closeFloat() {
		if(!option.onClose(option)) {
			return;
		}
		//关闭兄弟和子浮层
		option.closeOther();
		option.destruct();

	}

	//销毁浮层的方法
	function destructFloat() {
		//关闭低级浮层
		this.cover ? window._PP_core_float_data.closeCover() : "";
		if(this.sizeTimer) {
			clearInterval(this.sizeTimer);
		}
		if(this.fixTimer) {
			clearInterval(this.fixTimer);
		}
		this.boxHandel ? document.body.removeChild(this.boxHandel) : "";
		this.boxHandel = null;
		for(var i = 0; i < window._PP_core_float_data.list.length; i++) {
			if(!window._PP_core_float_data.list[i]) {
				continue;
			}
			if(this.id == window._PP_core_float_data.list[i].id) {
				window._PP_core_float_data.list[i] = null;
			}
		}
	}

	//关闭同等级或者低等级的浮层
	function closeOther() {
		for(var i = 0; i < window._PP_core_float_data.list.length; i++) {
			if(!window._PP_core_float_data.list[i]) {
				continue;
			}
			if(window._PP_core_float_data.list[i].leaver >= this.leaver && this.id != window._PP_core_float_data.list[i].id) {
				window._PP_core_float_data.list[i].destruct();
			}
		}
	}

	//显示浮层内容
	function showBox() {
		this.cover ? window._PP_core_float_data.showCover() : "";
		var c = document.createElement("div");
		c.id = 'floatBox_' + this.id;
		this.boxId = 'floatBox_' + this.id;
		c.style.position = "absolute";
		//根据样式输出不同模板，有标题和关闭按钮的
		var content = "";
		if($isBrowser("ie6")) {
			content = '<iframe frameBorder="0" style="position:absolute;left:-2px;top:-2px;z-index:-1;border:none;" id="float_iframe_' + this.id + '"></iframe>';
		}
		var _style = option.contentStyle?(' style="'+option.contentStyle+'" '):"";
		switch(option.style+"") {
		case "stand":
			c.className = option.cName;
			
			c.innerHTML = content + '<div class="box_title" id="float_title_' + this.id + '"><h4>' + this.title + '</h4><a href="javascript:;" style="display:' + (this.showClose ? '' : 'none') + ';"  class="bt_close" id="float_closer_' + this.id + '"></a></div><div class="box_content" '+_style+'>' + this.html + '</div>';
			break;
		case "":
			//根据样式输出不同模板,无任何样式的时候输出一个空的div
			c.className = option.cName;
			c.innerHTML = content + '<div class="box_content" '+ _style +' id="float_title_' + this.id + '">' + this.html + '</div>';
			break;
		case "none":
			//完全空白，不含样式的模板
			c.className = "";
			c.innerHTML = content + '<div class="box_content" '+ _style +' id="float_title_' + this.id + '">' + this.html + '</div>';
			break;
		}
		document.body.appendChild(c);
		this.boxHandel = document.getElementById('floatBox_' + this.id);
		if($isBrowser("ie6")) {
			this.boxIframeHandel = document.getElementById('float_iframe_' + this.id);
		}
		this.boxTitleHandel = document.getElementById('float_title_' + this.id);
		this.boxCloseHandel = document.getElementById('float_closer_' + this.id);
		this.height ? (this.boxHandel.style.height = (option.height == "auto" ? option.height : option.height + "px")) : "";
		this.width ? (this.boxHandel.style.width = (option.width == "auto" ? option.width : option.width + "px")) : "";
		this.boxHandel.style.zIndex = window._PP_core_float_data.zIndex;
		this.sw = parseInt(this.boxHandel.offsetWidth);
		//窗口可见宽度
		this.sh = parseInt(this.boxHandel.offsetHeight);
		//窗口可见高度
		//窗口定位，如果没有指定坐标则居中
		var p = [0, 0];
		p[0] = parseInt(this.left ? this.left : ($getPageScrollWidth() + ($getWindowWidth() - this.sw) / 2));
		p[1] = parseInt(this.top ? this.top : ($getPageScrollHeight() + ($getWindowHeight() - this.sh) / 2));
		//如果超出屏幕则自动移入
		//超出右侧
		(p[0] + this.sw) > ($getPageScrollWidth() + $getWindowWidth()) ? (p[0] = $getPageScrollWidth() + $getWindowWidth() - this.sw - 10) : "";
		//超出底部
		(p[1] + this.sh) > ($getPageScrollHeight() + $getWindowHeight()) ? (p[1] = $getPageScrollHeight() + $getWindowHeight() - this.sh - 10) : "";

		//超出顶部
		p[1] < $getPageScrollHeight() ? p[1] = $getPageScrollHeight() : "";
		//超出左侧
		p[0] < $getPageScrollWidth() ? p[0] = $getPageScrollWidth() : "";
		if($isBrowser("ie6")) {
			//调整iframe的高度与浮窗一样大小
			this.boxIframeHandel.height = (this.sh - 2) + "px";
			//兼容border的存在
			this.boxIframeHandel.width = (this.sw - 2) + "px";
		}
		//显示iframe坐标
		this.boxHandel.style.left = p[0] + "px";
		this.boxHandel.style.top = p[1] + "px";
		var _this = this;
		this.boxCloseHandel ? this.boxCloseHandel.onclick = function() {
			_this.close();
			return false;
		} : "";
		if(this.closeId) {
			var arrClose = this.closeId.split(",");
			for(var len = arrClose.length; len--; ) {
				$id(arrClose[len]).onclick = function() {
					_this.close();
					return false;
				}
			}
		};
		this.keepBoxFix()
		if(!this.onInit(option)) {
			return;
		}
	}

	//调整浮层大小
	function resize(w, h) {
		if(w && w.constructor === Number) {
			this.sw = w;
			//窗口可见宽度
			this.boxHandel.style.width = this.sw + "px";
			if($isBrowser("ie6")) {
				this.boxIframeHandel.width = (this.sw - 2) + "px";
			}
			this.boxHandel.style.left = $getPageScrollWidth() + ($getWindowWidth() - this.sw) / 2 + "px";
		}
		if(h && h.constructor === Number) {
			this.sh = h;
			//窗口可见高度
			this.boxHandel.style.height = this.sh + "px";
			if($isBrowser("ie6")) {
				this.boxIframeHandel.height = (this.sh - 2) + "px";
			}
			//this.boxHandel.style.top = $getPageScrollHeight()+($getWindowHeight()-this.sh)/2 + "px";
			var st = this.boxHandel.style;
			//这里的position要么是absolute，要么是fixed，如果是absolute的话，设置top就需要加上scroll了
			var filledHeight = st.position == "fixed" ? 0 : $getPageScrollHeight();
			this.boxHandel.style.top = filledHeight + ($getWindowHeight() - this.sh) / 2 + "px";
		}
	}

	//保持浮层随屏幕滚动
	function keepBoxFix() {
		if(this.fix) {
			if($isBrowser("ie6")) {
				//if(navigator.appVersion.split(";")[1].replace(/[ ]/g,"")=="MSIE6.0"){
				var _this = this;
				this.fixTimer = setInterval(function() {
					_this.boxHandel.style.left = ($getPageScrollWidth() + ($getWindowWidth() - _this.sw) / 2) + "px";
					_this.boxHandel.style.top = ($getPageScrollHeight() + ($getWindowHeight() - _this.sh) / 2) + "px";
				}, 30);
			}
			else {
				this.boxHandel.style.position = "fixed";
				this.boxHandel.style.left = ($getWindowWidth() - this.sw) / 2 + "px";
				this.boxHandel.style.top = ($getWindowHeight() - this.sh) / 2 + "px";
			}
		}
	};

	//当内容的发生变化时自动调整窗口高度
	function autoResize() {
		if(this.autoResize) {
			var _this = this;
			this.sizeTimer = setInterval(function() {
				this.sw = this.boxHandel.offsetWidth;
				//窗口可见宽度
				this.sh = this.boxHandel.offsetHeight;
				//窗口可见高度
				//调整iframe的高度与浮窗一样大小
				if($isBrowser("ie6")) {
					this.boxIframeHandel.height = (this.sh - 2) + "px";
					this.boxIframeHandel.width = (this.sw - 2) + "px";
				}
			}, 50);
		}
	};

	//初始化全局浮层cache
	function floatInit(cssUrl) {
		//加载css,如果cssUrl为空则不异步加载样式
		if(cssUrl) {
			$loadCss(cssUrl);
		}
		window._PP_core_float_data = {};
		//起始层号从255开始
		window._PP_core_float_data.zIndex = option.zindex;
		//浮层库列表
		window._PP_core_float_data.list = [];
		//增加一个覆盖的半透明浮层
		createCover();
		_PP_core_float_data.showCover = showCover;
		_PP_core_float_data.closeCover = closeCover;
		//创建浮层对象
		function createCover() {
			var c = document.createElement("div");
			c.id = "floatCover";
			with(c.style) {
				display = "none";
				width = "0px";
				height = "0px";
				backgroundColor = "#cccccc";
				zIndex = 250;
				position = "fixed";
				hasLayout = -1;
				left = "0px";
				top = "0px";
				filter = "alpha(opacity=50);";
				opacity = "0.5";
			}
			document.body.appendChild(c);
			if($isBrowser("ie6")) {
				c.innerHTML = '<iframe frameBorder="0" style="position:absolute;left:0;top:0;width:100%;z-index:-1;border:none;" id="floatCover_iframe"></iframe>';
				c.style.position = "absolute";
			}
			window._PP_core_float_data.cover = document.getElementById("floatCover");
			window._PP_core_float_data.coverIframe = document.getElementById("floatCover_iframe");
			window._PP_core_float_data.coverIsShow = false;
			window._PP_core_float_data.coverSize = [0, 0];
		}

		//显示灰色浮层背景对象
		function showCover() {
			window._PP_core_float_data.cover.style.display = "block";
			window._PP_core_float_data.coverIsShow = true;
			keepCoverShow();
			window._PP_core_float_data.coverTimer = setInterval(function() {
				keepCoverShow();
			}, 50);
			//保持浮层的全屏幕覆盖尺寸
			function keepCoverShow() {
				var _d = window._PP_core_float_data
				if(_d.coverIsShow) {
					var ch = $getContentHeight(), wh = $getWindowHeight(), cw = $getContentWidth(), ww = $getWindowWidth();
					var newSize = [wh, ww];
					if($isBrowser("ie6")) {
						//if(navigator.appVersion.split(";")[1].replace(/[ ]/g,"")=="MSIE6.0"){
						_d.cover.style.top = $getPageScrollHeight() + "px";
						//newSize[0]+=600;
					};
					if(newSize.toString() != window._PP_core_float_data.coverSize.toString()) {

						_d.coverSize = newSize;
						_d.cover.style.height = newSize[0].toFixed(0) + "px";
						_d.cover.style.width = newSize[1].toFixed(0) + "px";
						if(_d.coverIframe) {
							_d.coverIframe.style.height = newSize[0].toFixed(0) + "px";
							_d.coverIframe.style.width = newSize[1].toFixed(0) + "px";
						}
					}
				}
			}

		}

		//关闭灰色浮层背景对象
		function closeCover() {
			window._PP_core_float_data.cover.style.display = "none";
			window._PP_core_float_data.coverIsShow = false;
			clearInterval(window._PP_core_float_data.coverTimer);
		}

	};

}
function $floatTip(obj){
//显示浮窗,支持各种形态
	var option={
		title:"",
		html:"",
		left:"",
		top:"",
		width:'400',
		height:"",
		fix:false,	//是否固定居中随屏幕滚动，如果为true则left和top无效
		style:"",	//stand\none\poptip
		cover:true,	//显示覆盖背景
		onClose:function(){return true;}	//关闭事件
	};
	for(var i in obj){
		option[i]=obj[i];
	}
	$loadCss("http://static.paipaiimg.com/module/module_box.css");
	//关闭掉类似窗口
	if(window._tipsHandle){
		try{window._tipsHandle.close();window._tipsHandle="";}catch(e){}
	}
	//处理覆盖的半透明背景
	if(option.cover){
		var c=document.createElement("div");
		c.id="coverbg";
		c.style.display="none";
		c.style.width="0px";
		c.style.height="0px";
		c.style.backgroundColor ="#cccccc";
		c.style.filter="Alpha(Opacity=60)";
		c.style.opacity="0.60";
		c.style.zIndex=200;
		c.style.position="absolute";
		c.style.left="0px";
		c.style.top="0px";
		document.body.appendChild(c);
		var slist=document.getElementsByTagName("select");
		for(var i=0;i<slist.length;i++){
			if(slist[i].style.display!="none"){
				slist[i].style.display="none";
				slist[i].setAttribute("hideForCover","1");
			}
		}
		option.hideSelectList=slist;
		c.style.display="block";
		c.style.left="0px";
		c.style.top="0px";
		c.style.position="absolute";
		option.coverbg=c;
		window._floatTipTimer1=setInterval(function(){
			var c=document.getElementById("coverbg");
			if(c){
				if(c.style.display=="none"){return;}
				c.style.height=($getContentHeight()>$getWindowHeight()?$getContentHeight():$getWindowHeight())+"px";
				c.style.width=($getContentWidth()>$getWindowWidth()?$getContentWidth():$getWindowWidth())+"px";
			}else{
				clearInterval(window._floatTipTimer1);
				window._floatTipTimer1=null;
			}
		},30);
	}
	var c=document.createElement("div");
	c.id='float_box';
	//根据样式输出不同模板，有标题和关闭按钮的
	if(option.style=="stand"){
		c.className="module_box_normal";
		c.innerHTML='<iframe frameBorder="0" style="position:absolute;left:0;top:0;width:100%;z-index:-1;filter:Alpha(Opacity=0);opacity:0;border:none;" id="float_iframe"></iframe><div class="box_title"><h4>'+option.title+'</h4><a href="javascript:;" class="bt_close" id="float_closer"></a></div><div class="box_content">'+option.html+'</div>';
	}
	//根据样式输出不同模板,无任何样式的时候输出一个空的div
	if(option.style==""){
		c.className="module_box_normal";
		c.innerHTML='<iframe frameBorder="0" style="position:absolute;left:0;top:0;width:100%;z-index:-1;filter:Alpha(Opacity=0);border:none;" id="float_iframe"></iframe><div class="box_content">'+option.html+'</div>';
	}
	if(option.style=="none"){
		//完全空白，不含样式的模板
		c.className="";
		c.style.position="absolute";
		c.innerHTML='<iframe frameBorder="0" style="position:absolute;left:0;top:0;width:100%;z-index:-1;filter:Alpha(Opacity=0);border:none;" id="float_iframe"></iframe><div class="box_content">'+option.html+'</div>';
	}	
	document.body.appendChild(c);
	//返回操作句柄
	option.frame=c;
	option.height?(option.frame.style.height=option.height+"px"):"";
	option.width?(option.frame.style.width=option.width+"px"):"";
	option.frame.style.zIndex=300;
	option.frame.style.position="absolute";
	option.closer=document.getElementById("float_closer");
	option.iframe=document.getElementById("float_iframe");
	//窗口定位，如果没有指定坐标则居中
	var p=[0,0];
	p[0]=(option.left?option.left:($getPageScrollWidth()+($getWindowWidth()-option.frame.scrollWidth)/2));
	p[1]=(option.top?option.top:($getPageScrollHeight()+($getWindowHeight()-option.frame.scrollHeight)/2));
	//如果超出屏幕则自动移入
	//超出右侧
	(p[0]+option.frame.scrollWidth)>($getPageScrollWidth()+$getWindowWidth())?(p[0]=$getPageScrollWidth()+$getWindowWidth()-option.frame.scrollWidth-10):"";
	//超出底部
	(p[1]+option.frame.scrollHeight)>($getPageScrollHeight()+$getWindowHeight())?(p[1]=$getPageScrollHeight()+$getWindowHeight()-option.frame.scrollHeight-10):"";
	//超出顶部
	p[1]<$getPageScrollHeight()?p[1]=$getPageScrollHeight():"";
	//超出左侧
	p[0]<$getPageScrollWidth()?p[0]=$getPageScrollWidth():"";
	//调整iframe的高度与浮窗一样大小
	option.iframe.height=option.frame.scrollHeight+"px";
	option.iframe.width=option.frame.scrollWidth+"px";
	option.frame.style.left=p[0]+"px";
	option.frame.style.top=p[1]+"px";
	//如果是fix则随屏幕滚动
	if(option.fix){
		if($isBrowser("ie6")){
			setInterval(function(){
				var c=document.getElementById("float_box");
				if(c){
				  c.style.left=($getPageScrollWidth()+($getWindowWidth()-c.scrollWidth)/2)+"px";
				  c.style.top=($getPageScrollHeight()+($getWindowHeight()-c.scrollHeight)/2)+"px";
				}
			},30);
		}else{
			var c=document.getElementById("float_box");
			c.style.position="fixed";
			c.style.left=($getWindowWidth()-c.scrollWidth)/2+"px";
			c.style.top=($getWindowHeight()-c.scrollHeight)/2+"px";
		}
	}
	//绑定关闭按钮的事件
	option.closer?option.closer.onclick=function(){
		option.close();
	}:"";
	//关闭方法
	option.close=function(){
		if(!option.onClose()){	return;	}
		option.frame?option.frame.style.display="none":"";
		option.frame.parentNode.removeChild(option.frame);
		if(option.coverbg){
			option.coverbg.style.display="none";
			option.coverbg.parentNode.removeChild(option.coverbg);
			var slist=option.hideSelectList;
			for(var i=0;i<slist.length;i++){
				if(slist[i].getAttribute("hideForCover")=="1"){
					slist[i].style.display="";
				}
			}
		}
	};
	window._tipsHandle=option;
	return option;
}
function $formatCGIJson(opt) {
    var _opt = {
        src: "",
        //数据源路径
        template: '',
        //模板内容
        pTag: "",
        //ptag标记
        showLength: 0,
        //只显示列表中的几个，如果为0的时候，显示所有
        startNum: 0 //从第几个开始
    },
		actid;
    _opt = $extend(_opt, opt);
    if (_opt.src == "") {
        return;
    }
    //根据卖场id构造callback函数
    if (_opt.src.toLowerCase().indexOf("martadretrieval") > 0) {
        actid = $getQuery("actid", _opt.src);
        _opt.callback = 'expressJsonCallBack' + actid;
        $loadScript(_opt.src + "&callback=expressJsonCallBack" + actid + "&t=" + Math.random());
    } else if (_opt.src.toLowerCase().indexOf("cpc_search") > 0 || _opt.src.toLowerCase().indexOf("cpcad_search") > 0) {
        //点击竞价的请求
        var refer = document.referrer ? encodeURIComponent(document.referrer.split('?')[0]) : '';
        _opt.callback = 'cpcAdListCallback' + $getQuery("adsbannerid", _opt.src);
        $loadScript(_opt.src + '&callback=' + _opt.callback + '&ref=' + refer + '&curl=' + encodeURIComponent(location.href.split('?')[0]) + "&t=" + Math.random());
    } else {
        _opt.callback = $getFileName(_opt.src).replace(/\.js/gi, "");
        $loadScript(_opt.src + "?t=" + Math.random());
    }
    window[_opt.callback] = (function (_opt) {
        return function (obj) {
            if (obj.errCode == 0) {
                var CGINUM = $$("[dataUrlFashion=" + _opt.src + "]").length;
                if (CGINUM > 1) {
                    var CGIDATA = [];
                    $$("[dataUrlFashion=" + _opt.src + "]").each(
					function () {
					    var CGIOPT = {
					        src: $getRightUrlForMarket($$(this).attr("dataUrlFashion")),
					        contentId: (this),
					        page: $$(this).attr("pageId") ? true : false,
					        pageId: $$(this).attr("pageId"),
					        pTag: $$(this).attr("dataPtag") || $$(this).attr("pTag"),
					        imagesType: ($$(this).attr("imagesType") || "image"),
					        showLength: ($$(this).attr("showLength") || 5),
					        startNum: ($$(this).attr("startNum") || 0),
					        template: $$(this).attr("template") ? $$(this).attr("template") : $getMarketTemplate($$(this).attr("class") ? $$(this).attr("class") : "pp_list_10_160x160", $$(this).attr("btn"), $$(this).attr("price"), $$(this).attr("oldprice"), $$(this).attr("soldOut")),
					        html: []
					    };
					    CGIDATA.push(CGIOPT);
					});
                }
                var list = obj.data.adList,
					html = [],
					showLength = (parseInt(_opt.showLength) || list.length),
					startNum = (parseInt(_opt.startNum) || 0);
                if (CGINUM > 1) {
                    showLength = list.length;
                    startNum = 0;
                }
                for (var i = 0, len = showLength; i < len; i++) {
                    var itemInfo = list[i + startNum];
                    if (!itemInfo) {
                        continue;
                    }
                    temp = _opt.template;
                    var ptag=_opt.pTag ? _opt.pTag :(itemInfo["ptag"]||"");
                    if(ptag.split(".").length==2){ptag=ptag+"."+(parseInt(i)+1);};					
                    itemInfo["sysPtag"] =ptag;
                    itemInfo["cUrl"] = itemInfo["commodityUrl"];
                    itemInfo["url"] = itemInfo["commodityUrl"] ? (itemInfo["commodityUrl"] + (itemInfo["commodityUrl"].indexOf('?') == -1 ? "?" : "&") + "PTAG=" + itemInfo["sysPtag"]) : "http://auction1.paipai.com/" + itemInfo["id"] + "?PTAG=" + itemInfo["sysPtag"]; //商品链接
                    itemInfo["gradeIcon"] = $getGradeIcons({
                        qq: itemInfo["qq"],
                        showScore: false,
                        score: itemInfo["userCredit"],
                        type: "seller"
                    }); //等级图标
                    recmdReason = itemInfo["recmdReason"];
                    itemInfo["discount"] = Math.round(parseFloat(itemInfo["newPrice"]) - parseFloat(itemInfo["vouPrice"])); //红包面值
                    itemInfo["rec_title"] = recmdReason ? recmdReason.split("#")[0] : "";
                    itemInfo["rec_description"] = recmdReason ? recmdReason.split("#")[1] : "";
                    itemInfo["shopUrl"] = "http://" + itemInfo["qq"] + ".paipai.com/?PTAG=" + itemInfo["sysPtag"];
                    itemInfo["nPrice"] = itemInfo["newPrice"] ? "<ins><em class='n'>" + itemInfo["newPrice"].split(".")[0] + ".</em><em class='n0'>" + (itemInfo["newPrice"].split(".")[1] || "") + "</em></ins>" : "";
                    itemInfo["oPrice"] = itemInfo["oldPrice"] ? "<del><em class='o'>" + itemInfo["oldPrice"].split(".")[0] + ".</em><em class='o0'>" + (itemInfo["oldPrice"].split(".")[1] || "") + "</em></del>" : "";
                    itemInfo["vPrice"] = itemInfo["vouPrice"] ? "<em class='v'>" + itemInfo["vouPrice"].split(".")[0] + ".</em><em class='v0'>" + (itemInfo["vouPrice"].split(".")[1] || "") + "</em>" : "";
                    itemInfo["aPrice"] = itemInfo["adSentence"] ? "<em class='a'>" + itemInfo["adSentence"].split(".")[0] + ".</em><em class='a0'>" + (itemInfo["adSentence"].split(".")[1] || "") + "</em>" : "";
                    itemInfo["uploadTimeSim"] = itemInfo['uploadTime'] ? itemInfo['uploadTime'].substr(11, 5) : "";
                    itemInfo["price"] = $formatPrix(itemInfo['newPrice'], "x.x")[0];
                    itemInfo["order"] = (i + 1);
                    if (CGINUM > 1) {
                        for (var k = 0; k < CGINUM; k++) {
                            itemInfo["realImage"] = itemInfo[CGIDATA[k].imagesType];
                            var maxvalue = parseInt(parseInt(CGIDATA[k].startNum) + parseInt(CGIDATA[k].showLength));
                            if (i >= parseInt(CGIDATA[k].startNum)) {
                                if (i < maxvalue) {
                                    temp = CGIDATA[k].template;
                                    for (var key in itemInfo) {
                                        var tempKey = '{#' + key + '#}';
                                        temp = temp.split(tempKey).join(itemInfo[key]);
                                    }
                                    CGIDATA[k].html.push(temp);
                                }
                            }
                        }
                    } else {
                        itemInfo["realImage"] = itemInfo[_opt.imagesType];
                        for (var key in itemInfo) {
                            var tempKey = '{#' + key + '#}';
                            temp = temp.split(tempKey).join(itemInfo[key]);
                        }
                        html.push(temp);
                    }
                }
                if (CGINUM > 1) {
                    for (var k = 0; k < CGINUM; k++) {
                        CGIDATA[k].contentId.innerHTML = CGIDATA[k].html.join('');
                    }
                } else {
                    _opt.contentId.innerHTML = html.join('');
                }
            }
            PP.market.base.cgiXmlJsonReady();
            $autoLoadImages();
        }

    })(_opt);
}
function $formatDateMini(date){
  var now=new Date(),
     nowY=now.getFullYear(),
     nowM=now.getMonth(),
     nowD=now.getDate(),
     nowH=now.getHours(),
     nowI=now.getMinutes(),
     cur=new Date($parseDate(date)),
     curY=cur.getFullYear(),
     curM=cur.getMonth(),
     curD=cur.getDate(),     
     curH=cur.getHours(),
     curI=cur.getMinutes(),
     msg=$formatDate(cur,"YYYY年MM月DD日 hh:ii");
  switch(true){
    //必须用(new Date)，不能直接用now，否则now的值会被改变
    case (new Date()).setMinutes(nowI - 1) <= cur: 
      msg="刚刚";
    break;
    case (new Date()).setMinutes(nowI - 60) <= cur: 
      msg= (nowH - curH)*60 + (nowI - curI) + "分钟之前";
    break;
    case (nowY == curY && nowM == curM && nowD == curD) : 
      msg= "今天 " + $addZero(curH,2) + ":" + $addZero(curI,2);
    break;    
    case (nowY == curY && nowM == curM && nowD - 1 == curD) : 
      msg= "昨天 " + $addZero(curH,2) + ":" + $addZero(curI,2);
    break;  
    case (nowY == curY) : 
      msg= $formatDate(cur,"MM月DD日 hh:ii");
    break;  
  };
  return msg;
}
function $formatXpJson(opt){
	var option = {
		src:"",//数据源路径
		dataBizType:"xp",//数据源业务类型，目前支持xp(选品系统cgi),xpFile(选品静态文件),tjw(推荐位系统),mart(卖场快车) cpc(CPC)
		template:"",//数据模板
		templateType:1,//模板据类型：取值为1和2，1表示{#fieldName#}形式的模板       2表示使用$formatArray形式的模板 
		content:"",//dom容器
		startIndex:0,//起始索引，从0开始
		length:0,//显示多少条数据,0表示不限制,即显示所有数据（一般不用传）
		propertyRules:null,//属性规则，可用此实现属性重定义、属性计算、新增属性，格式为newProperty:rule,如discount:({#newPrice#}/{#oldPrice#}).toFixed(1),构造成json对象即可(已默认支持itemIndex,当前项所在的索引)
		dataList:[],//数据列表
		preFunc:function(){return true;},//数据预处理，若不想通过propertyRules方式处理数据，则可以通过此方式预处理数据
		postFunc:function(){return true;}
	};
	$extend(option,opt);
	if(!option.src || !option.content){return ;}
	var callbackName = getCallbackName();
	if(!callbackName){return ;}
	$loadScript(option.src+(option.src.indexOf("?")>-1?"&":"?")+"t="+new Date().getTime()/1000);
	window[callbackName] = function(json){
		if(json.errCode == 0){
			if(option.dataBizType=="xp" || option.dataBizType=="tjw" || option.dataBizType=="mart" ||option.dataBizType=="cpc" ||option.dataBizType=="xpFile"){
				option.dataList = json.data.adList;
			}
			bindData();
		}else if(option.dataBizType=="xp" && json.errCode==1){//在选品数据的errCode为1时，重新拉取
			$loadScript(json.URL+"?t="+new Date().getTime()/1000);	
		}
	};
	function bindData(){
		if(option.dataList.length == 0){return ;}
		option.preFunc();
		if(option.length == 0){option.length = option.dataList.length;}
		var str = "";
		if(option.templateType == 2){
			 str = $formatArray(option.template,option.dataList.slice(0,option.length));
		}else{
			var html = [];
			for(var i=option.startIndex;i<option.length;i++){
				var temp = option.template;
				var dataItem = option.dataList[i];
				if(!dataItem){continue;}
				dataItem.itemIndex = i;
				if(option.propertyRules){
					var rules = option.propertyRules; 
					for(var j in rules){
						var value = rules[j];
						for(var k in dataItem){
							value = value.replace((new RegExp("{#"+k+"#}","g") ),dataItem[k]) 	
						}
						value = eval(value);
						dataItem[j]=value;
					}
				}
				for(var j in dataItem){
					temp=temp.replace((new RegExp("{#"+j+"#}","g") ),dataItem[j])
				}
				html.push(temp);
			}
			str = html.join("");
		}
		option.content.innerHTML = $xss(str,"none");	
		option.postFunc();
	};
	//取得回调函数的名字
	function getCallbackName(){
		if(option.dataBizType=="xp"){
			return $getQuery("callback",option.src);
		}else if(option.dataBizType=="tjw"){
			return option.src.match(/\/(tjw\d{10})(?=\.js)/)[1];
		}else if(option.dataBizType=="mart"){
			return "_callback";	
		}else if (option.dataBizType=="cpc") {
			return "cpcAdListCallback";
		}else if (option.dataBizType=="xpFile") {
			return  option.src.match(/\w*(?=\.js)/)[0];
		};
		return "";
	}
}
function $freshHeadLogin() {
	if($id("headLogin")) {
		if(!window.chkLoginCallBack) {
			window.chkLoginCallBack = function(o) {
				var opt = o,
				tempArr = [],
				comdyDom = $id("comdyNum"),
				visitkey = $getCookie("visitkey"),
				tempNode = $id("headLogin"),
				nikeName = opt["nickName"];
				if (opt["isLogin"] && (opt["propertyMask"] & 0x20000000)) {
					$loadCss("http://static.paipaiimg.com/member/activate.css");
					$loadScript("http://static.paipaiimg.com/js/pp.mypp.newcomer.20110307.js");
				}
				if (opt["shopCartComdyKinds"] && parseInt(opt["shopCartComdyKinds"]) > 0) {
					if (comdyDom) {
						comdyDom.innerHTML = $xss("(" + opt["shopCartComdyKinds"] + ")", "none");
					}
				}
				tempArr.push("欢迎您，")
				if ($strTrim(nikeName).length > 0) {
					tempArr.push($strTrim(nikeName));
					tempArr.push("");
					if (opt["isLogin"]) {
						tempArr.push(' <a href="http://member.paipai.com/cgi-bin/c2cUser_LoginOut' + (window.location.href.indexOf('bbs') != -1 ? '?u=http://bbs.paipai.com': '') + '" class="blue" target="_top">[退出]</a>');
					} else {
						tempArr.push(' <a href="http://member.paipai.com/cgi-bin/login_entry?PTAG=20034.1.1" target="_top">登录</a>　<a href="http://freereg.qq.com/?PTAG=20034.1.2" target="_top">免费注册</a>');
					}
					if (tempNode) {
						tempNode.innerHTML = $xss(tempArr.join(""), "none");
					}
				}
				if (window.location.href.indexOf('inc_head_qshow.shtml') > 0) {
					$setCookie("returnurl", "http://lady.paipai.com/", "", "/", "paipai.com");
				};
			};
		}
		$loadScript("http://member.paipai.com/cgi-bin/onlinechecker/GetOnlineInfo?callback=chkLoginCallBack&t=" + Math.random());
	}
}
function $getBuyerVipIcon(level,state){
//获取彩钻vip用户等级图标
	var html=['<img src="http://static.paipaiimg.com/module/icon/credit/'],
		map={0:'color_dis_lv'+level,1:'color_lv'+level};
	html.push(map[state*1]);
	html.push('.gif" alt="" />');
	return html.join('');
}
function $getBuyerVipNextGradeExp(ex){
//获取彩钻vip用户升级所需积分
	var gradeList = [1,150,510,1200,3000];
	var needExp = 0;
	var html = "";
	for (var i = 0, len = gradeList.length; i < len; i++){
		if (ex < gradeList[ i ] ){
			needExp = gradeList[ i ] - ex;
			break;
		}
	}
	if(needExp == 0){
		html = "";
	}else{
		html = needExp;
	}	
	return needExp;
}
function $getColorFlash(opt){
    var option={
        maxXp:30000, //成长值上限
        userXp:0,    //当前成长值
        state:0        //彩钻状态，1为激活，0为灰态
    },
	flash ='<object width="490" height="50" data="http://static.paipaiimg.com/flash/release/buyervip/main.swf?t=201003101&maxXp={#maxXp#}&userXp={#userXp#}&invalid={#invalid#}" type="application/x-shockwave-flash"><param value="http://static.paipaiimg.com/flash/release/buyervip/main.swf?t=201003101&maxXp={#maxXp#}&userXp={#userXp#}&invalid={#invalid#}" name="movie"><param name="quality" value="high"><param value="transparent" name="wmode"><param value="maxXp={#maxXp#}&userXp={#userXp#}&invalid={#invalid#}" name="flashvars"></object>';
	for(var i in opt){
        option[i]=opt[i];
    } 
	return flash.replace(/{#maxXp#}/g,option.maxXp).replace(/{#userXp#}/g,option.userXp).replace(/{#invalid#}/g,option.state);
}
function $getColorIcon(level,state,obj){
	//获取彩钻vip用户等级图标
	// level  彩钻等级 state  彩钻状态 obj未扩展参数目前支持isSmall属性
	var obj=obj||{},
		type=obj.isSmall?"png":"gif",
		tag=obj.isSmall?"s":"",
		html='<img src="http://static.paipaiimg.com/module/icon/credit/'+ (state==0?'color'+tag+'_dis_lv':'color'+tag+'_lv') + level+'.'+type+'" alt="'+(state==0?(level==0?"未开通彩钻":"彩钻已熄灭"):"拍拍网彩钻"+level+"级")+'" />';
	return html;
}
function $getCommIcons(opt) {
//输出商品的图标代码
var option = {
	property: "", //商品属性串
	iconTag: "", //图标列表
	iconbg: "http://static.paipaiimg.com/assets/common/ppicons.png?t=20091210", //图标大图的地址
	text: false, //是否在图标后面跟文字
	//所有的icon列表，以及对应的取值标记，前面的是用户认证串中的
	ptag: "",
	ptagList: {
		"reallyicon": "30072.4.8",
		"sevenship": "30072.4.6",
		"repayship":"30072.4.5",
		"rapidship": "30072.4.7",
		"chengbao": "1020.4.5"
	},
	//图标跳转链接(如"sevenshi":"http://www.paipai.com/trust/chengbao.shtml?tab=2&{#ptag#}#1")
	hrefs: {},
	//每一项的结构为图标名:[标记位0，标记所在的变量1,输出说明2,帮助链接3,x坐标4,y坐标5,高6,宽7,右边间距8,左边距9,上边距10,下边距11,图标后面的文字12，链接目标13(默认_blank)]
	icons: {
		"redicon": [0x4, "property", "该商品支持红包折价交易，只需使用一定面值的红包，即可按照红包优惠价购买。", "http://www.paipai.com/hongbao/help.shtml?{#ptag#}#1", "-110", "-406", "16", "16", "5", "0", "0", "0", "红包商品", "_blank"],
		"othership": [0x8, "property", "该商品支持货到付款，请主动联系卖家发货", "http://help.paipai.com/content/help_20318.shtml?{#ptag#}", "-80", "-50", "22", "18", "5", "0", "0", "0", "货到付款", "_blank"],
		"qccicon": [0x100, "property", "该卖家已通过严格的QQ空间审核和拍拍网个人实名认证，可为买家提供优质的QQ空间个性化虚拟商品。", "http://help.paipai.com/content/help_30120.shtml?{#ptag#}", "-130", "-406", "16", "16", "5", "0", "0", "0", "", "_blank"],
		"autoship": [0x200, "property", "该商品支持自动发货交易，付款后立即拿到卡号密码，安全又便捷。", "http://bbs1.paipai.com/g40048c0i4303s0p0.html?{#ptag#}", "-86", "-72", "22", "25", "5", "0", "0", "0", "自动发货", "_blank"],
		"autosmallcard": [0x8000, "property", "该商品支持自动发货交易，付款后立即拿到卡号密码，安全又便捷。", "http://bbs1.paipai.com/g40048c0i4303s0p0.html?{#ptag#}", "-54", "-72", "22", "25", "5", "0", "0", "0", "自动发货", "_blank"],
		"reallyicon": [0x2000000, "property", "拍拍购物更放心，卖家承诺在买家收货后14天内如发现该商品不是正品，将会假一赔三给买家。", "http://www.paipai.com/trust/chengbao.shtml?tab=4&{#ptag#}#1", "-40", "-345", "16", "16", "5", "0", "0", "0", "正品 假一赔三", "_blank"],
		"sevenship": [0x80000, "property", "拍拍购物更放心，卖家承诺在买家收货后7天内可无理由退换货。", "http://www.paipai.com/trust/chengbao.shtml?tab=2&{#ptag#}#1", "-20", "-345", "16", "16", "5", "0", "0", "0", "7天包退", "_blank"],
		"repayship": [0x40000, "property", "拍拍购物更放心，卖家承诺在买家收货后14天内如该商品有质量问题，将会由拍拍网先行赔付给买家。", "http://www.paipai.com/trust/chengbao.shtml?{#ptag#}#1", "0", "-345", "16", "16", "5", "0", "0", "0", "先行赔付", "_blank"],
		"vedioshow": [0x100000, "property", "商品含有视频", "#commodityvediolink", "-114", "-72", "22", "19", "5", "0", "0", "0", "视频商品", ""],
		"rapidship": [0x800000, "property", "拍拍购物更放心，卖家承诺如未在规定时间内代充到买家指定账户，将会赔付给买家。", "http://www.paipai.com/trust/chengbao.shtml?tab=3&{#ptag#}#1", "-60", "-345", "16", "16", "5", "0", "0", "0", "诚保代充", "_blank"],
		"shangpin": [0x200000, "property", "该商品为精品女装，经过人工严格审核并加入诚信保证计划，如有质量问题可先行赔付给买家，实物拍摄，品质保证。", "http://help.paipai.com/content/help_20119.shtml?{#ptag#}", "-96", "-178", "16", "16", "10", "0", "0", "0", "女装裳品", "_blank"],
		"chengbao": [0x1, "property", "已加入诚信保证计划", "http://help.paipai.com/content/help_208.shtml?{#ptag#}", "-80", "-345", "16", "16", "10", "0", "0", "0", "先行赔付", "_blank"],
		"tejia": [0x04000000, "property", "特价", "#1", "-110", "-425", "16", "16", "0", "0", "0", "0", "特价", ""],
		"promotion": [0x1, "property", "带“满”字商品都为促销优惠商品。", "#1", "-130", "-425", "16", "16", "5", "0", "0", "0", "满立减，满立送", ""],
		"reddiamond": [0x10, "property", "红钻VIP特卖会商品均由拍拍优质卖家提供，每周精选各类超值潮品，折扣、品质、包邮，免费QQ秀礼包天天送！", "http://show.qq.com/show_v3.html?MUrl=/qqshow_v3/htdocs/mall/inc/sellmall.html", "0", "-460", "16", "16", "5", "0", "0", "0", "红钻VIP", "_blank"],
		"freeback7day": [0x800, "property", "7天免邮包退", "http://www.paipai.com/trust/plan/index.shtml?tab=3&PTAG=30072.4.9", "-160", "-345", "16", "16", "5", "0", "0", "0", "7天免邮包退", ""],
		"fastsend": [0x400, "property", "拍拍购物更放心，卖家承诺当日4点至16点之间付款订单12小时内发货，其余时间付款订单24小时内发货", "http://www.paipai.com/trust/plan/?tab=8&PTAG=30072.4.13", "-140", "-345", "16", "16", "5", "0", "0", "0", "快速发货", ""]
	}
};
for (var i in opt) {
	option[i] = opt[i];
}
var iconList = option.iconTag.split(","), newPtag, tempHref;
var _return = "";
for (var i = 0; i < iconList.length; i++) {
	//分别确认每一个项目
	var _it = option.icons[iconList[i]];	
	if (_it) {
		tempHref = option.hrefs[iconList[i]];
		tempHref && (_it[3] = tempHref);
		newPtag = option.ptag != "" ? option.ptag : (option.ptagList[iconList[i]] ? option.ptagList[iconList[i]] : "");
		_it[3] = _it[3].replace("{#ptag#}", newPtag == "" ? "" : "PTAG=" + newPtag);
		_return += (_it[0] & option[_it[1]]) ? '<a href="' + _it[3] + '" target="' + (_it[13]||"_blank") + '" title="' + _it[2] + '" tag="' + iconList[i] + '" style="margin:0;' + ((option.text) ? 'margin-right:' + _it[8] + 'px;' : '') + '"><span class="' + iconList[i] + '" style="display: -moz-inline-stack;display: inline-block;zoom:1;*display: inline;margin-right:' + _it[8] + 'px;margin-left:' + _it[9] + 'px;margin-top:' + _it[10] + 'px;margin-bottom:' + _it[11] + 'px;background:url(' + option.iconbg + ') no-repeat;outline:none;font-size:0px;vertical-align: middle;cursor:pointer;width:' + _it[7] + 'px;height:' + _it[6] + 'px;background-position:' + _it[4] + 'px ' + _it[5] + 'px;"></span>' + ((option.text) ? _it[12] : '') + '</a>' : "";
	}
}
return _return;
}
function $getContentLenWithUrl(content, len){  
  var urlRegExp = window['pp_mini_url_reg_exp'];
  if(!urlRegExp){
    urlRegExp = window['pp_mini_url_reg_exp'] = /((https|http):\/\/)(([0-9a-zA-Z_!~*'().&=+$%-]+: )?[0-9a-zA-Z_!~*'().&=+$%-]+@)?((([0-9]{1,3}\.){3}[0-9]{1,3})|(([0-9a-zA-Z_!~*'()-]+\.)?([0-9a-zA-Z][0-9a-zA-Z-]{0,61})?[0-9a-zA-Z]\.[a-zA-Z]{2,6}(\.[a-zA-Z]{2,6})?))(:[0-9]{1,4})?((\/?[0-9a-zA-Z_!~*'().:;?@&=+$%#\/-]+)*)/gi;
  }
  var tempLen = len ? len : 20;  //目标长度
  var str = window['pp_mini_url_lenstr' + len];
  if(!str){
    var s = [];
    for(var i = 0; i < len; ++i){s.push("*");}
    str = window['pp_mini_url_lenstr' + len] = s.join("");
  }
  var tempVal = content.replace(urlRegExp, str);
  return tempVal.length; 
}
function $getCpcErrorMsg(code, msgValues) {
    var msg, state = 'error', oldCode = code;
    if (code.toLowerCase().indexOf('0x') > -1) {
        code = parseInt(code, 16);
    } else {
        code = parseInt(code, 10);
    }

    switch (code) {
        case 17303041: msg = '查询日期不正确'; break;
        case 17303042: msg = '推广标题含有非法字符'; break;
        //=====用户业务错误返回正数0x00001开头=============================================                                                                                                                                            
        case 17367553: msg = '用户未登录'; state = 'login'; break;
        case 17367554: msg = '登录异常'; state = 'login'; break;
        case 17367555: msg = '该用户已存在'; break;
        case 17367556: msg = '您未开通点击竞价'; state = 'regist'; break;
        case 17367557: msg = '无法报名，您已被限制投放该广告组权限。'; break;
        case 17367558: msg = '用户参数错误'; break;
        case 17367559: msg = '用户不符合开通条件'; break;
        case 17367560: msg = '账户不存在'; break;
        //==广告0x00002 开头=============================================                                                                                                                                                             
        case 17367809: msg = '该广告不存在'; break;
        case 17367810: msg = '商品非本人'; break;
        case 17367811: msg = '商品状态错误'; break;
        case 17367812: msg = '商品价格错误'; break;
        case 17367813: msg = '该商品已经在该活动中推广'; break;
        case 17367814: msg = '活动报名数据已满'; break;
        case 17367815: msg = '非报名时间'; break;
        case 17367816: msg = '推广标题长度不符'; break;
        case 17367817: msg = '超过卖家推广限制'; break;
        case 17367818: msg = '部分广告启用失败'; break;
        case 17367819: msg = '广告出价不能低于最低出价'; break;

        case 17368065: msg = '该活动不存在'; break;
        case 17368321: msg = '同步失败'; break;

        case 17368577: msg = '报表的请求查询时间是明天，查询结果为空'; break;
        case 17368578: msg = '推广标题词语过滤后为空，查询结果为空'; break;

        //定制类错误码                                                            
        case 17432833:
            msg = '参数错误';
            break;
        case 17432834:
            msg = '规则不存在';
            break;
        case 17432835:
            msg = '商品不存在';
            break;
        case 17432836:
            msg = '很抱歉，您无法参加报名';
            break;
        case 17432837:
            msg = '只有拍拍卖家才可以报名参加';
            break;
        case 17432838:
            msg = '店铺主营类目不符，无法参加报名';
            break;
        case 17432839:
            msg = '店铺在线商品数未满足要求，无法参加报名';
            break;
        case 17432840:
            msg = '店铺的信用评分未满足要求，无法参加报名';
            break;
        case 17432841:
            msg = '店铺的好评率未满足要求，无法参加报名';
            break;
        case 17432842:
            msg = '店铺差评率过高，无法参加报名';
            break;
        case 17432843:
            msg = '店铺投诉率过高，无法参加报名';
            break;
        case 17432844:
            msg = '被投诉中，无法参加报名';
            break;
        case 17432845:
            msg = '付款率不符合报名条件限制，无法参加报名';
            break;
        case 17432846:
            msg = '退款率不符合报名条件限制，无法参加报名';
            break;
        case 17432847:
            msg = '成交额不符合报名条件限制，无法参加报名';
            break;
        case 17432848:
            msg = '红包面值不符合报名条件限制，无法参加报名';
            break;
        case 17432849:
            msg = '库存数不符合报名条件限制，无法参加报名';
            break;
        case 17432850:
            msg = '商品价格不符合报名条件限制，无法参加报名';
            break;
        case 17432851:
            msg = '商品在线时间不符合报名条件限制，无法参加报名';
            break;
        case 17432852:
            msg = '只要在线商品才可参加报名';
            break;
        case 17432853:
            msg = '只有预上架商品才可参加报名';
            break;
        case 17432854:
            msg = '商品类目不符合报名条件限制，无法参加报名';
            break;
        case 17432855:
            msg = '商品重发机制不符合报名条件限制，无法参加报名';
            break;
        case 17432856:
            msg = '只有包邮商品才可参加报名';
            break;
        case 17432857:
            msg = '只有彩钻商品才可参加报名';
            break;
        case 17432858:
            msg = '商品成交数不符合报名条件限制，无法参加报名';
            break;
        case 17432859:
            msg = '只有商城卖家才可参加报名';
            break;
        case 17432860:
            msg = '被处罚中，无法参加报名';
            break;
        case 17432861:
            msg = '只有官字卖家才可参加报名';
            break;
        case 17432862:
            msg = '只有邀请卖家可报名参加本活动';
            break;
        case 17432863:
            msg = '只有商城或官字卖家才可参加报名';
            break;
        case 17432864: msg = '请选择您自己的商品进行操作'; break;
        case 17432865: msg = '非正品保证，假一赔三商品'; break;
        case 17432866: msg = '非7天包退商品'; break;
        case 17432867: msg = '非7天免邮包退商品'; break;
        case 17432868: msg = '描述相符度分数过低'; break;
        case 17432869: msg = '服务态度分数过低'; break;
        case 17432870: msg = '发货速度分数过低'; break;
        case 17432871: msg = '非预上架or销售中'; break;
        default: msg = '系统繁忙，请稍候再试'; break;
    }
    //处理定制化的错误提示
    if (msgValues && msgValues.length > 0) {
        for (var i = 0, len = msgValues.length; i < len; i++) {
            var key = ('{#' + i + '#}');
            msg = $strReplace(msg, { key: msgValues[i] });
        }
    }
    return { msg: msg, state: state };
}
function $getCpsErrorMsg(code) {
    var msg = '系统繁忙，请稍候再试',
        state = 'error';
    if (code.toLowerCase().indexOf('0x') > -1) {
        code = parseInt(code, 16);
    } else {
        code = parseInt(code, 10);
    }

    switch (code) {
        case 1: msg = '用户未登陆'; state = 'login'; break;
        case 2: msg = 'boss端未登陆'; break;
        case 3: msg = 'boss端没有执行权限'; break;
        case 4: msg = '输入参数错误'; break;
        case 4097: msg = '您尚未开通CPS'; break;
        case 4098: msg = '您已经开通CPS'; break;
        case 8193: msg = '设置的类目佣金超出指定范围'; break;
        case 16387: msg = '主推商品查询基础组接口失败'; break;
        case 17432837: msg = '对不起，2星以上卖家才可报名参加CPS推广，请您努力升级店铺等级后再来尝试。'; break;
        case 17432840: msg = '对不起，2星以上卖家才可报名参加CPS推广，请您努力升级店铺等级后再来尝试。'; break;

        //定制类错误码                                                              
        case 17432833:
            msg = '参数错误';
            break;
        case 17432834:
            msg = '规则不存在';
            break;
        case 17432835:
            msg = '商品不存在';
            break;
        case 17432836:
            msg = '很抱歉，您无法参加报名';
            break;
        case 17432837:
            msg = '只有拍拍卖家才可以报名参加';
            break;
        case 17432838:
            msg = '店铺主营类目不符，无法参加报名';
            break;
        case 17432839:
            msg = '店铺在线商品数未满足要求，无法参加报名';
            break;
        case 17432840:
            msg = '店铺的信用评分未满足要求，无法参加报名';
            break;
        case 17432841:
            msg = '店铺的好评率未满足要求，无法参加报名';
            break;
        case 17432842:
            msg = '店铺差评率过高，无法参加报名';
            break;
        case 17432843:
            msg = '店铺投诉率过高，无法参加报名';
            break;
        case 17432844:
            msg = '被投诉中，无法参加报名';
            break;
        case 17432845:
            msg = '付款率不符合报名条件限制，无法参加报名';
            break;
        case 17432846:
            msg = '退款率不符合报名条件限制，无法参加报名';
            break;
        case 17432847:
            msg = '成交额不符合报名条件限制，无法参加报名';
            break;
        case 17432848:
            msg = '红包面值不符合报名条件限制，无法参加报名';
            break;
        case 17432849:
            msg = '库存数不符合报名条件限制，无法参加报名';
            break;
        case 17432850:
            msg = '商品价格不符合报名条件限制，无法参加报名';
            break;
        case 17432851:
            msg = '商品在线时间不符合报名条件限制，无法参加报名';
            break;
        case 17432852:
            msg = '只要在线商品才可参加报名';
            break;
        case 17432853:
            msg = '只有预上架商品才可参加报名';
            break;
        case 17432854:
            msg = '商品类目不符合报名条件限制，无法参加报名';
            break;
        case 17432855:
            msg = '商品重发机制不符合报名条件限制，无法参加报名';
            break;
        case 17432856:
            msg = '只有包邮商品才可参加报名';
            break;
        case 17432857:
            msg = '只有彩钻商品才可参加报名';
            break;
        case 17432858:
            msg = '商品成交数不符合报名条件限制，无法参加报名';
            break;
        case 17432859:
            msg = '只有商城卖家才可参加报名';
            break;
        case 17432860:
            msg = '被处罚中，无法参加报名';
            break;
        case 17432861:
            msg = '只有官字卖家才可参加报名';
            break;
        case 17432862:
            msg = '只有邀请卖家可报名参加本活动';
            break;
        case 17432863:
            msg = '只有商城或官字卖家才可参加报名';
            break;
        case 17432864: msg = '请选择您自己的商品进行操作'; break;
        case 17432865: msg = '非正品保证，假一赔三商品'; break;
        case 17432866: msg = '非7天包退商品'; break;
        case 17432867: msg = '非7天免邮包退商品'; break;
        case 17432868: msg = '描述相符度分数过低'; break;
        case 17432869: msg = '服务态度分数过低'; break;
        case 17432870: msg = '发货速度分数过低'; break;
    }

    return { msg: msg, state: state };
}
function $getEtgErrorMsg(code) {
    var msg = '系统繁忙，请稍候再试',
        state = 'error';
    switch (code) {
        case '0x010D0101': msg = '参数错误'; break;
        case '0x010D0102': msg = '用户已经存在'; break;
        case '0x010D0103': msg = '用户不存在'; break;
        case '0x010D0104': msg = '用户未登录'; state = "login"; break;
        case '0x010D0105': msg = 'Boss未登录'; state = "login"; break;
        case '0x010D0106': msg = '财付通帐户已经激活'; break;
        case '0x010D0107': msg = '验证码错误'; break;
        case '0x010D0108': msg = '财付通非企业帐户'; break;
        case '0x010D0109': msg = '手机号码错误'; break;
        case '0x010D010A': msg = '获取验证码失败,请重试'; break;
        case '0x010D010B': msg = '财付通帐户错误'; break;
        case '0x010D010C': msg = '该手机已经注册过'; break;
        case '0x010D010D': msg = '财付通帐户不存在'; break;
        case '0x010D010E': msg = '目前只对受邀用户开放'; break;
    }
    return { msg: msg + '(' + code + ')', state: state };
}
function $getExpErrorMsg(code) {
    var msg, state = 'error';
    code = code + '';
    if (code.toLowerCase().indexOf('0x') > -1) {
        code = parseInt(code, 16);
    } else {
        code = parseInt(code, 10);
    }
    /******** S 错误码hs ********/
    var errMsgHs = {
        '1022': '审核标记位为非法值',
        '1023': "请您登陆后再进行相关操作",
        '1024': "请先登陆Boss管理端",
        '1025': "Boss管理端无此项功能的操作权限",
        '1026': '输入参数错误',
        '4097': "您尚未开通直通车，请先<a target='_blank' href='http://express2.paipai.com' target=_blank>开通直通车</a>",
        '4098': "您已经开通了直通车",
        '4099': "您的信用还不足2星，请积累信用后再试",
        '4100': "您还不是诚保用户，请先<a target='_blank' href='http://my.paipai.com/cgi-bin/guaranty_show' target=_blank>申请加入诚信保证计划</a>",
        '4101': "您未认证成为卖家，请先<a target='_blank' href='http://my.paipai.com/cgi-bin/userauth_show' target=_blank>认证成为卖家</a>",
        '4102': "系统繁忙，请稍后再试",
        '4103': ' flag 错误',
        '4104': "您的拍拍直通车使用期限已结束，不能再继续充值，请关注我们近期的站内信通知",
        '4105': ' 账务通知type 错误',
        '4112': '充值号码非本人',
        '4113': '充值回跳消息错误',
        '4114': '没有申请协议的资格',
        '8193': 'TTC错误',
        '8194': '删除推广计划失败-推广计划非空',
        '8195': '更新推广计划失败',
        '8196': '非法的推广计划ID',
        '8197': '已存在相同的推广计划名称，推广计划请使用不同的名称',
        '8198': '推广计划操作失败-没有默认推广计划',
        '8199': '推广计划超出最大数量',
        '8200': '删除推广计划失败-试图删除默认推广计划',
        '8201': '非法的日限额',
        '8208': '非法的站点设置',
        '8209': '推广计划每天最多修改三次，请明天再试',
        '8210': '无操作此类推广计划的权限',
        '8211': '当前时间不允许修改日限额',
        '8212': '新增失败，您当前已有10条搜索类推广计划',
        '8213': '新增失败，您当前已有10条展示类推广计划',
        '8214': '广告计划不存在',
        '8215': '每日限额低于今日消费',
        '8216': '每日限额低于最大关键词出价',
        '8217': '投放时间设置不正确',
        '8224': '无此类站点的广告投放权限',
        '12289': '已存在相同的用户群名称，新增用户群请使用不同的名称',
        '12290': '非法的用户群ID',
        '12291': '用户群超出最大数量',
        '12292': '用户群操作失败-没有默认用户群',
        '12293': '非法的CGI参数',
        '12294': '用户群不存在',
        '16385': "您推广的商品已下架或已删除",
        '16386': "您没有该商品操作权限",
        '16387': "该商品已被推广到本推广计划中。",
        '16388': "您的部分关键词出价失败，您可以继续编辑广告关键词再试",
        '16389': "您的商品未被推广，请设置推广中后再试",
        '16390': "您未设定有效的推广标题，请重新设置您的广告标题",
        '16391': "您设定的关键词无效，请调整后再试",
        '16392': "您的广告出价错误，请调整后再试",
        '16393': "您的部分广告启用失败，您可以编辑商品后再试",
        '16400': '您选择的投放计划不存在',
        '16401': '您设置的出价已经超过了投放计划的日限额',
        '16402': "您提交的关键字有重复",
        '16403': "您的出价超过了日消费限额",
        '16404': "您提交的关键词超过200个，请删减后重新提交",
        '16405': "您设定的关键字价格过低",
        '16406': "您提交的关键字价格过高",
        '16407': "您提交的关键字只允许正品卖家购买",
        '16408': "您设置的出价不能低于最低出价",
        '16409': '出价高于所剩余额',
        '16416': '上传的文件不存在',
        '16417': '上传图片大小超过120K，请编辑后重新上传',
        '16418': '请上传jpg格式的图片',
        '16419': '您选择的商品不允许投放到QQ空间，请选择其他商品进行投放或者选择其他不包含QQ空间站点的推广计划进行该商品的推广',
        '16420': '无对应的权限',
        '16421': '计划类型与广告类型不匹配',
        '20481': "您的充值金额不能小于100元",
        '20482': "您的充值金额不能大于1000000元"
    }
    return errMsgHs[code];
}
function $getFileName(url) {
    var pos = url.lastIndexOf("/");
    if (pos == -1) {
        pos = url.lastIndexOf("\\");
    }
    var filename = url.substr(pos + 1)
    return filename;
}
function $getGradeIcons(opt) {
    //输出用户等级的图标
    var option = {
        qq: "",
        score: 0,
        type: "seller", //seller,buyer,frefer
        nolink: false,
		url:'',
        showScore: true,
        iconbg: "http://static.paipaiimg.com/assets/common/credit.gif?t=200908131", //图标大图的地址
        ptag:"",
        seller: {
            range: [1, 5, 11, 21, 41, 101, 301, 1001, 3001, 5001, 10001, 20001, 50001, 100001, 200001, 500001, 1000001, 2000001, 5000001, 10000001, 1900000000, 1901000000, 1902000000],
            //更换为店铺3.0的卖家信用地址
			url: "http://shop.paipai.com/{#qq#}/10/index.shtml?{#ptag#}",//"http://shop1.paipai.com/cgi-bin/credit_info?uin={#qq#}&{#ptag#}",
            //每一项的结构为图标名:["输出说明"0,"x坐标"1,"y坐标"2,"高"3,"宽"4,"右边间距"5,"左边距"6,"上边距"7,"下边距"8,"链接目标9"]
            g0: ["(0个信用积分)", "100", "100", "0", "0", "5", "0", "0", "0", "_blank"],
            g1: ["一星卖家(1-4个信用积分)", "0", "0", "16", "13", "0", "0", "0", "0", "_blank"],
            g2: ["二星卖家(5-10个信用积分)", "0", "0", "16", "28", "0", "0", "0", "0", "_blank"],
            g3: ["三星卖家(11-20个信用积分)", "0", "0", "16", "43", "0", "0", "0", "0", "_blank"],
            g4: ["四星卖家(21-40个信用积分)", "0", "0", "16", "58", "0", "0", "0", "0", "_blank"],
            g5: ["五星卖家(41-100个信用积分)", "0", "0", "16", "73", "0", "0", "0", "0", "_blank"],
            g6: ["一钻卖家(101-300个信用积分)", "0", "-20", "16", "18", "0", "0", "0", "0", "_blank"],
            g7: ["二钻卖家(301-1000个信用积分)", "0", "-20", "16", "36", "0", "0", "0", "0", "_blank"],
            g8: ["三钻卖家(1001-3000个信用积分)", "0", "-20", "16", "54", "0", "0", "0", "0", "_blank"],
            g9: ["四钻卖家(3001-5000个信用积分)", "0", "-20", "16", "72", "0", "0", "0", "0", "_blank"],
            g10: ["五钻卖家(5001-10000个信用积分)", "0", "-20", "16", "90", "0", "0", "0", "0", "_blank"],
            g11: ["一银冠卖家(10001-20000个信用积分)", "0", "-40", "16", "18", "0", "0", "0", "0", "_blank"],
            g12: ["二银冠卖家(20001-50000个信用积分)", "0", "-40", "16", "36", "0", "0", "0", "0", "_blank"],
            g13: ["三银冠卖家(50001-100000个信用积分)", "0", "-40", "16", "54", "0", "0", "0", "0", "_blank"],
            g14: ["四银冠卖家(100001-200000个信用积分)", "0", "-40", "16", "72", "0", "0", "0", "0", "_blank"],
            g15: ["五银冠卖家(200001-500000个信用积分)", "0", "-40", "16", "90", "0", "0", "0", "0", "_blank"],
            g16: ["一金冠卖家(500001-1000000个信用积分)", "0", "-60", "16", "18", "0", "0", "0", "0", "_blank"],
            g17: ["二金冠卖家(1000001-2000000个信用积分)", "0", "-60", "16", "36", "0", "0", "0", "0", "_blank"],
            g18: ["三金冠卖家(2000001-5000000个信用积分)", "0", "-60", "16", "54", "0", "0", "0", "0", "_blank"],
            g19: ["四金冠卖家(5000001-10000000个信用积分)", "0", "-60", "16", "72", "0", "0", "0", "0", "_blank"],
            g20: ["五金冠卖家(10000000分以上)", "0", "-60", "16", "90", "0", "0", "0", "0", "_blank"],
            g21: ["该卖家已拥有拍拍网官方信用保证，所开店铺为拍拍网QQ帐号5188开头、官方活动专用店铺，有信誉保证。", "0", "-240", "19", "77", "0", "0", "0", "0", "_blank"],
            g22: ["该卖家所开设的店铺为公益慈善机构专营店，该店铺销售收入均用于公益慈善事业。", "0", "-260", "19", "83", "0", "0", "0", "0", "_blank"],
            g23: ["该卖家已通过商家营业执照认证，即代表该卖家所开设的店铺为拍拍网合作企业店铺，店内销售的商品均由企业提供质量信誉保证。", "0", "-280", "19", "72", "0", "0", "0", "0", "_blank"]
        },
        buyer: {
            range: [1, 5, 11, 21, 41, 101, 201, 501, 1001, 2001, 5001, 10001, 30001, 50001, 80001, 100001, 150001, 200001, 250001, 300001],
            url: "http://shop1.paipai.com/cgi-bin/credit_info?uin={#qq#}&{#ptag#}",
            g0: ["(0个信用积分)", "100", "100", "0", "0", "0", "0", "0", "0", "_blank"],
            g1: ["一星买家(1-4个信用积分)", "0", "-80", "16", "13", "0", "0", "0", "0", "_blank"],
            g2: ["二星买家(5-10个信用积分)", "0", "-80", "16", "28", "0", "0", "0", "0", "_blank"],
            g3: ["三星买家(11-20个信用积分)", "0", "-80", "16", "43", "0", "0", "0", "0", "_blank"],
            g4: ["四星买家(21-40个信用积分)", "0", "-80", "16", "58", "0", "0", "0", "0", "_blank"],
            g5: ["五星买家(41-100个信用积分)", "0", "-80", "16", "73", "0", "0", "0", "0", "_blank"],
            g6: ["一钻买家(101-200个信用积分)", "0", "-100", "16", "18", "0", "0", "0", "0", "_blank"],
            g7: ["二钻买家(201-500个信用积分)", "0", "-100", "16", "36", "0", "0", "0", "0", "_blank"],
            g8: ["三钻买家(501-1000个信用积分)", "0", "-100", "16", "54", "0", "0", "0", "0", "_blank"],
            g9: ["四钻买家(1001-2000个信用积分)", "0", "-100", "16", "72", "0", "0", "0", "0", "_blank"],
            g10: ["五钻买家(2001-5000个信用积分)", "0", "-100", "16", "90", "0", "0", "0", "0", "_blank"],
            g11: ["一银冠买家(5001-10000个信用积分)", "0", "-120", "16", "18", "0", "0", "0", "0", "_blank"],
            g12: ["二银冠买家(10001-30000个信用积分)", "0", "-120", "16", "36", "0", "0", "0", "0", "_blank"],
            g13: ["三银冠买家(30001-50000个信用积分)", "0", "-120", "16", "54", "0", "0", "0", "0", "_blank"],
            g14: ["四银冠买家(50001-80000个信用积分)", "0", "-120", "16", "72", "0", "0", "0", "0", "_blank"],
            g15: ["五银冠买家(80001-100000个信用积分)", "0", "-120", "16", "90", "0", "0", "0", "0", "_blank"],
            g16: ["一金冠买家(100001-150000个信用积分)", "0", "-140", "16", "18", "0", "0", "0", "0", "_blank"],
            g17: ["二金冠买家(150001-200000个信用积分)", "0", "-140", "16", "36", "0", "0", "0", "0", "_blank"],
            g18: ["三金冠买家(200001-250000个信用积分)", "0", "-140", "16", "54", "0", "0", "0", "0", "_blank"],
            g19: ["四金冠买家(250001-3000000个信用积分)", "0", "-140", "16", "72", "0", "0", "0", "0", "_blank"],
            g20: ["五金冠买家(3000000分以上)", "0", "-140", "16", "90", "0", "0", "0", "0", "_blank"]
        },
        frefer: {
            range: [4, 11, 41, 91, 151, 251, 501, 1001, 2001, 5001, 10001, 20001, 50001, 100001, 200001, 500001, 1000001, 2000001, 5000001, 10000001],
            url: "http://help.paipai.com/content/help_50211.shtml?{#ptag#}",
            g0: ["分", "100", "100", "0", "0", "0", "0", "0", "0", "_blank"],
            g1: ["分", "0", "-160", "18", "18", "0", "0", "0", "0", "_blank"],
            g2: ["分", "0", "-160", "18", "36", "0", "0", "0", "0", "_blank"],
            g3: ["分", "0", "-160", "18", "54", "0", "0", "0", "0", "_blank"],
            g4: ["分", "0", "-160", "18", "72", "0", "0", "0", "0", "_blank"],
            g5: ["分", "0", "-160", "18", "90", "0", "0", "0", "0", "_blank"],
            g6: ["分", "0", "-180", "18", "18", "0", "0", "0", "0", "_blank"],
            g7: ["分", "0", "-180", "18", "36", "0", "0", "0", "0", "_blank"],
            g8: ["分", "0", "-180", "18", "54", "0", "0", "0", "0", "_blank"],
            g9: ["分", "0", "-180", "18", "72", "0", "0", "0", "0", "_blank"],
            g10: ["分", "0", "-180", "18", "90", "0", "0", "0", "0", "_blank"],
            g11: ["分", "0", "-200", "18", "18", "0", "0", "0", "0", "_blank"],
            g12: ["分", "0", "-200", "18", "36", "0", "0", "0", "0", "_blank"],
            g13: ["分", "0", "-200", "18", "54", "0", "0", "0", "0", "_blank"],
            g14: ["分", "0", "-200", "18", "72", "0", "0", "0", "0", "_blank"],
            g15: ["分", "0", "-200", "18", "90", "0", "0", "0", "0", "_blank"],
            g16: ["分", "0", "-220", "18", "18", "0", "0", "0", "0", "_blank"],
            g17: ["分", "0", "-220", "18", "36", "0", "0", "0", "0", "_blank"],
            g18: ["分", "0", "-220", "18", "54", "0", "0", "0", "0", "_blank"],
            g19: ["分", "0", "-220", "18", "72", "0", "0", "0", "0", "_blank"],
            g20: ["分", "0", "-220", "18", "90", "0", "0", "0", "0", "_blank"]
        }
    };
    for (var i in opt) {
        option[i] = opt[i];
    }
    if (option.qq == 0 || option.qq == "") {
        option.nolink = true;
    }
    //如果用户类型不对也什么不做  ,如果积分为空则什么也不做
    if (option.score.toString() == "" || !option[option.type]) {
        return "";
    }
    //参考信用的地方可能会出现字符串的情况
    if (option.type == "frefer" && option.score != "" && !parseInt(option.score)) {	//不为空并且不是数字的话就原样返回
        option.score = option.score.replace(/[^\d]/g, "");
        if (option.score == "") {
            return option.score;
        }
    }
    var _grade = 0;
    var _return = "";
    var _range = option[option.type].range;
    for (var i = 0; i < _range.length; i++) {
        //溢出最大范围时等级为最大
        if (option.score >= _range[_range.length - 1]) {
            _grade = _range.length;
            break;
        }
        //范围内的等级处理
        if (option.score >= _range[i] && option.score < _range[i + 1]) {

            _grade = i + 1;
            break;
        }
    }
	//替换调整url
	if(option.url!=''){
		option[option.type]['url']=option.url;
	}
    var _url = option.nolink ? "#nolink" : option[option.type]["url"].replace("{#qq#}", option.qq).replace("{#ptag#}", (option["ptag"] == "" ? "" : ("PTAG=" + option["ptag"])));
    var _target = option.nolink ? "" : ' target="_blank" ';
    var _conf = option[option.type]["g" + _grade.toString()];
    //var _title = _conf[0].replace("", option.score);
	var _title = _conf[0];//上面一句是原文，导致title无故多了个数字.
    //积分为负分的情况
    if (option.score < 0) {
        _return = option.nolink ? ('<a ' + _target + ' href="#nolink">' + option.score + '</a> ') : ('<a ' + _target + ' href="' + _url + '">' + option.score + '</a> ');
        return _return;
    }
    if (_grade == 0) {
        _return = '<a href="' + _url + '" ' + _target + ' title="' + _title + '" style="margin:0px;"><span style="display: -moz-inline-stack;display: inline-block;zoom:1;*display: inline;margin-right:' + _conf[5] + 'px;margin-left:' + _conf[6] + 'px;margin-top:' + _conf[7] + 'px;margin-bottom:' + _conf[8] + 'px;background:url(' + option.iconbg + ') no-repeat;outline:none;vertical-align: middle;font-size:12px;cursor:pointer;background-position:' + _conf[1] + 'px ' + _conf[2] + 'px;">0</span></a>';
        return _return;
    }
    _return = '<a href="' + _url + '" ' + _target + ' title="' + _title + '" style="margin:0px;"><span style="display: -moz-inline-stack;display:inline-block;zoom:1;*display: inline;margin-right:' + _conf[5] + 'px;margin-left:' + _conf[6] + 'px;margin-top:' + _conf[7] + 'px;margin-bottom:' + _conf[8] + 'px;background:url(' + option.iconbg + ') no-repeat;outline:none;vertical-align: middle;font-size:0px;cursor:pointer;width:' + _conf[4] + 'px;height:' + _conf[3] + 'px;background-position:' + _conf[1] + 'px ' + _conf[2] + 'px;"></span></a>';
    //超级卖家以下的显示具体分数
    if (option.type == "seller" && option.score < 1900000000 && option.showScore) {
        _return = option.nolink ? ('<a ' + _target + ' href="#nolink">' + option.score + '</a> ' + _return) : ('<a ' + _target + ' href="' + _url + '">' + option.score + '</a> ' + _return);
    }
    //超级买家以下的显示具体分数
    if (option.type == "buyer" && option.showScore) {
        _return = option.nolink ? ('<a ' + _target + ' href="#nolink">' + option.score + '</a> ' + _return) : ('<a ' + _target + ' href="' + _url + '">' + option.score + '</a> ' + _return);
    }
    return _return;
}
function $getGradeName(opt){
	var option={
		score:0,
		type:"buyer",
		buyer:{
			gradeList:[0,1,5,11,21,41,101,201,501,1001,2001,5001,10001,30001,50001,80001,100001,150001,200001,250001,300001],
			gradeName:["","一星买家","二星买家","三星买家","四星买家","五星买家","一钻买家","二钻买家","三钻买家","四钻买家","五钻买家","一银冠买家","二银冠买家","三银冠买家","四银冠买家","五银冠买家","一金冠买家","二金冠买家","三金冠买家","四金冠买家","五金冠卖家"]
		},
		seller:{
			gradeList:[0,1,5,11,21,41,101,301,1001,3001,5001,10001,20001,50001,100001,200001,500001,1000001,2000001,5000001,10000001,1900000000,1901000000,1902000000],
			gradeName:["","一星卖家","二星卖家","三星卖家","四星卖家","五星卖家","一钻卖家","二钻卖家","三钻卖家","四钻卖家","五钻卖家","一银冠卖家","二银冠卖家","三银冠卖家","四银冠卖家","五银冠卖家","一金冠卖家","二金冠卖家","三金冠卖家","四金冠卖家","五金冠卖家","","",""]
		}
	};
	
	for(var i in opt){
		option[i]=opt[i];
	}
	
	//如果用户类型不对也什么不做  ,如果积分为空则什么也不做
	if(option.score.toString()=="" || !option[option.type]){
		return "";	
	}
	
	//参考信用的地方可能会出现字符串的情况
	if(option.type=="frefer" && option.score!="" && !parseInt(option.score)){	//不为空并且不是数字的话就原样返回
		option.score=option.score.replace(/[^\d]/g,"");
		if(option.score==""){
			return option.score;
		}
	}
	
	var _grade=0;
	var _range=option[option.type].gradeList;
	for(var i=0;i<_range.length;i++){
		//溢出最大范围时等级为最大
		if(option.score>=_range[_range.length-1]){
			_grade=_range.length-1;
			break;
		}
		//范围内的等级处理
		if(option.score>=_range[i] && option.score<_range[i+1]){
			_grade=i;
			break;
		}
	}
	return option[option.type].gradeName[_grade];
}
function $getInputLen(conf) {
    /**
    * 校验文本框输入字数长度
    *
    * @param {string} text : 文本框对象id
    * @param {number} minLen : 允许输入的最少字/字节数
    * @param {number} maxLen : 允许输入的最多字/字节数
    * @param {number} lenTxt : 展示输入字数的text对象
    * @param {string} lengthRecord : 展示已输入字数和最大字符的div对象id
    内部必须包含tag='num'的对象，用于展示当前输入的字数。
    如：<div id="lengthRecord"><span tag="current"></span></div>
    * @param {bool} isGb：是否区分中英文，默认为true
    */
    var _conf = {
        text: null,
        minLen: 0,
        maxLen: 20,
        lengthRecord: null,
        isGb: true
    }
    _conf = $extend(_conf, conf);
    _conf.text = document.getElementById(_conf.text);
    _conf.lengthRecord = document.getElementById(_conf.lengthRecord);
    _conf.curNum = $attr('tag', 'current', _conf.lengthRecord)[0];

    var _checkLen = (function (c) {
        return function () {
            var str = c.text.value,
            length = str.replace(/[\u00FF-\uFFFF]/g, "  ").length;

            if (c.isGb) {  //提示字
                if (((length + 3) >= c.minLen * 2) && (length < c.minLen * 2) && c.minLen) { //特殊处理下限字数的临界值
                    length = c.minLen - 1;
                } else {
                    length = length % 2 ? (length + 1) / 2 : length / 2;
                }
                if ((c.minLen && (length < c.minLen)) || (c.maxLen && (length > c.maxLen))) {
                    c.lengthRecord.style.color = "red";
                } else {
                    c.lengthRecord.style.color = "";
                }
            } else {            //提示字节
                if ((c.minLen && (length < c.minLen)) || (c.maxLen && (length > c.maxLen))) {
                    c.lengthRecord.style.color = "red";
                } else {
                    c.lengthRecord.style.color = "";
                }
            }
            c.curNum.innerHTML = length;
        }
    })(_conf);

    if (_conf.text.value.length > 0) {
        _checkLen();
    }

    //用户群名称文本框事件
    $addEvent(_conf.text, 'blur', _checkLen);
    $addEvent(_conf.text, 'keyup', _checkLen);
}
function $getItemsBusiness(itemList,callback){		
	//查询商品的类目，所属业务id
	var ItemBusiness={};
	//查询类目id
	$loadScript('http://my.paipai.com/cgi-bin/item_view/item_list?sItemid='+itemList.join('|'));
	window.itemCommInfoCallBack=function(items){
		var leaves=[];
		for(var i=0;i<items.length;i++){
			ItemBusiness[items[i].strItemId]={leafClass:items[i].dwLeafClassId};
			leaves.push(items[i].dwLeafClassId);
		}
		if(leaves.length>0){
			//查询业务
			$loadScript('http://auction1.3c.paipai.com/getMetaInfoByMetaIds.xhtml?metaIds='+leaves.join(','));
			window._PP_metaBusiness=function(data){
				for(var i in ItemBusiness){
					var item=ItemBusiness[i];
					if(data[item.leafClass]){
						item.biz=data[item.leafClass].bizType;
					}
				}
				if(callback){
					callback(ItemBusiness);
				}
			}
		}
	}
}
//商品留言列表加载
function $getLeaveMsg(opt){
	
	if(window._PP_core_msg_msgLoaded) return;
	
	var option={
		dom:"",//显示区DIV的id
		itemid:"",//商品id
		suin:"",//商家的id
		showall:"",//是否显示所有的留言
		pagenum:"",//当前的请求是否快照页面
		isSnap:"",//当前的请求是否快照页面
		version:0,//内容版本号
		maxWordNum:240,	//最多字数
		msgtype:1,//留言类型
		hasleavemsg:true//是否有留言
	};
	option=$extend(option,opt);
	window._PP_core_msg_option=option;
	
	//返回留言区的模板html,type包括: frame,item,more,input,code
	window.getTypeHtml = function(type){
		var hc="";
		//总体框架
		hc=(type=="frame")?'<div id="leaveMsgList"><font color="red">正在加载数据中,请稍候...</font></div><div class="comment" id="leaveMsgPost"></div><span id="hide_msg" style="display:none;"></span>':hc;
		//单条列表的结构的第一部分
		hc=(type=="item_start")?'<dl><dt>{$tp_msg_nickname$}<span>':hc;
		//单条列表的结构的答复按钮
		hc=(type=="item_edit")?'<a class="delreply" href="'+$addToken("http://auction.paipai.com/cgi-bin/reply_leavemsg?msgid={$tp_msg_id$}&msgtype=1","lk")+'">答复留言</a>':hc;

		//单条列表的结构的删除按钮
		hc=(type=="item_del")?'<a class="reply" href="'+$addToken("http://auction.paipai.com/cgi-bin/delete_leavemsg?msgid={$tp_msg_id$}&msgtype=1&relatesubjectid={$tp_itemid$}","lk")+'">删除留言</a>':hc;
		//单条列表的结构的提问部分的代码
		hc=(type=="item_ask")?'</span></dt><dd><span>问：{$tp_msg_ask$}</span><span class="time">[{$tp_msg_asktime$}]</span></dd>':hc;
		//单条列表的结构的回答部分的代码
		hc=(type=="item_answer")?'<dd class="answer"><span>答：{$tp_msg_answer$}</span><span class="time">[{$tp_msg_answertime$}]</span></dd>':hc;
		//单条列表的结构的结束部分的代码
		hc=(type=="item_end")?"</dl>":hc;
		//列表最后的更多链接
		hc=(type=="more")?'<p class="right"><a href="http:\/\/auction.paipai.com\/cgi-bin\/rd?pageId=10&domainId=1&linkId=63&url=http%3A\/\/auction.paipai.com\/cgi-bin\/commodity_note_list%3FsItemid%3D{$tp_itemid$}%26uin%3D{$tp_sellerqq$}">查看更多留言>></a></p>':hc;
		//验证码
		hc=(type=="code")?'请输入右侧所示验证码：<input class="ime" id="verifycode"  name="verifycode" value="" /><img id="leaveMsgImg" src="http://ptlogin2.paipai.com/getimage?aid=17000101&CacheTime=?0.6417980436799291" onclick=\'refreshMsgCode();\' /><a href="javascript:refreshMsgCode();">看不清楚，换一张</a>':hc;
		//留言输入区的代码
		hc=(type=="input")?'<FORM id="formLeaveMsg" name="formLeaveMsg" onSubmit="return checkSubmit()" action="http://auction.paipai.com/cgi-bin/login_post_item_leavemsg" method="post" target="_top"><input type="hidden" name="ADTAG" value="10.1.66"  \><input type="hidden" name="relatesubjectid"  value="{$tp_itemid$}" \><input type="hidden" name="msgtype" id="msgtype" value="{$tp_msgtype$}"  \><p><span class="lcomment">咨询或评论：<em>(字数在2-120之间)</em></span><span class="rcomment"><a href="#nolink" onclick="getHistoryLeaveMsg();return false;">点击找回之前所填文字</a></span></p><p><textarea id="leavemsgarea" onBlur="refreshMsgCode();" onKeyUp="countMsgInput()"  name="leavemsgarea" rows="7" cols="80" require="true"><\/textarea></p><p><input id="IsHidden" type="checkbox" align="" name="IsHidden" value="1" \>  <label for="c1"> 仅卖家可见</label><em>（选择后，您的留言只有卖家可以看到，建议您在询问价格等隐私信息时选择）</em></p><div class="valid"><span  id="leaveMsgCode"></span><span style="float:left"><button type="submit">确　定</button><button type="button" onClick="$$(\'#leavemsgarea,#verifycode\').val(\'\');refreshMsgCode();">清　空</button></span></div></form>':hc;
		return hc;	
	};
	
	//更新验证码
	window.refreshMsgCode=function(){
		var dom=$$('#leaveMsgImg');
		dom.attr("src",dom.attr("src")+Math.random());
	};
	//文本框字数统计
	window.countMsgInput=function(){
		var dom=$$("#leavemsgarea");
		if($strLenGB(dom.val())>240){
			dom.val($strSubGB(dom.val(),0,($strLenGB($strSubGB(dom.val(),0,240))>240)?239:240));
		}
	};
	//找回历史文字
	window.getHistoryLeaveMsg=function(){
		$$("#leavemsgarea").val($getCookie("leaveMsg")?$getCookie("leaveMsg"):"");
	};
	
	//表单内容验证
	window.checkSubmit = function(){
		if(!$isLogin()){
			$loginFrame({
				type:'func',
				model:false,
				action:function(){
					if(!$isLogin()){
						return false;
					}
					if($getQQNum()==window._PP_core_msg_option.suin){
						alert("商家不能给自己留言.");
						$id("leaveMsgPost").innerHTML="<font color=\"red\">商家不能给自己留言</font>";	
						return false;
					}else{
						$id("leaveMsgCode").innerHTML=getTypeHtml("code");
					}
				},
				x:(document.documentElement.clientWidth-400)/2,

				y:document.documentElement.scrollTop + (document.documentElement.clientHeight-300)/2
			});
			return false;
		};
		if($strLenGB($strTrim($$("#leavemsgarea").val()))<4){
			alert("您输入的内容太短。两端的空格不计入字数！");
			return false;
		};
		if($strLenGB($strTrim($$("#leavemsgarea").val()))>240){
			alert("您输入的内容太长,规定不得超过120个汉字,240个字节。");
			return false;
		};

		//把留言信息保存到cookie中
		$setCookie("leaveMsg",$$("#leavemsgarea").val(),1*24*60*30,'/');
		if($strTrim($$("#verifycode").val()).length!=4){
			alert("您输入的验证码长度不对。");
			refreshMsgCode();
			return false;
		};
		
		//防csrf攻击增加token
		if($id("formLeaveMsg") && $id("formLeaveMsg").action){
			$id("formLeaveMsg").action = $addToken($id("formLeaveMsg").action,"fr");
		}
		
		return true;
	};
	
	
	//显示留言功能的结构frame
	if(!$id("leaveMsgList")){
		$$(option.dom).append(getTypeHtml("frame"));
	}


	//显示留言入口,不包括验证码	
	var hc=(getTypeHtml("input")).replace("{$tp_itemid$}",option.itemid).replace("{$tp_msgtype$}",option.msgtype);
	//发现当前商品是快照就不显示入口
	hc=(option.isSnap==1)?"<div style='text-align:center'>[ 您正在查看商品快照，不能再添加新的留言。 ]</div>":hc;
	//如果发现是商家自己就不显示入口
	hc=(option.suin==$getQQNum() && $isLogin())?"":hc;
	$$("#leaveMsgPost").html(hc);
	//显示验证码 
	if($isLogin() && $id("leaveMsgCode")){
		$id("leaveMsgCode").innerHTML=getTypeHtml("code");
	};	
	
	if(option.hasleavemsg){
		try{
			var path = "http://auction.paipai.com/cgi-bin/show_item_leavemsg.js?sItemid="+option.itemid+"&uin="+option.suin+"&showAll=0&page=1"+"&t="+Math.random();
			//返回码统计对象_retCoder
			var _retCoder=$returnCode({url:path,frequence:2});
			//开始加载商品留言列表,期待回调：showLeaveMsg
			$loadScript(path);
		}catch(e){}
	}else{
		$$("#leaveMsgList").hide();
		window._PP_core_msg_msgLoaded = true;		
	}
	//拉取留言数据的回调，显示留言列表，返回参数为一个不定长数组，结构如下：【是否出错，总页数，是否店长0表不是1表是，留言类型，从第四个开始每12个数据标识一条留言记录】
	window.showLeaveMsg=function(obj){
		//返回码上报
		_retCoder.report(true);
		var option=window._PP_core_msg_option;
		var dom=$$("#leaveMsgList");
		//快照页面，什么都不显示 或者  检查的数组中第一个数组标识是否有出错,出错全部返回
		if(option.isSnap==1 || obj[0]){
			dom.html((obj[0])?"网络传输数据错误,很抱歉... :)":"");
			return false;	
		}
		//设置留言类型
		$$("#msgtype").val(obj[3]);	//设置留言类型
		//显示留言列表,把返回的数据转换成便于操作的json数据开始构造留言输出的列表
		var i=4,msg=[];	//初始化新的留言数组
		while(obj[i+2]){
			msg.push({
				nickName:obj[i],	//留言者昵称,
				msgQQ:obj[i+1],		//留言者qq
				qqLink:obj[i+2],	//聊天的链接!!!1
				ask:obj[i+3],		//留言内容
				askTime:obj[i+4]+' '+obj[i+5],	//留言时间
				msgId:obj[i+6],		//留言编号
				itemId:obj[i+7],		//商品id
				isAnswer:obj[i+8],	//是否已经回复
				answer:obj[i+9],		//回复内容

				answerTime:obj[i+10]+' '+obj[i+11]	//回复时间
			});
			i+=12;//跳到下一条数据

		};	
		var hc="";
		//根据每条消息的情况生成代码
		for(var i=0;i<msg.length;i++){	
			var temp=getTypeHtml("item_start");
			//店长且没有回复就显示修改按钮
			temp+=(obj[2]==2 && !msg[i].isAnswer)?getTypeHtml("item_edit"):"";
			//店长就显示删除按钮
			temp+=(obj[2]==2)?getTypeHtml("item_del"):"";
			//留言内容
			temp+=getTypeHtml("item_ask");	
			//如果有回答则显示回答
			temp+=(msg[i].isAnswer)?getTypeHtml("item_answer"):"";
			//结束的代码
			temp+=getTypeHtml("item_end");	
			//替换标签内容
			temp=$strReplace(temp,'{$tp_msg_qq$}',msg[i].msgQQ);
			temp=$strReplace(temp,'{$tp_msg_qqlink$}',msg[i].qqLink);
			temp=$strReplace(temp,'{$tp_msg_nickname$}',msg[i].nickName.substr(0,msg[i].nickName.length-3)+"***");
			temp=$strReplace(temp,'{$tp_msg_id$}',msg[i].msgId);
			temp=$strReplace(temp,'{$tp_itemid$}',msg[i].itemId);
			temp=$strReplace(temp,'{$tp_msg_ask$}',msg[i].ask);
			temp=$strReplace(temp,'{$tp_msg_asktime$}',msg[i].askTime);
			temp=$strReplace(temp,'{$tp_msg_answer$}',msg[i].answer);
			temp=$strReplace(temp,'{$tp_msg_answertime$}',msg[i].answerTime);
			hc+=temp;
		};
		dom.html(hc).find("dl:odd").addClass("mask");
		//如果有超过一页的留言数据则显示更多链接
		if(obj[1]>1 && msg.length >0){
			dom.append(getTypeHtml("more").replace("{$tp_itemid$}",option.itemid).replace("{$tp_sellerqq$}",option.suin));
		};
		window._PP_core_msg_msgLoaded = true;
	};
}
function $getLocationMap(){
    return [7102, 7122, 7107, 7115, 7123, 7120, 7101, 7121, 7105, 7104, 7111, 7106, 7109, 7117, 7114, 5421, 5401, 5426, 5423, 5422, 6322, 6321, 6325, 6328, 6301, 5103, 5115, 5120, 5105, 5114, 5107, 5110, 5113, 5104, 5109, 5118, 5132, 5119, 5101, 5117, 5106, 5133, 5116, 5108, 5111, 5134, 4510, 4505, 4514, 4506, 4508, 4503, 4512, 4511, 4513, 4502, 4501, 4507, 4504, 4509, 3210, 3211, 3204, 3208, 3207, 3201, 3206, 3205, 3213, 3212, 3202, 3203, 3209, 2224, 2204, 2203, 2207, 2205, 2208, 2206, 2201, 2202, 3716, 3714, 3705, 3717, 3701, 3708, 3712, 3715, 3713, 3702, 3711, 3709, 3710, 3707, 3706, 3704, 3703, 3408, 3403, 3416, 3414, 3417, 3411, 3412, 3401, 3406, 3404, 3410, 3415, 3405, 3413, 3407, 3402, 3418, 1501, 1507, 1505, 1503, 1509, 1525, 1522, 1529, 1508, 1502, 1504, 1506, 1404, 1402, 1405, 1407, 1410, 1411, 1406, 1401, 1409, 1403, 1408, 4207, 4228, 4211, 4202, 4208, 4210, 4230, 4232, 4203, 4213, 4231, 4201, 4229, 4212, 4206, 4209, 4205, 1306, 1309, 1308, 1304, 1311, 1310, 1303, 1301, 1302, 1305, 1307, 3610, 3607, 3608, 3602, 3604, 3601, 3603, 3611, 3605, 3609, 3606, 3301, 3305, 3304, 3307, 3311, 3302, 3308, 3306, 3310, 3303, 3309, 6545, 6543, 6528, 6527, 6523, 6522, 6532, 6531, 6502, 6544, 6542, 6521, 6501, 6540, 6529, 3501, 3508, 3507, 3509, 3503, 3505, 3504, 3502, 3506, 6404, 6401, 6402, 6403, 5305, 5323, 5304, 5306, 5303, 5308, 5326, 5328, 5329, 5331, 5334, 5325, 5301, 5307, 5309, 5333, 2103, 2105, 2113, 2108, 2101, 2112, 2102, 2106, 2104, 2109, 2114, 2107, 2110, 2111, 6109, 6103, 6107, 6110, 6106, 6108, 6102, 6105, 6101, 6104, 5204, 5224, 5201, 5202, 5226, 5227, 5223, 5222, 5203, 2307, 2309, 2302, 2305, 2312, 2306, 2327, 2301, 2304, 2311, 2303, 2308, 2310, 4625, 4629, 4626, 4623, 4605, 4621, 4608, 4601, 4624, 4628, 4604, 4602, 4603, 4607, 4606, 4404, 4453, 4408, 4412, 4420, 4409, 4414, 4418, 4405, 4415, 4402, 4403, 4417, 4451, 4419, 4406, 4401, 4416, 4413, 4407, 4452, 4105, 4106, 4118, 4108, 4102, 4103, 4111, 4113, 4104, 4109, 4112, 4114, 4107, 4115, 4110, 4101, 4116, 4117, 6201, 6229, 6212, 6208, 6210, 6205, 6206, 6207, 6204, 6211, 6230, 6202, 6203, 6209, 4301, 4307, 4311, 4306, 4308, 4302, 4310, 4304, 4312, 4313, 4305, 4303, 4331, 4309, 9899, 7199, 5499, 6399, 5199, 4599, 3299, 2299, 3799, 3499, 1599, 1499, 4299, 1399, 3699, 3101, 3399, 8201, 6599, 3599, 1201, 1101, 6499, 5399, 2199, 6199, 5299, 8101, 2399, 4699, 4499, 5001, 4199, 6299, 4399, 9999]
}
function $getMailUrl(url) {
    return $isHttpsMail() ? window.httpsMailCgiPath + encodeURIComponent(url) : url;
}
function $getManlisongRule(list){
//输出满立送规则字符串
/*参数为如下结构的xml对象
<content contentId="204271">
        <costFlag>0</costFlag>
        <costMoney>1</costMoney>
        <favorableFlag>16</favorableFlag>
        <freeMoney>0.00</freeMoney>
        <freeRebate>0</freeRebate>
        <presentedName></presentedName>
        <presentType>0</presentType>
        <presentUrl></presentUrl>
        <presentID></presentID>
        <barterMoney>0.00</barterMoney>
        <barterName></barterName>
        <barterType>0</barterType>
        <barterUrl></barterUrl>
        <barterID></barterID>
</content>
*/
	var itemRules = "";
	for(var i = 0; i <= list.length; i++){
		var rule = {};
		var mlsRule = "";
		var flag = "";
		
		var valueNodes=$$(list[i]).children();
		for(var j=0;j<valueNodes.length;j++){
				rule[valueNodes[j].nodeName]=valueNodes[j].firstChild?valueNodes[j].firstChild.nodeValue:"";
		};
		
		if (rule['costFlag']==="1"){
			mlsRule += "消费满<em>{#CostMoney#}</em>元";
		}
		if (rule['costFlag']==="0"){
			mlsRule += "消费满<em>{#CostMoney#}</em>件";
		}
		
		if (rule['favorableFlag']&1){
			mlsRule += '减<em>{#FreeMoney#}</em>元 ';
		}
		if (rule['favorableFlag']&2){
			mlsRule += '可享<em>{#FreeRebate#}%</em>折扣 ';
		}
		if (rule['favorableFlag']&4){
			mlsRule += '赠送<a href="{#presentUrl#}?ptag={#ptag#}" target="blank">{#presentedName#}</a>  ';
		}
		if (rule['favorableFlag']&8){
			mlsRule += '加<em>{#BarterMoney#}</em>元换购<a href="{#BarterUrl#}?ptag={#ptag#}" target="blank">{#BatterName#}</a>  ';
		}
		if (rule['favorableFlag']&16){
			mlsRule += '包快递。';
		}
		//替换提示语句。
		rule['presentUrl']=rule['presentUrl']?rule['presentUrl']:"http://auction1.paipai.com/"+rule['presentId'];
		rule['barterUrl']=rule['barterUrl']?rule['barterUrl']:"http://auction1.paipai.com/"+rule['barterId'];
		//去小数
		rule['costMoney']=rule['costMoney']+"";
		rule['costMoney']=rule['costMoney'].replace(".00","");
		rule['freeMoney']=rule['freeMoney']+"";
		rule['freeMoney']=rule['freeMoney'].replace(".00","");
		rule['barterMoney']=rule['barterMoney']+"";
		rule['barterMoney']=rule['barterMoney'].replace(".00","");
		
		mlsRule = $strReplace(mlsRule,{
			"{#CostMoney#}":rule['costMoney'],
			"{#FreeMoney#}":rule['freeMoney'],
			"{#FreeRebate#}":rule['freeRebate'],
			"{#presentUrl#}":rule['presentUrl'],
			"{#presentedName#}":rule['presentedName'],
			"{#BarterMoney#}":rule['barterMoney'],
			"{#BarterUrl#}":rule['barterUrl'],
			"{#BatterName#}":rule['barterName']
		}); 
		if (itemRules===""){
			itemRules=mlsRule;
		}else{
			itemRules = itemRules+"<br/>"+mlsRule;
		}
	}
	return itemRules;
}
function $getMarketTemplate(className,btn,price,oldprice,soldOut){
	//获取正确的模板
	var template=[]; 
	template[0]='<table width="100%" height="100%" border="0" cellspacing="0" cellpadding="0"><tr><td align="center" valign="middle" style="font-size:13px; color:#333333; text-align:center;vertical-align: middle; " width="100%" height="100%"><img init_src="http://static.paipaiimg.com/assets/common/loading2.gif" /><br />数据加载中……</td></tr></table>'; //加载状态
	//1为商品模板
	template[1]='<li {#template_sold#}><a target="_blank" href="{#url#}"><img init_src="{#realImage#}" class="image"/><span class="recmdRegName">{#recmdRegName#}</span><span class="oldPrice">{#template_oldprice#}:<em class="o">&yen;{#oldPrice#}</em></span><span class="newPrice">{#template_price#}:<em class="n">{#newPrice#}</em></span><span class="{#template_btn#} btn"></span><span class="top_{#order#} icon_top_display"></span><span class="icon_cx"></span></a></li>';
	//红包模板
	template[2]='<li {#template_sold#}><a target="_blank" href="{#url#}"><img init_src="{#realImage#}" class="image"/><span class="recmdRegName">{#recmdRegName#}</span><span class="oldPrice">{#template_oldprice#}:<em class="o">&yen;{#oldPrice#}</em></span><span class="newPrice">{#template_price#}:<em class="n">{#newPrice#}</em></span><span class="discount">可使用:<em class="n">&yen;{#discount#}</em>红包</span><span class="{#template_btn#} btn"></span><span class="icon_hb"></span><span class="top_{#order#} icon_top_display"></span></a></li>';
	//简单浮层商品模板
	template[3]='<li {#template_sold#}><a target="_blank" href="{#url#}"><img init_src="{#realImage#}" class="image"/><p class="pp_layer_1"><span class="goodsName">{#recmdRegName#}</span><span class="newPrice"><em class="n">&yen;{#newPrice#}</em></span><span class="text_link">查看详情>></span></p><span class="top_{#order#} icon_top_display"></span></a></li>';
	//商品收藏量
	template[4]='<li {#template_sold#}><a target="_blank" href="{#url#}"><img init_src="{#realImage#}" class="image"/><span class="recmdRegName">{#recmdRegName#}</span><span class="newPrice">{#template_price#}:<em class="n">&yen;{#newPrice#}</em></span><span class="addfavNum">已有<em class="n">{#shopLeft#}</em>人收藏</span><span class="{#template_btn#} btn"></span><span class="top_{#order#} icon_top_display"></span><span class="icon_cx"></span></a></li>';
	//店铺信用好评
	template[5]='<li {#template_sold#}><a target="_blank" href="{#shopUrl#}"><img init_src="{#realImage#}" class="image"/></a><p class="pp_layer_1"><span class="shopName">{#recmdRegName#}</span><span class="goodEvalRate">好评：<em class="n">{#goodEvalRate#}</em></span><span class="gradeIcon">信用：{#gradeIcon#}</span><a target="_blank" href="{#shopUrl#}"><span class="{#template_btn#} btn"></span></a></p></li>';
	//分享到Qzone
	template[6]='<li {#template_sold#}><a target="_blank" href="{#url#}"><img init_src="{#realImage#}" class="image"/><span class="recmdRegName">{#recmdRegName#}</span><span class="oldPrice">{#template_oldprice#}:<em class="o">{#oldPrice#}</em></span><span class="newPrice">{#template_price#}:<em class="n">&yen;{#newPrice#}</em></span><span class="{#template_btn#} btn"></span></a><a class="addPaipai" href="#none" tag="shareComm" cname="{#recmdRegName#}" cid="{#id#}"><span class="btn_share"></span></a><span class="icon_cx"></span><span class="top_{#order#} icon_top_display"></span></li>';
	//分享给好，收藏到拍拍,周收藏量
	template[7]='<li {#template_sold#}> <a href="{#url#}" target="_blank"><img init_src="{#realImage#}" alt="{#recmdRegName#}" class="image" /><span class="recmdRegName">{#recmdRegName#}</span> </a><span class="newPrice">&yen;{#newPrice#}</span><span class="addnum">本周收藏<em>{#soldCntDay#}</em>次</span><a class="addPaipai" href="#none" tag="favoriteComm" cname="{#recmdRegName#}" cid="{#id#}">收藏</a><a class="shareQzone" href="#none" tag="shareComm" cname="{#recmdRegName#}" cid="{#id#}">分享</a></li>';
	//简单商品模型
	template[8]='<li {#template_sold#}><a target="_blank" href="{#url#}"><img init_src="{#realImage#}" class="image"/><span class="recmdRegName">{#recmdRegName#}</span><span class="oldPrice">{#template_oldprice#}:<em class="o">&yen;{#oldPrice#}</em></span><span class="newPrice">{#template_price#}:<em class="n">&yen;{#newPrice#}</em></span><span class="{#template_btn#} btn"></span></a></li>';
	//限量，分享给好友
	template[9]='<li {#template_sold#}> <a href="{#url#}" target="_blank">        <img init_src="{#realImage#}" alt="{#recmdRegName#}" class="image" />        <span class="recmdRegName">{#recmdRegName#}</span><span class="comLeft">限量:<em>{#comLeft#}</em>件</span>        <span class="oldPrice">{#template_oldprice#}:<em class="o">&yen;{#oldPrice#}</em></span>        <span class="newPrice">{#template_price#}:<em class="n">&yen;{#newPrice#}</em></span></a>        <a class="shareQzone" href="#none" tag="shareComm" cname="{#recmdRegName#}" cid="{#id#}">分享给好友</a>        <a href="{#url#}" target="_blank" class="{#template_btn#} btn">查看商品&raquo;</a></li>';
	//标准，分享给好友
	template[10]='<li {#template_sold#}><dl><dt><a href="{#url#}" target="_blank">        <img init_src="{#realImage#}" alt="{#recmdRegName#}" class="image" /></a></dt><dd class="recmdRegName"><div class="recmdTitle"><a href="{#url#}" target="_blank">{#recmdRegName#}</a></div><div class="icon_z"></div></dd><dd class="recmdReason">{#recmdReason#}</dd><dd class="oldPrice">{#template_oldprice#}:&yen;{#oPrice#}</dd><dd class="newPrice">{#template_price#}:&yen;{#nPrice#}</dd>        <dd class="share"><a class="shareQzone" href="#none" tag="shareComm" cname="{#recmdRegName#}" cid="{#id#}">分享给好友</a>        <a href="{#shopUrl#}" target="_blank" class="{#template_btn#} shopLink">逛逛该店铺&raquo;</a></dd></dl></li>';
	//广告价，推荐理由
	template[11]='<li {#template_sold#}> <a href="{#url#}" target="_blank">        <img init_src="{#realImage#}" alt="{#recmdRegName#}" class="image" />        <span class="recmdRegName">{#recmdRegName#}</span>        <span class="recmdReason">{#recmdReason#}</span>        <span class="newPrice">{#template_price#}:&yen;{#nPrice#}</span>        <span class="adPrice">{#template_oldprice#}:&yen;{#aPrice#}</span></a>        <a class="shareQzone" href="#none" tag="shareComm" cname="{#recmdRegName#}" cid="{#id#}">分享给好友</a>        <a href="{#shopUrl#}" target="_blank" class="{#template_btn#} btn">逛逛店铺&raquo;</a></li>';
	//商品，推荐理由，市场价，拍拍价，销售量，分享给好友
	template[12]='<li {#template_sold#}><dl><dt><a href="{#url#}" target="_blank">        <img init_src="{#realImage#}" alt="{#recmdRegName#}" class="image" /></a></dt>        <dd class="recmdRegName"><div class="recmdTitle"><a href="{#url#}" target="_blank">{#recmdRegName#}</a></div><div class="icon_z"></div><dd>        <dd class="recmdReason">{#recmdReason#}</dd>        <dd class="oldPrice">{#template_oldprice#}:&yen;{#oPrice#}</dd>        <dd class="newPrice">{#template_price#}:&yen;{#nPrice#}</dd>        <dd class="soldCount">销售量:{#soldCount#}</dd>        <dd class="share"><a class="shareQzone" href="#none" tag="shareComm" cname="{#recmdRegName#}" cid="{#id#}">分享给好友</a>        <a href="{#shopUrl#}" target="_blank" class="{#template_btn#} shopLink">逛逛该店铺&raquo;</a></dd></dl></li>';
	template[13]='<li {#template_sold#}><dl><dt><a href="{#url#}" target="_blank">{#recmdRegName#}</a></dt><dd class="recmdImage"><a href="{#url#}" target="_blank"> <img init_src="{#realImage#}" alt="{#recmdRegName#}" class="image" /></a><div class="icon_z"></div><dd>        <dd class="oldPrice">{#template_oldprice#}:&yen;{#oPrice#}</dd><dd class="soldCount">限量:{#shopLeft#}件</dd><dd class="newPrice">{#template_price#}:&yen;{#nPrice#}</dd><dd class="btn"><a href="{#url#}" target="_blank"  class="{#template_btn#}">我要抢</a></dd> <dd class="share"><a class="shareQzone" href="#none" tag="shareComm" cname="{#recmdRegName#}" cid="{#id#}">分享给好友</a>        <a href="{#shopUrl#}" target="_blank" class="shopLink">逛逛该店铺&raquo;</a></dd><dd class="recmdReason"><p>{#recmdReason#}</p></dd></dl></li>';
	if(className==0){return template[0];}
	var btn=btn?btn:"";
	var price=price?price:"拍拍价";
	var oldprice=oldprice?oldprice:"市场价";
	var tempIndex=10;
	var soldOutStr="";
	var classNameArry=['','pp_list_1','pp_list_2','pp_list_3','pp_list_4','pp_list_5','pp_list_6','pp_list_7','pp_list_8','pp_list_9','pp_list_10','pp_list_11','pp_list_12','pp_list_13'];
	for(var i=1;i<classNameArry.length;i++){
		if(className.indexOf(classNameArry[i])>=0){
			tempIndex=i;
		}
	}
	//检查是否有售完开关
	if(soldOut){
		soldOutStr='soldOut="'+soldOut+'" commId="{#id#}"'
	}
	$loadCss("http://static.paipaiimg.com/promote_v2/data/"+className+".css");
	$loadCss("http://static.paipaiimg.com/promote_v2/data/btn.css");
	var temp=template[tempIndex].replace(/{#template_btn#}/g,btn).replace(/{#template_price#}/g,price).replace(/{#template_oldprice#}/g,oldprice).replace(/{#template_sold#}/g,soldOutStr);
	return temp;
}
function $getMartErrorMsg(code) {
    var msg = '系统繁忙，请稍候再试',
        state = 'error';
    if (code.toLowerCase().indexOf('0x') > -1) {
        code = parseInt(code, 16);
    } else {
        code = parseInt(code, 10);
    }

    if (code > 0 && code < 17302000) {
        var errorMsg = document.getElementById('errorMsg');
        if (errorMsg) {
            msg = errorMsg.value;
        } else {
            msg = '';
        }
    } else {
        switch (code) {
            case 17303041: msg = '查询日期不正确'; break;
            case 17303042: msg = '推广标题含有非法字符'; break;
            //=====用户业务错误返回正数0x00001开头============                                                                                     
            case 17302017: msg = '用户未登录'; state = 'login'; break;
            case 17302018: msg = '用户未登录(Boss端)'; state = 'login'; break;
            case 17302019: msg = '该用户已存在'; break;
            case 17302020: msg = '您未开通卖场快车'; state = 'regist'; break;
            case 17302021: msg = '您未开通卖场快车'; state = 'regist'; break;
            //==广告0x00002	开头===========                                                                                     
            case 17302273: msg = '该广告不存在'; break;
            case 17302274: msg = '该广告不允许替换'; break;
            case 17302275: msg = '请选择您自己的商品进行推广'; break;
            case 17302276: msg = '该商品已下架或被删除'; break;
            case 17302277: msg = '商品价格不符合要求'; break;
            case 17302278: msg = '文件不存在'; break;
            case 17302279: msg = '请上传规定大小的图片'; break;
            case 17302280: msg = '请上传正确格式的图片'; break;
            case 17302281: msg = '活动位置对应的类目不匹配'; break;
            case 17302282: msg = '该商品已经在该活动中推广'; break;
            case 17302283: msg = '替换时请更换素材'; break;
            case 17302284: msg = '活动报名数据已满'; break;
            case 17302285: msg = '非报名时间'; break;
            case 17302286: msg = '推广标题长度不符'; break;
            case 17302287: msg = '超过卖家推广限制'; break;
            case 17302288: msg = '余额不足'; break;
            case 17302289: msg = '该广告已经选过位置'; break;
            case 17302290: msg = '该广告已审核通过,不允许编辑'; break;
            case 17302291: msg = '广告检索，没有符合条件的广告'; break;
            case 17302292: msg = '广告参数不正确'; break;
            case 17302293: msg = '支付返回参数不正确'; break;
            case 17302294: msg = '支付失败'; break;
            case 17302295: msg = '支付非本人'; break;
            case 17302296: msg = '支付类型错误'; break;
            case 17302297: msg = '调用广告选位 adPlace 接口错误'; break;
            case 17302298: msg = '广告推广中，不允许取消'; break;
            case 17302299: msg = '广告市场价低于当前商品价格'; break;
            //活动                                                                                    
            case 17302529: msg = '参数不正确'; break;
            case 17302530: msg = '该活动不存在'; break;
            case 17302531: msg = '已报名商品数达到最大或最小值'; break;
            case 17302532: msg = '活动不在选位时间段内'; break;
            case 17302533: msg = '活动还在选位时间段内，或者活动已结束，无法进行强制发布其他广告'; break;
            case 17302534: msg = '选位失败，位置不存在或者已经被选'; break;
            case 17302535: msg = '选位失败，位置不存在或者已经被选'; break;
            case 17302536: msg = '位置不存在'; break;
            case 17302537: msg = '该广告已选了位置,请直接去财付通付款'; break;
            case 17302538: msg = '该广告已选好位置，请不要重复选择'; break;
            //同步                                                                                      
            case 17302785: msg = '同步失败'; break;
            //定制类错误码                                                           
            case 17432833:
                msg = '参数错误';
                break;
            case 17432834:
                msg = '规则不存在';
                break;
            case 17432835:
                msg = '商品不存在';
                break;
            case 17432836:
                msg = '很抱歉，您无法参加报名';
                break;
            case 17432837:
                msg = '只有拍拍卖家才可以报名参加';
                break;
            case 17432838:
                msg = '店铺主营类目不符，无法参加报名';
                break;
            case 17432839:
                msg = '店铺在线商品数未满足要求，无法参加报名';
                break;
            case 17432840:
                msg = '店铺的信用评分未满足要求，无法参加报名';
                break;
            case 17432841:
                msg = '店铺的好评率未满足要求，无法参加报名';
                break;
            case 17432842:
                msg = '店铺差评率过高，无法参加报名';
                break;
            case 17432843:
                msg = '店铺投诉率过高，无法参加报名';
                break;
            case 17432844:
                msg = '被投诉中，无法参加报名';
                break;
            case 17432845:
                msg = '付款率不符合报名条件限制，无法参加报名';
                break;
            case 17432846:
                msg = '退款率不符合报名条件限制，无法参加报名';
                break;
            case 17432847:
                msg = '成交额不符合报名条件限制，无法参加报名';
                break;
            case 17432848:
                msg = '红包面值不符合报名条件限制，无法参加报名';
                break;
            case 17432849:
                msg = '库存数不符合报名条件限制，无法参加报名';
                break;
            case 17432850:
                msg = '商品价格不符合报名条件限制，无法参加报名';
                break;
            case 17432851:
                msg = '商品在线时间不符合报名条件限制，无法参加报名';
                break;
            case 17432852:
                msg = '只要在线商品才可参加报名';
                break;
            case 17432853:
                msg = '只有预上架商品才可参加报名';
                break;
            case 17432854:
                msg = '商品类目不符合报名条件限制，无法参加报名';
                break;
            case 17432855:
                msg = '商品重发机制不符合报名条件限制，无法参加报名';
                break;
            case 17432856:
                msg = '只有包邮商品才可参加报名';
                break;
            case 17432857:
                msg = '只有彩钻商品才可参加报名';
                break;
            case 17432858:
                msg = '商品成交数不符合报名条件限制，无法参加报名';
                break;
            case 17432859:
                msg = '只有商城卖家才可参加报名';
                break;
            case 17432860:
                msg = '被处罚中，无法参加报名';
                break;
            case 17432861:
                msg = '只有官字卖家才可参加报名';
                break;
            case 17432862:
                msg = '只有邀请卖家可报名参加本活动';
                break;
            case 17432863:
                msg = '只有商城或官字卖家才可参加报名';
                break;
            case 17432864 : msg='请选择您自己的商品进行操作';break;
            case 17432865: msg='非正品保证，假一赔三商品';break;
            case 17432866: msg='非7天包退商品';break;
            case 17432867: msg='非7天免邮包退商品';break;
        case 17432868: msg = '描述相符度分数过低'; break;
        case 17432869: msg = '服务态度分数过低'; break;
        case 17432870: msg = '发货速度分数过低'; break;
        case 17432871: msg = '非预上架or销售中'; break;
            default: msg = '系统繁忙，请稍候再试'; break;
        }
    }
    return { msg: msg, state: state };
}
function $getRightUrlForMarket(url) {
    //纠正错误的URL，以及跨域问题
    url = url.replace(/ /g, "");
    //如果是卖场快车或者点击竞价的cgi，不进行url的矫正
    if (url.toLowerCase().indexOf("martadretrieval") > 0 || url.toLowerCase().indexOf("cpc_search") > 0 || url.toLowerCase().indexOf("cpcad_search") > 0 || /http:\/\/www.paipai.com\/sinclude\/xp/.test(url)) { return url; }
    if (url.toLowerCase().indexOf(".js") > 0) { return url; }
    if (url.toLowerCase().indexOf("ppms") > 0) { return url.replace(".xml", ".js");}
    //卖场xml推荐位数据url校正
    var hosts = ['promote1.paipai.com/promote', 'paipai.lady.qq.com/promote', 'paipai.digi.qq.com/promote', 'paipai.games.qq.com/promote', '3c.paipai.com', 'chong.paipai.com'];
    var thisHost = location.hostname;
    if (url.indexOf("/tjw/") < 0) {
        url = "/tjw/" + url;
        if (thisHost == "promote1.paipai.com") {
            url = "/promote" + url
        }
    }
    for (var i = 0; i < hosts.length; i++) {
        if (hosts[i].indexOf(thisHost) >= 0) {
            url = url.replace("www.paipai.com", hosts[i]);
        }
    }
    if (location.hostname.toLowerCase().indexOf("shop.qq.com") > -1) { return url.replace(".xml", ".js"); }
    else if (url.toLowerCase().indexOf("3c.paipai.com") > -1) { return url.replace("3c.paipai.com", location.hostname); }
    else if (url.toLowerCase().indexOf("life.paipai.com") > -1) { return url.replace("life.paipai.com", location.hostname); }
    else if (url.toLowerCase().indexOf("vip.paipai.com") > -1) { return url.replace("vip.paipai.com", location.hostname); }
    else if (url.toLowerCase().indexOf("food.paipai.com") > -1) { return url.replace("food.paipai.com", location.hostname); }
    else if (url.toLowerCase().indexOf("game.paipai.com") > -1) { return url.replace("game.paipai.com", location.hostname); }
    else { return url.replace("www.paipai.com", location.hostname); }
}
function $getSalePrice(sale,price){
//获取商品折扣价格，参数：折扣率（0.50），总价（单位元）
	if(sale>=1.0){
		return parseFloat(price).toFixed(2);
	}
	var memberprice=price*sale;
	if(price<=50){
		memberprice+=0.05; 
		memberprice=parseInt(memberprice*100/10)/10;
	}else{
		memberprice+=0.5;
		memberprice=parseInt(memberprice);
	}
	if(memberprice<=0.01){
		memberprice=0.01;
	}
	return parseFloat(memberprice).toFixed(2);
}
function $getShopIcon(uin,type){
	var uin16 = parseInt(uin).toString(16),tempArr = [],tempStr;
	var iconArr = ["http://image.paipai.com/825e8e94/shop-4E2AF3F0-"],shopIcon;
	for (var i = 0; i < uin16.length; i++){
		if (i %2 == 0){
			tempArr.push(uin16.substr(i,2));
		}
	}
	if (tempArr.length > 0){
		tempArr = tempArr.reverse();
		tempArr.push("000000000000000000000000000000");
		tempStr = tempArr.join("").toUpperCase();
		tempStr = tempStr.substr(0,(32 - (uin+"").length));
		iconArr.push(tempStr + uin);
		(type && type == 2)?iconArr.push("." + type + ".gif"):iconArr.push(".1.gif");
		shopIcon = iconArr.join("");
	}
	return shopIcon;
}
function $GetUserFavororiteNum(cb)
{
	var URL = 'http://favorite.buy.qq.com/json.php?mod=favorite&act=getUserFavorNum&callback=getFavoriteNum&t=' + Math.random();
	$loadScript({
		url:URL,
		charset:'utf-8'
	});
	window.getFavoriteNum = function(data){
		if(typeof cb == 'function'){
			if(data && data['result'] && data['result'] == 0){
				cb(data['num']);
			}else{
				cb(0);
			}
		}
	}
}
function $getUserIcons(opt) {
    //输出用户的认证图标列表
    var option = {
        qq: "", //用户的QQ
        userPro: "", 	//296字节的01字符串,每一个位代表一个属性，当这个不为空的时候，其他的属性串的内容都无效
        auth: "", 	//用户认证串
        property1: "", //用户属性标记
        property2: "", //新属性位的0-31
        property3: "", //新属性位的32-63
        property4: "", //新属性位的64-95
        property5: "", //新属性位的96-127
        property6: "", //新属性位的128-159
        property7: "", //新属性位的160-191
        property8: "", //新属性位的192-223
        property9: "", //新属性位的224-255
        iconTag: "", //图标列表
        iconType: "default", 	//图标的输出样式，default为传统方式，txt为把短文字说明放前面输出的形式
        iconbg: "http://static.paipaiimg.com/assets/common/ppicons.png?t=20091210", //图标大图的地址
        //所有的icon列表，以及对应的取值标记，前面的是用户认证串中的
        //每一项的结构为图标名:[在字符串上对应的位置，标记位0，标记所在的变量1,"输出说明"2,“帮助链接”3,"x坐标"4,"y坐标"5,"高"6,"宽"7,"右边间距"8,"左边距"9,"上边距"10,"下边距"11,"链接目标12","短标题13"]
        icons: {
            "validmobile": [0, 0x1, "auth", "已通过手机认证", "http://help.paipai.com/content/help_10210.shtml?{#ptag#}", "-141", "-23", "20", "15", "3", "0", "0", "0", "_blank"],
            "tenpay": [10, 0x4, "property1", "该商品支持财付通，买家先付款到财付通，收货满意后卖家才拿到钱，安全可靠。 ", "https://www.tenpay.com/zft/qa/qa_1.shtml?{#ptag#}", "-120", "-23", "20", "16", "3", "0", "0", "0", "_blank"],
            "idcard": [1, 0x2, "auth", "该卖家已通过拍拍网个人实名认证，即代表已经过拍拍网严格的身份审核，可让买家购物更安全。", "http://help.paipai.com/content/help_10210.shtml?{#ptag#}", "-35", "-322", "20", "35", "3", "0", "0", "0", "_blank"],
            "athenbank": [3, 0x8, "auth", "该卖家已通过拍拍网个人实名认证，即代表已经过拍拍网严格的身份审核，可让买家购物更安全。", "http://help.paipai.com/content/help_10210.shtml?{#ptag#}", "-35", "-322", "20", "35", "3", "0", "0", "0", "_blank"],
            "patriarch": [16, 0x100, "property1", "该卖家拥有拍拍元勋特权身份，具有丰富经验和良好信誉，是拍拍网元老级卖家。", "http://help.paipai.com/2008/explain/?{#ptag#}#patriarch", "-100", "0", "16", "16", "5", "0", "0", "0", "_blank"],
            "helpangle": [19, 0x800, "property1", "该卖家拥有互助天使特权身份，多次参与帮助教程编写等活动，也积极解答新手买家问题，给买家提供帮助。", "http://help.paipai.com/2008/explain/?{#ptag#}#helpangle", "-122", "0", "16", "16", "5", "0", "0", "0", "_blank"],
            "freegoldmedal": [21, 0x2000, "property1", "该卖家拥有免费金牌特权身份，可完全免费的享有拍拍网的全部服务，在拍拍网有过突出贡献。", "http://help.paipai.com/2008/explain/?{#ptag#}#patriarch", "-145", "-1", "16", "16", "5", "0", "0", "0", "_blank"],
            "qccicon": [24, 0x10000, "property1", "该卖家已通过严格的QQ空间审核和拍拍网个人实名认证，可为买家提供优质的QQ空间个性化虚拟商品。", "http://help.paipai.com/content/help_30120.shtml?{#ptag#}", "-130", "-406", "16", "16", "5", "0", "0", "0", "_blank"],
            "athensafe": [36, 0x10000000, "property1", "该卖家已加入诚信保证计划，所出售的商品均支持先行赔付服务，保证购物更安全。", "http://help.paipai.com/content/help_208.shtml?{#ptag#}", "-100", "-344", "20", "36", "1", "0", "0", "0", "_blank"],
            "bigsage": [36, 0x10000000, "property1", "该卖家已加入诚信保证计划，所出售的商品均支持先行赔付服务，保证购物更安全。", "http://help.paipai.com/content/help_208.shtml?{#ptag#}", "0", "-365", "40", "179", "1", "0", "0", "5", "_blank"], //大的诚信保证图标
            "bigreally": [56, 0x200, "property2", "该卖家已通过诚信保证计划认证，该商品支持“假一赔三”，保证正品。", "http://www.paipai.com/mobile/help/index.shtml?{#ptag#}", "0", "-198", "40", "179", "1", "0", "0", "5", "_blank"],
            "bigwomen": [50, 0x400, "property2", "该商品为精品女装，经过人工严格审核并加入诚信保证计划，如有质量问题可先行赔付给买家，实物拍摄，品质保证。", "http://help.paipai.com/content/help_20119.shtml?{#ptag#}", "0", "-282", "40", "179", "1", "0", "0", "5", "_blank"],
            "shangpin": [50, 0x400, "property2", "该商品为精品女装，经过人工严格审核并加入诚信保证计划，如有质量问题可先行赔付给买家，实物拍摄，品质保证。", "http://help.paipai.com/content/help_20119.shtml?{#ptag#}", "-96", "-178", "17", "16", "1", "0", "0", "0", "_blank"],
            "licence": [55, 0x8000, "property2", "该卖家已通过拍拍网严格的商家营业执照认证，具有合法营业资格，可为买家提供优质的商品和服务。 ", "http://help.paipai.com/content/help_10226.shtml?{#ptag#}", "0", "-322", "20", "36", "1", "0", "0", "0", "_blank"],
            "legend-shop-1": [49, 0x200, "property2", "带有“官”字的商品，由拍拍网入户审核的卖家提供，买假拍拍包赔并享受7天包退换服务。24小时拍拍官方服务热线：0755-83762288-4-2", "http://www.paipai.com/guan/misc/intro.html?{#ptag#}", "-90", "-406", "16", "16", "1", "1", "0", "0", "_blank", "拍拍保障"],
            "shangpinhui": [53, 0x400000, "property1", "尚品会", "http://help.paipai.com/content/help_20122.shtml?{#ptag#}", "-151", "-406", "16", "16", "1", "0", "0", "0", "尚品会", "_blank"],
			"qqshop":[58,0x40000,"property2","QQ商城","http://shop.qq.com/?{#ptag#}","0","-365","16","94","10","0","0","0","QQ商城","_blank"]

        },
        ptag: "",
        ptagList: {
            "athensafe": "1020.4.5",
            "bigsage": "1020.4.5"
        }
    };
    for (var i in opt) {
        option[i] = opt[i];
    }
    var _return = "";
    ///////////这里处理图标之间的关联逻辑---start///////////////
    //如果是使用了新的01属性串的话就用新的方式处理
    if (option.userPro.length > 0) {
        //同时有身份证认证和银行卡认证的时候，只显示银行卡认证
        if (option.iconTag.indexOf("idcard") >= 0 && option.iconTag.indexOf("athenbank") >= 0) {
            //判断是否有身份证认证
            var hasIdCard = (option.userPro.substr(option.icons["idcard"][0], 1) == "1");
            //判断是否有银行卡认证
            var hasAthenbank = (option.userPro.substr(option.icons["athenbank"][0], 1) == "1");
            if (hasIdCard && hasAthenbank) {
                option.iconTag = option.iconTag.replace("idcard", "").replace(",,", ",");
            }
        }
    } else {//原的属性串处理方法
        //同时有身份证认证和银行卡认证的时候，只显示银行卡认证
        if (option.iconTag.indexOf("idcard") >= 0 && option.iconTag.indexOf("athenbank") >= 0) {
            var hasIdCard = option.icons["idcard"][1] & option[option.icons["idcard"][2]];
            var hasAthenbank = option.icons["athenbank"][1] & option[option.icons["athenbank"][2]];
            if (hasIdCard && hasAthenbank) {
                option.iconTag = option.iconTag.replace("idcard", "").replace(",,", ",");
            }
        }
    }
    ///////////这里处理图标之间的关联逻辑---end///////////////
    var iconList = option.iconTag.split(","), newPtag;
    //循环判断输出每个图标
    for (var i = 0; i < iconList.length; i++) {
        //分别确认每一个项目
        var _it = option.icons[iconList[i]];
        if (_it) {
            var hasThisIcon = false;
            if (option.userPro.length > 0) {
                hasThisIcon = (option.userPro.substr(_it[0], 1) == "1");
            } else {
                hasThisIcon = _it[1] & option[_it[2]];
            }
            newPtag = option.ptag != "" ? option.ptag : (option.ptagList[iconList[i]] ? option.ptagList[iconList[i]] : "");
            _it[4] = _it[4].replace("{#ptag#}", newPtag == "" ? "" : "PTAG=" + newPtag);
            //输出样式：default
            if (option.iconType == "default") {
                _return += ((hasThisIcon) ? '<a href="' + _it[4] + '" target="' + _it[13] + '" tag="' + iconList[i] + '" title="' + _it[3] + '" style="margin:0px;"><span style="display: -moz-inline-stack;display: inline-block;zoom:1;*display: inline;margin-right:' + _it[9] + 'px;margin-left:' + _it[10] + 'px;margin-top:' + _it[11] + 'px;margin-bottom:' + _it[12] + 'px;background:url(' + option.iconbg + ') no-repeat;outline:none;font-size:0px;vertical-align: middle;cursor:pointer;width:' + _it[8] + 'px;height:' + _it[7] + 'px;background-position:' + _it[5] + 'px ' + _it[6] + 'px;" class="' + iconList[i] + '"></span></a>' : "");
            }
            //输出样式：txt
            if (option.iconType == "txt") {
                _return += ((hasThisIcon) ? '<a href="' + _it[4] + '" target="' + _it[13] + '" tag="' + iconList[i] + '" title="' + _it[3] + '" style="margin:0px;">' + _it[14] + '<span style="display: -moz-inline-stack;display: inline-block;zoom:1;*display: inline;margin-right:' + _it[9] + 'px;margin-left:' + _it[10] + 'px;margin-top:' + _it[11] + 'px;margin-bottom:' + _it[12] + 'px;background:url(' + option.iconbg + ') no-repeat;outline:none;font-size:0px;vertical-align: middle;cursor:pointer;width:' + _it[8] + 'px;height:' + _it[7] + 'px;background-position:' + _it[5] + 'px ' + _it[6] + 'px;" class="' + iconList[i] + '" ></span></a>' : "");

            }
        }
    }
    return _return;
}
function $getUserInfo(opt) {
    var cuin = $getUin();
    window.marketCache.filter("[tag=userPic]").each(function () {
        var _t = $$(this);
        uin = _t.attr("uin") || cuin;
        if (uin != "") {
            _t.html($getUserPic(uin, parseInt(_t.attr("picsize") || 50)));
        }
    });
    if (cuin) {
        $loadScript("http://ext.paipai.com/uinfo/infojs?userid=" + cuin + "&t=" + Math.random());
        window.getUserInfoCallBack = function (userData) {
            //升级所需信用值与当前级别
            var gradeList = [0, 1, 5, 11, 21, 41, 101, 201, 501, 1001, 2001, 5001, 10001, 30001, 50001, 80001, 100001, 150001, 200001, 250001, 300001, 99999999999];
            var gradeName = ["", "一星买家", "二星买家", "三星买家", "四星买家", "五星买家", "一钻买家", "二钻买家", "三钻买家", "四钻买家", "五钻买家", "一银冠买家", "二银冠买家", "三银冠买家", "四银冠买家", "五银冠买家", "一金冠买家", "二金冠买家", "三金冠买家", "四金冠买家", "五金冠买家"];
            var nowGrade = "";
            var nextGrade = "";
            var needCredit = 0;
            var buyerCredit = parseInt(userData.buyerCredit);
            for (var i = 0, isok = false; i < gradeList.length && !isok; i++) {
                if (buyerCredit >= gradeList[i] && buyerCredit < gradeList[i + 1]) {
                    nowGrade = gradeName[i];
                    nextGrade = gradeName[i + 1];
                    needCredit = gradeList[i + 1] - buyerCredit;
                    isok = true;
                }
            }
            window.marketCache.each(function () {
                var _t = $$(this);
                var tag = _t.attr("tag");
				
                if (tag == "nickName") { //输出当前用户的昵称
                    _t.html(userData.nickName);
                } else if (tag == "userQQ") { //输出当前用户QQ号码
                    _t.html(cuin);
				} else if (tag == "buyerCredit") { //输出当前用户的买家信用
                    _t.html(userData.buyerCredit);
                } else if (tag == "sellerCredit") { //输出当前用户的卖家信用
                    _t.html(userData.sellerCredit);
                } else if (tag == "buyerCreditIcon") { //输出当前用户买家信用图标
                    _t.html($getGradeIcons({
                        qq: userData.uin,
                        score: userData.buyerCredit,
                        type: "buyer"
                    }));
                } else if (tag == "sellerCreditIcon") { //输出当前用户卖家信用图标
                    _t.html($getGradeIcons({
                        qq: userData.uin,
                        score: userData.sellerCredit,
                        type: "seller"
                    }));
                } else if (tag == "vipIcon") { //熄灭彩钻
                    if (userData.colordiamondstatus == "0") {
                        _t.html("<img src=\"http://static.paipaiimg.com/module/icon/credit/color_dis_lv" + userData.colordiamondlevel + ".gif\" style=' display:inline-block;' />").attr("level", userData.colordiamondlevel);
                    }
                    else {
                        _t.html("<img src=\"http://static.paipaiimg.com/module/icon/credit/color_lv" + userData.colordiamondlevel + ".gif\" style=' display:inline-block;' />").attr("level", userData.colordiamondlevel);
                    }
                } else if (tag == "nowGrade") { //当前用户的信用等级描述
                    _t.html(nowGrade);
                } else if (tag == "nextGrade") { //当前用户的下一等级名称
                    _t.html(nextGrade);
                } else if (tag == "needCredit") { //当前用户需要多少信用才能升级
                    _t.html(needCredit);
                } else if (tag == "buyerExp") { //有经验买家区域
                    userData.buyerCredit <= 0 ? _t.hide() : _t.show();
                } else if (tag == "buyerNew") { //新买家内容区域
                    userData.buyerCredit <= 0 ? _t.show() : _t.hide();
                } else if (tag == "sellerNew") { //新卖家内容区域
                    userData.sellerCredit <= 0 ? _t.show() : _t.hide();
                } else if (tag == "sellerExp") { //有经验卖家内容区域
                    userData.sellerCredit <= 0 ? _t.hide() : _t.show();
                }
            });
        }
    }
    //信用图标翻译功能
    window.marketCache.filter("[tag='userGradeIcons'],[tag='sellerGradeIcons']").each(function () {
        var uin = $$(this).attr("uin");
        var credit = parseInt($$(this).attr("credit"));
        $$(this).html($getGradeIcons({
            qq: uin,
            score: credit,
            showScore: false,
            type: $$(this).attr("tag") == "userGradeIcons" ? "buyer" : "seller"
        }));
    })
}
function $getUserPic(qq,size){
	qq = parseInt(qq.toString().replace(/^o0/g,""), 10);
	var html='<img src="http://qlogo'+(parseInt(qq)%4+1)+'.store.qq.com/qzone/'+qq+'/'+qq+'/'+size+'" alt="" />';
	return html;
}
function $getVipCardSrc(size, level, info) {
	var path = "http://static.paipaiimg.com/index_v2/buyervip/card/",
	file = (size == 35 ? "35x22" : (size == 50 ? "50x32" : "245x155")) + "-" + level + (info ? "" : "-my") + ".png";
	return path + file;
}
function $initActiveMsg(){
	//初始化卖场相关的提示语
	//系统提示，请勿更改
	if(!window.activeErrMsg_text){
		window.activeErrMsg_text = [
			"对不起，活动尚未开始。", //活动未开始
			"对不起，活动已结束。", //活动已结束
			"对不起，您暂时不能参与该活动，详细情况请联系拍拍客服。", //买家正受处罚
			"对不起，服务器繁忙，请稍后再试。", //没法调用查询订单接口系统
			"对不起，请输入正确的订单号。", //订单号为空
			"对不起，您输入的订单号无效。", //查询不到订单信息
			"对不起，您输入的订单号无效。", //修改了订单时间
			"对不起，您的订单付款金额不满足活动要求，不能参与本活动", //订单金额是否满足活动要求
			"对不起，您的订单中商品不属于本活动指定类目，详情请参看活动规则！", //订单类目不满足活动要求
			"对不起，该订单没有完成财付通付款，不能使用该订单", //订单没有完成付款
			"对不起，当前订单支付方式不支持此次活动，详情请参看活动规则！", //订单不是通过财付通付款
			"对不起，您不是该订单的买家，不能使用该订单", //兑奖用户不是订单买家
			"对不起，您的订单卖家不满足活动要求，不能参与活动，详情请参看活动规则！", //卖家不满足活动要求
			"对不起，您的订单不是在指定的时间内完成付款，不能参与活动。", //订单没有在指定时间内完成付款
			"对不起，当日订单仅限当天参加活动，当晚24：00订单失效，详情请参看活动规则。", //订单不是在当日付款
			"对不起，您的信用等级不满足活动要求，不能参与活动。", //买家信用不满足活动要求
			"对不起，您尚未开通彩钻，不能参与活动。", //买家没开通彩钻
			"对不起，您的彩钻等级不满足活动要求，不能参与活动。", //用户彩钻等级不满足活动要求
			"对不起，您尚未选择奖品等级。", //用户未选择兑奖/抽奖的等级
			"对不起，该奖池暂无该奖品，请稍后再试。", //（某等级）奖品已经兑、抽完
			"对不起，今日奖品已发放完，请稍后再试。", //（某等级）当日奖品已经兑、抽完
			"对不起，本时段的奖品已发放完，请稍后再试。", //（某等级）当小时奖品已经兑、抽完
			"对不起，您在本活动中的参与次数已达到上限。", //已达到活动指定的兑、抽奖上限
			"对不起，您在本活动中单日的参与次数已达到上限。", //已达到活动单日指定的兑、抽奖上限
			"对不起，您兑换该奖品次数已达到上限", //兑换某等级奖品次数已达到上限
			"对不起，该订单已经参与过拍拍网活动了。", //订单重复使用
			"对不起，该QQ号码已经参与过拍拍网活动了。",//QQ号码重复使用
			"对不起，您在本活动的中奖次数已达到上限！"//中奖次数已达到上限
			
		];
	}
	if(!window.activeLeverMsg){
		window.activeLeverMsg = [
			"",
			"您好，您是拍拍彩钻lv2用户，您申领的5元红包，我们将在3个工作日发到您的财付通帐户，请注意查收。", 	//等级1
			"您好，您是拍拍彩钻lv3用户，您申领的10元红包，我们将在3个工作日发到您的财付通帐户，请注意查收。", //等级2
			"您好，您是拍拍彩钻lv4用户，您申领的10元红包，我们将在3个工作日发到您的财付通帐户，请注意查收。", //等级3
			"您好，您是拍拍彩钻lv5用户，您申领的20元红包，我们将在3个工作日发到您的财付通帐户，请注意查收。",	//等级4
		];
	}
	if(!window.activeLeverMsg){
		window.activeEndMsg="抱歉，红包已经领取完";
	}
	if(window.lvl_text){
		window.activeLeverMsg=window.lvl_text;
	}
	if(window.lv_end){
		window.activeEndMsg=lv_end;
	}
}
function $initCommSoldOut(){
	if($$("[soldOut][commId]").length==0){return;}
	//绑定商品状态更新逻辑,找到所有需要拉最新商品状态的商品，并进行更新，支持异步加载进来的数据
	window._PP_CommSoldOut_data={
		list:[]
	};
	//加载商品状态的回调
	window.itemCommInfoCallBack=function(data){
		for(var i=0,len=data.length;i<len;i++){
			if(data[i].dwState==6){  
				var o=$$("[newStyle][commId='"+data[i].strItemId+"']");
				o.addClass(o.attr("newStyle"));	
			}
		}
	} 
	findAllComms();
	setInterval(function(){findAllComms()},200);
	function findAllComms(){
		var o=window._PP_CommSoldOut_data;
		$$("[soldOut][commId]").each(function(){
			var t=$$(this);
			var id=t.attr("commId");
			var css=t.attr("soldOut");
			if(id && css){
				o.list.push(id);
				t.attr("newStyle",css);
			}
			t.removeAttr("soldOut")
		});
		for(var i=0,j=o.list.length,list=[];i<j;i++){
			list.push(o.list[i]);
			if(list.length==10 || (j-1)==i){
				//加载商品列表的状态数据，期待回调itemCommInfoCallBack
				$loadScript('http://my.paipai.com/cgi-bin/item_view/item_list?sItemid='+list.join("|"))
				list=[];
			}
		}
		o.list=[];
	}
}
function $initDragItem(obj){
	//控制组件拖动方法
	var option = {
		barDom: "", //拖动区域的dom对象
		targetDom: "" //被拖动区域的dom对象
	};
	for (var i in obj) {
		option[i] = obj[i];
	}
	window._dragOption ? "" : window._dragOption = {};
	//设置状态
	option.barDom.style.cursor = 'move';
	option.targetDom.style.position = "absolute";
	option.barDom.onmousedown = function(e){
		var e = window.event || e;
		window._dragOption.barDom = this;
		window._dragOption.targetDom = option.targetDom;
		var currPostion = [parseInt(option.targetDom.style.left) ? parseInt(option.targetDom.style.left) : 0, parseInt(option.targetDom.style.top) ? parseInt(option.targetDom.style.top) : 0];
		window._dragOption.diffPostion = [$getMousePosition({
			evt: e
		})[0] - currPostion[0], $getMousePosition({
			evt: e
		})[1] - currPostion[1]];
		document.onselectstart = function(){
			return false
		};
		window.onblur = window.onfocus = function(){
			document.onmouseup()
		};
		return false;
	};
	option.targetDom.onmouseup = document.onmouseup = function(){
		if (window._dragOption.barDom) {
			window._dragOption = {};
			document.onselectstart = window.onblur = window.onfocus = null;
		}
	};
	option.targetDom.onmousemove = document.onmousemove = function(e){
		try {
			var e = window.event || e;
			if (window._dragOption.barDom && window._dragOption.targetDom) {
				window._dragOption.targetDom.style.left = ($getMousePosition({
					evt: e
				})[0] - window._dragOption.diffPostion[0]) + "px";
				window._dragOption.targetDom.style.top = ($getMousePosition({
					evt: e
				})[1] - window._dragOption.diffPostion[1]) + "px";
			}
		} 
		catch (e) {
		}
	};
}
function $initExpLocationObj() {
    (function () {
        /*地区数组*/
        var _a = {};
        _a[0] = '请选择';
        _a[11] = 'B 北京';
        _a[21] = 'L 辽宁',
		_a[31] = 'S 上海';
        _a[44] = 'G 广东';
        _a[34] = 'A 安徽';
        _a[50] = 'C 重庆';
        _a[35] = 'F 福建';
        _a[46] = 'H 海南';
        _a[13] = 'H 河北';
        _a[41] = 'H 河南';
        _a[23] = 'H 黑龙江';
        _a[42] = 'H 湖北';
        _a[43] = 'H 湖南';
        _a[62] = 'G 甘肃';
        _a[45] = 'G 广西';
        _a[52] = 'G 贵州';
        _a[22] = 'J 吉林';
        _a[36] = 'J 江西';
        _a[32] = 'J 江苏';
        _a[15] = 'L 内蒙古';
        _a[64] = 'N 宁夏';
        _a[63] = 'Q 青海';
        _a[37] = 'S 山东';
        _a[14] = 'S 山西';
        _a[61] = 'S 陕西';
        _a[51] = 'S 四川';
        _a[12] = 'T 天津';
        _a[54] = 'X 西藏';
        _a[65] = 'X 新疆';
        _a[53] = 'Y 云南';
        _a[33] = 'Z 浙江';
        _a[71] = 'T 台湾';
        _a[81] = 'X 香港';
        _a[82] = 'A 澳门';
        _a[98] = 'Z 中国未识别地区';
        _a[99] = 'G 国外';

        var _sa = {};
        _sa[0] = {};
        _sa[11] = {};
        _sa[12] = {};
        _sa[13] = {};
        _sa[14] = {};
        _sa[15] = {};
        _sa[21] = {};
        _sa[22] = {};
        _sa[23] = {};
        _sa[31] = {};
        _sa[32] = {};
        _sa[33] = {};
        _sa[34] = {};
        _sa[35] = {};
        _sa[36] = {};
        _sa[37] = {};
        _sa[41] = {};
        _sa[42] = {};
        _sa[43] = {};
        _sa[44] = {};
        _sa[45] = {};
        _sa[46] = {};
        _sa[50] = {};
        _sa[51] = {};
        _sa[52] = {};
        _sa[53] = {};
        _sa[54] = {};
        _sa[61] = {};
        _sa[62] = {};
        _sa[63] = {};
        _sa[64] = {};
        _sa[65] = {};
        _sa[71] = {};
        _sa[81] = {};
        _sa[82] = {};
        _sa[98] = {};
        _sa[99] = {};

        _sa[0][0] = '请选择';
        _sa[11][1100] = '请选择';
        //省市增加 XX01
        _sa[11][1101] = '北京';

        _sa[12][1200] = '请选择';
        _sa[12][1201] = '天津';

        _sa[13][1300] = '请选择';
        _sa[13][1301] = '石家庄';
        _sa[13][1302] = '唐山';
        _sa[13][1303] = '秦皇岛';
        _sa[13][1304] = '邯郸';
        _sa[13][1305] = '邢台';
        _sa[13][1306] = '保定';
        _sa[13][1307] = '张家口';
        _sa[13][1308] = '承德';
        _sa[13][1309] = '沧州';
        _sa[13][1310] = '廊坊';
        _sa[13][1311] = '衡水';
        _sa[13][1399] = '未识别地区';

        _sa[14][1400] = '请选择';
        _sa[14][1401] = '太原';
        _sa[14][1402] = '大同';
        _sa[14][1403] = '阳泉';
        _sa[14][1404] = '长治';
        _sa[14][1405] = '晋城';
        _sa[14][1406] = '朔州';
        _sa[14][1407] = '晋中';
        _sa[14][1408] = '运城';
        _sa[14][1409] = '忻州';
        _sa[14][1410] = '临汾';
        _sa[14][1411] = '吕梁';
        _sa[14][1499] = '未识别地区';

        _sa[15][1500] = '请选择';
        _sa[15][1501] = '呼和浩特';
        _sa[15][1502] = '包头';
        _sa[15][1503] = '乌海';
        _sa[15][1504] = '赤峰';
        _sa[15][1505] = '通辽';
        _sa[15][1506] = '鄂尔多斯';
        _sa[15][1507] = '呼伦贝尔';
        _sa[15][1508] = '巴彦淖尔';
        _sa[15][1509] = '乌兰察布';
        _sa[15][1522] = '兴安';
        _sa[15][1525] = '锡林郭勒';
        _sa[15][1529] = '阿拉善';
        _sa[15][1599] = '未识别地区';

        _sa[21][2100] = '请选择';
        _sa[21][2101] = '沈阳';
        _sa[21][2102] = '大连';
        _sa[21][2103] = '鞍山';
        _sa[21][2104] = '抚顺';
        _sa[21][2105] = '本溪';
        _sa[21][2106] = '丹东';
        _sa[21][2107] = '锦州';
        _sa[21][2108] = '营口';
        _sa[21][2109] = '阜新';
        _sa[21][2110] = '辽阳';
        _sa[21][2111] = '盘锦';
        _sa[21][2112] = '铁岭';
        _sa[21][2113] = '朝阳';
        _sa[21][2114] = '葫芦岛';
        _sa[21][2199] = '未识别地区';

        _sa[22][2200] = '请选择';
        _sa[22][2201] = '长春';
        _sa[22][2202] = '吉林';
        _sa[22][2203] = '四平';
        _sa[22][2204] = '辽源';
        _sa[22][2205] = '通化';
        _sa[22][2206] = '白山';
        _sa[22][2207] = '松原';
        _sa[22][2208] = '白城';
        _sa[22][2224] = '延边';
        _sa[22][2299] = '未识别地区';

        _sa[23][2300] = '请选择';
        _sa[23][2301] = '哈尔滨';
        _sa[23][2302] = '齐齐哈尔';
        _sa[23][2303] = '鸡西';
        _sa[23][2304] = '鹤岗';
        _sa[23][2305] = '双鸭山';
        _sa[23][2306] = '大庆';
        _sa[23][2307] = '伊春';
        _sa[23][2308] = '佳木斯';
        _sa[23][2309] = '七台河';
        _sa[23][2310] = '牡丹江';
        _sa[23][2311] = '黑河';
        _sa[23][2312] = '绥化';
        _sa[23][2327] = '大兴安岭';
        _sa[23][2399] = '未识别地区';

        _sa[31][3100] = '请选择';
        _sa[31][3101] = '上海';

        _sa[32][3200] = '请选择';
        _sa[32][3201] = '南京';
        _sa[32][3202] = '无锡';
        _sa[32][3203] = '徐州';
        _sa[32][3204] = '常州';
        _sa[32][3205] = '苏州';
        _sa[32][3206] = '南通';
        _sa[32][3207] = '连云港';
        _sa[32][3208] = '淮安';
        _sa[32][3209] = '盐城';
        _sa[32][3210] = '扬州';
        _sa[32][3211] = '镇江';
        _sa[32][3212] = '泰州';
        _sa[32][3213] = '宿迁';
        _sa[32][3299] = '未识别地区';

        _sa[33][3300] = '请选择';
        _sa[33][3301] = '杭州';
        _sa[33][3302] = '宁波';
        _sa[33][3303] = '温州';
        _sa[33][3304] = '嘉兴';
        _sa[33][3305] = '湖州';
        _sa[33][3306] = '绍兴';
        _sa[33][3307] = '金华';
        _sa[33][3308] = '衢州';
        _sa[33][3309] = '舟山';
        _sa[33][3310] = '台州';
        _sa[33][3311] = '丽水';
        _sa[33][3399] = '未识别地区';

        _sa[34][3400] = '请选择';
        _sa[34][3401] = '合肥';
        _sa[34][3402] = '芜湖';
        _sa[34][3403] = '蚌埠';
        _sa[34][3404] = '淮南';
        _sa[34][3405] = '马鞍山';
        _sa[34][3406] = '淮北';
        _sa[34][3407] = '铜陵';
        _sa[34][3408] = '安庆';
        _sa[34][3410] = '黄山';
        _sa[34][3411] = '滁州';
        _sa[34][3412] = '阜阳';
        _sa[34][3413] = '宿州';
        _sa[34][3414] = '巢湖';
        _sa[34][3415] = '六安';
        _sa[34][3416] = '亳州';
        _sa[34][3417] = '池州';
        _sa[34][3418] = '宣城';
        _sa[34][3499] = '未识别地区';

        _sa[35][3500] = '请选择';
        _sa[35][3501] = '福州';
        _sa[35][3502] = '厦门';
        _sa[35][3503] = '莆田';
        _sa[35][3504] = '三明';
        _sa[35][3505] = '泉州';
        _sa[35][3506] = '漳州';
        _sa[35][3507] = '南平';
        _sa[35][3508] = '龙岩';
        _sa[35][3509] = '宁德';
        _sa[35][3599] = '未识别地区';

        _sa[36][3600] = '请选择';
        _sa[36][3601] = '南昌';
        _sa[36][3602] = '景德镇';
        _sa[36][3603] = '萍乡';
        _sa[36][3604] = '九江';
        _sa[36][3605] = '新余';
        _sa[36][3606] = '鹰潭';
        _sa[36][3607] = '赣州';
        _sa[36][3608] = '吉安';
        _sa[36][3609] = '宜春';
        _sa[36][3610] = '抚州';
        _sa[36][3611] = '上饶';
        _sa[36][3699] = '未识别地区';

        _sa[37][3700] = '请选择';
        _sa[37][3701] = '济南';
        _sa[37][3702] = '青岛';
        _sa[37][3703] = '淄博';
        _sa[37][3704] = '枣庄';
        _sa[37][3705] = '东营';
        _sa[37][3706] = '烟台';
        _sa[37][3707] = '潍坊';
        _sa[37][3708] = '济宁';
        _sa[37][3709] = '泰安';
        _sa[37][3710] = '威海';
        _sa[37][3711] = '日照';
        _sa[37][3712] = '莱芜';
        _sa[37][3713] = '临沂';
        _sa[37][3714] = '德州';
        _sa[37][3715] = '聊城';
        _sa[37][3716] = '滨州';
        _sa[37][3717] = '菏泽';
        _sa[37][3799] = '未识别地区';

        _sa[41][4100] = '请选择';
        _sa[41][4101] = '郑州';
        _sa[41][4102] = '开封';
        _sa[41][4103] = '洛阳';
        _sa[41][4104] = '平顶山';
        _sa[41][4105] = '安阳';
        _sa[41][4106] = '鹤壁';
        _sa[41][4107] = '新乡';
        _sa[41][4108] = '焦作';
        _sa[41][4109] = '濮阳';
        _sa[41][4110] = '许昌';
        _sa[41][4111] = '漯河';
        _sa[41][4112] = '三门峡';
        _sa[41][4113] = '南阳';
        _sa[41][4114] = '商丘';
        _sa[41][4115] = '信阳';
        _sa[41][4116] = '周口';
        _sa[41][4117] = '驻马店';
        _sa[41][4118] = '济源';
        _sa[41][4199] = '未识别地区';

        _sa[42][4200] = '请选择';
        _sa[42][4201] = '武汉';
        _sa[42][4202] = '黄石';
        _sa[42][4203] = '十堰';
        _sa[42][4205] = '宜昌';
        _sa[42][4206] = '襄樊';
        _sa[42][4207] = '鄂州';
        _sa[42][4208] = '荆门';
        _sa[42][4209] = '孝感';
        _sa[42][4210] = '荆州';
        _sa[42][4211] = '黄冈';
        _sa[42][4212] = '咸宁';
        _sa[42][4213] = '随州';
        _sa[42][4228] = '恩施';
        _sa[42][4229] = '仙桃';
        _sa[42][4230] = '潜江';
        _sa[42][4231] = '天门';
        _sa[42][4232] = '神农架';
        _sa[42][4299] = '未识别地区';

        _sa[43][4300] = '请选择';
        _sa[43][4301] = '长沙';
        _sa[43][4302] = '株洲';
        _sa[43][4303] = '湘潭';
        _sa[43][4304] = '衡阳';
        _sa[43][4305] = '邵阳';
        _sa[43][4306] = '岳阳';
        _sa[43][4307] = '常德';
        _sa[43][4308] = '张家界';
        _sa[43][4309] = '益阳';
        _sa[43][4310] = '郴州';
        _sa[43][4311] = '永州';
        _sa[43][4312] = '怀化';
        _sa[43][4313] = '娄底';
        _sa[43][4331] = '湘西';
        _sa[43][4399] = '未识别地区';

        _sa[44][4400] = '请选择';
        _sa[44][4401] = '广州';
        _sa[44][4402] = '韶关';
        _sa[44][4403] = '深圳';
        _sa[44][4404] = '珠海';
        _sa[44][4405] = '汕头';
        _sa[44][4406] = '佛山';
        _sa[44][4407] = '江门';
        _sa[44][4408] = '湛江';
        _sa[44][4409] = '茂名';
        _sa[44][4412] = '肇庆';
        _sa[44][4413] = '惠州';
        _sa[44][4414] = '梅州';
        _sa[44][4415] = '汕尾';
        _sa[44][4416] = '河源';
        _sa[44][4417] = '阳江';
        _sa[44][4418] = '清远';
        _sa[44][4419] = '东莞';
        _sa[44][4420] = '中山';
        _sa[44][4451] = '潮州';
        _sa[44][4452] = '揭阳';
        _sa[44][4453] = '云浮';
        _sa[44][4499] = '未识别地区';


        _sa[45][4500] = '请选择';
        _sa[45][4501] = '南宁';
        _sa[45][4502] = '柳州';
        _sa[45][4503] = '桂林';
        _sa[45][4504] = '梧州';
        _sa[45][4505] = '北海';
        _sa[45][4506] = '防城港';
        _sa[45][4507] = '钦州';
        _sa[45][4508] = '贵港';
        _sa[45][4509] = '玉林';
        _sa[45][4510] = '百色';
        _sa[45][4511] = '贺州';
        _sa[45][4512] = '河池';
        _sa[45][4513] = '来宾';
        _sa[45][4514] = '崇左';
        _sa[45][4599] = '未识别地区';

        _sa[46][4600] = '请选择';
        _sa[46][4601] = '海口';
        _sa[46][4602] = '三亚';
        _sa[46][4603] = '五指山';
        _sa[46][4604] = '琼海';
        _sa[46][4605] = '儋州';
        _sa[46][4606] = '文昌';
        _sa[46][4607] = '万宁';
        _sa[46][4608] = '东方';
        _sa[46][4621] = '定安县';
        _sa[46][4623] = '澄迈县';
        _sa[46][4624] = '临高县';
        _sa[46][4625] = '白沙黎族自治县';
        _sa[46][4626] = '昌江黎族自治县';
        _sa[46][4628] = '陵水黎族自治县';
        _sa[46][4629] = '保亭黎族苗族自治县';
        _sa[46][4699] = '未识别地区';

        _sa[50][5000] = '请选择';
        _sa[50][5001] = '重庆';

        _sa[51][5100] = '请选择';
        _sa[51][5101] = '成都';
        _sa[51][5103] = '自贡';
        _sa[51][5104] = '攀枝花';
        _sa[51][5105] = '泸州';
        _sa[51][5106] = '德阳';
        _sa[51][5107] = '绵阳';
        _sa[51][5108] = '广元';
        _sa[51][5109] = '遂宁';
        _sa[51][5110] = '内江';
        _sa[51][5111] = '乐山';
        _sa[51][5113] = '南充';
        _sa[51][5114] = '眉山';
        _sa[51][5115] = '宜宾';
        _sa[51][5116] = '广安';
        _sa[51][5117] = '达州';
        _sa[51][5118] = '雅安';
        _sa[51][5119] = '巴中';
        _sa[51][5120] = '资阳';
        _sa[51][5132] = '阿坝';
        _sa[51][5133] = '甘孜';
        _sa[51][5134] = '凉山';
        _sa[51][5199] = '未识别地区';

        _sa[52][5200] = '请选择';
        _sa[52][5201] = '贵阳';
        _sa[52][5202] = '六盘水';
        _sa[52][5203] = '遵义';
        _sa[52][5204] = '安顺';
        _sa[52][5222] = '铜仁';
        _sa[52][5223] = '黔西南';
        _sa[52][5224] = '毕节';
        _sa[52][5226] = '黔东南';
        _sa[52][5227] = '黔南';
        _sa[52][5299] = '未识别地区';

        _sa[53][5300] = '请选择';
        _sa[53][5301] = '昆明';
        _sa[53][5303] = '曲靖';
        _sa[53][5304] = '玉溪';
        _sa[53][5305] = '保山';
        _sa[53][5306] = '昭通';
        _sa[53][5307] = '丽江';
        _sa[53][5308] = '思茅';
        _sa[53][5309] = '临沧';
        _sa[53][5323] = '楚雄';
        _sa[53][5325] = '红河';
        _sa[53][5326] = '文山';
        _sa[53][5328] = '西双版纳';
        _sa[53][5329] = '大理';
        _sa[53][5331] = '德宏';
        _sa[53][5333] = '怒江傈';
        _sa[53][5334] = '迪庆';
        _sa[53][5399] = '未识别地区';

        _sa[54][5400] = '请选择';
        _sa[54][5401] = '拉萨';
        _sa[54][5421] = '昌都';
        _sa[54][5422] = '山南';
        _sa[54][5423] = '日喀则';
        _sa[54][5426] = '林芝';
        _sa[54][5499] = '未识别地区';

        _sa[61][6100] = '请选择';
        _sa[61][6101] = '西安';
        _sa[61][6102] = '铜川';
        _sa[61][6103] = '宝鸡';
        _sa[61][6104] = '咸阳';
        _sa[61][6105] = '渭南';
        _sa[61][6106] = '延安';
        _sa[61][6107] = '汉中';
        _sa[61][6108] = '榆林';
        _sa[61][6109] = '安康';
        _sa[61][6110] = '商洛';
        _sa[61][6199] = '未识别地区';

        _sa[62][6200] = '请选择';
        _sa[62][6201] = '兰州';
        _sa[62][6202] = '嘉峪关';
        _sa[62][6203] = '金昌';
        _sa[62][6204] = '白银';
        _sa[62][6205] = '天水';
        _sa[62][6206] = '武威';
        _sa[62][6207] = '张掖';
        _sa[62][6208] = '平凉';
        _sa[62][6209] = '酒泉';
        _sa[62][6210] = '庆阳';
        _sa[62][6211] = '定西';
        _sa[62][6212] = '陇南';
        _sa[62][6229] = '临夏';
        _sa[62][6230] = '甘南';
        _sa[62][6299] = '未识别地区';

        _sa[63][6300] = '请选择';
        _sa[63][6301] = '西宁';
        _sa[63][6321] = '海东';
        _sa[63][6322] = '海北';
        _sa[63][6325] = '海南';
        _sa[63][6328] = '海西';
        _sa[63][6399] = '未识别地区';

        _sa[64][6400] = '请选择';
        _sa[64][6401] = '银川';
        _sa[64][6402] = '石嘴山';
        _sa[64][6403] = '吴忠';
        _sa[64][6404] = '固原';
        _sa[64][6499] = '未识别地区';

        _sa[65][6500] = '请选择';
        _sa[65][6501] = '乌鲁木齐';
        _sa[65][6502] = '克拉玛依';
        _sa[65][6521] = '吐鲁番';
        _sa[65][6522] = '哈密';
        _sa[65][6523] = '昌吉';
        _sa[65][6527] = '博尔塔拉';
        _sa[65][6528] = '巴音郭楞';
        _sa[65][6529] = '阿克苏';
        _sa[65][6531] = '喀什';
        _sa[65][6532] = '和田';
        _sa[65][6540] = '伊犁';
        _sa[65][6542] = '塔城';
        _sa[65][6543] = '阿勒泰';
        _sa[65][6544] = '石河子';
        _sa[65][6545] = '阿拉尔';
        _sa[65][6599] = '未识别地区';


        _sa[71][7100] = '请选择';
        _sa[71][7101] = '台北市';
        _sa[71][7102] = '高雄市';
        _sa[71][7104] = '台中市';
        _sa[71][7105] = '台南市';
        _sa[71][7106] = '新竹市';
        _sa[71][7107] = '嘉义市';
        _sa[71][7109] = '宜兰县';
        _sa[71][7111] = '桃园县';
        _sa[71][7114] = '彰化县';
        _sa[71][7115] = '南投县';
        _sa[71][7117] = '云林县';
        _sa[71][7120] = '屏东县';
        _sa[71][7121] = '台东县';
        _sa[71][7122] = '花莲县';
        _sa[71][7123] = '澎湖县';
        _sa[71][7199] = '未识别地区';

        _sa[81][8100] = '请选择';
        _sa[81][8101] = '香港';

        _sa[82][8200] = '请选择';
        _sa[82][8201] = '澳门';

        //98:国内其他，99:国外;
        _sa[99][9999] = '请选择';
        _sa[98][9899] = '请选择';

        var $ = function (id) {
            return document.getElementById(id);
        };
        /**
        * 清除select的选项
        * @param {String} id select控件的id
        * @return:  {Boolen} 
        */
        function clearSelect(id) {
            var sObj = $(id);
            if ((sObj == undefined) || (sObj.tagName.toUpperCase() != "SELECT")) {
                return false;
            }
            for (var i = sObj.length; i >= 0; i--) {
                sObj.options[i] = null;
            }
            return true;
        }
        /**
        * 设置select的选中选项
        * @param {String} id select控件的id
        * @param {String} v  select控件选项选中的值
        * @return:  {Boolen} 
        */
        function setSelect(id, v) {
            var sObj = $(id);
            if ((sObj == undefined) || (sObj.tagName.toUpperCase() != "SELECT")) {
                return false;
            }

            for (var i = 0; i < sObj.length; i++) {
                if (sObj.options[i].value == v) {
                    sObj.options[i].selected = true;
                }
            }
            return true;
        }

        /**
        * 增加select的选项
        * @param {String} id select控件的id
        * @param {String} txt  select控件选项的显示文字
        * @param {String} val  select选项的值
        * @param {Bool} selected  是否选中
        * @return:  {Boolen} 
        */
        function addSelectItem(id, txt, val, selected) {
            var sObj = $(id);
            if ((sObj == undefined) || (sObj.tagName.toUpperCase() != "SELECT")) {
                return false;
            }
            selected = selected || false;
            var opt = new Option(txt, val, false, false);
            sObj.options[sObj.options.length] = opt;
            opt.selected = selected;
            return true;
        }

        /**
        * 获得select的值
        * @param {String} id select控件的id
        * @return:  false 失败
        *			{String} 值
        */
        function getSingleSelectValueById(id) {
            var sObj = $(id);
            if ((sObj == undefined) || (sObj.tagName.toUpperCase() != "SELECT")) {
                return false;
            }

            return sObj.options[sObj.selectedIndex].value;
        }


        /**
        * 对外接口地域码，转为完整的地域名
        * @param {Number} code 相关的地域码
        * @param {String} delimiter 一级地区与二级地区的分隔符
        * @return:  {String} 
        */
        function areaCode2Str(code, delimiter) {
            code = code || 0;
            var re = /^[1-9]\d{3}$/;
            if ((code != 0) && (!re.test(code))) {
                return "";
            }
            var p = Math.floor(code / 100);
            if (!_a[p] || !_sa[p][code]) {
                return ""
            }
            if (!delimiter) delimiter = ""
            return (_a[p] + delimiter + _sa[p][code]);
        }

        /**
        *对外接口，地区联动初始化的接口
        * @param {String} p 一级地区select控件的id
        * @param {String} c 二级地区select控件的id
        * @param {String} sv 地区的数值
        * @return:  false 失败
        *			true  成功
        */
        function areaSelectInit(p, c, sv) {
            if (!clearSelect(p)) {
                return false;
            }
            sv = sv || 0;
            var re = /^[1-9]\d{3}$/;
            if ((sv != 0) && (!re.test(sv))) {
                return false;
            }
            var pv = Math.floor(sv / 100);
            var key;
            for (key in _a) {
                if (typeof (_a[key]) == "function") continue;
                if (pv == key) {
                    addSelectItem(p, _a[key], key, true);
                } else {
                    addSelectItem(p, _a[key], key);
                }
            }

            var subObj = _sa[pv];
            for (key in subObj) {
                if (typeof (subObj[key]) == "function") continue;
                if (sv == key) {
                    addSelectItem(c, subObj[key], key, true);
                } else {
                    addSelectItem(c, subObj[key], key);
                }
            }

            var sObj = $(p);
            if (window.attachEvent) {
                sObj.attachEvent('onchange', function () { setCity(p, c); });
            } else {
                sObj.addEventListener('change', function () { setCity(p, c); }, false);
            }

            return true;
        }

        /*+++++++++++++联动复选框的实现++++++*/


        /**
        *暂时对外接口，地区联动设置二级地区的接口
        *          在一级地区onchange事件时调用
        * @param {String} p 一级地区select控件的id
        * @param {String} c 二级地区select控件的id
        * @param {String} sv 二级地区的选中选项的值
        * @return:  {Boolen} 
        *			false 失败
        *			true 值
        */
        function setCity(p, c, sv) {
            var v = getSingleSelectValueById(p);
            clearSelect(c);
            if (!v) {
                addSelectItem(c, "请选择", "0");
                return false;
            }

            var v = parseInt(v);
            var subObj = _sa[v];
            if (subObj == undefined) {
                return false;
            }
            sv = sv || (v * 100);

            if (Math.floor(sv / 100) != v) {
                return false;
            }

            for (var key in subObj) {
                if (typeof (subObj[key]) == "function") continue;
                if (sv == key) {
                    addSelectItem(c, subObj[key], key, true);
                } else {
                    addSelectItem(c, subObj[key], key);
                }
            }

            return true;
        }

        QZFL = window.QZFL || {};
        QZFL.widget = QZFL.widget || {};
        var _me = QZFL.widget.areaSelect = QZFL.widget.areaSelect || {};
        _me.areaSelectInit = areaSelectInit;
        _me.areaCode2Str = areaCode2Str;
        _me.setCity = setCity;
        _me.getSingleSelectValueById = getSingleSelectValueById;
        _me.getCitysById = function (id) {
            //if ((id = (id+'')).length == 2) {
            if (parseInt(id) < 1000) {
                return _sa[id] || [];
            } else {
                return _sa[id.slice(0, 2)] || [];
            }
        };
        _me.getData = function (type) {
            if (type == 'province') {
                return _a;
            }
            if (type == 'city') {
                return _sa;
            }
            return null;
        }
    })();
}
function $initImtalk() {
    //让页面中支持imtak函数
    window.imTalk = imTalk;
    ///启动qq聊天窗口,参数：目标qq，商品id，会话key，场景key
    function imTalk(uin, tid, sigT, sigP) {
        var url = (tid) ? ("tencent://message/?uin=" + uin + "&fromuserid=" + tid + "&touserid=" + tid + "&unionid=72000106&WebSiteName=拍拍网&Service=19&sigT=" + sigT + "&sigU=" + sigP) : "tencent://message/?uin=" + uin + "&fromuserid=no&touserid=no&unionid=72000106&WebSiteName=拍拍网&Service=19&sigT=" + sigT + "&sigU=" + sigP;
        var ua = window.navigator.userAgent.toLowerCase();
        if (ua.indexOf("msie") != -1) {
            try {
                window.location.href = url;
                $countRd('1050.1.1'); //ie发起会话统计
            } catch (e) {
                $countRd('1050.1.2'); //激活控件失败异常统计
                showError(3);
            }
        } else if (/(firefox|safari|opera|chrome)/i.test(ua) || window.opera) {
            window.location.href = url;
            $countRd('1050.1.5'); //非ie浏览器加载统计
        } else {
            $countRd('1050.1.4'); //浏览器不支持临时会话功能异常统计
            showError(1);
        }
        function showError(type) {
            switch (type) {
                case 1:
                    alert("拍拍网温馨提示：\r\n　　您使用的浏览器不支持QQ临时会话功能，请使用IE/TT浏览器访问。");
                    break;
                case 2:
                    alert("拍拍网温馨提示：\r\n　　您使用的QQ版本不支持临时会话功能，请您访问http://im.qq.com/下载最新版本QQ。");
                    window.open("http://im.qq.com/");
                    break;
                case 3:
                    alert("拍拍网温馨提示：\r\n　　您没有安装QQ或您的浏览器设置禁止了QQ临时会话功能，请点击查看操作方法。");
                    window.target = "_top";
                    window.open("http://help.paipai.com/learn/aqkj/");
                    break;
            }
        };
        return false;
    };
}
window.$initRd = (function() {
	//避免重复加载
	if( typeof window.$initRd == "function") {
		return window.$initRd;
	};
	//绑定元素
	var _top;
	//是否初始化
	var init = false;
	//rd优先级
	var rdPrix = [];
	//rd优先级长度，用于优化效率
	var rdLen = 0;
	//rd映射
	var rdMap = {};
	//文件列表，判断是否该文件已加载
	var rdSrc = {};
	/**
	 * rd上报
	 * @param {Object} rd
	 */
	function _countRd(rd) {
		if(rdMap[rd]) {
			rd = rdMap[rd];
		}
		if(_isRd(rd)) {
			$countRd(rd);
		}
	}

	/**
	 * 判断是否RD
	 * @param {Object} rd
	 */
	function _isRd(rd) {
		return !!(rd && rd.match(/(\d+\.){2}\d+/));
	}

	//函数定义
	var _initRd = function(prix) {
		if(!prix) {
			prix = "RD";
		}
		var flag = false;
		for(var i = 0, len = rdPrix.length; i < len; i++) {
			var _prix = rdPrix[i];
			if(_prix == prix) {
				flag = true;
				break;
			}
		}
		if(!flag) {
			rdPrix.push(prix);
			rdLen = rdPrix.length;
		}
		if(init) {
			return;
		}
		$addEvent(document, "click", function(e) {
			try {
				var element = $getTarget(e), _top = _top || document.body;
				while(element && element != _top) {
					for(var i = 0; i < rdLen; i++) {
						var rd = element.getAttribute ? element.getAttribute(rdPrix[i]) : "";
						if(rd) {
							//统计RD
							_countRd(rd);
							return;
						}
					}
					element = element.parentNode;
				}
			} catch(e) {
			}
		});
		init = true;
	};
	//载入映射
	_initRd.loadMap = function(map,merge) {
		if(merge){
			map=map||{};
			for(var key in map){
				rdMap[key]=map[key];
			}
		}else{
			rdMap = map || rdMap;
		}
	};
	//设置范围
	_initRd.setTop = function(top) {
		_top = top || _top;
	};
	//获取映射
	_initRd.getMap = function() {
		return rdMap;
	};
	//获取范围
	_initRd.getTop = function() {
		return _top;
	};
	//加载rdmap文件
	_initRd.loadRdFile = function() {
		var rdmap = $getQuery("rdmap") || window["config_rdmap"];
		if(rdmap && rdmap.match(/^\w+$/) && !window["config_unloadRdmap"] && !rdSrc[rdmap]) {
			var script = document.createElement("script");
			script.src = "http://static.paipaiimg.com/sinclude/rdmap/vir." + rdmap + ".js";
			script.onload = script.onreadystatechange = (function(src){
				return function() {
					var uA = navigator.userAgent.toLowerCase();
					//非ie与ie判断
					if(!(!(uA.indexOf("opera") != -1) && uA.indexOf("msie") != -1) || /loaded|complete/i.test(this.readyState)) {
						_initRd.loadMap(window.rdMap,true);
						rdSrc[src]=true;
					}
				};
			})(rdmap);
			document.getElementsByTagName("head")[0].appendChild(script);
		}
	};
	//尝试加载rdmap文件
	/*try{
	 _initRd.loadRdFile();
	 }catch(e){}*/
	return _initRd;
})()
function $initScrollAd(){
	//活动卖场专用巨无霸组件，性能一般
	window._scollAd=$$("[tag='pp_scrollAd']");
	if(_scollAd.length<1){		return;	}
	window._scollAd.each(function(){
		var my=$$(this);	
		var l=my.find("ul li").length;
		var rollwidth=my.attr("rollWidth");
		var direction="left";
		if(my.attr("direction")=="top"){direction="top"}		
		var s='<ol style="position:absolute;right:10px;bottom:10px;">';
		for(var i=0;i<l;i++){
			s+='<li '+(i==0?' class="hover"':"")+' cindex="'+i+'">'+(i+1)+'</li>';
		}
		s+="</ol>";
		my.css({ position:"relative",overflow:"hidden"});
		$$(this).append(s).attr("cindex","0").attr("autoScroll","true").attr("maxLength",l);
		if(direction=="left"){
		   my.find("ul").css({position:"absolute",width:(l*parseInt(rollwidth))+"px"});
		   my.find("ul li").css({overflow:"hidden",width:(parseInt(rollwidth))+"px",float:"left"});
		} 
		else if(direction=="top"){
		   my.find("ul").css({position:"absolute",height:(l*parseInt(rollwidth))+"px"});
		   my.find("ul li").css({overflow:"hidden",height:(parseInt(rollwidth))+"px",float:"left"});
		} 
		my.find("ol li").css({float:"left","list-style":"none",padding:"0px 6px","margin-right":"4px","background-color":"#FFF"}).filter(":eq(0)").css({"background-color":"#B40000",color:"#FFF"});
		my.find("ol li").mouseover(function(){
			var p=$$(this).parent("ol").parent();
			var i=$$(this).attr("cindex");
			var w=parseInt(p.attr("rollWidth"));
		    var direction="left";
		    if(p.attr("direction")=="top"){direction="top"}			
			p.attr("cindex",i);
			p.find("ol li").css({"background-color":"#FFF",color:"#000"}).removeClass("hover").filter(":eq("+i+")").css({"background-color":"#B40000",color:"#FFF"}).addClass("hover");
			if(direction=="left"){
			    p.find("ul").stop().animate({left : -(i*w)},500);}
			else if(direction=="top"){
				p.find("ul").stop().animate({top : -(i*w)},500);
			}
		});
	}).mouseover(function(){
		$$(this).attr("autoScroll","false");
	}).mouseout(function(){
		$$(this).attr("autoScroll","true");
	});
	setInterval(function(){
		_scollAd.each(function(){
			var my=$$(this);
			if(my.attr("autoScroll")=="false"){return;	}
			var i=parseInt(my.attr("cindex"));
			var m=parseInt(my.attr("maxLength"));
			var w=parseInt(my.attr("rollWidth"));
			var direction="left";
		    if(my.attr("direction")=="top"){direction="top"}			
			var ni=i<(m-1)?(i+1):0;
			my.attr("cindex",ni);			
			my.find("ol li").css({"background-color":"#FFF",color:"#000"}).removeClass("hover").filter(":eq("+i+")").addClass("hover").css({"background-color":"#B40000",color:"#FFF"});
			if(direction=="left"){
			    my.find("ul").stop().animate({left : -(i*w)},500);}
			else if(direction=="top"){
				my.find("ul").stop().animate({top : -(i*w)},500);
			}
		});
	},2000);
}
function $initSearchListShowBigImg(){
//初始化搜索列表商品图片显示大图片功能,图片必须具有cid(商品id)，bImg（商品大图url）属性
	var option={
		zoomObj:"",//显示图片的对象
		zoomHTML:"",
		zoomTime:null,
		zoomPos:16
	};
	//全局变量定义
	window._PP_searchListBigImg=option;
	//计算要显示的内容，参数（图片对象、商品id、图片url、）
	window.zoomSearchImg=function(obj){
		var option=window._PP_searchListBigImg
		var bigSrc=obj.getAttribute("bImg")
		var oImg = new Image(),imgExt,excursion;
		oImg.src = bigSrc;
		var oldW = oImg.width;
		var oldH = oImg.height;
		if (oldW == 80 && oldH == 80){
			bigSrc = bigSrc.replace("300x300","200x200");
			excursion = 200;//图片尺寸
			$id("zoomPrev").className = "small";
		}else{
			excursion = 300;
			$id("zoomPrev").className = "large";
		}
		var layerX = $getX(obj) + 80;
		var layerY = $getY(obj) + 10;
		if (layerX > (screen.width-excursion))layerX = (layerX - excursion);
		if (layerY < $getPageScrollHeight()){layerY = $getPageScrollHeight()}
		if ((layerY + (excursion + 15)) > ($getPageScrollHeight() + $getWindowHeight())){
			option.zoomPos = parseInt((layerY + (excursion + 15)) - ($getPageScrollHeight() + $getWindowHeight()) + 16) + "px";
			layerY = (($getPageScrollHeight() + $getWindowHeight()) - (excursion + 15));
		}else{
			option.zoomPos = 16 + "px";
		}
		option.zoomObj.style.left = layerX + "px";
		option.zoomObj.style.top = layerY + "px";
		option.zoomObj.style.zIndex = "1000";
		option.zoomHTML = "<a href='http://auction1.paipai.com/" + obj.getAttribute("cid") + "?PTAG=30658.5.1' target='_blank'><img src='"+bigSrc+"'  lg='6004'>";
		option.zoomTime = setTimeout("showSearchImg()",50);
	};
	//显示图片框
	window.showSearchImg=function(){
		var option = window._PP_searchListBigImg;
		if (option.zoomObj.style.display != "block"){
			$id("zoomPrev").innerHTML = option.zoomHTML;
			if ($id("showWay")){$id("showWay").style.top = option.zoomPos};
			option.zoomObj.style.display = "block";
		}
	};
	//隐藏图片框
	window.hideSearchImg=function(){
		var option = window._PP_searchListBigImg;
		if (option.zoomTime){
			clearTimeout(option.zoomTime);
		}
		option.zoomObj.style.display = "none";
	};
	//创建对象显示外框
	createFrame();
	//绑定所有tag为showBig的图片对象
	bindImages();
	//创建对象显示外框
	function createFrame(){
		//创建辅助对象
		var imageFrame=document.createElement("div")
		imageFrame.className="zoom_img";
		imageFrame.id="zoomImg";
		imageFrame.style.display="none";
		imageFrame.onmouseover=function(){showSearchImg()};
		imageFrame.onmouseout=function(){hideSearchImg()};
		imageFrame.innerHTML='<div id="zoomPrev"></div><span id="showWay"></span>';
		document.body.appendChild(imageFrame);
		_PP_searchListBigImg.zoomObj=document.getElementById("zoomImg");
	}
	//绑定所有tag为showBig的图片对象
	function bindImages(){
		var imgs=document.images;
		for(var i=0;i<imgs.length;i++){
			if(imgs[i].getAttribute("tag")=="showBig"){
				imgs[i].onmouseover=function(){
					zoomSearchImg(this);
				};
				imgs[i].onmouseout=function(){
					hideSearchImg(this);
				};
			}
		}
	}
}
function $initTextRoll(){
    if($$("#pp_roll_demo").length<1||$$("#pp_roll_demo_1").length<1||$$("#pp_roll_demo_2").length<1){return;}
	var pp_roll_demo  =  $id("pp_roll_demo");
	var pp_roll_demo_1 = $id("pp_roll_demo_1");
	var pp_roll_demo_2 = $id("pp_roll_demo_2");
	var my=$$("#pp_roll_demo");
	var speed=my.attr("speed")||25; //滚动速度值，值越大速度越慢	
	window.direction=my.attr("direction")||"top"; 
	pp_roll_demo_2.innerHTML = pp_roll_demo_1.innerHTML;
	$$("#pp_roll_demo").css({"overflow":"hidden"}); 
	function Marquee(direction){
		  if(direction){window.direction=direction;}    
		  if(window.direction=="left"){
				  if(pp_roll_demo_2.offsetWidth-pp_roll_demo.scrollLeft<=0)
						pp_roll_demo.scrollLeft-=pp_roll_demo_1.offsetWidth;
				  else{		 pp_roll_demo.scrollLeft++;	  }
		  }
		  if(window.direction=="right"){
				  if(pp_roll_demo_1.offsetWidth-pp_roll_demo.scrollLeft>=0)
					   pp_roll_demo.scrollLeft+=pp_roll_demo_1.offsetWidth;
				  else{			   pp_roll_demo.scrollLeft--;  }		
		 }	
		 if(window.direction=="top"){
				  if(pp_roll_demo_2.offsetTop-pp_roll_demo.scrollTop<=0){
					pp_roll_demo.scrollTop-=pp_roll_demo_1.offsetHeight;
				  }
				  else{      pp_roll_demo.scrollTop++;    }	
		 }  
		 if(window.direction=="bottom"){
				  if(pp_roll_demo_1.offsetTop-pp_roll_demo.scrollTop>=0){
					 pp_roll_demo.scrollTop+=pp_roll_demo_1.offsetHeight;
				  }
				  else{      pp_roll_demo.scrollTop--;   }	
		 } 
	  }	  
	 var MyMar=setInterval(function(){Marquee(window.direction)},speed);
	 pp_roll_demo.onmouseover=function() {clearInterval(MyMar)}
	 pp_roll_demo.onmouseout=function() {MyMar=setInterval(function(){Marquee()},speed)}
	 $$("[tag='left']").onmouseover=function() {clearInterval(MyMar);MyMar=setInterval(function(){Marquee("left")},speed)}
	 $$("[tag='right']").onmouseover=function() {clearInterval(MyMar);MyMar=setInterval(function(){Marquee("right")},speed)}
	 $$("[tag='top']").onmouseover=function() {clearInterval(MyMar);MyMar=setInterval(function(){Marquee("top")},speed)}
	 $$("[tag='bottom']").onmouseover=function() {clearInterval(MyMar);MyMar=setInterval(function(){Marquee("bottom")},speed)}	
}
function $inpNum(oInput){
	$addEvent(oInput,"change",function(){
		oInput.value=oInput.value.replace(/^0|[^0-9]/g,"");
	});
	$addEvent(oInput,"keyup",function(e){
		e=window.event?window.event:e;
		var code = e.keyCode ? e.keyCode : e.which;
		if("8||46||35||36||37||38||39||40".indexOf(code)!=-1){
			return;
		}
		oInput.value=oInput.value.replace(/^0|[^0-9]/g,"");
	});
}
function $insCreateBirthday(conf){
//创建保险文本条目    
/*
    conf的结构，无注明，则不可为空。
    {name:'表单字段名'
    ,type:'Birthday'    //固定
	,maxAge:'最多岁数'
	,minAge:'最小岁数，年单位'
	,minAgeDay:'最小岁数，天单位，与minAge 2选1使用'
    ,desc:'描述，可为空'
    ,label:'名称'
    }
    */
    var config={
		//最多岁数
		maxAge:100,
		//最小岁数，年单位
		minAge:0,
		//最小岁数，天单位，与minAge 2选1使用
		minAgeDay:0,
		//内部参数
		birthday:"",
        getCode:function(){
            return '<div><select id="ieBirthday_'+config.name+'_Year"><option value="">-</option></select>&nbsp;年&nbsp;&nbsp;<select id="ieBirthday_'+config.name+'_Month"><option value="">-</option></select>&nbsp;月&nbsp;&nbsp;<select id="ieBirthday_'+config.name+'_Day"><option value="">-</option></select>&nbsp;日&nbsp;&nbsp;<span class="tips" id="ieBirthdayDesc_'+config.name+'" style="left:-5px;">'+config.desc+'</span><p id="ieBirthdayErr_'+config.name+'" class="msg-para-warn" style="display:none;"></p></div>';
        },
        getValue:function(){
            return config.birthday.getValue();
        },
		getAge:function(){
			return config.birthday.getAge();
		},
        setValue:function(value,noFire){
			if(config.valueChanging(value)){
				config.birthday.setValue(value);
				if(!noFire){
					config.valueChanged();
				}
			}
        },
		setError:function(msg){
			var errTar=$id('ieBirthdayErr_'+config.name);
            if(msg){
                errTar.style.display='';
                errTar.innerHTML='<span class="msg0-icon-warn"></span>'+msg;
            }else{
                errTar.style.display='none';
            }
		},
        valueChanged:$empty(),
        valueChanging:$empty(),
        init:function(){
			config.birthday=$birthday({
				maxAge:config.maxAge,
				minAge:config.minAge,
				minAgeDay:config.minAgeDay,
				yearDom:$id('ieBirthday_'+config.name+'_Year'),
				monthDom:$id('ieBirthday_'+config.name+'_Month'),
				dayDom:$id('ieBirthday_'+config.name+'_Day'),
				configName:config.configName,
				name:config.name,
				valueChanged:config.valueChanged
			});
        }
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insCreateCheckbox(conf){
    /*
    conf的结构，无注明，则不可为空。
    {name:'表单字段名'
    ,type:'Checkbox'    //固定
    ,desc:'描述，可为空'
    ,label:'名称'
    ,option:[{label:'选项名称',value:'选项值'}]        //选项范围
    }
    */
    var config={
        value:"",
        //获取元素html结构
        getCode:function(){
            var hc=[];
            hc.push('<div class="select_type" id="ieCheckbox_'+config.name+'">');
            for(var i=0;i<conf.option.length;i++){
                var option=conf.option[i];
				hc.push('<label for="ieCheckboxOpt_'+config.name+'_'+i+'"><input type="checkbox" value="'+option.value+'" name="ieCheckboxOpt_'+config.name+'" id="ieCheckboxOpt_'+config.name+'_'+i+'"/>'+option.label+'</label>');
            }
            hc.push('</div><p class="msg-para-warn" style="display:none;" id="ieCheckboxErr_'+config.name+'"></p>');
            return hc.join('');
        },
        //获取元素值
        getValue:function(){
            return config.value;
        },
		joinSymbol:",",
        //设置元素值
        setValue:function(value,noFire){
            config.value=value;
            value=config.joinSymbol+value+config.joinSymbol;
            for(var i=0;i<config.option.length;i++){
				$id('ieCheckboxOpt_'+config.name+'_'+i).checked=value.indexOf(config.joinSymbol+config.option[i].value+config.joinSymbol)>-1;
            }
            if(!noFire){
                config.valueChanged();
            }
        },
        setError:function(msg){
            var errTar=$id('ieCheckboxErr_'+config.name);
            if(msg){
                errTar.style.display='';
                errTar.innerHTML='<span class="msg0-icon-warn"></span>'+msg;
            }else{
                errTar.style.display='none';
            }
        },
        valueChanged:$empty(),
        valueChanging:$empty(),
        //元素交互初始化
        init:function(){
            var tar=$id('ieCheckbox_'+config.name);
            tar.onclick=function(evt){
				var val=[];
                for(var i=0;i<config.option.length;i++){
					var item=$id('ieCheckboxOpt_'+config.name+'_'+i);
					item.checked?val.push(item.value):"";
				}
				config.value=val.join(config.joinSymbol);
				config.valueChanged();
            }
        }
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insCreateCity(conf){
//创建保险文本条目    
/*
    conf的结构，无注明，则不可为空。
    {name:'表单字段名'
    ,type:'City'    //固定
    ,desc:'描述，可为空'
    ,label:'名称'
	,co:'数据源，默认tk',
	,prange:'省份范围，可为空'
	,crange:'城市范围，可为空'
    }
    */
    var config={
        getCode:function(){
            return '<span id="ieCity_'+config.name+'"><select id="ieCity_'+config.name+'_p"><option value="">-</option></select>&nbsp;<select id="ieCity_'+config.name+'_c"><option value="">-</option></select></span><span id="ieCityDesc_'+config.name+'">'+(config.desc?config.desc:'')+'</span>&nbsp;&nbsp;<p id="ieCityErr_'+config.name+'" class="msg-para-warn" style="display:none;"></p>';
        },
        getValue:function(){
			var p=config.provinceDom.value;
			var c=config.cityDom.value;
            return p+'-'+c;
        },
		co:'tk',
		provinceDom:'',
		cityDom:'',
        setValue:function(value,noFire){
			config.value=value;
			if(config.provinceDom.options.length>1){
				//已经就绪
				value=value.split('-');
				config.provinceDom.value=value[0];
				config.provinceDom.onchange();
				config.cityDom.value=value[1];
				if(!noFire){
					config.valueChanged();
				}
            }
        },
		setError:function(msg){
            var errTar=$id('ieCityErr_'+config.name);
            if(msg){
                errTar.style.display='';
                errTar.innerHTML='<span class="msg0-icon-warn"></span>'+msg;
            }else{
                errTar.style.display='none';
            }
        },
        valueChanged:$empty(),
        valueChanging:$empty(),
        init:function(){
			config.provinceDom=$id('ieCity_'+config.name+'_p');
			config.cityDom=$id('ieCity_'+config.name+'_c');
			//处理数据源
			if(!window.taikangCity){
				window.taikangCity={ref:[config],state:0};
				$loadScript('http://static.paipaiimg.com/js/insconf/insurance_tk_city.js');
				window.taikangCityCallback=function(city){
					//全局记录
					window.taikangCity.city=city;
					window.taikangCity.state=1;
					//按父级id查找
					window.taikangCity.check=function(p){
						return window.taikangCity.city.match(new RegExp("/\|[0-9]+,[^,]+,[^,]+,[^,]+,"+p+",([0-9]+)?","g"));
					}
					//身份缓存
					window.taikangCity.province=window.taikangCity.check(1);
					//更新下拉菜单功能
					window.taikangCity.refreshOption=function(selector,citys,range){
						selector.options.length=0;
						selector.options.add(new Option("-",""));
						for(var i=0;i<citys.length;i++){
							var item=citys[i].split(',');
							if((range&&range.indexOf(item[1])>-1)||!range){
								selector.options.add(new Option(item[1],citys[i]));
							}
						}
					}
					//初始化
					window.taikangCity.init=function(){
						for(var i=0,len=window.taikangCity.ref.length;i<len;i++){
							var cf=window.taikangCity.ref[i];
							window.taikangCity.refreshOption($id('ieCity_'+cf.name+'_p'),window.taikangCity.province,cf.prange);
							if(cf.value){
								//回写值
								cf.setValue(cf.value);
							}
						}
					}
					window.taikangCity.init();
				}
			}else if(window.taikangCity.state==0){
				//如果已经加载，但是数据还没返回，加入等待处理队列
				window.taikangCity.ref.push(config);
			}else{
				//已经就绪，直接处理
				window.taikangCity.refreshOption(config.provinceDom,config.province,config.prange);
			}
			//处理省份交互
			config.provinceDom.onchange=function(){
				var key=this.value;
				if(key){
					key=key.split(',');
					var list=window.taikangCity.check(key[0]);
					if(list){
						window.taikangCity.refreshOption(config.cityDom,list,config.crange);
					}
				}
			}
			//处理城市交互
			config.cityDom.onchange=function(){
				var v=this.value;
				if(v){
					config.value=v;
					config.valueChanged();
				}
			}
        }
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insCreateDate(conf){
	/*
	conf的结构，无注明，则不可为空。
	{name:'表单字段名'
	,type:'Date'	//固定
	,desc:'描述，可为空'
	,label:'名称'
	}
	*/
	var config={
		getCode:function(){
			var hc=[];
			hc.push('<div><input readonly="true" class="text" type="text" id="ieDate_'+config.name+'" autocomplete="off" name="'+Math.random()+'"/>&nbsp;&nbsp;&nbsp;&nbsp;<span id="ieDateDesc_'+config.name+'">'+config.desc+'</span> <p id="ieDateErr_'+config.name+'" class="msg-para-warn" style="display:none;"></p></div>');
			return hc.join('');
		},
		getValue:function(){
			return document.getElementById('ieDate_'+config.name).value;
		},
		setValue:function(value,noFire){
			config.value=value;
			document.getElementById('ieDate_'+config.name).value=value;
			if(!noFire){
				config.valueChanged();
			}
		},
		clearValue:function(){
			config.value="";
			document.getElementById('ieDate_'+config.name).value="";
		},
		setError:function(msg){
			var errTar=$id('ieDateErr_'+config.name);
			if(msg){
				errTar.style.display='';
				errTar.innerHTML='<span class="msg0-icon-warn"></span>'+msg;
			}else{
				errTar.style.display='none';
			}
		},
		valueChanged:$empty(),
		valueChanging:$empty(),
		init:function(){
			config.calendarOption={
				name:config.name,
				configName:config.configName,
				el:$id('ieDate_'+config.name),
				callback:(function(){
					return function(v){
						if(config.valueChanging(v)){
							config.setValue(v);
						}
					}
				})(),
				unit:"day",
				e:null
			}
			$id('ieDate_'+config.name).onclick=function(evt){
				evt=window.event||evt;
				config.calendarOption.e=evt;
				config.value?config.calendarOption.nowDate=config.value:'';
				$calendars(config.calendarOption);
			}
			
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insCreateLabel(conf){
//创建保险文本条目	
/*
	conf的结构，无注明，则不可为空。
	{name:'表单字段名'
	,type:'Label'	//固定
	,desc:'描述，可为空'
	,label:'名称'
	}
	*/
	var config={
		getCode:function(){
			return '<span id="ieLabel_'+config.name+'"></span><span id="ieLabelDesc_'+config.name+'">'+(config.desc?config.desc:'')+'</span>';
		},
		getValue:function(){
			return document.getElementById('ieLabel_'+config.name).innerHTML;
		},
		setValue:function(value,noFire){
			config.value=value;
			document.getElementById('ieLabel_'+config.name).innerHTML=value;
			//document.getElementById('ieLabelDesc_'+config.name).style.display='';
			if(!noFire){
				config.valueChanged();
			}
		},
		valueChanged:$empty(),
		valueChanging:$empty(),
		init:$empty()
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insCreateMulti(conf){
	/*
	conf的结构，无注明，则不可为空。
	{name:'表单字段名'
	,type:'Multi'	//固定
	,desc:'描述，可为空'
	,label:'名称'
	,option:[{label:'选项名称',value:'选项值',desc:'描述，可为空'}]		//选项范围
	}
	*/
	var config={
		//获取元素html结构
		getCode:function(){
			var hc=[];
			hc.push('<ul class="select_type" id="ieMulti_'+config.name+'">');
			for(var i=0;i<conf.option.length;i++){
				var option=conf.option[i];
				hc.push('<li id="ieMultiOpt_'+config.name+'_'+i+'" optIndex="'+i+'" value="'+option.value+'">'+option.label+'</li>');
			}
			hc.push('</ul><div id="ieMultiOptDes_'+config.name+'" style="display:none;"></div>');
			return hc.join('');
		},
		//获取元素值
		getValue:function(){
			return config.value;
		},
		//设置元素值
		setValue:function(value,noFire){
			config.value=value;
			
			for(var i=0;i<config.option.length;i++){
				if(config.option[i].value==value){
					if(typeof(config.option[i].desc)!="undefined"){
						var t=$id('ieMultiOptDes_'+config.name);
						t.innerHTML=config.option[i].desc;
						t.style.display='';
					}
					$id('ieMultiOpt_'+config.name+'_'+i).className='c';
				}else{
					$id('ieMultiOpt_'+config.name+'_'+i).className='';
				}
			}
			if(!noFire){
				config.valueChanged();
			}
		},
		valueChanged:$empty(),
		valueChanging:$empty(),
		//元素交互初始化
		init:function(){
			var tar=$id('ieMulti_'+config.name);
			tar.onclick=function(evt){
				evt=window.event||evt;
				var target=evt.target||evt.srcElement;
				if(target.tagName.toLowerCase()!="li"){
					return;
				}
				var newVal=target.getAttribute('value');
				if(config.valueChanging(newVal)){
					config.setValue(newVal);
				}
			}
			tar.onmouseover=function(evt){
				evt=window.event||evt;
				var target=evt.target||evt.srcElement;
				if(target.tagName.toLowerCase()=='li'&&target.className==''){
					target.className='hover';
				}
			}
			tar.onmouseout=function(evt){
				evt=window.event||evt;
				var target=evt.target||evt.srcElement;
				if(target.tagName.toLowerCase()=='li'){
					var val=target.getAttribute('value');
					target.className=val==config.value?'c':'';
				}
			}
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insCreatePanel(conf){
	//创建保险浮层选择条目
	/*
	conf的结构，无注明，则不可为空。
	{name:'表单字段名'
	,type:'Panel' //固定
	,desc:'描述，可为空'
	,label:'名称'
	,src:'数据源,","分割组，“|”分割数据',
	,nameReg:'捕获数据内名称的正则表达式,RegExp对象',
	,matchReg:'捕获数据组的正则表达式'
	}
	*/
	var config={
		src:'',
		matchReg:'',
		nameReg:'',
		panelTips:'',
		listReg:[],
		maxCount:50,
		//内部参数
		input:'',//input输入框
		dataContainer:'',//浮层
		listCache:'',
		getCode:function(){
			return '<input id="iePanel_'+config.name+'" value=""/><span id="iePanelDesc_'+config.name+'">'+(config.desc?config.desc:'')+'</span>&nbsp;&nbsp;<p id="iePanelErr_'+config.name+'" class="msg-para-warn" style="display:none;"></p><div style="display:none; position:absolute;z-index:101;width:460px;" class="ctab_area" id="iePanelContainer_'+config.name+'"><div class="ctab_tips">'+config.panelTips+'</div><div class="ctab" id="iePanelListHead_'+config.name+'"><ul id="iePanelListTab_'+config.name+'"></ul></div><div class="area" style="width:455px;"><ul id="iePanelList_'+config.name+'"></ul></div></div>';
		},
		getValue:function(){
			return config.input.getAttribute('data');
		},
		
		setValue:function(value,noFire){
			if(config.checkValid(value)){
				config.value=value;
				var pn=value.match(config.nameReg)[1];
				config.input.value=pn;
				config.input.setAttribute('data',value);
				if(!noFire){
					config.valueChanged();
				}
			}
		},
		setError:function(msg){
			var errTar=$id('iePanelErr_'+config.name);
			if(msg){
				errTar.style.display='';
				errTar.innerHTML='<span class="msg0-icon-warn"></span>'+msg;
			}else{
				errTar.style.display='none';
			}
		},
		checkValid:function(value){
			return config.src.indexOf(value)>-1;
		},
		valueChanged:$empty(),
		valueChanging:$empty(),
		init:function(){
			config.input=$id('iePanel_'+config.name);
			config.dataContainer=$id('iePanelContainer_'+config.name);
			config.dataTab=$id('iePanelListTab_'+config.name);
			config.dataList=$id('iePanelList_'+config.name);
			config.dataListHead=$id('iePanelListHead_'+config.name);
			var hc=[];
			for(var i=0;i<config.listReg.length;i++){
				hc.push('<li list="'+i+'" class="'+(i==0?'c':'')+'">'+config.listReg[i].label+'</li>');
			}
			config.dataTab.innerHTML=hc.join('');
			
			config.listCache=config.src.split(',');			
			//处理数据源
			if(!window.insPanel){
				window.insPanel={map:{} };
				$loadCss('http://static.paipaiimg.com/baoxian/page_chexian_city.css');	
				window.insPanel.selectData=function(name,label,data){
					window.insPanel.map[name].input.value=label;
					window.insPanel.map[name].input.setAttribute('data',data);
					window.insPanel.map[name].input.blur();
				}
				window.insPanel.fastData=function(name,reg,list){
					var cfg=window.insPanel.map[name];
					var data=cfg.src.match(reg);
					var hc=[];
					if(data){
						for(var i=0;i<data.length&&i<cfg.maxCount;i++){
							var dn=data[i].match(cfg.nameReg)[1];
							hc.push('<li style="width:90px;"><a href="javascript:window.insPanel.selectData(\''+name+'\',\''+dn+'\',\''+data[i]+'\');">'+dn+'</a></li>');
						}
						if(data.length>=cfg.maxCount){
							hc.push('<li style="width:90px;">...</li>');
						}
					}else{
						hc.push('&nbsp;对不起，无此结果。');
					}
					config.dataList.innerHTML=hc.join('');
				}
			}
			//索引当前config
			window.insPanel.map[config.name]=config;
			//展示浮层的交互
			config.dataTab.onclick=function(evt){
				evt=evt||window.event;
				var target=evt.srcElement||evt.target;
				var list=target.getAttribute('list');
				if(config.dataShow!=list){
					//如果需要刷新内容
					config.dataShow=list;
					config.input.focus();
				}
			}
			config.input.onfocus=function(){
				config.dataContainer.style.display='';
				config.dataListHead.style.display='';
				//刷新列表
				config.dataShow=config.dataShow?config.dataShow:0;
				window.insPanel.fastData(config.name,config.listReg[config.dataShow].reg);
				//更新tab样式状态
				var pn=config.dataTab.children;
				for(var i=0,len=pn.length;i<len;i++){
					pn[i].className=i==config.dataShow?'c':'';
				}
			}
			config.input.onblur=function(){
				config.dataShow="";
				setTimeout(function(){
					if(config.dataShow.toString()==""){
						config.dataContainer.style.display='none';
						//复原
						config.dataShow=0;
					}
				},500);
			}
			config.input.onkeyup=function(){
				var v=this.value;
				window.insPanel.fastData(config.name,new RegExp(config.matchReg.replace('{#v#}',v),'g'));
				window.insPanel.dataShow='user';
				config.dataListHead.style.display='none';
			}
			//初始化展示内容
			config.dataShow=0;
			window.insPanel.fastData(config.name,config.listReg[0].reg);
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insCreateRadio(conf){
    /*
    conf的结构，无注明，则不可为空。
    {name:'表单字段名'
    ,type:'Radio'    //固定
    ,desc:'描述，可为空'
    ,label:'名称'
    ,option:[{label:'选项名称',value:'选项值',desc:'描述，可为空'}]        //选项范围
    }
    */
    var config={
        //获取元素html结构
        getCode:function(){
            var hc=[];
            hc.push('<div class="select_type" id="ieRadio_'+config.name+'">');
            for(var i=0;i<conf.option.length;i++){
                var option=conf.option[i];
				hc.push('<label for="ieRadioOpt_'+config.name+'_'+i+'"><input type="radio" value="'+option.value+'" name="ieRadioOpt_'+config.name+'" id="ieRadioOpt_'+config.name+'_'+i+'"/>'+option.label+'</label>');
            }
            hc.push('</div><div id="ieRadioOptDes_'+config.name+'" style="display:none;"></div><p class="msg-para-warn" style="display:none;" id="ieRadioErr_'+config.name+'"></p>');
            return hc.join('');
        },
        //获取元素值
        getValue:function(){
            return config.value;
        },
        //设置元素值
        setValue:function(value,noFire){
            config.value=value;
            
            for(var i=0;i<config.option.length;i++){
                if(config.option[i].value==value){
                    if(typeof(config.option[i].desc)!="undefined"){
                        var t=$id('ieRadioOptDes_'+config.name);
                        t.innerHTML=config.option[i].desc;
                        t.style.display='';
                    }
                    $id('ieRadioOpt_'+config.name+'_'+i).checked=true;
                }
            }
            if(!noFire){
                config.valueChanged();
            }
        },
        setError:function(msg){
            var errTar=$id('ieRadioErr_'+config.name);
            if(msg){
                errTar.style.display='';
                errTar.innerHTML='<span class="msg0-icon-warn"></span>'+msg;
            }else{
                errTar.style.display='none';
            }
        },
        valueChanged:$empty(),
        valueChanging:$empty(),
        //元素交互初始化
        init:function(){
            var tar=$id('ieRadio_'+config.name);
            tar.onclick=function(evt){
                evt=window.event||evt;
                var target=evt.target||evt.srcElement;
                if(target.tagName.toLowerCase()!="input"){
                    return;
                }
                var newVal=target.value;
                config.setValue(newVal);
            }
        }
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insCreateSelect(conf){
    /*
    conf的结构，无注明，则不可为空。
    {name:'表单字段名'
    ,type:'Select'    //固定
    ,desc:'描述，可为空'
    ,label:'名称'
    ,option:[{label:'选项名称',value:'选项值',desc:'描述，可为空'}]        //选项范围
    }
    */
    var config={
        //获取元素html结构
        getCode:function(){
            var hc=[];
            hc.push('<select id="ieSelect_'+config.name+'">');
            for(var i=0;i<conf.option.length;i++){
                var option=conf.option[i];
                hc.push('<option value="'+option.value+'">'+option.label+'</option>');
            }
            hc.push('</select>&nbsp;&nbsp;<div id="ieSelectOptDes_'+config.name+'" style="display:none;"></div><p class="msg-para-warn" style="display:none;" id="ieSelectErr_'+config.name+'"></p>');
            return hc.join('');
        },
        //获取元素值
        getValue:function(){
            return document.getElementById('ieSelect_'+config.name).value;
        },
		setError:function(msg){
			var errTar=$id('ieSelectErr_'+config.name);
			if(msg){
				errTar.style.display='';
				errTar.innerHTML='<span class="msg0-icon-warn"></span>'+msg;
			}else{
				errTar.style.display='none';
			}
		},
        //设置元素值
        setValue:function(value,noFire){
            config.value=value;
            $id('ieSelect_'+config.name).value=value;
			var t=$id('ieSelectOptDes_'+config.name);
			t.innerHTML='';
            for(var i=0;i<config.option.length;i++){
                if(config.option[i].value==value){
                    if(typeof(config.option[i].desc)!="undefined"){
                       
                        t.innerHTML=config.option[i].desc;
                        t.style.display='';
                    }
                }
            }
            if(!noFire){
                config.valueChanged();
            }
        },
        valueChanged:$empty(),
        valueChanging:$empty(),
        //元素交互初始化
        init:function(){
			$id('ieSelect_'+config.name).onchange=function(){
				var t=$id('ieSelectOptDes_'+config.name);
				t.innerHTML='';
				for(var i=0;i<config.option.length;i++){
					if(config.option[i].value==this.value){
						if(typeof(config.option[i].desc)!="undefined"){
						   
							t.innerHTML=config.option[i].desc;
							t.style.display='';
						}
					}
				}
				config.valueChanged();
			};
		}
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insCreateSlider(conf){
//创建保险文本条目    
/*
    conf的结构，无注明，则不可为空。
    {name:'表单字段名'
    ,type:'Slider'    //固定
	,unit:'单位描述',
	,min:'最低值',
	,max:'最高值',
	,ds:'最小步长'
	,step:'展示标签'
    ,desc:'描述，可为空'
    ,label:'名称'
    }
    */
    var config={
		unit:'',
		min:0,
		distance:10,
		ds:1,
		step:[0,5,10],
		disabled:true,
        getCode:function(){
            return '<div class="graduations" id="ieSliderScale_'+config.name+'"></div><div class="ipt_account"><input type="text" '+(config.disabled?'disabled="disabled"':'')+' id="ieSlider_'+config.name+'"/><span>'+config.unit+'</span><span class="tips" id="ieSliderDesc_'+config.name+'" style="left:-5px;">'+config.desc+'</span><p id="ieSliderErr_'+config.name+'" class="msg-para-warn" style="display:none;"></p></div>';
        },
        getValue:function(){
            return config.input.value;
        },
        setValue:function(value,noFire){
			var v=Number(value);
			if(config.valueChanging(value)&&config.min<=v&&config.min+config.distance>=v){
				value=config.fixValue(value);
				config.value=value;
				config.input.value=value;
				config.button.style.left=config.vtoPos(value)+'px';
			}
			if(!noFire){
				config.valueChanged();
			}
        },
		setError:function(msg){
			var errTar=$id('ieSliderErr_'+config.name);
			if(msg){
				errTar.style.display='';
				errTar.innerHTML='<span class="msg0-icon-warn"></span>'+msg;
			}else{
				errTar.style.display='none';
			}
		},
		button:"",
        valueChanged:$empty(),
        valueChanging:$empty(),
		vtoPos:function(v){
			return parseInt((v-config.min)/config.distance*500-5);
		},
		fixValue:function(v){
			//间隔值修正
			var nv=Math.round((v-config.min)/config.ds)*config.ds+config.min;
			if(nv<config.min){
				nv=config.min;
			}else if(nv>config.min+config.distance){
				nv=config.min+config.distance
			}
			return nv;
		},
		ptoValue:function(p){
			var v=(p+5)/500*config.distance+config.min;
			return config.fixValue(v);
		},
        init:function(){
			//输入有效性转换
			config.ds=Number(config.ds)?Number(config.ds):1;
			config.min=Number(config.min);
			config.distance=Number(config.distance);
			config.input=$id('ieSlider_'+config.name);
			var hc='<span class="slide" id="ieSliderBtn_'+config.name+'"></span>';
			for(var i=0;i<config.step.length;i++){
				//先修正一次值
				var v=config.fixValue(config.step[i]);
				var p=config.vtoPos(v);
				hc+='<span style="left:'+p+'px" class="num">'+v+'</span>';
			}
			var scale=$id('ieSliderScale_'+config.name);
			scale.innerHTML=hc;
			config.button=$id('ieSliderBtn_'+config.name);
			config.button.style.left='0px';
			var bx=$getX(scale);
			scale.onmousedown=function(evt){
				config.run=true;
			}
			config.button.onmousemove=scale.onmousemove=function(evt){
				if(config.run){
					evt=evt||window.event;
					var bp=evt.clientX-bx-6;
					var v=config.ptoValue(bp);
					$id('ieSlider_'+config.name).value=v;
					if(bp>=-5&&bp<=495){
						config.button.style.left=bp+'px';
					}
				}
			}
			scale.onmouseup=function(){
				config.run=false;
				var v=$id('ieSlider_'+config.name).value;
				config.setValue(v);
			}
			config.input.onchange=function(){
				config.setValue(config.input.value);
			}
			config.setValue(config.min,false);
			
        }
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insCreateText(conf){
//创建保险文本条目    
/*
    conf的结构，无注明，则不可为空。
    {name:'表单字段名'
    ,type:'Text'    //固定
    ,desc:'描述，可为空'
    ,label:'名称'
    }
    */
    var config={
        getCode:function(){
            return '<input id="ieText_'+config.name+'" class="text length_2"/><span id="ieTextDesc_'+config.name+'"></span>&nbsp;<p class="msg-para-warn" style="display:none;" id="ieTextErr_'+config.name+'"></p>';
        },
        getValue:function(){
            return document.getElementById('ieText_'+config.name).value;
        },
        setValue:function(value,noFire){
            config.value=value;
            document.getElementById('ieText_'+config.name).value=value;
            if(!noFire){
                config.valueChanged();
            }
        },
		setError:function(msg){
			var errTar=$id('ieTextErr_'+config.name);
			if(msg){
				errTar.style.display='';
				errTar.innerHTML='<span class="msg0-icon-warn"></span>'+msg;
			}else{
				errTar.style.display='none';
			}
		},
        valueChanged:$empty(),
        valueChanging:$empty(),
        init:function(){
            document.getElementById('ieText_'+config.name).onblur=function(){config.valueChanged()};
        }
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insDealCreateAddress(conf){
	var config={
		type:"Address",
		
		desc:"",
		name:"",	//序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		getCode:function(){
			return '<input class="text length_2" id="'+config.subjectKey+'_Address" name="'+config.name+'" type="text" value="'+(config.value?config.value:'')+'"/>&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span>';
		},
		getErrorCode:function(){
			return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>地址不能为空，且不能多于80个字符。</p>';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			var val=$id(config.subjectKey+'_Address').value.replace(/^ +/,'').replace(/ +$/,'');
			if(obj){
				obj[config.name]=val;
			}
			return val;
		},
		setValue:function(val,noFire){
			$id(config.subjectKey+'_Address').value=val;
			config.value=val.replace(/^ +/,'').replace(/ +$/,'');
			if(!noFire){
				config.valueChanged();
			}
		},
		check:function(){
			var val=$id(config.subjectKey+'_Address').value.replace(/^ +/,'').replace(/ +$/,'');
			return /^.{1,80}$/.test(val);
		},
		init:function(){
			var target=$id(config.subjectKey+'_Address');
			target.onblur=function(){
				if(target.value){
					config.valueChanged();
				}
			}
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreateBenefit(conf){
    var config={
        type:"Benefit",
        maxBenefit:1,
        desc:"",
        name:"benefit",    //序列化时的标签名,固定benefit
        subjectKey:"",//用于多个姓名输入项的
		inputs:[],
		range:[2,3,4,5,6,7,8,9,10],
		//内部参数
		//身份证验证
		validator:$simpleValidator(),
		//生日控制
		birthday:{},
		inputMap:['RELATIONSHIP','BENEFNAME','BENEFSCALE','BENEFZIP','BENEFID','BENEFPHONE','BENEFSEX','BENEFBIRTHDAY'],
		relationMap:{"-1":"本人","2":"丈夫","3":"妻子","4":"父亲","5":"母亲","6":"儿子","7":"女儿","8":"配偶","9":"父母","10":"子女"},
		style:"combine",
        getCode:function(){
            return '<div class="b_action"><span class="b_relation">'+config.label+'</span><span id="'+config.subjectKey+'_'+config.name+'_Ctrl"><span class="tips">最多可设置'+config.maxBenefit+'人</span></span></div><div id="'+config.subjectKey+'_'+config.name+'_Content"></div>';
        },
        getErrorCode:function(){
            return '';
        },
        valueChanged:$empty(),
        getValue:function(obj){
			var list=config.bnfDom.children;
			var v=[];
			for(var i=0,len=list.length;i<len;i++){
				var tar=list[i];
				var index=tar.id.match(/INSURED\d+Benefit(\d+)/)[1];
				var temp={};
				for(var j=0;j<config.inputs.length;j++){
					var input=config.inputs[j];
					config.inputData[input].getValue(index,temp);
				}
				v.push(temp);
			}
            if(obj){
                obj.benefit=v;
            }
            return '';
        },
        setValue:function(val,noFire){
			for(var i=0;i<val.length;i++){
				window.insuranceBenefit.setValue(config.subjectKey,i,val[i]);
			}
			if(!noFire){
				config.valueChanged();
			}
		},
        check:function(){
			var list=config.bnfDom.children;
			var valid=true;
			var scale=0;
			for(var i=0,len=list.length;i<len;i++){
				var tar=list[i];
				var index=tar.id.match(/INSURED\d+Benefit(\d+)/)[1];
				var err=[];
				var cid="";
				var sex="";
				for(var j=0;j<config.inputs.length;j++){
					var input=config.inputs[j];
					var v=config.inputValue(input,index);
					var r=config.inputCheck(input,v);
					if(input=='BENEFSCALE'){
						scale=scale+Number(v);
						if(scale>100||(i==len-1&&scale!=100)){
							r=r?r:'受益比例填写不正确';
						}
					}
					if(input=='BENEFID'&&!r){
						//记录身份证，后面与性别校验
						cid=v;
					}
					if(input=='BENEFSEX'&&!r){
						sex=v;
					}
					r?err.push(r):'';
				}
				if(cid&&sex.toString()){
					//校验身份证与性别
					if(Number(cid.substr(16,1))%2!=(sex%2)){
						err.push('受益人身份证与性别不符');
					}
				}
				var ei=$id(config.subjectKey+'Benefit'+index+'_Error');
				if(err.length>0){
					valid=false;
					ei.style.display='';
					ei.innerHTML='<span class="msg0-icon-warn"></span>'+err.join('、')+'。';
				}else{
					ei.style.display='none';
				}
			}
			return valid;
		},
		inputData:{
			"RELATIONSHIP":{
				check:function(value){
					return value?'':'受益人关系不正确';
				},
				getValue:function(index,obj){
					var v=$id(config.subjectKey+'Benefit'+index+'_RELATIONSHIP').value;
					if(obj){
						obj.RELATIONSHIP=v;
						var label=config.relationMap[v];
						obj.RELATIONSHIPTXT="受益人与被保险人关系："+label;
					}
					return v;
				},
				getCode:function(index){
					var code='';
					var id=config.subjectKey+'Benefit'+index+'_RELATIONSHIP';
					code+='<div class="m_bottom_10"><span>受益人是被保险人的</span><select id="'+id+'"><option value="">-</option>';
					for(var i=0;i<config.range.length;i++){
						code+='<option value="'+config.range[i]+'">'+config.relationMap[config.range[i]]+'</option>';
					}
					code+='</select></div>';
					return code;
				}
			},
			"BENEFNAME":{
				check:function(value){
					return /^[\u0391-\uFFE5a-zA-Z \/]+$/.test(value)?'':'受益人姓名填写不正确（不能空且只能为汉字）';
				},
				getValue:function(index,obj){
					var v=$id(config.subjectKey+'Benefit'+index+'_BENEFNAME').value;
					if(obj){
						obj.BENEFNAME=v;
						obj.BENEFNAMETXT="受益人姓名："+v;
					}
					return v;
				},
				getCode:function(index){
					var code='';
					var id=config.subjectKey+'Benefit'+index+'_BENEFNAME';
					code='<div class="m_bottom_10"><span>受益人姓名</span><input type="text" class="text" id="'+id+'"></div>';
					return code;
				}
			},
			"BENEFSCALE":{
				check:function(value){
					return /^\d+$/.test(value)?'':'受益比例填写不正确';
				},
				getValue:function(index,obj){
					var v=$id(config.subjectKey+'Benefit'+index+'_BENEFSCALE').value;
					if(obj){
						obj.BENEFSCALE=v;
						obj.BENEFSCALETXT="受益比例："+v+"%";
					}
					return v;
				},
				getCode:function(index){
					var code='';
					var id=config.subjectKey+'Benefit'+index+'_BENEFSCALE';
					code='<div class="m_bottom_10"><span>受益比例</span><input type="text" class="text" id="'+id+'"/>%</div>';
					return code;
				}
			},
			"BENEFSEX":{
				check:function(value){
value=value.toString();
					return ((value==2||value==1)&&value!='')?'':'受益人性别未正确选择';
				},
				getValue:function(index,obj){
					var v=$id(config.subjectKey+'Benefit'+index+'_BENEFSEX_1').checked?1:($id(config.subjectKey+'Benefit'+index+'_BENEFSEX_2').checked?2:'');
					if(obj){
						obj.BENEFSEX=v;
						obj.BENEFSEXTXT="受益人性别："+({"2":"女","1":"男"}[v]);
					}
					return v;
				},
				setValue:function(index,value){
					var tar=$id(config.subjectKey+'Benefit'+index+'_BENEFSEX_'+value);
					if(tar){
						tar.checked=true;
					}
				},
				getCode:function(index){
					var code='';
					var id=config.subjectKey+'Benefit'+index+'_BENEFSEX';
					code='<div class="m_bottom_10"><span>受益人性别</span><input type="radio" value="1" id="'+id+'_1" name="'+id+'"/><label for="">男</label>&nbsp;<input type="radio" value="2" id="'+id+'_2" name="'+id+'"/><label for="">女</label></div>';
					return code;
				}
			},
			"BENEFID":{
				check:function(value){
					return config.validator.IsIdCard(value)?'':'受益人身份证号码填写不正确';
				},
				getValue:function(index,obj){
					var v=$id(config.subjectKey+'Benefit'+index+'_BENEFID').value;
					if(obj){
						obj.BENEFIDTYPE='1';
						obj.BENEFIDNO=v;
						obj.BENEFID=v;
						obj.BENEFIDTXT="受益人身份证号码："+v;
					}
					return v;
				},
				getCode:function(index){
					var code='';
					var id=config.subjectKey+'Benefit'+index+'_BENEFID';
					code='<div class="m_bottom_10"><span>受益人身份证</span><input type="text" id="'+id+'" /></div>';
					return code;
				}
			},
			"BENEFBIRTHDAY":{
				check:function(value){
					return /^\d{4}-\d{2}-\d{2}$/.test(value)?'':'受益人出生日期不正确';
				},
				getValue:function(index,obj){
					var v=config.birthday[index]&&config.birthday[index].check()?config.birthday[index].getValue():'';
					if(obj&&v){
						obj.BENEFBIRTHDAY=v;
						obj.BENEFBIRTHDAYTXT='受益人出生日期：'+v;
					}
					return v;
				},
				setValue:function(index,value){
					config.birthday[index].setValue(value,false);
				},
				getCode:function(index){
					var code='';
					var id=config.subjectKey+'Benefit'+index+'_BENEFBIRTHDAY';
					code='<div class="m_bottom_10"><span>受益人出生日期</span><select id="'+id+'Year"><option value="-">-</option></select>&nbsp;&nbsp;年 <select id="'+id+'Month"></select>&nbsp;&nbsp;月 <select id="'+id+'Day"></select>&nbsp;&nbsp;日</div>';
					return code;
				},
				init:function(index){
					var cid=config.subjectKey+'Benefit'+index+'_BENEFBIRTHDAY';
					config.birthday[index]=$birthday({
						yearDom:$id(cid+'Year'),
						monthDom:$id(cid+'Month'),
						dayDom:$id(cid+'Day')
					});
				}
			}
		},
		inputValue:function(input,index){
			return config.inputData[input]?config.inputData[input].getValue(index):'';
		},
		inputCheck:function(input,value){
			return config.inputData[input]?config.inputData[input].check(value):true;
		},
		inputCode:function(input,index){
			return config.inputData[input]?config.inputData[input].getCode(index):'';
		},
        init:function(){
			//dom对象缓存
			config.bnfDom=$id(config.subjectKey+'_'+config.name+'_Content');
			if(!window.insuranceBenefit){
				
				//map是本函数的dealsubject对照表，不使用engine提供的方法，做到功能隔离
				window.insuranceBenefit={maxIndex:0,map:{} };
				//定义全局功能函数
				window.insuranceBenefit.add=function(sk){
					var cfg=window.insuranceBenefit.map[sk];
					var tar=cfg.bnfDom;
					var div=document.createElement('div');
					cfg.count=cfg.count?cfg.count+1:1;
					window.insuranceBenefit.maxIndex++;
					div.id=cfg.subjectKey+'Benefit'+window.insuranceBenefit.maxIndex;
					//div.className='beneficiary';
					var h=[];
					for(var i=0;i<cfg.inputs.length;i++){
						h.push(cfg.inputCode(cfg.inputs[i],window.insuranceBenefit.maxIndex));
						
					}
					div.innerHTML='<div class="beneficiary"><em id="'+cfg.subjectKey+'Benefit'+window.insuranceBenefit.maxIndex+'_Index">'+cfg.count+'</em><div class="content">'+h.join('')+'</div>'+(cfg.count==1?'':'<a class="link_del" href="#nolink" onclick="window.insuranceBenefit.del(\''+cfg.subjectKey+'\','+window.insuranceBenefit.maxIndex+');">删除</a>')+'</div><div class="beneficiary_tips" id="'+cfg.subjectKey+'Benefit'+window.insuranceBenefit.maxIndex+'_Error" style="display:none;"></div>';
					tar.appendChild(div);
					if(cfg.count<cfg.maxBenefit){
						$id(cfg.subjectKey+'_'+cfg.name+'_Ctrl').innerHTML='<i class="icon_add_link"></i><a href="#nolink" onclick="window.insuranceBenefit.add(\''+cfg.subjectKey+'\');">添加受益人</a><span class="tips">最多可设置'+cfg.maxBenefit+'人</span>';
					}else{
						$id(cfg.subjectKey+'_'+cfg.name+'_Ctrl').innerHTML='<span class="tips">最多可设置'+cfg.maxBenefit+'人</span>';
					}
					for(var j=0;j<cfg.inputs.length;j++){
						//执行初始化函数
						if(cfg.inputData[cfg.inputs[j]].init){
							cfg.inputData[cfg.inputs[j]].init(window.insuranceBenefit.maxIndex);
						}
					}
				}
				window.insuranceBenefit.del=function(sk,index){
					var cfg=window.insuranceBenefit.map[sk];
					var list=cfg.bnfDom.children;
					cfg.count=cfg.count-1;
					var i=0;
					while(i<list.length){
						var tar=list[i];
						var ti=tar.id.match(/INSURED\d+Benefit(\d+)/)[1];
						if(ti==index){
							cfg.bnfDom.removeChild(tar);
							$id(cfg.subjectKey+'_'+cfg.name+'_Ctrl').innerHTML='<i class="icon_add_link"></i><a href="#nolink" onclick="window.insuranceBenefit.add(\''+cfg.subjectKey+'\');">添加受益人</a><span class="tips">最多可设置'+cfg.maxBenefit+'人</span>';
						}else{
							i=i+1;
							var label=$id(cfg.subjectKey+'Benefit'+ti+'_Index').innerHTML=i;
						}
					}
				}
				window.insuranceBenefit.setValue=function(sk,p,val){
					//按位置设置值
					//sk:subjectkey,p:dom子节点位置，val：数据
					var cfg=window.insuranceBenefit.map[sk];
					var list=cfg.bnfDom.children;
					while(list.length-1<p){
						//补齐子节点
						window.insuranceBenefit.add(sk);
					}
					var temp=list[p];
					//取出实际的index
					var index=temp.id.match(/INSURED\d+Benefit(\d+)/)[1];
					for(var i=0;i<cfg.inputs.length;i++){
						//赋值
						var input=cfg.inputs[i];
						if(cfg.inputData[input].setValue){
							cfg.inputData[input].setValue(index,val[input]);
						}else{
							var tar=$id(cfg.subjectKey+'Benefit'+index+'_'+input);
							if(tar){
								tar.value=val[input];
							}
						}
					}
				}
			}
			window.insuranceBenefit.map[config.subjectKey]=config;
			window.insuranceBenefit.add(config.subjectKey);
			
		}
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insDealCreateBirthday(conf){
	var config={
		type:"Birthday",
		desc:"",
		name:"",	//序列化时的标签名
		//内部参数
		birthday:"",
		subjectKey:"",//用于多个姓名输入项的
		getCode:function(){
			return '<select id="'+config.subjectKey+'_BirthdayYear" autocomplete="off"></select>&nbsp;&nbsp;年 <select id="'+config.subjectKey+'_BirthdayMonth" autocomplete="off"></select>&nbsp;&nbsp;月 <select id="'+config.subjectKey+'_BirthdayDay" autocomplete="off"></select>&nbsp;&nbsp;日&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span>';
		},
		getErrorCode:function(){
			return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请正确填写出生日期。</p>';
		},
		getValue:function(obj){
			var val=config.birthday.getValue();
			if(obj){
				obj[config.name]=val;
			}
			return val;
		},
		valueChanged:$empty(),
		getAge:function(){
			return config.birthday.getAge();
		},
		setValue:function(val,noFire){
			val=val.replace(/^ +/,'').replace(/ +$/,'');
			config.birthday.setValue(val);
			if(!noFire){
				config.valueChanged();
			}
		},
		check:function(){
			return $id(config.subjectKey+'_BirthdayYear').value&&$id(config.subjectKey+'_BirthdayMonth').value&&$id(config.subjectKey+'_BirthdayDay').value;
		},
		init:function(){
			config.birthday=$birthday({
				maxAge:config.maxAge,
				minAge:config.minAge,
				minAgeDay:config.minAgeDay,
				yearDom:$id(config.subjectKey+'_BirthdayYear'),
				monthDom:$id(config.subjectKey+'_BirthdayMonth'),
				dayDom:$id(config.subjectKey+'_BirthdayDay'),
				configName:config.configName,
				subjectKey:config.subjectKey,
				name:config.name,
				valueChanged:config.valueChanged
			});
		}
	}
	for(var i in conf){
		config[i]=conf[i];

	}
	return config;
}
function $insDealCreateCareer(conf){
    var config={
        type:"Career",
        desc:"",
        name:"",    //序列化时的标签名
		co:"yg",	//使用数据源：yg，阳光，pa，平安
		security:"1|2|3|4",	//职业安全级别
        subjectKey:"",//用于多个姓名输入项的
		preloadValue:"",		//职业数据未加载时，setValue的缓存函数，等loaded后运行
        //获取职业数据
        career:$insuranceCareer(),
        getCode:function(){
            return '<div id="insDealCareerContainer_'+config.subjectKey+'"></div>';
        },
        getErrorCode:function(){
            return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请正确填写职业。</p>';
        },
        getValue:function(obj){
            var target=$id(config.subjectKey+'_Career3');
            var val=target.value;
            var text=target.options[target.selectedIndex].text;
            if(obj){
                obj[config.name]=val;
                //提供中文值
                obj[config.name+'TXT']=text;
            }
            return val;
        },
        valueChanged:$empty(),
        setValue:function(val,noFire){
			if(config.career.data){
				//使用数据源自带校验器校验，并打散
				v=config.career.data.valueBreak(val);
				if(v){
					config.value=val;
					for(var i=0,len=config.career.data.level;i<len;i++){
						var tar=$id(config.subjectKey+'_Career'+i);
						tar.value=v[i];
						tar.onchange();
						if(!noFire){
							config.valueChanged();
						}
					}
				}
			}else{
				config.preloadValue=function(){
					config.setValue(val,noFire);
				}
			}
        },
        check:function(){
			var v=true;
			for(var i=0,len=config.career.data.level;i<len;i++){
				var tar=$id(config.subjectKey+'_Career'+i);
				if(tar&&!tar.value){
					v=false;
					break;
				}
			}
            return v;
        },
        updateSelector:function(level,v){
            var target=$id(config.subjectKey+'_Career'+level);
            target.style.display='';
			//使用了getLevelData，之前已经经过了career.init初始化
            var list=config.career.getLevelData(level,v);
            target.options.length=0;
            target.options.add(new Option("-",""));
            for(var i=0;i<list.length;i++){
                var item=list[i].split(":");
                target.options.add(new Option(item[1],item[0]));
            }
            for(var i=1;i<config.career.data.level;i++){
                $id(config.subjectKey+'_CareerC'+i).style.display=i<=level?'':'none';
            }
        },
        init:function(){
			//先让组件加载职业数据
			config.career.init(config.co,config.security,function(){
				var level=config.career.data.level;
				var html=['<select style="width:250px;" id="'+config.subjectKey+'_Career0" autocomplete="off" level="0"></select>&nbsp;&nbsp;<em>*</em>'];
				for(var i=1;i<level;i++){
					html.push('<div id="'+config.subjectKey+'_CareerC'+i+'" style="margin-top:5px;"><select style="width:250px;" id="'+config.subjectKey+'_Career'+i+'" autocomplete="off" level="'+i+'"></select></div>')
				}
				html.push('<span class="des">'+config.desc+'</span>');
				$id('insDealCareerContainer_'+config.subjectKey).innerHTML=html.join('');
				config.updateSelector(0);
				for(var i=0;i<level;i++){
					$id(config.subjectKey+'_Career'+i).onchange=function(){
						var next=parseInt(this.getAttribute('level'))+1;
						var maxLevel=config.career.data.level;
						if(this.value!=""){
							if(next==maxLevel){
								//最后一级数据选择，发出事件
								config.value=this.value;
								config.valueChanged();
							}else{
								config.updateSelector(next,this.value);
							}
						}else{
							for(var i=next;i<maxLevel;i++){
								 $id(config.subjectKey+'_CareerC'+i).style.display='none';
							}
						}
					}
				}
				if(config.preloadValue){
					config.preloadValue();
				}
			});
        }
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insDealCreateEmail(conf){
	var config={
		type:"Email",
		
		desc:"",
		name:"",	//序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		getCode:function(){
			return '<input class="text length_2" id="'+config.subjectKey+'_Email" name="'+config.name+'" type="text" value="'+(config.value?config.value:'')+'"/>&nbsp;<em>*</em>&nbsp;<a class="history_link" href="#nolink" onclick="$id(\''+config.subjectKey+'_Email\').value=$getUin()+\'@qq.com\'">导入QQ邮箱</a>&nbsp;<span class="des">'+config.desc+'</span>';
		},
		getErrorCode:function(){
			return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请正确填写电子邮件地址。</p>';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			var val=$id(config.subjectKey+'_Email').value.replace(/^ +/,'').replace(/ +$/,'');
			if(obj){
				obj[config.name]=val;
			}
			return val;
		},
		setValue:function(val,noFire){
			$id(config.subjectKey+'_Email').value=val;
			config.value=val.replace(/^ +/,'').replace(/ +$/,'');
			if(!noFire){
				config.valueChanged();
			}
		},
		check:function(){
			var val=$id(config.subjectKey+'_Email').value.replace(/^ +/,'').replace(/ +$/,'');
			return /^\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)*$/.test(val);
		},
		init:function(){
			var target=$id(config.subjectKey+'_Email');
			target.onblur=function(){
				if(target.value){
					config.valueChanged();
				}
			}
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreateEngName(conf){
	var config={
		type:"EngName",
		
		desc:"",
		name:"",	//序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		getCode:function(){
			return '<input class="text length_2" id="'+config.subjectKey+'_EngName" name="'+config.name+'" type="text" value="'+(config.value?config.value:'')+'"/>&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span>';
		},
		getErrorCode:function(){
			return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请正确填写名称拼音。</p>';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			var val=$id(config.subjectKey+'_EngName').value.replace(/^ +/,'').replace(/ +$/,'');
			if(obj){
				obj[config.name]=val;
			}
			return val;
		},
		setValue:function(val,noFire){
			$id(config.subjectKey+'_EngName').value=val;
			config.value=val.replace(/^ +/,'').replace(/ +$/,'');
			if(!noFire){
				config.valueChanged();
			}
		},
		check:function(){
			var val=$id(config.subjectKey+'_EngName').value.replace(/^ +/,'').replace(/ +$/,'');
			return /^[a-zA-Z]*$/.test(val);
		},
		init:function(){
			var target=$id(config.subjectKey+'_EngName');
			target.onblur=function(){
				if(target.value){
					config.valueChanged();
				}
			}
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreateGender(conf){
	var config={
		type:"Gender",
		
		desc:"",
		name:"",	//序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		getCode:function(){
			return '<input type="radio" name="'+config.subjectKey+'_Gender" id="'+config.subjectKey+'_Male"><label for="'+config.subjectKey+'_Male">男</label>&nbsp;&nbsp;<input type="radio" name="'+config.subjectKey+'_Gender" id="'+config.subjectKey+'_Female"><label for="'+config.subjectKey+'_Female">女</label>&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span>';
		},
		getErrorCode:function(){
			return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请选择性别。</p>';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			var val=$id(config.subjectKey+'_Female').checked?2:($id(config.subjectKey+'_Male').checked?1:'');
			if(obj){
				obj[config.name]=val;
				obj[config.name+'TXT']=({1:'男',2:'女'}[val])
			}
			return val;
		},
		setValue:function(val,noFire){
			if(val==1){
				$id(config.subjectKey+'_Male').checked=true;
			}else if(val=2){
				$id(config.subjectKey+'_Female').checked=true;
			}
			config.value=val;
			if(!noFire){
				config.valueChanged();
			}
		},
		check:function(){
			return $id(config.subjectKey+'_Female').checked||$id(config.subjectKey+'_Male').checked;
		},
		init:function(){
			$id(config.subjectKey+'_Female').onchange=$id(config.subjectKey+'_Male').onchange=function(){
				config.valueChanged();
			}
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreateHealth(conf){
    var config={
        type:"Health",
        desc:"",
        name:"health",    //序列化时的标签名,固定health
        subjectKey:"",//用于多个姓名输入项的
		//格式：{label:"",value:"1",op:{1:"是",0:"否"} }
		option:[
			
		],
		//内部参数
		style:"labelTop",
        getCode:function(){
			var c="";
			for(var i=0;i<config.option.length;i++){
				var item=config.option[i];
				var o='';
				for(var j in item.op){
					var n=config.subjectKey+'_'+config.name+'_'+item.code;
					o=o+'<input type="radio" name="'+n+'" id="'+n+'_'+j+'" value="'+j+'"/><label for="'+n+'_'+j+'">'+item.op[j]+'</label>&nbsp;';
				}
				c=c+'<tr><td>'+item.label+'<br/>'+o+'</td></tr>';
			}
            return '<div class="order_grid" id="'+config.subjectKey+'_'+config.name+'"><table style="margin: 0px; width: 416px;" class="table_inner"><tbody>'+c+'</tbody></table></div>';
        },
        getErrorCode:function(){
            return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>健康告知不符合投保要求。</p>';
        },
        valueChanged:$empty(),
        getValue:function(obj){
			var temp={};
			for(var i=0;i<config.option.length;i++){
				var item=config.option[i];
				for(var j in item.op){
					if($id(config.subjectKey+'_'+config.name+'_'+item.code+'_'+j).checked){
						temp[item.code]=j;
						break;
					}
				}
			}
			if(obj){
				obj.health=temp;
			}
            return '';
        },
        setValue:function(val,noFire){
			for(var i in val){
				$id(config.subjectKey+'_'+config.name+'_'+i+'_'+val[i]).checked=true;
			}
			if(!noFire){
				config.valueChanged();
			}
		},
        check:function(){
			var valid=true;
			for(var i=0;i<config.option.length;i++){
				var item=config.option[i];
				var c=false;
				if(item.value){
					//如果需要限定选择值
					c=$id(config.subjectKey+'_'+config.name+'_'+item.code+'_'+item.value).checked;
				}else{
					//只需选择任意选项
					for(var j in item.op){
						if($id(config.subjectKey+'_'+config.name+'_'+item.code+'_'+j).checked){
							c=true;
							break;
						}
					}
				}
				if(!c){
					valid=false;
					break;
				}
			}
			return valid;
		},
        init:function(){
			$id(config.subjectKey+'_'+config.name).onchange=function(){
				if(config.check()){
					config.valueChanged();
				}
			}
			
		}
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insDealCreateIDCard(conf){
	var config={
		type:"IDCard",
		co:"yg",
		desc:"",
		name:"",	//序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		idType:[1,3],
		map:{},
		ygData:{"1":"身份证","3":"护照","4":"军官证","5":"港台同胞证","10":"其他"},
		paData:{"1":"身份证","2":"护照","3":"军官证","5":"港澳回乡证或台胞证","9":"其他"},
		tkData:{"1":"身份证","3":"护照","4":"军官证","5":"港台同胞证","10":"其他"},
		getCode:function(){
			config.map=config[config.co+'Data'];
			var op="";
			for(var i=0;i<config.idType.length;i++){
				op+='<option value="'+config.idType[i]+'" '+(i==0?'selected="selected"':'')+'>'+config.map[config.idType[i]]+'</option>';
			}
			return '<select id="'+config.subjectKey+'_IDCard"><option value="">请选择</option>'+op+'</select>&nbsp;&nbsp;<input class="text length_1" type="text" id="'+config.subjectKey+'_ID" name="'+config.name+'"/>&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span>';
		},
		getErrorCode:function(){
			return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请正确选择证件类型及正确填写证件号码。</p>';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			var idType=$id(config.subjectKey+'_IDCard').value;
			var idNo=$id(config.subjectKey+'_ID').value.replace(/^ +/,'').replace(/ +$/,'');
			var val=(config.map[idType])+' '+idNo;
			if(obj){
				//组合式输入项，分别拆分记录
				obj[config.name+'NO']=idNo;
				obj[config.name+'TYPE']=idType;
				
				//最后一个汇总，用于后续读取setValue
				obj[config.name]=val;
			};
			return val;
		},
		setValue:function(val,noFire){
			val=val.replace(/^ +/,'').replace(/ +$/,'');
			var v=val.split(' ');
			var i='';
			if(v[0]){
				for(i in config.map){
					if(config.map[i]==v[0]){
						break;
					}
				}
			}
			$id(config.subjectKey+'_IDCard').value=i;
			$id(config.subjectKey+'_ID').value=v[1]?v[1]:'';
			config.value=val;
			if(!noFire){
				config.valueChanged();
			}
		},
		validator:$simpleValidator(),
		check:function(){
			var idType=$id(config.subjectKey+'_IDCard').value;
			var idNo=$id(config.subjectKey+'_ID').value.replace(/ /g,'');
			return !(!idType||!idNo||(idType=='1'&&!config.validator.IsIdCard(idNo)));
		},
		init:function(){
			var idType=$id(config.subjectKey+'_IDCard');
			var idNo=$id(config.subjectKey+'_ID');
			idType.onchange=idNo.onblur=function(){
				if(idNo.value&&idType.value){
					config.valueChanged();
				}
			}
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreateInsuredRelationship(conf){
	var config={
		type:"InsuredRelationship",
		
		desc:"",
		name:"",	//序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		range:[1,9,10,11,13,12,8],
		show:"0",//0无英文，1英文对照
		relationshipData:{"1":"本人","2":"丈夫","3":"妻子","4":"父亲","5":"母亲","6":"儿子","7":"女儿","8":"其他","9":"配偶","10":"父母","11":"子女","12":"其他具有抚养或赡养关系的家庭成员或近亲属","13":"劳动关系"},
		engRelationshipData:{"1":"Policy owner","2":"Husband","3":"Wife","4":"Father","5":"Mother","6":"Son","7":"Daughter","8":"Others","9":"","10":"","11":"","12":"","13":"Employer"},
		getCode:function(){
			var str=['<select id="'+config.subjectKey+'_InsuredRelationship" class="length_2"><option value="">请选择</option>'];
			for(var i=0;i<config.range.length;i++){
				str.push('<option value="'+config.range[i]+'">'+config.relationshipData[config.range[i]]+(config.show==1?(config.engRelationshipData[config.range[i]]):'')+'</option>');
			}
			str.push('</select>&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span>');
			return str.join('');
		},
		getErrorCode:function(){
			return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请选择被保险人与投保人关系。</p>';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			var val=$id(config.subjectKey+'_InsuredRelationship').value;
			if(obj){
				obj[config.name]=val;
				obj[config.name+'TXT']=config.relationshipData[val];
			}
			return val;
		},
		setValue:function(val,noFire){
			$id(config.subjectKey+'_InsuredRelationship').value=val;
			config.value=val;
			if(!noFire){
				config.valueChanged();
			}
		},
		check:function(){
			var val=$id(config.subjectKey+'_InsuredRelationship').value;
			return val?true:false;
		},
		init:function(){
			$id(config.subjectKey+'_InsuredRelationship').onchange=function(){
				config.valueChanged();
			}
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreateIR(conf){
    var config={
        type:"IR",
		co:"yg",
        desc:"",
        name:"",    //序列化时的标签名
        subjectKey:"",//用于多个姓名输入项的
        range:[1,9,10,11,13,12,8],
        show:"0",//0无英文，1英文对照
        relationshipData:{},
		pa2Data:{"1":"本人","2":"父母","3":"配偶","4":"子女","9":"其他","A":"母子","B":"母女","C":"兄弟","D":"姊妹","E":"兄妹","F":"姐弟","G":"祖孙"},
		paData:{"1":"本人","2":"配偶","3":"父子","4":"父女","9":"其他","A":"母子","B":"母女","C":"兄弟","D":"姊妹","E":"兄妹","F":"姐弟","G":"祖孙"},
		ygData:{"1":"本人","2":"丈夫","3":"妻子","4":"父亲","5":"母亲","6":"儿子","7":"女儿","8":"其他","9":"配偶","10":"父母","11":"子女","12":"其他具有抚养或赡养关系的家庭成员或近亲属","13":"劳动关系"},
		tkData:{"1":"本人","2":"丈夫","3":"妻子","4":"父亲","5":"母亲","6":"儿子","7":"女儿","8":"其他","9":"配偶","10":"父母","11":"子女","12":"其他具有抚养或赡养关系的家庭成员或近亲属","13":"劳动关系"},
		ygEnData:{"1":"Policy owner","2":"Husband","3":"Wife","4":"Father","5":"Mother","6":"Son","7":"Daughter","8":"Others","9":"","10":"","11":"","12":"","13":"Employer"},
		paEnData:{},
		pa2EnData:{},
		tkEnData:{},
        engRelationshipData:{},
        getCode:function(){
			config.relationshipData=config[config.co+"Data"];
			config.engRelationshipData=config[config.co+"EnData"];
            var str=['<select id="'+config.subjectKey+'_InsuredRelationship" class="length_2"><option value="">请选择</option>'];
            for(var i=0;i<config.range.length;i++){
                str.push('<option value="'+config.range[i]+'">'+config.relationshipData[config.range[i]]+(config.show==1&&config.engRelationshipData[config.range[i]]?(config.engRelationshipData[config.range[i]]):'')+'</option>');
            }
            str.push('</select>&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span>');
            return str.join('');
        },
        getErrorCode:function(){
            return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请选择被保险人与投保人关系。</p>';
        },
        valueChanged:$empty(),
        getValue:function(obj){
            var val=$id(config.subjectKey+'_InsuredRelationship').value;
            if(obj){
                obj[config.name]=val;
                obj[config.name+'TXT']=config.relationshipData[val];
            }
            return val;
        },
        setValue:function(val,noFire){
            $id(config.subjectKey+'_InsuredRelationship').value=val;
            config.value=val;
            if(!noFire){
                config.valueChanged();
            }
        },
        check:function(){
            var val=$id(config.subjectKey+'_InsuredRelationship').value;
            return val?true:false;
        },
        init:function(){
            $id(config.subjectKey+'_InsuredRelationship').onchange=function(){
                config.valueChanged();
            }
        }
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insDealCreateMobile(conf){
	var config={
		type:"Mobile",
		
		desc:"",
		name:"",	//序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		getCode:function(){
			return '<input class="text length_2" id="'+config.subjectKey+'_Mobile" name="'+config.name+'" type="text" value="'+(config.value?config.value:'')+'"/>&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span>';
		},
		getErrorCode:function(){
			return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请正确填写手机号码。</p>';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			var val=$id(config.subjectKey+'_Mobile').value.replace(/^ +/,'').replace(/ +$/,'');
			if(obj){
				obj[config.name]=val;
			}
			return val;
		},
		setValue:function(val,noFire){
			$id(config.subjectKey+'_Mobile').value=val;
			config.value=val.replace(/^ +/,'').replace(/ +$/,'');
			if(!noFire){
				config.valueChanged();
			}
		},
		check:function(){
			var val=$id(config.subjectKey+'_Mobile').value.replace(/^ +/,'').replace(/ +$/,'');
			return /^(852\d{8})|(((\(\d{2,3}\))|(\d{3}\-))?((13\d{9})|(14\d{9})|(15\d{9})|(18\d{9})))$/.test(val);
		},
		init:function(){
			var target=$id(config.subjectKey+'_Mobile');
			target.onblur=function(){
				if(target.value){
					config.valueChanged();
				}
			}
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreateName(conf){
	var config={
		type:"Name",
		desc:"",
		name:"",	//序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		getCode:function(){
			return '<input class="text" id="'+config.subjectKey+'_Name" name="'+config.name+'" type="text" value="'+(config.value?config.value:'')+'"/>&nbsp;<em>*</em>&nbsp;<div class="history" id="'+config.subjectKey+'_Name_History"></div>&nbsp;<span class="des">'+config.desc+'</span>';
		},
		getErrorCode:function(){
			return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>姓名填写不正确。</p>';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			var val=$id(config.subjectKey+'_Name').value.replace(/^ +/,'').replace(/ +$/,'');
			if(obj){
				obj[config.name]=val;
			}
			return val;
		},
		setValue:function(val,noFire){
			$id(config.subjectKey+'_Name').value=val;
			config.value=val.replace(/^ +/,'').replace(/ +$/,'');
			if(!noFire){
				config.valueChanged();
			}
		},
		check:function(){
			var val=$id(config.subjectKey+'_Name').value.replace(/^ +/,'').replace(/ +$/,'');
			return /^[\u0391-\uFFE5a-zA-Z \/]+$/.test(val);
		},
		init:function(){
			var target=$id(config.subjectKey+'_Name');
			target.onblur=function(){
				if(target.value){
					config.valueChanged();
				}
			}
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreatePassport(conf){
	var config={
		type:"Passport",
		
		desc:"",
		name:"",	//序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		getCode:function(){
			return '<input class="text length_1" type="text" id="'+config.subjectKey+'_Passport" name="'+config.name+'"/>&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span>';
		},
		getErrorCode:function(){
			return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请正确填写护照号码。</p>';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			var idNo=$id(config.subjectKey+'_Passport').value.replace(/^ +/,'').replace(/ +$/,'');
			if(obj){
				//组合式输入项，分别拆分记录
				obj[config.name+'NO']=idNo;
				//护照
				obj[config.name+'TYPE']=3;
				//最后一个汇总，用于后续读取setValue
				obj[config.name]=idNo;
			};
			return idNo;
		},
		setValue:function(val,noFire){
			val=val.replace(/^ +/,'').replace(/ +$/,'');
			$id(config.subjectKey+'_Passport').value=val;
			config.value=val;
			if(!noFire){
				config.valueChanged();
			}
		},
		validator:$simpleValidator(),
		check:function(){
			var idNo=$id(config.subjectKey+'_Passport').value.replace(/ /g,'');
			return idNo!="";
		},
		init:function(){
			var target=$id(config.subjectKey+'_Passport');
			target.onblur=function(){
				if(target.value){
					config.valueChanged();
				}
			}
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreateSBIR(conf){
    var config={
        type:"SBIR",
        show:0,
        desc:"",
        name:"",    //序列化时的标签名
        subjectKey:"",//用于多个姓名输入项的
        getCode:function(){
            return config.show==0?'法定':'法定(legal beneficiary)';
        },
        getErrorCode:function(){
            return '';
        },
        valueChanged:$empty(),
        getValue:function(obj){
            if(obj){
                obj[config.name]='';
                obj[config.name+'TXT']=config.show==0?'法定':'法定(legal beneficiary)';
            }
            return '';
        },
        setValue:$empty(),
        check:$empty(),
        init:$empty()
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insDealCreateSelfBnf(conf){
	var config={
		type:"SelfBnf",
		
		desc:"",
		name:"",	//序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		getCode:function(){
			return '本人';
		},
		getErrorCode:function(){
			return '';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			if(obj){
				obj[config.name]='';
				obj[config.name+'TXT']='本人';
			}
			return '';
		},
		setValue:$empty(),
		check:$empty(),
		init:$empty()
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreateStaticBnfRelationship(conf){
	var config={
		type:"StaticBnfRelationship",
		show:0,
		desc:"",
		name:"",	//序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		getCode:function(){
			return config.show==0?'法定':'法定(legal beneficiary)';
		},
		getErrorCode:function(){
			return '';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			if(obj){
				obj[config.name]='';
				obj[config.name+'TXT']=config.show==0?'法定':'法定(legal beneficiary)';
			}
			return '';
		},
		setValue:$empty(),
		check:$empty(),
		init:$empty()
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreateTKCareer(conf){
	var config={
		type:"TKCareer",
		desc:"",
		name:"", //序列化时的标签名
		subjectKey:"",//用于多个姓名输入项的
		style:"labelTop",
		careerData:[
			{cate:"机关团体\企事业单位\公司行号",list:["2201001,行政内勤\销售外勤人员"]}
			,{cate:"金融\法律\IT\租赁",list:["2202002,金融法律信息等专业人员"]}
			,{cate:"文教\卫生\新闻\出版\广告\印刷\商业\服务业",list:["2203000,军警学员\广告施工人员","1001002,一般医师及护士","2203002,文教卫生商业服务业从业人员"]}
			,{cate:"邮政\电信\水利\电力",list:["2204000,快递\电力施工人员","2204003,邮电水利电力从业人员"]}
			,{cate:"轻工业从业人员",desc:"如电子业、电线\电缆业、塑胶\橡胶业、纺织\服装制造业、食品\饮料制造业、玻璃\陶瓷\搪瓷制造业、烟草加工业、医疗用品\制药业、工艺美术品\文体用品制造业",list:["2205003,轻工业从业人员"]}
			,{cate:"重工业从业人员",desc:"如钢铁业、机械\机电制造与装配、化学工业、建材业、造纸业、军工制造业",list:["2206003,重工业非现场工作人员","2206000,重工业现场工作人员"]}
			,{cate:"运输业（陆运\水运\空运）",list:["2207007,水上运输业人员","2207000,特种运输业从业人员","2207003,运输业从业人员"]}
			,{cate:"建筑建材\工程施工",list:["2208002,建筑建材工程非现场工作人员","2208000,建筑建材工程现场工作人员"]}
			,{cate:"体育",list:["2209000,危险体育项目从业人员","2209003,体育从业人员"]}
			,{cate:"森林\木材及家具制造业",list:["2210000,森林砍伐及木材加工人员","2210003,木材加工\家具制造业从业人员"]}
			,{cate:"地质矿产业",list:["2211002,地质矿产业非现场工作人员","2211000,地质矿产业现场工作人员"]}
			,{cate:"农\副\牧\渔业",list:["2212000,农副牧渔业从业人员","0101002,农夫"]}
			,{cate:"现役军人",list:["2213000,作战部队军人","1900005,后勤补给\通讯地勤人员"]}
			,{cate:"警察",list:["2214000,特种警务工作人员","1800002警察(负责巡逻任务者)"]}
			,{cate:"治安保卫人员",list:["2215000,特种治安保卫人员","2215004,一般治安保卫人员"]}
			,{cate:"非工作人员",list:["2147001,学龄前儿童","1201002,学生","1700001,家庭主妇","2147003,离退休人员（无兼职）"]}
		],
		getCode:function(){
			var pCode='';
			for(var i=0;i<config.careerData.length;i++){
				pCode+='<option value="'+(i+1)+'">'+config.careerData[i].cate+'</option>';
			}
			return '<select id="'+config.subjectKey+'_'+config.name+'_p"><option value="">-</option>'+pCode+'</select>&nbsp;&nbsp;<select id="'+config.subjectKey+'_'+config.name+'_s"><option value="">-</option></select>&nbsp;<em>*</em><div style="width: 416px;" id="'+config.subjectKey+'_'+config.name+'_Desc"></div>';
		},
		getErrorCode:function(){
			return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请选择正确的职业。</p>';
		},
		valueChanged:$empty(),
		getValue:function(obj){
			var val=config.careerS.value;
			var d=val.split(',');
			obj[config.name]=val;
			obj[config.name+'TXT']=d[1];
			var t=d[0].split('@');
			obj.OCCUPATIONTYPE=t[0];
			obj.OCCUPATIONCODE=t[1];
			return val;
		},
		setValue:function(val,noFire){
			config.value=val;
			var d=val.split('@')[0];
			config.careerP.value=d;
			config.careerP.onchange();
			config.careerS.value=val;
			if(!noFire){
				config.valueChanged();
			}
		},
		check:function(){
			var val=config.careerS.value;
			return val?true:false;
		},
		init:function(){
			config.careerP=$id(config.subjectKey+'_'+config.name+'_p');
			config.careerS=$id(config.subjectKey+'_'+config.name+'_s');
			config.careerDesc=$id(config.subjectKey+'_'+config.name+'_Desc');
			config.careerP.onchange=function(){
				var p=config.careerP.value;
				if(p!=""){
					p=Number(p);
					var d=config.careerData[p-1];
					config.careerS.options.length=0;
					config.careerS.options.add(new Option("-",""));
					for(var i=0;i<d.list.length;i++){
						var item=d.list[i].split(',');
						config.careerS.options.add(new Option(item[1],p+'@'+d.list[i]));
					}
					if(d.desc){
						config.careerDesc.innerHTML=d.desc;
					}
				}
			}
			config.careerS.onchange=function(){
				if(config.careerS.value!=''){
					config.valueChanged();
				}
			}
		}
	}
	for(var i in conf){
		config[i]=conf[i];
	}
	return config;
}
function $insDealCreateTravelArea(conf){
    var config={
        type:"TravelArea",
        desc:"",
        name:"",    //序列化时的标签名
        subjectKey:"",//用于多个姓名输入项的
        //获取职业数据
        area:[],
        getCode:function(){
            return '<select id="'+config.subjectKey+'_TravelArea" autocomplete="off"><option value="1">亚洲国家（不含日本）</option><option value="2">非亚洲国家（含日本）</option></select>&nbsp;&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span><div></div>';
        },
        getErrorCode:function(){
            return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请正确填写职业。</p>';
        },
        getValue:function(obj){
            var target=$id(config.subjectKey+'_Career3');
            var val=target.value;
            var text=target.options[target.selectedIndex].text;
            if(obj){
                obj[config.name]=val;
                //提供中文值
                obj[config.name+'TXT']=text;
            }
            return val;
        },
        valueChanged:$empty(),
        setValue:function(val,noFire){
            if(!val.test(/^\d{7}$/)){
                return false;
            }
            val=[val.substr(0,1),val.substr(0,3),val.substr(0,5),val];
            
            var c0=$id(config.subjectKey+'_Career0');
            var c1=$id(config.subjectKey+'_Career1');
            var c2=$id(config.subjectKey+'_Career2');
            var c3=$id(config.subjectKey+'_Career3');
            c0.value=val[0];
            c0.onchange();
            c1.value=val[1];
            c1.onchange();
            c2.value=val[2];
            c2.onchange();
            c3.value=val[3];
            c3.onchange();
            config.value=val[3];
            if(!noFire){
                config.valueChanged();
            }
        },
        check:function(){
            return $id(config.subjectKey+'_Career0').value&&$id(config.subjectKey+'_Career1').value&&$id(config.subjectKey+'_Career2').value&&$id(config.subjectKey+'_Career3').value;
        },
        updateSelector:function(level,v){
            var target=$id(config.subjectKey+'_Career'+level);
            target.style.display='';
            var list=config.career.getLevelData(level,v);
            target.options.length=0;
            target.options.add(new Option("-",""));
            for(var i=0;i<list.length;i++){
                var item=list[i].split(":");
                target.options.add(new Option(item[0],item[1]));
            }
            for(var i=level+1;i<4;i++){
                $id(config.subjectKey+'_Career'+i).style.display='none';
            }
        },
        init:function(){
            config.updateSelector(0);
            for(var i=0;i<3;i++){
                $id(config.subjectKey+'_Career'+i).onchange=function(){
                    if(this.value!=""){
                        var next=parseInt(this.getAttribute('level'));
                        config.updateSelector(next,this.value);
                    }
                }
            }
        }
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insDealCreateTravelPurpose(conf){
    var config={
        type:"TravelPurpose",
        desc:"",
        name:"",    //序列化时的标签名
        subjectKey:"",//用于多个姓名输入项的
        getCode:function(){
            return '<select id="'+config.subjectKey+'_TravelPurpose" class="length_2"><option value="">请选择</option><option value="1">商务Business</option><option value="2">留学Overseas study</option><option value="3">旅游Sight seeing</option><option value="4">探亲Visiting relatives</option></select>&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span>';
        },
        getErrorCode:function(){
            return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>请选择出行目的。</p>';
        },
        valueChanged:$empty(),
        getValue:function(obj){
            var val=$id(config.subjectKey+'_TravelPurpose').value;
            if(obj){
                obj[config.name]=val;
                obj[config.name+'TXT']={"1":"商务Business","2":"留学Overseas study","3":"旅游Sight seeing","4":"探亲Visiting relatives"}[val];
            }
            return val;
        },
        setValue:function(val,noFire){
            $id(config.subjectKey+'_TravelPurpose').value=val;
            config.value=val;
            if(!noFire){
                config.valueChanged();
            }
        },
        check:function(){
            var val=$id(config.subjectKey+'_TravelPurpose').value;
            return val?true:false;
        },
        init:function(){
            $id(config.subjectKey+'_TravelPurpose').onchange=function(){
                config.valueChanged();
            }
        }
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $insDealCreateZip(conf){
    var config={
        type:"Zip",
        
        desc:"",
        name:"",    //序列化时的标签名
        subjectKey:"",//用于多个姓名输入项的
        getCode:function(){
            return '<input class="text length_2" id="'+config.subjectKey+'_Zip" name="'+config.name+'" type="text" value="'+(config.value?config.value:'')+'"/>&nbsp;<em>*</em>&nbsp;<span class="des">'+config.desc+'</span>';
        },
        getErrorCode:function(){
            return '<p class="msg-para-warn"><span class="msg0-icon-warn"></span>邮编不正确。</p>';
        },
        valueChanged:$empty(),
        getValue:function(obj){
            var val=$id(config.subjectKey+'_Zip').value.replace(/^ +/,'').replace(/ +$/,'');
            if(obj){
                obj[config.name]=val;
            }
            return val;
        },
        setValue:function(val,noFire){
            $id(config.subjectKey+'_Zip').value=val;
            config.value=val.replace(/^ +/,'').replace(/ +$/,'');
            if(!noFire){
                config.valueChanged();
            }
        },
        check:function(){
            var val=$id(config.subjectKey+'_Zip').value.replace(/^ +/,'').replace(/ +$/,'');
            return /^[0-9]\d{5}$/.test(val);
        },
        init:function(){
            var target=$id(config.subjectKey+'_Zip');
            target.onblur=function(){
                if(target.value){
                    config.valueChanged();
                }
            }
        }
    }
    for(var i in conf){
        config[i]=conf[i];
    }
    return config;
}
function $isHttpsMail() {
    return window.httpsMailCgiPath ? true : false;
}
function $keywordEditor(opt){
	//{ constKws: arrKey, begin: 0, remain: 200 - len }
	var option = {
		constArray : [],	//已经使用的关键词数组
//		begin : 0,	
		total : 200,
		remain : 200,		//剩余输入关键词个数
		usedTxt : null,		//正在使用个数文本
		remainTxt : null,	//剩余输入个数文本
		editObj : null,		//编辑框
		usedKws : {},		//正在使用的关键词
		constKws : {},		//已经使用过的关键词
		spliter: window.attachEvent ? '\r\n' : '\n', /* S 关键字编辑相关内容 */
		afterInput : function(){}
	}
	option = $extend(option, opt);
	//设置关键字可以输入的字数提示（去重）
	function setKWNum(l) {
		option.usedTxt.innerHTML = l;
		option.remainTxt.innerHTML = option.remain - l;
	};
	//整理输入框的文字，去掉空行和关键字前后的空格
	function refreshKWEdit() {
		var data = getNoEmptyData(true);
		option.editObj.value = data.text;
	};
	function refreshKWNum() {
		setKWNum(getNoEmptyData(false).arr.length);
		option.afterInput();
		//getCompareKeywordListFromMain();
	};
	//获取输入的关键词
	function getNoEmptyData(unique) {
		var rtn = {}, arr = (option.editObj.value.split('\n') || []), l = arr.length, i, newarr = [], key;
		//重新设置全局变量
		option.usedKws = {};
	
		for (i = 0; i < l; i++) {
			key = arr[i].replace(/(^\s*)|(\s*$)/g, '');
			if (key) {
				if (!unique || (!option.usedKws[key] && !option.constKws[key])) {	//增加一个对关键词列表内容的判断,不仅限于输入关键词的文本框
					newarr.push(key);
					option.usedKws[key] = 1;
				}
			}
		}
		//多于200个关键词的时候去掉200后的关键词
		var capacity = option.remain;
		if (newarr.length > capacity) {
			for (i = capacity; i < newarr.length; i++) {
				option.usedKws[newarr[i]] = 0;
			}
			newarr.length = capacity;
		}
		//设置关键字可以输入的字数提示
		setKWNum(newarr.length);
	
		if (newarr.length > 0) {
			rtn.text = (newarr.join(option.spliter) + option.spliter);
			rtn.arr = newarr;
		} else {
			rtn.text = '';
			rtn.arr = [];
		}
		return rtn;
	};
	
	//初始化关键字编辑器
	(function initKWEdit() {
		var _kw = option.editObj;
		var constKws = option["constKws"] || [];
		var l = option.constArray.length;
	
		if (!_kw) {
			return false;
		}
		_kw.oninput = refreshKWNum;
		_kw.onkeyup = refreshKWNum;
		_kw.onblur = function () {
			refreshKWEdit();
//			if (PP.express.getCompareKeywordListFromMain) {
//				PP.express.getCompareKeywordListFromMain();
//			}
		};
		refreshKWEdit();
		//记录已存在的关键字
		for (i = 0; i < l; i++) {
			option.constKws[option.constArray[i]] = 1;
		}
		//设置控件页面表现
		option.usedTxt.innerHTML = 0;
		option.remain = option.total - option.constArray.length;
		option.remainTxt.innerHTML = option.remain;
		//不可添加的情况下，禁用输入和保存按钮
//		if (option["remain"] == 0) {
//			$id('save_edit_btn').disabled = true;
//		};
		_kw = null;
	})();
	
	return {
		//添加关键词
		addKeyWord : function (kw) {
			//增加关键字
			var textarea_kw = option.editObj;
			if ($$.isArray(kw)) {
				var i, l = kw.length;
				for (i = 0; i < l; i++) {
					if (option.usedKws[kw[i]] || option.constKws[kw[i]]) {//已经存在此关键词
						continue;
					} else {
						option.usedKws[kw[i]] = 1;
						textarea_kw.value += (kw[i] + option.spliter);
					}
				}
				refreshKWNum();
				return true;
			} else {
				if (option.usedKws[kw] || option.constKws[kw]) {//已经存在此关键词
					return false;
				} else {
					option.usedKws[kw] = 1;
					textarea_kw.value += (kw + option.spliter);
					refreshKWNum();
					return true;
				}
			}
		}	
	}
}
$likeMini = function(option){
   var opt = {
     uin : "",  //分享信息的uin(作者uin)
     type : 1, //喜欢操作类型(1:喜欢,2:取消喜欢)
     ptag : "", //上报ptag
     onSuccess : null, //成功后回调 function()
     onHadLike : null, //已经喜欢过 function()
     onFail : null //失败后回调 function()
   };
   for(var o in option){
      opt[o] = option[o];
   }
   /* @interface:271;
   * 接口url：http://ext.paipai.com/like/like
   * 接口名称：【拍拍乐享】【喜欢】-喜欢操作
   * 期待回调：callback
   * @interfaceEnd*/
  var url = "http://ext.paipai.com/like/like?callback=likeMiniCallBack&type=" + opt.type + "&id=" + opt.shareid + "&u1=" + opt.uin + "&t=" + Math.random();
  var _retCoder = $returnCode({url:url,frequence:2});
  $loadScript(url, "likeMiniScript");
  window.likeMiniCallBack = function(info){
     _retCoder.report(true,info.ret);
     opt.ptag && $countRd(opt.ptag);
     switch(info.ret*1){
        case -1:        
          $loginFrame({
             type:'func',
             action: function(){
               $likeMini(opt);
             }
          });
          break;
        case 0:
          opt.onSuccess && opt.onSuccess();
          break;
        case 7:
          opt.onHadLike && opt.onHadLike();
          break;
        default:
          opt.onFail && opt.onFail();
          break;
     }
  }
}
function $linkPreload(){
	if($isBrowser("chrome")) return;
	var preLinks = document.getElementsByTagName("link"),preloadArr=[];
	for (var i=preLinks.length; i--; ){
		if(preLinks[i].getAttribute("rel")==="prerender" && preLinks[i].getAttribute("href")!=""){
			preloadArr.push(preLinks[i].getAttribute("href"));
		}
	}
	if(preloadArr.length>0){ $preload(preloadArr)};
}
function $listHoverDetail(option){
    //参数订制
    var _option = {
       detailContentSrc: "/sinclude/common/pp_category_detail.shtml", //列表详情页面片
       detailContainer: $id("ppCategoryDetail"), //详情容器
       detailListTagName: "ul", //详情容器子节点列表的tagName类型
       listContainer: $id("ppCategoryList"), //列表导航面板
       listItem: $child($id("ppCategoryList"),"li"), //列表导航单个li
       isAjaxLoad: true, //是否动态获取内容节点
       currentIndex: -1, //当前展示项的序列号
       classHide: "hide", //隐藏样式名
       classCurrent: "current", //当前样式名
       delayTime: 300, //延迟显示时间
       eventShow: function(){}, //显示时触发接口
       eventHide: function(){}, //隐藏时触发接口
       initContent: _getDetailContent//初始化内容方法
    };

    $extend(_option,option);
    _option.initEvent = _bindEvents;
    _option.initContent();
    //公共调用接口
    return _option;
    //动态获取内容
    function _getDetailContent(){
        if(_option.isAjaxLoad){
            $ajax({
                url:_option.detailContentSrc,
                method:'get',
                type:'text',
                onSuccess:function(data){
                    _option.detailContainer.innerHTML = data;
                    _bindEvents();
                },
                onError:function(msg){
                }
            });
        }else{
            _bindEvents();
        }
        _option.isInited = true;
    }
    //内容获取好之后，绑定所有初始化事件
    function _bindEvents(){
        _option.detailList = $child(_option.detailContainer, _option.detailListTagName);
        _option.detailListLen = _option.detailList.length;
        _option.isHover = _option.currentIndex != -1; //如果指定了初始化序列，则将hover状态设置为true
        _switchDetail();//初始化详情子节点状态

        for(var i = 0, len = _option.listItem.length;i < len;i++){
            (function(n){
                $addEvent(_option.listItem[n],"mouseover",function(){
                   _option.timerSwitch && clearTimeout(_option.timerSwitch); //先暂定切换定时器
                   _option.timerSwitch = setTimeout(function(){
                       _option.currentIndex = n;
                       _switchDetail();
                   },_option.delayTime);
                });
            })(i);
        }
        $addEvent(_option.listContainer,"mouseover",_mouseoverPanel);
        $addEvent(_option.listContainer,"mouseout",_mouseoutPanel);
        $addEvent(_option.detailContainer,"mouseover",function(){
            _option.timerSwitch && clearTimeout(_option.timerSwitch);
            _mouseoverPanel();
        });
        $addEvent(_option.detailContainer,"mouseout",_mouseoutPanel);
    }
    //
    function _mouseoverPanel(e){
            _option.isHover = true;
            if(_option.timerShow == undefined){
                _option.timerShow = setTimeout(_showDetail,_option.delayTime);
            }
    }
    function _mouseoutPanel(e){
            _option.isHover = false;
            setTimeout(_hideDetail,_option.delayTime);
    }
    //切换对应子内容
    function _switchDetail(){
        for(var i=0;i<_option.detailListLen; i++){
            if(i === _option.currentIndex){
                 $delClass(_option.detailList[i],_option.classHide);
                 $addClass(_option.listItem[i],_option.classCurrent);
            }else{
                 $addClass(_option.detailList[i],_option.classHide);
                 $delClass(_option.listItem[i],_option.classCurrent);
            }
        }
        _showDetail();
    }
    //显示详情面板
    function _showDetail(){
        if(_option.isHover && (_option.currentIndex !== -1)){
            $delClass(_option.detailContainer,_option.classHide);
            clearTimeout(_option.timerShow);
            _option.timerShow = null;
            _option.eventShow();

        }
    }
    //隐藏详情面板
    function _hideDetail(){
        if(_option.isHover){ return;}
        clearTimeout(_option.timerShow);
        _option.timerShow = null;
        clearTimeout(_option.timerSwitch);
        $addClass(_option.detailContainer,_option.classHide);
        _option.currentIndex = -1;
        _switchDetail();
        _option.eventHide();
    }
}
function $loadImagesByScroll(offsetH){
	//根据页面滚动状态按需请求需要的图片
	//初始化要加载的内容
	var bodyCache=document.body,
		domCache=(document.compatMode=='BackCompat')?bodyCache:document.documentElement,
		offsetH=(window.MessageEvent&&!$isBrowser('firefox'))?bodyCache.scrollTop:domCache.scrollTop,
		allImage=document.images,
		loadList={}//要加载的图片列表;//可见范围

	//遍历出需要按需加载的图片
	for(var i=0,len=allImage.length;i<len;i++){
		var oImg=allImage[i];
		if((typeof(oImg)=="object") && oImg.getAttribute("init_src") ){
			var _index=$getYP(oImg);
			_index=_index>offsetH?(_index-offsetH):0;
			(loadList[_index])?loadList[_index].push(oImg):loadList[_index]=[oImg];
		}
	}

	for(var i in loadList){
		$scroll({height:i,data:loadList[i],func:loadImg});
	}
	
	function loadImg(opt){
		for(var i=0,len=opt.data.length;i<len;i++){
			var oImg=opt.data[i];
			var src=oImg.getAttribute("init_src");
			if(src){
				oImg.setAttribute("src",src);
				oImg.removeAttribute("init_src");
			}
		}
	}
}
/*
 *"新功能提醒（拍拍用户端）提醒组件"js代码
 *--------------------------------------------
 *修订记录：
 *	2011-9-6    marcsli		新建
 *	2011-9-26	marcsli		修改：
 *								1. 将函数组件化
 *								2. 函数命名统一
 */

$loadNFT = function( size ) {

    // 创建全局的容器变量
    window.loadNFT = window.loadNFT || {};
    var prototype = prototype || {},
        globalVar = window.loadNFT;

    // 在全局容器中创建需要使用的变量
    globalVar.nft_data = {};
    globalVar.nft_id_list = [];
    globalVar.nft_size = size || 1;

    // 函数
    prototype = {
        // 记录点击事件
        sendNFTClickRecord : function(nft_id, opt) {
            // 发送ID列表，并获得可以显示的ID列表及显示的内容
            $loadScript(
                'http://virtual.paipai.com/nft_user/SetUserHitRecord?nftId=' + nft_id + '&nftUserHitType=' + opt + '&t=' + Math.random(),
                'getdata',
                {
                    isToken: true,                          //是否添加token验证
                    timeout: 2000,
                    isAutoReport: false,                    //是否自动上报，true/false
                    reportOptions: {},                      //上报的参数，同组件$returnCode
                    reportType: 'current',                  //支持两种上报方式：current 和 cross，前者是当前页cgi上报，后者是跨页面上报
                    callbackName:'registerSuccessCallBack',
                    callback: function() {},
                    errorback: function() {}         //定义错误回调函数
                }
            );
        },

        // 区别处理不同的点击事件
        addEventForNFT : function(event, nft_node) {
            //判断浏览器，并获取被点及对象的opt值
            var opt = event.srcElement ? event.srcElement.getAttribute('opt') : event.target.getAttribute('opt');

            if (opt == '0') {
                nft_node.style.display = "none";
            } else if (opt == '1') {
                nft_node.style.display = "none";
                prototype.sendNFTClickRecord(nft_node.getAttribute("nft_id"), 1);
            } else if (opt == '2') {
                prototype.sendNFTClickRecord(nft_node.getAttribute("nft_id"), 2);
                window.open(nft_node.getAttribute("nft_link"));
            }
        },

        // 加载单个NFT便签
        loadNFT : function( nft_wrapper, nft_data ) {
            // 设置待添加的节点的属性和内容，并添加
            var nft_node = document.createElement('div'),
                nft_left = parseInt( nft_wrapper.getAttribute( "left" ) ) + $getX( nft_wrapper ),
                nft_top = parseInt( nft_wrapper.getAttribute( "top" ) ) + $getY( nft_wrapper );

            // 设置体验新功能的链接
            var nft_link = nft_data.nftLink ? '<a class="enjoy_new_feature_btn" opt="2" href="' + nft_data.nftLink + '">体验新功能</a>' : '';

            // 创建新节点并添加
            nft_node.id = "nft_" + nft_data.nftId;
            nft_node.setAttribute( "nft_id", nft_data.nftId );
            nft_node.className = "new_func nft_tip";
            nft_node.style.top = nft_top + "px";
            nft_node.style.left = nft_left + "px";
            nft_node.style.width = 200 + "px";
            nft_node.style.fontSize = 12 + "px";
            nft_node.style.position = "absolute";
            nft_node.innerHTML = '\
                <span id="nft_arrow" class="arrow_' + nft_data.nftArrow + '"></span>\
                <div class="bd">\
                    <div class="inner" style="position:relative;">\
                        <p class="new_func_icon" style="position:absolute; top:10px;"></p>\
                        <p class="new_func_cont" style="padding-left:40px;">' + nft_data.nftContent + '</p>\
                        <p class="new_func_link">' + nft_link + ' <a opt="0" href="#">以后再提醒</a></p>\
                        <a class="new_func_close" opt="1" href="#"></a>\
                    </div>\
                </div>';
            document.body.appendChild( nft_node );

            // 绑定NFT便签上的点击事件
            $addEvent( nft_node, "click", function(event ) {
                prototype.addEventForNFT(event, nft_node);
            });
        },

        // 删除所有NFT便签，用于重新加载
        removeAllNFT : function() {
            var len = globalVar.nft_id_list.length;

            for( var i = 0; i < len; i++ ) {
                document.body.removeChild( document.getElementById( "nft_" + globalVar.nft_id_list[i] ) );
            }
        },

        // 用于修正resize事件的bug
        addEvents : function() {
            // 绑定浏览器的resize事件，避免NFT便签错位
            window.onresize = function () {
                // 删除所有NFT便签，准备重新加载
                prototype.removeAllNFT();

                // 利用已经存储的数据重新加载所有NFT便签
                prototype.loadNFTs();
            }
        },

        // 随机出指定数量的NFT便签
        getNFT : function ( size, nft_list ) {
            while( nft_list.length > size ) {
                var d = new Date();
                var index = d.getSeconds() % nft_list.length,
                    sub_strA = nft_list.slice( 0, index ),
                    sub_strB = nft_list.slice( index + 1 );

                nft_list = sub_strA.concat( sub_strB );
            }

            return nft_list;
        },

        // 加载所有的NFT
        loadNFTs : function () {
            // 搜索所有NFT便签，并获得NFT的ID
            var nft_wrappers = $attr("tag", "new_feature_tips");

            // 判断是否第一次载入当前页面
            if (globalVar.nft_data.set) {
                // 当页面发生resize事件时，对NFT便签进行重新加载

                // 删除页面中原有的NFT便签，重新在页面中展示NFT便签（包括点击事件的绑定）
                for (var i = 0, nft_data = globalVar.nft_data.nft_data_set[i]; i < globalVar.nft_data.nft_data_set.length; i++) {
                    prototype.loadNFT(nft_wrappers[nft_data.wrapper_id], nft_data);
                }
            } else {
                // 修改表记位，用于标识页面中已经存有从服务器获取的NFT数据
                globalVar.nft_data.set = true;

                var nft_wrapper,                        // 用于循环的index变量
                    nft_id_list = "";                   // 存储所有页面中存在的id的列表，用于跟服务器通信

                // 判断是否存在
                if (nft_wrapper = nft_wrappers[0]) {
                    // 组装string类型的id列表
                    nft_id_list += nft_wrapper.getAttribute("nft_id");

                    for (var i = 1, nft_wrapper = nft_wrappers[1]; i < nft_wrappers.length; nft_wrapper = nft_wrappers[++i]) {
                        nft_id_list += '|' + nft_wrapper.getAttribute("nft_id");
                    }
                } else {
                    // 如果不存在NFT的标记，则终止加载NFT
                    return;
                }

                // 发送ID列表，并获得服务器返回可以在当前用户面前显示的id列表及显示的内容
                $loadScript(
                    'http://virtual.paipai.com/nft_user/GetTipsByIDList?nftIDList=' + nft_id_list + '&t=' + Math.random(),
                    'getdata',
                    {
                        isToken: true,             //是否添加token验证
                        timeout: 2000,
                        isAutoReport: false,        //是否自动上报，true/false
                        reportOptions: {},          //上报的参数，同组件$returnCode
                        reportType: 'current',      //支持两种上报方式：current 和 cross，前者是当前页cgi上报，后者是跨页面上报
                        callbackName: 'nftCallback',
                        callback: function( data ) {
                            var nft_data_set = data.data, nft_data;

                            // 删除最后空项
                            nft_data_set = nft_data_set.slice(0, data.data.length - 1);

                            // 对wrapper进行编号，用于浏览器resize时重新加载
                            for (var i = 0, nft_wrapper = nft_wrappers[0]; i < nft_wrappers.length; nft_wrapper = nft_wrappers[++i]) {
                                for (var j = 0; j < nft_data_set.length; j++) {
                                    nft_data = nft_data_set[j];

                                    if (nft_wrapper.getAttribute("nft_id") == nft_data.nftId) {
                                        nft_data.wrapper_id = i;
                                    }
                                }
                            }

                            // 随机获取指定数量的NFT
                            nft_data_set = prototype.getNFT(globalVar.nft_size, nft_data_set);

                            // 将数据存储到页面的全局变量中，用于在浏览器resize时重新加载。
                            globalVar.nft_data.nft_data_set = nft_data_set;

                            // 根据服务器返回的NFT信息，在页面中展示NFT便签（包括点击事件的绑定）
                            for (var i = 0; i < globalVar.nft_data.nft_data_set.length; i++) {
                                nft_data = globalVar.nft_data.nft_data_set[i];

                                // 将显示在页面上的NFT便签的id存入当前页面的全局变量中
                                globalVar.nft_id_list.push(nft_data.nftId);
                                prototype.loadNFT(nft_wrappers[ nft_data.wrapper_id], nft_data);
                            }
                        },
                        errorback: function() {
                        }       //定义错误回调函数
                    }
                );
            }
        }
    };


	// 加载NFT
	prototype.loadNFTs();

	// 绑定事件
	prototype.addEvents();
}
function $loadRateList(pid, tcount, shopqq, cid, restime, paynum){
/*-----------加载评价列表-----------*/
var p = pid ? pid : 1;
var c = tcount ? tcount : 0;
//暂时注释“查看商品的全部评价”，下个版本开放 --beanmao 20100708
var tp = '<p class="historylink"><a style="margin-right:50px;" target="_blank" href="http://shop1.paipai.com/cgi-bin/creditinfo/seo?p=1&id='+ cid +'">查看该商品的全部评价</a><a href="http://shop.paipai.com/' + shopqq + '/10/index.shtml?PTAG=10.1.101">查看卖家全部评价</a></p>{#loading#}<table width="100%" height="50" border="0" cellspacing="0" cellpadding="0"><tr><td align="center" valign="middle" style="font-size:12px; color:#333333; text-align:center;vertical-align: middle; " width="100%" height="100%"><img src="http://static.paipaiimg.com/assets/common/loading2.gif" /><br />评价数据加载中……</td></tr></table>{#loading#}{#none#}<p class="center">{#nonerate#}</p>{#none#}{#list#}<table width="100%" border="0" cellspacing="0" cellpadding="0"><colgroup><col class="ratetxt" /><col class="ratepeople" /></colgroup><thead><tr><th>评价</th><th>评价人</th></tr></thead><tbody>{#rate#}<tr><td>{#badreason#}<p class="badreason">差评原因：{#reasons#}。</p>{#badreason#}<p class="ratetxt">{#content#}</p><p class="ratetime">{#rateTime#}</p>{#reply#}<ul class="writeback">{#replyList#}<li>{#replyFrom#}：{#replyContent#}<span class="ratetime">{#replyTime#}</span></li>{#replyList#}</ul>{#reply#}</td><td>买家：{#nickname#}<br/>信用：{#credit#}</td></tr>{#rate#}</tbody></table><div id="ratePageBar"></div><div><p class="historylink"><a style="margin-right:50px;" target="_blank" href="http://shop1.paipai.com/cgi-bin/creditinfo/seo?p=1&id='+ cid +'">查看该商品的全部评价</a><a href="http://shop.paipai.com/' + shopqq + '/10/index.shtml?PTAG=10.1.101">查看卖家全部评价</a></p></div>{#list#}';
//var tp = '<p class="historylink"><a href="http://shop1.paipai.com/' + shopqq + '/credit.shtml?PTAG=10.1.101">查看卖家全部评价</a></p>{#loading#}<table width="100%" height="50" border="0" cellspacing="0" cellpadding="0"><tr><td align="center" valign="middle" style="font-size:12px; color:#333333; text-align:center;vertical-align: middle; " width="100%" height="100%"><img src="http://static.paipaiimg.com/assets/common/loading2.gif" /><br />评价数据加载中……</td></tr></table>{#loading#}{#none#}<p class="center">{#nonerate#}</p>{#none#}{#list#}<table width="100%" border="0" cellspacing="0" cellpadding="0"><colgroup><col class="ratetxt" /><col class="ratepeople" /></colgroup><thead><tr><th>评价</th><th>评价人</th></tr></thead><tbody>{#rate#}<tr><td>{#badreason#}<p class="badreason">差评原因：{#reasons#}。</p>{#badreason#}<p class="ratetxt">{#content#}</p><p class="ratetime">{#rateTime#}</p>{#reply#}<ul class="writeback">{#replyList#}<li>{#replyFrom#}：{#replyContent#}<span class="ratetime">{#replyTime#}</span></li>{#replyList#}</ul>{#reply#}</td><td>买家：{#nickname#}<br/>信用：{#credit#}</td></tr>{#rate#}</tbody></table><div id="ratePageBar"></div><div><p class="historylink"><a href="http://shop1.paipai.com/' + shopqq + '/credit.shtml?PTAG=10.1.101">查看卖家全部评价</a></p></div>{#list#}';
var hc = tp.replace(/{#none#}.*?{#none#}/, "").replace(/{#list#}.*?{#list#}/, "").replace(/{#loading#}/g, "");
//若1件都没卖出，则直接展示没有评价的信息，而不发异步请求
if(paynum<1){
$$("#rateListContent").html(emptyRates());//.find("p.historylink a").hide();
return false;
}
$$("#rateListContent").html(hc.replace(/{#commodityId#}/g, cid));
var path = "http://shop1.paipai.com/cgi-bin/creditinfo/CmdyEval?sCmdyId=" + cid + "&nCurPage=" + pid + "&nTotal=" + c + "&resettime=" + restime + "&nActionId=" + Math.random();
//返回码统计对象_retCoder
var _retCoder=$returnCode({url:path,frequence:2});
//期待回调函数：commodityRateListCallBack
$loadScript(path);
window.commodityRateListCallBack = function (obj) {
	//返回码上报
_retCoder.report(true,obj.nErrNo);
if (obj.nErrNo > 0) { return; }
var hc = "";
if (obj.evalList.length <= 1) {
hc = emptyRates();
} else {
var t0 = ((new RegExp("{#rate#}(.*){#rate#}", "ig")).exec(tp)) ? RegExp.$1 : ""; //每条评价的
var t1 = ((new RegExp("{#badreason#}(.*){#badreason#}", "ig")).exec(tp)) ? RegExp.$1 : ""; //差评模板
var hc0 = ""
for (var i = 0; i < obj.evalList.length; i++) {
hc0 += (!obj.evalList[i]) ? "" : t0.replace(/{#badreason#}.*?{#badreason#}/, (obj.evalList[i].peerEvalLevel == 1) ? t1.replace("{#reasons#}", getBadReasons(obj.evalList[i].peerEvalReason)) : "").replace(/{#content#}/, obj.evalList[i].peerEvalContent).replace(/{#rateTime#}/, obj.evalList[i].peerTime).replace(/{#reply#}.*?{#reply#}/, getReplyList(obj.evalList[i].replyList)).replace(/{#nickname#}/g, obj.evalList[i].buyerName).replace(/{#credit#}/g, $getGradeIcons({ score: obj.evalList[i].buyerCredit, type: "buyer" }).replace(/<a.*?>/g, "").replace(/<\/a>/g, ""));
}
hc = tp.replace(/{#loading#}.*?{#loading#}/, "").replace(/{#none#}.*?{#none#}/, "").replace(/{#list#}.*?{#list#}/g, (((new RegExp("{#list#}(.*){#list#}", "ig")).exec(tp)) ? RegExp.$1 : "").replace(/{#rate#}.*?{#rate#}/, hc0));
}
$$("#rateListContent").html(hc.replace(/{#commodityId#}/g, cid));
$page({
pageCount: obj.nTotalPage, //总页码
currentPage: obj.nCurPage, //当前页码
domList: [$id("ratePageBar")], //内容输出区域的id列表，jquery语法
url: "javascript: $loadRateList({#pageId#},'" + obj.nTotalRecord + "','"+shopqq+"','"+cid+"','"+restime+"');void(0);"
});
function getBadReasons(ids) {
var _r = {
"1": "发货速度慢",
"2": "联系不到卖家",
"3": "临时涨价",
"4": "卖家缺货",
"5": "卖家发错货",
"6": "商品与描述不符",
"7": "虚拟点卡无效",
"8": "卖家使用不文明语言",
"9": "货品质量缺陷",
"10": "卖家拒绝退货",
"11": "物流送货慢",
"12": "物流服务差",
"128": "卖家退款速度慢",
"129": "卖家沟通态度差",
"130": "因为缺货才全额退款",
"131": "货品质量有问题",
"132": "联系不到卖家",
"133": "卖家发货速度慢",
"255": "其它原因",
"256": "长时间不确认收货",
"257": "同行恶意竞争",
"258": "买家使用不文明语言",
"259": "买家不付款",
"511": "其它原因"
};
var _t = ids.split(",");
var _n = [];
for (var i = 0; i < _t.length; i++) {
if (_r[_t[i]] && (("," + _n.join(",") + ",").indexOf("," + _r[_t[i]] + ",") < 0)) {
_n.push(_r[_t[i]]);
}
}
return _n.join(",") + "。";
}
function getReplyList(replyList) {
var hc = "";
var t1 = ((new RegExp("{#reply#}(.*){#reply#}", "ig")).exec(tp)) ? RegExp.$1 : "";
var t2 = ((new RegExp("{#replyList#}(.*){#replyList#}", "ig")).exec(tp)) ? RegExp.$1 : ""; //单条回复模板
for (var j = 0; j < replyList.length; j++) {
if (!replyList[j]) { continue; }
hc += t2.replace("{#replyFrom#}", (replyList[j].isBuyer) ? "买家回复" : "卖家回复").replace("{#replyContent#}", replyList[j].content).replace("{#replyTime#}", replyList[j].time);
}
if (replyList.length > 1) {
return (((new RegExp("{#reply#}(.*){#reply#}", "ig")).exec(tp)) ? RegExp.$1 : "").replace(/{#replyList#}.*?{#replyList#}/, hc);
} else {
return "";
}
}
};
//返回显示无评价的html
function emptyRates(){
return tp.replace(/{#loading#}.*?{#loading#}/, "").replace(/{#list#}.*?{#list#}/, "").replace(/{#none#}/g, "").replace(/{#nonerate#}/g, restime == "0" ? "暂时还没有买家进行评价" : "最近三个月无买家评价此商品");
}
}
function $loadSellList(obj) {
    if (window._PP_core_selllist_sellLoaded) return;
    var option = {
        selllistDiv: $id("salesrecordsContent"),
        isPreview: false,
        isGray: "1",
        isHistory: false,
        payedNum: "0",
        isTodaySpec: "",
        commodityDealType: "",
        totalSoldNum: "",
        commodityCount: "",
        commodityId: "",
        commoditySnapVersion: "",
        commodityState: "2",
        resetTime: ""
    }
    for (var i in obj) {
        option[i] = obj[i];
    }
    if (option.isPreview) {
        option.selllistDiv.innerHTML = "预览中……";
        return;
    } else if (option.isHistory) {
        option.selllistDiv.innerHTML = "[ 您正在查看历史商品，购买/出价记录已被隐藏。 ] ";
        option.selllistDiv.style.textAlign = "center";
        return;
    }
    if ((option.payedNum <= 0 && !(option.isTodaySpec) && !(option.commodityDealType == 2)) || ((option.totalSoldNum == 0) && (option.isTodaySpec)) || (option.commodityDealType == 2 && option.commodityCount <= 0)) {
        var nosellHtml = '<table width="100%" border="0" cellspacing="0" cellpadding="0"><thead><tr><th>买家</th><th width="225">商品名称</th><th>出价</th><th> </th><th>购买数量</th><th>时间</th><th>状态</th></tr></thead><tbody><tr><td colspan="7" class="mask"><p>暂无相关信息</p></td></tr></tbody><tfoot><tr><td colspan="7"><span style="margin:3px; float:left ;text-align:right;"><a href="http://help.paipai.com/content/help_20210.shtml" title="买家确认购买至评价完成前，商品出价列表将默认帮您隐藏您的购买记录；待您对卖家做完评价时，您可以选择是否显示您的购买信息。" target="_blank">*隐私保护策略</a></span><span id="sellListPageBar" style="margin:3px;float:right;"></span></td></tr></tfoot></table>';
        option.selllistDiv.innerHTML = nosellHtml;
        return;
    }
    window._PP_core_selllist_params = [1, 20, 0];
    window.getOtherSellListPage = function (pageId) {
        window._PP_core_selllist_params[0] = pageId;
        var url = "http://auction.paipai.com/cgi-bin/sales/" + ((option.commodityDealType == 2) ? "auction" : "fixprice") + "?history=" + window._PP_core_selllist_params[2] + "&itemid=" + option.commodityId + "&pagesize=" + window._PP_core_selllist_params[1] + "&currsnap=" + option.commoditySnapVersion + "&page=" + window._PP_core_selllist_params[0] + "&payed=" + ((option.isTodaySpec) ? "0" : "1") + "&payednum=" + option.payedNum + "&resettime=" + option.resetTime + "&gray=" + option.isGray + "&actionid=" + Math.random();
        var _retCoder = $returnCode({
            url: url,
            frequence: 2
        });
        $loadScript(url, "loadSellList");
        window.commSellListCallBack = function (obj) {
            _retCoder.report(true, obj.errno);
            var template = '<table width="100%" border="0" cellspacing="0" cellpadding="0"><thead><tr><th>买家</th><th width="225">商品名称</th><th>出价</th><th> </th><th>购买数量</th><th>成交时间</th><th>状态</th></tr></thead><tbody>【list】<tr ><td><p style="padding:5px 0;">{#nickName#}<br/>({#uin#})</p></td><td width="225" style="text-align:left"><a target="_blank" href="http://auction1.paipai.com/{#snapId#}">{#title#}</a><p class="stock">{#attr#}</p></td><td style="text-align:left">{#price#} 元{#priceicon#}</td><td>{#proxyBidding#}</td><td>{#num#}件</td><td>{#timeStr#}</td><td>{#state#}</td></tr>【list】【edit】<tr><td colspan="7" class="mask"><p>以下是商品该次修改之前产生的出价记录 <a href="http://auction1.paipai.com/{#snapId#}" target="_blank">查看修改前的商品信息</a></p></td></tr>【edit】【null】<tr><td colspan="7" class="mask"><p>{#nosaleshow#}</p></td></tr>【null】</tbody><tfoot><tr><td colspan="7"><span style="margin:3px; float:left ;text-align:right;"><a href="http://help.paipai.com/content/help_20210.shtml" title="买家确认购买至评价完成前，商品出价列表将默认帮您隐藏您的购买记录；待您对卖家做完评价时，您可以选择是否显示您的购买信息。" target="_blank">*隐私保护策略</a></span><span id="sellListPageBar" style="margin:3px;float:right;"></span></td></tr></tfoot></table>';
            var hc_listItem = ((new RegExp("【list】(.*)【list】", "ig")).exec(template)) ? RegExp.$1 : ""
            var hc_editItem = ((new RegExp("【edit】(.*)【edit】", "ig")).exec(template)) ? RegExp.$1 : ""
            var hc_nullItem = ((new RegExp("【null】(.*)【null】", "ig")).exec(template)) ? RegExp.$1 : ""
            var hc_a = [];
            if (obj.errno != 0) {
                option.selllistDiv.innerHTML = obj.errmsg;
                return;
            }
            for (var i = 0; i < obj.list.length; i++) {
                if (!obj.list[i]) {
                    continue;
                }
                if (obj.list[i].proxyBidding) {
                    obj.list[i].proxyBidding = '<a title="相同的出价是因为使用了系统自动加价，具体的规则，请参考出价帮助" href="http://help.paipai.com/content/help_20203.shtml" target="_blank"> 代理出价</a>';
                }
                obj.list[i].timeStr = $formatDate(new Date(parseInt(obj.list[i].time * 1000)), "yyyy-MM-dd hh:ii:ss");
                var h = (obj.list[i].type == "2") ? hc_editItem : hc_listItem;
				
				obj.list[i].priceicon=((obj.list[i].promotionType == 3 || obj.list[i].promotionType == 4) ? '<img src="http://static.paipaiimg.com/module/icon/credit/colors_dis.png" title="彩钻价" alt="彩钻价"/>' : '');
				obj.list[i].price=(obj.list[i].promotionType == 44&&option.intuan)||(obj.list[i].promotionType == 43&&option.inpromotion)||(obj.list[i].promotionType == 3 || obj.list[i].promotionType == 4) ? obj.list[i].price : obj.list[i].orn_price==0?obj.list[i].price:obj.list[i].orn_price;
				obj.list[i].nickName=obj.list[i].nickName.replace(/(\$)/g,"$1$1");
                hc_a.push($formatStr(h,obj.list[i]));
            }
            if (hc_a.length < 1) {
                ((option.totalSoldNum > 0) && (option.isTodaySpec) && (option.commodityState == "2")) ? hc_a.push(hc_nullItem.replace(/{#nosaleshow#}/g, "正在生成销售记录，请稍候片刻 <a href='javascript:;' onclick='javascript:window.location.reload();'>刷新</a> 此页")) : hc_a.push(hc_nullItem.replace(/{#nosaleshow#}/g, "暂无相关信息"));
            }
            option.selllistDiv.innerHTML = template.replace(/【list】(.*)【null】/, hc_a.join(""));
            if (obj.totalCount > 0) {
                $page({
                    pageCount: Math.floor(obj.totalCount / obj.pageSize) + ((obj.totalCount % obj.pageSize) ? 1 : 0),
                    currentPage: obj.page,
                    domList: [$id("sellListPageBar")],
                    url: "javascript:getOtherSellListPage({#pageId#});location.href='#salesrecords';void(0);"
                });
            }
            window._PP_core_selllist_sellLoaded = true;
        };
    };
    getOtherSellListPage(1);
}
function $loginBack(href,domain){
	href=href||"http://www.paipai.com/";
	domain=domain||"paipai.com";
	if(!$isLogin()){
		$setCookie("returnurl",href,1,"/",domain);
		window.location.href="http://member.paipai.com/cgi-bin/login_entry?LoginLevel=1";
	}
return this;
}
function $loginFrame(obj){
    $loadCss("http://static.paipaiimg.com/module/module_box.css");
    var option = {
        'float': true, //浮动模式，是否浮窗登录，【true/false】
        model: true, //是否模态登录，如果float为false的时候强制为模态，模态登录显示覆盖背景，不显示关闭窗口
        drag: true, //是否可以拖动，如果float为false时强制为false
        type: "self", //登录后的操作类型：parent/top/self/blank/func 默认top
        action: "", //登录后的转向地址或者执行的函数
        check: true, //是否需要检测用户登录状态?
        title: "腾讯拍拍网-请您登录后继续刚才的操作", //自定义标题
        close: true, //模态登录框和非浮动登录框的时候为false
        domId: "",//非浮窗显示时，输出登录框的div的 id
        quick: true, //是否使用快速登陆
        defaultId: "",//指定默认的登陆号码
        noChangeQQ: false,//登陆QQ号不可修改，跟默认登陆号码配合使用
        hideXieyi: false,//不显示协议相关内容
        checkReady: true, //检查页面加载ready后再显示,如果未加载完成的话就直接跳去登陆页面
        hostingId: "",//用于hosting项目登录
        x: 0,//浮窗显示的时候x坐标
        y: 0,//浮窗显示的时候y坐标
        onLogin: $empty(),//登录前的操作,
        onReset: $empty(),//重置前的操作
        onClose: $empty(),//关闭窗口时的操作
        onResize: $empty(),//尺寸调整时的操作
        onSuccess: $empty(),//登录成功的操作
        onFailure: $empty()//登录失败时的操作
    };
    for (var i in obj) {
        option[i] = obj[i];
    }
    
    var _host = window.location.hostname, _isQQ = _host.indexOf("qq.com") != -1, _isBBC = _host.indexOf("buy.qq.com") != -1;
    option.hostingId = option.hostingId || $getQuery('hostingid');//设置hostingId，值不为空时表示hosting用户登录
    window._loginFrameOption = option; //设置全局变量
    option.closeLogin = closeLogin;//关闭
    option.doAction = doAction; //执行回调
    option.showLoginFrame = showLoginFrame; //显示框架
    if (!_isQQ) {
        //清除returnurl，referurlcookie
        $setCookie('returnurl', '', -1, '/', 'paipai.com');
        $setCookie('referurl', '', -1, '/', 'paipai.com');
        //如果遇到需要检查用户登录状态且用户已经登录的话就不显示登录框直接跳到登录成功后的操作
        if (option.check && $getCookie("skey") && $getCookie("hs") && $getCookie("uin")) {
            //登录成功后的操作
            option.doAction();
            return;
        }
        try {
            document.domain = "paipai.com";
        } 
        catch (e) {
        }
    }
    else {
        try {
            document.domain = "qq.com";
        } 
        catch (e) {
        }
    }
    //需要检查页面加载完成，且页面没有加载完成的话，就跳到登陆页面
    if (!$isDocReady() && option.checkReady) {
        // setCookie('returnurl',location.href,1, '/', 'paipai.com');
        // location.href="http://member.paipai.com/cgi-bin/login_entry";
        return false;
    }
    //显示登陆窗口框架
    option.showLoginFrame();
    //初始化回调函数
    initLoginCallBack();
    
    //显示登陆窗口框架
    function showLoginFrame(){
        //加载浮窗
        if (this['float']) {
            this.floatHandle = $float({
                width: "417",
                height: "336",
                cover: this.model,
                style: 'none',
                title: this.title,
                html: '<div id="altercontent"></div>',
                left: this.x,
                top: this.y
            });
            this.domId = "altercontent";
            this.dragId = "floatBox_" + this.floatHandle.id;
        }
        //加载css
        var hc = "", url = (!_isQQ ? 'http://ui.ptlogin2.paipai.com/cgi-bin/login?appid=17000101' : 'http://ui.ptlogin2.qq.com/cgi-bin/login?appid=8000210') + '&style=0&target=self&no_verifyimg=1&hide_title_bar=1&f_url=loginerroralert' + (this.quick ? "" : "&enable_qlogin=0") + '&bgcolor=' + (this['float'] ? "f2faff" : "eef5ff") + '&link_target=blank&uin=' + this.defaultId + '&s_url=' + (!_isQQ ? ('http://member.paipai.com/cgi-bin/ptlogin%3Floginfrom%3D18' + (this.hostingId ? ('%26hostingid%3D' + this.hostingId) : '')) : (_isBBC ? 'http://buy.qq.com%2Fredirect.html' : 'http://imgcache.qq.com%2Fqqshop%2Fac%2Fportal%2Fredirect.html'));
        //加载界面
        hc += '<div class="' + (this['float'] ? "loginunit" : "loginunit2") + '" id="' + (this['float'] ? "loginUnit" : "loginUnit2") + '" style="position:relative;" > <h3 id="loginDragBar"><span id="loginCloser" style="' + (this.close ? "" : "display:none;") + '">关闭</span><strong>登录</strong><em>' + this.title + '</em></h3><iframe src="' + url + '" id="login_frame" name="login_frame" scrolling="no" frameborder="0" onload="login_frame_load?login_frame_load():\'\';"></iframe><div id="loginXieyi"><input name="" id="loginxybox" type="checkbox" value="" checked="checked" /><label for="loginxybox">已阅读并同意<a class="blule" href="http://help.paipai.com/user_agreement.shtml" target="_blank">《拍拍用户协议》</a></label></div><div id="loginXyMask" onClick="alert(\'请先同意《拍拍用户协议》！\')" style="display:none;background-color:#000;position:absolute;left:3px;top:28px;filter:alpha(opacity=1);opacity:0.01;"></div></div>';
        $id(this.domId).innerHTML = hc;
        if (this.noChangeQQ) {
            window.login_frame_load = function(t){
                var uin = document.frames('login_frame').document.getElementById('u');
                if (uin) 
                    uin.disabled = 'disabled';
            }
        }
        else {
            window.login_frame_load = function(t){
                return true
            };
        }
        if (this.hideXieyi) {
            $id("loginXieyi").style.display = "none";
        }
        //判断用户是否同意拍拍用户协议，如checkbox未勾选则用浮层遮盖登陆按钮，并提示用户
        window.showtLoginXyMask = function(){
            var a = document.getElementById("loginXyMask"), b = document.getElementById("login_frame");
            document.getElementById("loginxybox").onclick = function(){
                if (this.checked) {
                    a.style.display = "none"
                }
                else {
                    a.style.display = "";
                    a.style.height = b.style.height;
                    a.style.width = b.style.width;
                }
            }
        }
        showtLoginXyMask();
        //绑定拖动事件
        (this['float'] && this.drag) ? $initDragItem({
            barDom: document.getElementById("loginDragBar"),
            targetDom: document.getElementById(this.dragId)
        }) : "";
        //绑定关闭事件
        if (this.close) {
            document.getElementById("loginCloser").onclick = function(){
                window._loginFrameOption.closeLogin();
            };
        }
    }
    
    //初始化回调函数
    function initLoginCallBack(){
        //回调，登录前的操作,检查是否选中协议
        window.ptlogin2_onLogin = function(){
            return (window._loginFrameOption.onLogin()) ? true : false;
        };
        //回调，重置前的操作
        window.ptlogin2_onReset = function(){
            return (window._loginFrameOption.onReset()) ? true : false;
        };
        //回调，关闭时的操作
        window.ptlogin2_onClose = function(){
            if (_isQQ) {
                ptlogin2_onSuccess();
            }
            return (window._loginFrameOption.onClose()) ? true : false;
        };
        //回调,尺寸调整
        window.ptlogin2_onResize = function(width, height){
            if (!window._loginFrameOption.onResize(width, height)) {
                return false;
            }
            window._loginFrameOption.floatHandle ? window._loginFrameOption.floatHandle.resize(parseInt(width) + 28, parseInt(height) + 75) : "";
            var oFrame = $id("login_frame"), oUnit = $id("loginUnit"), oUnit2 = $id("loginUnit2");
            oFrame.style.height = height + "px";
            oFrame.style.width = width + "px";
            if (oUnit) {
                oUnit.style.height = (height + 75) + "px";
                oUnit.parentNode.parentNode.style.height = (height + 80) + "px";
            }
            if (oUnit2) {
                oUnit2.style.height = (height + 60) + "px";
                oUnit.parentNode.parentNode.style.height = (height + 60) + "px";
            }
            return true;
        };
        //回调，成功后的操作
        window.ptlogin2_onSuccess = function(){
            if (!window._loginFrameOption.onSuccess()) {
                return false;
            }
            if (!_isQQ) {
                //不同域同步登陆状态 addby lordchen 10-08-23
                (new Image()).src = "http://ptlogin2.qq.com/jump?uin=" + $getUin("uin") + "&skey=" + $getCookie("skey");
            }
            else {
                (new Image()).src = "http://ptlogin2.paipai.com/jump?uin=" + $getUin("uin") + "&skey=" + $getCookie("skey") + "&u1=http%3A%2F%2Fmember.paipai.com%2Fcgi-bin%2Fptlogin%3Freturnurl%3Dhttp%3A%2F%2Fauction.paipai.com%2Fnull.shtml%26loginfrom%3D20&t=" + new Date();
            }
            //清除登录框
            window._loginFrameOption.closeLogin();
            //执行登录后的操作
            if (!_isQQ) {
                window._loginFrameOption.doAction();
            }
            else {
                setTimeout(function(){
                    window._loginFrameOption.doAction();
                }, 200);
            }
            return true;
        };
        //回调，失败后的操作
        window.ptlogin2_onFailure = function(err){
            if (!window._loginFrameOption.onFailure(err)) {
                return false;
            }
            //执行登录失败后的操作,弹出错误，并重新尝试展示开对象
            if (err) {
                alert("登录失败！可能的错误原因：" + err);
            }
            $loginFrame(window._loginFrameOption);
            return true;
        };
    }
    
    //执行回调函数
    function doAction(){
        switch (this.type) {
        case "func":
            this.action();
            break;
        case "top":
            top.location.href = this.action;
            break;
        case "parent":
            parent.location.href = this.action;
            break;
        case "self":
            window.location.href = this.action;
            break;
        case "blank":
            window.open(this.action);
            break;
        }
    }
    
    //关闭登陆窗口
    function closeLogin(){
        try {
            window._loginFrameOption.floatHandle.close();
        } 
        catch (e) {
        }
    }
}
var $loginFrameNotice=(function(){
	if(window.$loginFrameNotice){
		return window.$loginFrameNotice;
	}
	var listeners={};
	//代理函数
	var proxy=function(){
		var loginProp=arguments[0]||{};
		var type=loginProp.type;
		var action=loginProp.action;
		//代理回调
		var callback=function(){
			//执行回调函数
			switch (type) {
				case "func":
				action.apply(this);
				break;
				case "top":
				top.location.href = action;
				break;
				case "parent":
				parent.location.href = action;
				break;
				case "self":
				window.location.href = action;
				break;
				case "blank":
				window.open(action);
				break;
			}
			var completeCalls=listeners["complete"];
			if(completeCalls){
				for(var i=completeCalls.length;i--;){
					completeCalls[i].apply(this);
				}
			}
		};
		loginProp.type="func";
		loginProp.action=callback;
		return $loginFrame.apply(this,arguments);
	};
	//添加注册事件
	proxy.addListener=function(event,func){
		var eventCalls=listeners[event];
		if(!eventCalls){
			listeners[event]=eventCalls=[];
		}
		for(var i=eventCalls.length;i--;){
			if(eventCalls[i]===func){
				return;
			}
		}
		eventCalls.push(func);
	};
	//删除注册事件
	proxy.removeListener=function(event,func){
		var eventCalls=listeners[event];
		if(!eventCalls){
			return;
		}
		for(var i=eventCalls.length;i--;){
			if(eventCalls[i]===func){
				eventCalls.splice(i,1);
				return;
			}
		}
	};
	return proxy;
	//目前不能分析的引用关系
	$loginFrame();
})()
function $loginPPFromQQ(){
	//从qq.com拷贝登陆态到paipai.com，如果paipai.com已经登陆则不在进行拷贝动作
	var url="http://ptlogin2.qq.com/ho_cross_domain?tourl=http%3A%2F%2Fmember.paipai.com%2Fcgi-bin%2Fptlogin%3Fu1%3Dhttp%253A%252F%252Fwww.paipai.com%252Fblank.html";
	$isLogin()?"":$report(url);
}
function $loginPPOnCrossDomain() {
	var i = document.createElement("iframe");
	i.style.width = i.style.height = i.style.borderWidth = "0";
	i.src = "http://www.paipai.com/promote/loginpponcrossdomain.shtml";
	document.body.appendChild(i);	
}
function $loginRefresh(opt){
	//根据地址刷新用户登录时间（判断是否登录）
	var option={
		url:'',		//刷新地址
		time:'',	//默认刷新时间
		onBack:function(){return true},
		onLogin:function(){return true},
		onLoginOut:function(){return true}
	};
	for(var key in opt){
		option[key]=opt[i];
	};
	if(''==option.url){
		alert('请输入刷新的网址。');
		return false;
	};
	//动态刷新登陆时间,防止页面超时
	//t:间隔刷新时间,默认十分钟
	option.time?'':option.time=600000;
	window._loginRefreshOption=option;
	window._loginRefreshCallBack=_loginRefreshCallBack;

	/*******************************
	 http://sale.brand.paipai.com/isLoginCheck.xhtml?tag=10000 	 
	 //如果有tag会回传，如果没有就算了
	 try{
	   _loginRefreshCallBack(
	 	{isLogin:true,uin:6607580,tag:10000})
	 }catch(e){
	
	 }
	 *******************************/
	setTimeout(_loginRefreshLoad,option.time);
	
	function _loginRefreshLoad(){
		$loadScript(option.url,'loginRefreshLoad');
	};
	
	function _loginRefreshCallBack(obj){
		var opt=window.$loginRefreshOption;
		if(opt.onBack()){
			if(false==obj.isLogin){
				if(opt.onLogin()){
					alert('登录超时。');
					window.document.location.reload();
				};
			}else{
				if(opt.onLoginOut()){
					setTimeout(_loginRefreshLoad,opt.time)
				}
			}
		}
	}
}
function $logout(callback){
	var img = new Image();
	img.onerror=function(){
		try{
			callback && callback();
		}catch(e){}
	}
	img.src="http://member.paipai.com/cgi-bin/c2cUser_LoginOut";
}
function $marketshareto() {
	if($$("#pp_head").length==0){return false;}
    $$("body").prepend("<div class=\"share_area\" id=\"share_area\"  ><div class=\"sa_tit\" id=\"share_area_tit\" ><h3 ><\/h3><\/div><div class=\"sa_cnt\"   id=\"share_area_cnt\"><h3>分享到...<\/h3><ul><li><a href=\"javascript:void(0)\"   tag=\"shareWbBtn\"  content=\"" + (window.title||document.title) + " " + document.location + "\"><i class=\"sa_wb\"><\/i><span>腾讯微博<\/span><\/a><\/li><li><a href=\"javascript:void(0);\" onclick=\"$countRd(\'1057.1.1\');window.open(\'http:\/\/sns.qzone.qq.com\/cgi-bin\/qzshare\/cgi_qzshare_onekey?url=\'+encodeURIComponent(document.location.href));return false;\" title=\"分享到QQ空间\"><i class=\"sa_qz\"><\/i><span>QQ空间<\/span><\/a><\/li><li><a href=\"javascript:void(0);\" onclick=\"$countRd(\'1057.1.2\');window.open(\'http:\/\/sns.qzone.qq.com\/cgi-bin\/qzshare\/cgi_qzshare_onekey?to=pengyou&url=\'+encodeURIComponent(document.location.href));return false;\" title=\"分享到朋友社区\"><i class=\"sa_py\"><\/i><span>朋友社区<\/span><\/a><\/li><\/ul><\/div><\/div>");  
	if($$("#share_area_tit").css("position")!="fixed"){return $$("#share_area").hide();}
    //控制展现样式
    $$(document).ready(function () {
        $$("#share_area_tit").toggle(function () {
            $$('#share_area_tit').animate({  right: '111px'  }, 300);
            $$('#share_area_cnt').animate({  right: '0px'     }, 300);
        }, function () {
            $$('#share_area_tit').animate({  right: '1px'  }, 300);
            $$('#share_area_cnt').animate({  right: '-111px'  }, 300);
        })
    });
}
function $newpage(opt){
        var option={
            keyId:Math.random(),    //当前对象的唯一标记码
            pageCount:0,    //总页码
            currentPage:0,    //当前页码
            itemCount:0,    //总记录条数
			wgtagId_Previous:'',    //上一页的网购tag
			wgtagId_next:'',       //下一页的网购tag
            more:false,    //是否有下五页存在
            domList:[],        //内容输出区域的id列表，jquery语法
            type:"full",    //控制条样式
            action:"url",    //点击分页的操作类型：url、func
            url:"http://www.paipai.com/?pid={#pageId#}",    //链接地址格式模板，当action=url时才有效，页码标签{#pageId#}
            func:function(pageId,opt){return true;},        //点击链接时的处理函数，参数为页码id和对象本身，当action=func时有效
            onInit:function(pageId,opt){return true;}    //初始化完成后的回调函数，
        };
        for(var i in opt){
            option[i]=opt[i];
        }
        //标准风格
		var stand_string = '{#goto#}<a href="#nolink" pageTag="go" pageId="{#pageId#}" >{#pageId#}</a>{#goto/#}    {#current#}<span class="page-this">{#pageId#}</span>{#current/#}{#hide#}<span class="page-break">...</span>{#hide/#}{#next#}<a href="#nolink" class="page-next" pageTag="go" pageId="{#pageId#}"';
		if (option.wgtagId_next !='') {
			stand_string += 'wgtag="'+option.wgtagId_next+'"';
		}
		stand_string +=' >下一页</a>{#next/#}{#_next#}<span class="page-end">下一页</span>{#_next/#}{#previou#}<a href="#nolink" pageTag="go" pageId="{#pageId#}" class="page-prev"';
		if (option.wgtagId_Previous !='') {
			stand_string += 'wgtag="'+option.wgtagId_Previous+'"';
		}
		stand_string += '>上一页</a>{#previou/#}{#_previou#}<span class="page-start">上一页</span>{#_previou/#}{#first#}{#first/#}{#_first#}{#_first/#}{#last#}{#last/#}{#_last#}{#_last/#}{#more#}<span class="page-break">...</span>{#more/#}{#_more#}{#_more/#}';
		
		
        var standStyle=['',stand_string];
        var templateList={
            full:[standStyle[0],standStyle[1],'<div class="paginator" ><span class="page-break"></span> {#previousPage#}{#pageList#}{#morePage#}{#nextPage#}<span class="page-skip">共{#pageCountNum#}页 跳到第<select id="selectValue">{#select#}</select>页</span></div>'],
            simple:[standStyle[0],standStyle[1],'<div class="paginator"><span class="page-break">总共有 {#itemCount#} 条记录</span> {#previousPage#}{#pageList#}{#morePage#}{#nextPage#}</div>'],
            shortSimple:[standStyle[0],standStyle[1],'<div class="paginator"><span class="page-break">总共有 {#itemCount#} 条记录</span> {#previousPage#}{#shortPageList#}{#morePage#}{#nextPage#}</div>'],
            miniSimple:[standStyle[0],standStyle[1],'<div class="paginator"><span class="page-break">总共有 {#itemCount#} 条记录</span> {#previousPage#}{#miniPageList#}{#nextPage#}</div>']
        };
        
        var template=templateList[option.type][0]+templateList[option.type][1]+templateList[option.type][2];
        var pageCount=parseInt(option.pageCount);
        var currentPage=parseInt(option.currentPage);
        var itemCount=parseInt(option.itemCount);
        //错误参数情况处理
        currentPage=(currentPage>pageCount)?pageCount:currentPage;
        //模板组
        var pt={
            next:"",        //下一页的模板
            _next:"",    //无效下一页的模板
            previou:"",    //上一页的模板
            _previou:"",//无效上一页的模板
            first:"",        //首页的模板
            _first:"",    //无效首页的模板
            last:"",        //末页的模板
            _last:"",    //无效末页的模板
            more:"",        //下5页的模板
            _more:"",    //无效下5页的模板
            goto:"",            //普通页码列表的模板
            current:"",        //当前页码列表的模板
            hide:""        //省略区域的模板
        };
        //从模板中取出所有的子模板
        for(var i in pt){
            var r = (new RegExp("{#"+i+"#}(.*){#"+i+"/#}","ig")).exec(template);
            pt[i] = (r)?RegExp.$1:"";
        }
        
        
                
        if( document.getElementById("page_head") )
        {
            var pageHeadHtml='<span class="num"><b> '+currentPage+ '</b>/ '+pageCount+'</span>';
            if( currentPage>1 ){
                pageHeadHtml += '<a pageTag="go" class="btn" href="#nolink" pageid="'+(currentPage-1)+'"';
				if (option.wgtagId_Previous !='') {
					pageHeadHtml += 'wgtag="'+option.wgtagId_Previous+'"';
				}
				pageHeadHtml +='>&lt;</a>';
			}
            else{
                pageHeadHtml +='<a class="btn btn_disabled" href="#nolink">&lt;</a>';
			}
            if( currentPage<pageCount ){
                pageHeadHtml += '<a pageTag="go" class="btn" href="#nolink" pageid="'+(currentPage+1)+'"';
				if (option.wgtagId_next !='') {
					pageHeadHtml += 'wgtag="'+option.wgtagId_next+'"';
				}
				pageHeadHtml += '>下一页</a> ';
			}
            else{
                pageHeadHtml +='<a class="btn btn_disabled" href="#nolink">下一页</a> ';
			}
                
            document.getElementById("page_head").innerHTML=    pageHeadHtml;
        }//if
        //下一页的代码生成
        pt.nextPageHtml=(currentPage<pageCount)?(pt.next.replace(/{#pageId#}/g,(currentPage+1))):(pt._next);
        //上一页的代码生成
        pt.previousPageHtml=(currentPage>1)?(pt.previou.replace(/{#pageId#}/g,(currentPage-1))):(pt._previou);
        //首页的代码生成
        pt.firstPageHtml=(currentPage>1)?(pt.first.replace(/{#pageId#}/g,1)):(pt._first);
        //末页的代码生成
        pt.lastPageHtml=(currentPage<pageCount)?(pt.last.replace(/{#pageId#}/g,pageCount)):(pt._last);
        //下5页的代码生成
        pt.morePageHtml=(option.more)?(pt.more.replace(/{#pageId#}/g,(pageCount+1))):(pt._more);
        //页码列表
        pt.pagelistHtml="";
        //短页面列表
        pt.shortPageListHtml="";
        //mini列表
        pt.miniPageListHtml="<span>"+currentPage+"/"+pageCount+"</span>"
        //标准页码输出
        //10页之内直接输出所有页码
        if(pageCount<=10){
            for(var i=1;i<=pageCount;i++){
                pt.pagelistHtml+=(i==currentPage)?(pt.current.replace(/{#pageId#}/g,i)):(pt.goto.replace(/{#pageId#}/g,i));
            }
        }else{
            var prePage=currentPage-3;    //连续页码的起点
            var frePage=currentPage+3;    //连续页码的终点
            prePage=(prePage<=3)?1:prePage;
            frePage=(frePage>pageCount-3)?pageCount:frePage;
            //特殊情况处理，前6页的时候，就多显示一些页码
            if(currentPage<=6){
                frePage=8
            }
            //判断是否需要输出第一页及省略号,当前页跟第一页相差6页就输出
            pt.pagelistHtml+=(currentPage>6)?(pt.goto.replace(/{#pageId#}/g,1)+pt.hide):"";
            for(i=prePage;i<=frePage;i++){
                pt.pagelistHtml += (i==currentPage)?(pt.current.replace(/{#pageId#}/g,i)):(pt.goto.replace(/{#pageId#}/g,i));
            }
            //判断是否需要输出省略号及最后一页，当前页跟最后一页相差6页就输出
            pt.pagelistHtml += (currentPage<=pageCount-6)?(pt.hide + pt.goto.replace(/{#pageId#}/g,pageCount)):"";
        }
        //简短页码输出
        if(pageCount<=8){
            for(var i=1;i<=pageCount;i++){
                pt.shortPageListHtml+=(i==currentPage)?(pt.current.replace(/{#pageId#}/g,i)):(pt.goto.replace(/{#pageId#}/g,i));
            }
        }else{
            var prePage=currentPage-2;    //连续页码的起点
            var frePage=currentPage+2;    //连续页码的终点
            prePage=(prePage<=2)?1:prePage;
            frePage=(frePage>pageCount-2)?pageCount:frePage;
            //特殊情况处理，前4页的时候，就多显示一些页码
            if(currentPage<=4){
                frePage=6;
            }
            //判断是否需要输出第一页及省略号,当前页跟第一页相差6页就输出
            pt.shortPageListHtml+=(currentPage>4)?(pt.goto.replace(/{#pageId#}/g,1)+pt.hide):"";
            for(i=prePage;i<=frePage;i++){
                pt.shortPageListHtml += (i==currentPage)?(pt.current.replace(/{#pageId#}/g,i)):(pt.goto.replace(/{#pageId#}/g,i));
            }
            //判断是否需要输出省略号及最后一页，当前页跟最后一页相差6页就输出
            pt.shortPageListHtml += (currentPage<=pageCount-4)?(pt.hide + pt.goto.replace(/{#pageId#}/g,pageCount)):"";
        }
        //显示更多模式的情况下，直接列出所有列表
        if(option.more){
            //标准页码输出
            pt.pagelistHtml="";
            for(var i=1;i<=pageCount;i++){
                pt.pagelistHtml+=(i==currentPage)?(pt.current.replace(/{#pageId#}/g,i)):(pt.goto.replace(/{#pageId#}/g,i));
            }
            //简短页码输出
            pt.shortPageListHtml=pt.pagelistHtml;
        }
        
        var selectHtml='';
        
        for(var i=1;i<=pageCount;i++)
        {
            if( i == currentPage )
                selectHtml +=('<option pageId="' +i+'" pagetag="go" selected="selected" >'+i+'</option>');
            else
                selectHtml +=('<option pageId="' +i+'" pagetag="go" >'+i+'</option>');
        }//for
        //清除模板区代码、当前页码、总页码数、记录总条数、首页、上一页、下一页、末页、页码列表、下5页标记
        template=templateList[option.type][2].
        
                 replace(/{#itemCount#}/g,itemCount).
                 replace(/{#currentPageId#}/g,currentPage).
                 replace(/{#pageCountNum#}/g,pageCount).
                 replace(/{#itemCountNum#}/g,itemCount).
                 replace(/{#firstPage#}/g,pt.firstPageHtml).
                 replace(/{#previousPage#}/g,pt.previousPageHtml).
                 replace(/{#nextPage#}/g,pt.nextPageHtml).
                 replace(/{#lastPage#}/g,pt.lastPageHtml).
                 replace(/{#pageList#}/g,pt.pagelistHtml).
                 replace(/{#shortPageList#}/g,pt.shortPageListHtml).
                 replace(/{#morePage#}/g,pt.morePageHtml).
                 replace(/{#miniPageList#}/g,pt.miniPageListHtml).
                 replace(/{#select#}/g,selectHtml);
        
        //准备工作：把所有要操作的dom对象压入列表
        var frameList=[];    //最外部的div框dom列表
        var inputList=[];    //输入页码的文本框dom列表
        var buttomList=[];    //跳转按钮的dom列表
        var linkList=[];    //页码链接的dom列表
        //option.domList是一个很不稳定的变量（非常奇怪）,一旦操作就会不断的增长，所以转存到新的变量中，顺便清理掉无效的dom
        frameList=frameList.concat(getItemFromArray(option.domList));
        function getItemFromArray(arr){
            var array=[];
            for(var k=0;k<arr.length;k++){
                if(arr[k].length>0){
                    array=array.concat(getItemFromArray(arr[k]));
                }else{
                    array.push(arr[k]);
                }
            }
            return array;
        }
        var k=frameList.length;
        for(var i=0;i<frameList.length;i++){
            try{
                //填充代码、开始处理所有的操作对象上的方法
                frameList[i].innerHTML=template.replace(/{#debugtag#}/g,i);
                //获取文本框dom列表
                var temp=frameList[i].getElementsByTagName("input");
                for(var j=0;j<temp.length;j++){
                    if(temp[j].getAttribute("pageTag")=="input"){
                        inputList.push(temp[j]);
                    }
                }
                //获取确定按钮的dom列表
                var temp=frameList[i].getElementsByTagName("button");
                for(var j=0;j<temp.length;j++){
                    if(temp[j].getAttribute("pageTag")=="jumper"){
                        buttomList.push(temp[j]);
                    }
                }
                //获取页码链接的dom列表
                var temp=frameList[i].getElementsByTagName("a");
                for(var j=0;j<temp.length;j++){
                    if(temp[j].getAttribute("pageTag")=="go"){
                        linkList.push(temp[j]);
                    }
                }
                if( document.getElementById("page_head") )
                {
                    var temp=document.getElementById("page_head").getElementsByTagName("a");
                    for(var j=0;j<temp.length;j++){
                    if(temp[j].getAttribute("pageTag")=="go"){
                        linkList.push(temp[j]);
                    }
                    }
                }//if
            }catch(e){
            }
        }
        //事件绑定
        //绑定文本框的相关blur,keydown事件
        for(var i=0;i<inputList.length;i++){
            inputList[i].onblur=function(){
                this.value=this.value.replace(/[^0-9]/g,'');
                if(this.value>pageCount || this.value<1){
                    this.value="";
                }
                for(var j=0;j<inputList.length;j++){
                    inputList[j].value=this.value;
                }
            };
            inputList[i].onfocus=function(){
                this.select();
            };
            inputList[i].onkeydown=function(e){
    var e = window.event||e;
                if(e.keyCode!=13){
                    return;
                }
                this.onblur();
                buttomList[0].onclick();
            };
        }
        //绑定确定按钮事件
        for(var i=0;i<buttomList.length;i++){
            buttomList[i].onclick=function(){
                var input=(this.parentElement||this.parentNode).getElementsByTagName("input")[0];
                var goPage=parseInt(input.value);
                input.onblur();
                if(goPage<1 || !goPage){
                    input.focus();
                    return;
                }else{
                    goto(goPage,option);
                }
            };
        }
        //绑定链接上的事件
        for(var i=0;i<linkList.length;i++){
            if(option.action=="url"){
                linkList[i].href=option.url.replace("{#pageId#}",linkList[i].getAttribute("pageId"));
            }else{
                linkList[i].onclick=function(){
                    goto(this.getAttribute("pageId"),option);
                };
            }
        }
        //跳转操作
        goto=function(pageId,opt){
            if(opt.action=="url"){
                location.href=opt.url.replace("{#pageId#}",pageId);
            }
            if(opt.action=="func"){
                return opt.func(pageId,opt);
            }
            return false;
        };
        
        //下拉select
        if ( document.getElementById('selectValue') )
        {
            var select =document.getElementById('selectValue');
            
            function change()
            {
                if( (-1 != select.selectedIndex )&& (select[select.selectedIndex]) )
                    goto(select[select.selectedIndex].getAttribute("pageid"),option);
            }
            select.onchange=change;
        }
        option.onInit();
    }
//后面两个参数可以不传，增加token参数，支持开启crsf防御的情况
function $openWin(url,name,status){
	 window.open ($addToken(url,"ow"), name||"_blank",status||"");
}
function  $ordernumberFlag(deal_id, fn) {
    if (deal_id == "") {
        return $float({ title: "温馨提示", html: "订单不能为空" });
    }
    $loadScript("http://party.paipai.com/cgi-bin/cxpl_deal_profile?deal_id=" + deal_id + "&checkmod=comm_id", "_judge_gift_");
    //回调
    window["AfterCheckDealCommId"] = function (uin, ret, errmsg) {
        var flag = 0;
        if (ret == 0) {
            var commIds = errmsg.split(",");
            var sClassIds = window.sClassIds || "3119,24590,200021,200082,200110,200024,28039,200023,200022,12001,100000003,100000002,100000001";
            var classIds = sClassIds.split(",");
            for (var i = 0; i < commIds.length; i++) {
                if (commIds[i] != "") {
                    for (var j = 0; j < classIds.length; j++) {
                        if (classIds[j] != "" && classIds[j] == commIds[i]) {
                            flag = 1;
                            break;
                        }
                    }
                    if (flag == 1) {
                        break;
                    }
                }
            }
        } else if (ret == 2) {
            //登录超时
            $loginFrame({
                model: false,
                type: "func",
                check: false,
                action: function () {
                    $float({
                        title: "温馨提示",
                        html: "登录超时，请重新再试"
                    });
                }
            });
        } else {
            return $float({ title: "温馨提示", html: errmsg });
        }
        if (typeof fn == "function") {
            fn(flag);
        }
    }
}
//原生选择器
(function(){

//事件响应器
//多选框选中事件
_multiSelected=function(e){
	var t = $getTarget(e);
	if(t && t.tagName.toLowerCase()=="input" && t.type=="checkbox"){
		var item = _cache.items[t.id.replace(/^opList_|_\d+$|_all$/g,"")];
		if(item){
			if(t.id.indexOf("_all")<0){
				item.checked(t);
			}else{
				item.checkAll(t);
			}
		}
	}
}

//单选框选中事件
_singleSelected=function(e){
	var item = _cache.items[this.id.replace(/^slt_/,"")];
	if(item){
		item.change();
	}
}


//构造器
var _selector = null;

//构造工具
var _makeSelector=function(dom){
	
	if(_selector){
		return new _selector(dom);
	}
	
	_selector=function(dom){
		this.initSelector(dom);
	}
	//初始化方法
	_selector.prototype.initSelector=function(dom){
		//是否有ID,无ID自动生成一个
		if(!dom.id){
			dom.id=_cache.autoID.gen();
		}
		this.id=dom.id;
		//原始input
		this.dom=dom;
		//可用状态
		this.disabled=false;
		//选择器的类型
		this.type = (dom.getAttribute("atag")+"")||"txt";
		//原始串
		this.optionStr = dom.getAttribute("options")+"";
		//选中值
		this.selectedValue = dom.value;
		//选中文本
		this.selectedText = [];
		//选项数组
		this.optionAr = [];
		//构造数组
		var opHtml=[],isSelected=false;
		if(this.optionStr){
			var opAr = this.optionStr.split("|");
			for(var i=0,l=opAr.length;i<l;i++){
				var opItemAr = opAr[i].split(",");
				if(opItemAr.length>=3){					
					//顺便找到选中文本值
					isSelected=false;
					if((","+this.selectedValue+",").indexOf(","+opItemAr[0]+",") >-1){
						//放入选中文本中
						this.selectedText.push(opItemAr[1]);
						isSelected = true;
					}
					opHtml[opHtml.length] = "<label for='"+("opList_"+this.id+"_"+opItemAr[0])+"'><input type='checkbox' id='"+("opList_"+this.id+"_"+opItemAr[0])+"' text='"+opItemAr[1]+"' value='"+opItemAr[0]+"' "+(isSelected?"checked='checked'":"")+"/>"+opItemAr[1]+"</label>";
					this.optionAr.push({"value":opItemAr[0],"name":opItemAr[1],"shortname":(opItemAr[2]||"")});
				}
			}
		}

		//找到选中文本值
		this.selectedText = this.selectedText.join("||");
		//回传给原始dom
		this.dom.setAttribute("text",this.selectedText);
		
		//根据选择器的类型，做不同处理
		//单选择器和多选择器做处理
		if(this.type=="select"){
		    //默认值
	        this.selectedText= this.selectedText||"未选择";
	        this.optionAr.unshift({"value":"","name":"未选择","shortname":""});
	        //选择器ID
	        this.showid = "slt_"+this.id;
			
	        if($id(this.showid)){
				this.showDom = $id(this.showid);
			}else{
				var showDom = document.createElement("select");
				showDom.id = this.showid;
				//插入到DOM后面
				this.dom.parentNode.insertBefore(showDom,this.dom.nextSibling);
				this.showDom = showDom;
				this.showDom.onchange=_singleSelected;
			}
			//加入选项
			this.showDom.length=0;
			for(var i=0,l=this.optionAr.length;i<l;i++){
				var o = new Option(this.optionAr[i].name,this.optionAr[i].value);
				if(this.selectedValue==this.optionAr[i].value){
					o.selected=true;
				}
				this.showDom.options[i] = o;
			}
		    
	    }else if(this.type=="checkbox"){
	        //增加全选框
	        if(opHtml.length>2){
	            opHtml.push("<label for='opList_"+this.id+"_all'><input type='checkbox' id='opList_"+this.id+"_all' text='' value='' /><b>全选</b></label>");
	        }
	        //选项框Id
	        this.showid = "opList_"+this.id;
			if($id(this.showid)){
				this.opDom = $id(this.showid);
			}else{
				var opDom = document.createElement("span");
	        	opDom.id = this.showid;
				this.dom.parentNode.insertBefore(opDom,this.dom.nextSibling);
				this.opDom = opDom;
				this.opDom.onclick = _multiSelected;
			}
	        this.opDom.innerHTML = $xss(opHtml.join(""),"none");
	    }
	}
	
	_selector.prototype.change=function(){
		if(!this.showDom)return;
		var value = this.showDom.value;
		var text = this.showDom.options[this.showDom.selectedIndex].innerHTML;
		if(this.dom.value !=value){
			//赋值固化
            this.selectedValue = value;
            this.dom.value=value;
            //赋文本值
            this.selectedText = text;
            this.dom.setAttribute("text",text);
            //触发onchange
            $fireEvent(this.dom,"change");
		}
	}
	
	//更新选择器
	_selector.prototype.update=function(dom){
		this.dom=dom;
		//值改变
		if(this.selectedValue !=dom.value){
			if(this.type=="select"){
				this.showDom.value = "";
				this.showDom.value = dom.value;
				var text = this.showDom.options[this.selectedIndex].innerHTML;
				this.selectedText = text;
				this.dom.setAttribute("text",this.selectedText);
				
				
			}else if(this.type=="checkbox"){
				var text=[];
				var opAr = this.opDom.getElementsByTagName("input");
				for(var i=0,l=opAr.length;i<l;i++){
					if(opAr[i].type=="checkbox"){
						//选项有值且为选中值
						if((","+dom.value+",").indexOf(","+opAr[i].value+",") >-1 && opAr[i].value){
							opAr[i].checked=true;
							text.push(opAr[i].getAttribute("text")||"");
						}else{
							opAr[i].checked=false;
						}
					}
				}
				this.selectedText = text.join("||");
				this.dom.setAttribute("text",this.selectedText);
			}
			
		}
		
		//可改性改变或者是不可改，但是值发生了改变
		if(this.disabled != dom.readonly || (this.disabled && dom.getAttribute("range"))){
			if(this.type=="select"){
				this.showDom.disabled = dom.readonly;
			}else if(this.type=="checkbox"){
				var opAr = this.opDom.getElementsByTagName("input");
				for(var i=0,l=opAr.length;i<l;i++){
					if(opAr[i].type=="checkbox"){
						if(opAr[i].checked){
							opAr[i].disabled=false;
						}else{
							if(dom.readonly){
								var range = dom.getAttribute("range") || "";
								if( opAr[i].value && (","+range+",").indexOf(","+opAr[i].value+",") >-1){
									opAr[i].disabled=false;
								}else{
									opAr[i].disabled=true;
								}
							}else{
								opAr[i].disabled=dom.readonly;
							}
						}
					}
				}
			}
		}
		this.disabled = dom.readonly;
		this.selectedValue = dom.value;
	}

    //checkbox值变化
    _selector.prototype.checked=function(tDom){
        if(!this.opDom)return;
        var valAr=[],txtAr=[];
        var opAr = this.opDom.getElementsByTagName("input");
        for(var i=0,l=opAr.length;i<l;i++){
            if(opAr[i].type=="checkbox" && opAr[i].checked && opAr[i].value){
                valAr.push(opAr[i].value);
                txtAr.push((opAr[i].getAttribute("text")+"")||"");
            }
        }
        valAr = valAr.join(",");
        txtAr = txtAr.join("||");
        if(this.dom.value != valAr){
            this.selectedValue = valAr;
            this.selectedText = txtAr;
            this.dom.value = valAr;
            this.dom.setAttribute("text",txtAr);
			//记录触发对象
			this.dom.setAttribute("targetid",tDom.id);
            //触发
            $fireEvent(this.dom,"change");
        }
    }
    
    //全选或者全不选
    _selector.prototype.checkAll=function(tDom){
        if(!this.opDom)return;
        var valAr=[],txtAr=[];
        var opAr = this.opDom.getElementsByTagName("input");
        for(var i=0,l=opAr.length;i<l;i++){
            //其他不选
            if(opAr[i].type=="checkbox"){
                if(opAr[i].getAttribute("text").indexOf("其他")<0){
                    opAr[i].checked=tDom.checked;
                }
                
                if(opAr[i].checked && opAr[i].value){
                    valAr.push(opAr[i].value);
                    txtAr.push((opAr[i].getAttribute("text")+"")||"");
                }
            }
        }
        valAr = valAr.join(",");
        txtAr = txtAr.join("||");
        if(this.dom.value != valAr){
            this.selectedValue = valAr;
            this.selectedText = txtAr;
            this.dom.value = valAr;
            this.dom.setAttribute("text",txtAr);
			//记录触发对象
			this.dom.setAttribute("targetid",tDom.id);
            //触发
            $fireEvent(this.dom,"change");
        }
    }
	
	return new _selector(dom);
	
}

//缓存
var _cache={
	//生成默认ID相关
	autoID:{
		prefix:"originalSelector_",
		count:0,
		//自动生成ID
		gen:function(){
			return this.prefix+(++this.count);
		}
	},
	//伪选择器数据
	items:{}
}

/*
dom:要初始化为选择项的input或者包括input的dom元素
flush:无视缓存强制更新
*/
$originalSelector=function(dom,flush){
	var hdSelector = [];
	var inputs=[];
	//可以更新单个的input
	if(dom.tagName.toLowerCase()=="input"){
		inputs.push(dom);
	}else{
		inputs=dom.getElementsByTagName("input");
	}
	
	for(var i=0,l=inputs.length;i<l;i++){
		if(inputs[i].type=="hidden" && (inputs[i].getAttribute("atag")+"")){
			hdSelector.push(inputs[i]);
		}
	}
	
	for(var i=0,l=hdSelector.length;i<l;i++){
		var slt =hdSelector[i];
		//没ID 不在缓存中 或者用于展示的dom已经被删除了
		if(flush || !slt.id || !_cache.items[slt.id] || !$id(_cache.items[slt.id].showid)){
			//不在缓存中加入缓存中
			var item = _makeSelector(slt);
			_cache.items[item.id]=item;
		}else{
			//更新缓存中的数据
			_cache.items[slt.id].update(slt);
		}
	}
}

})()
function $page(opt) {
    var option = {
        keyId: Math.random(),
        //当前对象的唯一标记码
        pageCount: 0,
        //总页码
        currentPage: 0,
        //当前页码
        itemCount: 0,
        //总记录条数
        more: false,
        //是否有下五页存在
        domList: [],
        //内容输出区域的id列表，jquery语法
        type: "full",
        //控制条样式
        action: "url",
        //点击分页的操作类型：url、func
        url: "http://www.paipai.com/?pid={#pageId#}",
        //链接地址格式模板，当action=url时才有效，页码标签{#pageId#}
        func: function (pageId, opt) {
            return true;
        },
        //点击链接时的处理函数，参数为页码id和对象本身，当action=func时有效
        onInit: function (pageId, opt) {
            return true;
        } //初始化完成后的回调函数，
    };
    for (var i in opt) {
        option[i] = opt[i];
    }
    //标准风格
    var standStyle = ['', '{#goTo#}<a href="#nolink" pageTag="go" pageId="{#pageId#}" >{#pageId#}</a>{#goTo/#}	{#current#}<span class="page-this">{#pageId#}</span>{#current/#}{#hide#}<span class="page-break">...</span>{#hide/#}{#next#}<a href="#nolink" class="page-next" pageTag="go" pageId="{#pageId#}"  >下一页</a>{#next/#}{#_next#}<span class="page-end">下一页</span>{#_next/#}{#previou#}<a href="#nolink" pageTag="go" pageId="{#pageId#}" class="page-prev">上一页</a>{#previou/#}{#_previou#}<span class="page-start">上一页</span>{#_previou/#}{#first#}{#first/#}{#_first#}{#_first/#}{#last#}{#last/#}{#_last#}{#_last/#}{#more#}<span class="page-break">...</span>{#more/#}{#_more#}{#_more/#}'];
    var templateList = {
        full: [standStyle[0], standStyle[1], '<div class="paginator">{#previousPage#}{#pageList#}{#morePage#}{#nextPage#}<span class="page-skip"> 到第<input type="text" name="inputItem" pageTag="input" value="{#currentPageId#}"  maxlength="{#maxlength#}" {#debugtag#} />页<button pageTag="jumper" value="go">确定</button></span></div>'],
        simple: [standStyle[0], standStyle[1], '<div class="paginator">{#previousPage#}{#pageList#}{#morePage#}{#nextPage#}</div>'],
        shortSimple: [standStyle[0], standStyle[1], '<div class="paginator">{#previousPage#}{#shortPageList#}{#morePage#}{#nextPage#}</div>'],
        miniSimple: [standStyle[0], standStyle[1], '<div class="paginator">{#previousPage#}{#miniPageList#}{#nextPage#}</div>']
    };

    var template = templateList[option.type][0] + templateList[option.type][1] + templateList[option.type][2];
    var pageCount = parseInt(option.pageCount);
    var currentPage = parseInt(option.currentPage);
    var itemCount = parseInt(option.itemCount);
    //错误参数情况处理
    currentPage = (currentPage > pageCount) ? pageCount : currentPage;
    //模板组
    var pt = {
        next: "",
        //下一页的模板
        _next: "",
        //无效下一页的模板
        previou: "",
        //上一页的模板
        _previou: "",
        //无效上一页的模板
        first: "",
        //首页的模板
        _first: "",
        //无效首页的模板
        last: "",
        //末页的模板
        _last: "",
        //无效末页的模板
        more: "",
        //下5页的模板
        _more: "",
        //无效下5页的模板
        goTo: "",
        //普通页码列表的模板
        current: "",
        //当前页码列表的模板
        hide: "" //省略区域的模板
    };
    //从模板中取出所有的子模板
    for (var i in pt) {
        var r = (new RegExp("{#" + i + "#}(.*){#" + i + "/#}", "ig")).exec(template);
        pt[i] = (r) ? RegExp.$1 : "";
    }
    //下一页的代码生成
    pt.nextPageHtml = (currentPage < pageCount) ? (pt.next.replace(/{#pageId#}/g, (currentPage + 1))) : (pt._next);
    //上一页的代码生成
    pt.previousPageHtml = (currentPage > 1) ? (pt.previou.replace(/{#pageId#}/g, (currentPage - 1))) : (pt._previou);
    //首页的代码生成
    pt.firstPageHtml = (currentPage > 1) ? (pt.first.replace(/{#pageId#}/g, 1)) : (pt._first);

    //末页的代码生成
    pt.lastPageHtml = (currentPage < pageCount) ? (pt.last.replace(/{#pageId#}/g, pageCount)) : (pt._last);
    //下5页的代码生成
    pt.morePageHtml = (option.more) ? (pt.more.replace(/{#pageId#}/g, (pageCount + 1))) : (pt._more);
    //页码列表
    pt.pagelistHtml = "";
    //短页面列表
    pt.shortPageListHtml = "";
    //mini列表
    pt.miniPageListHtml = "<span>" + currentPage + "/" + pageCount + "</span>"
    //标准页码输出
    //10页之内直接输出所有页码
    if (pageCount <= 10) {
        for (var i = 1; i <= pageCount; i++) {
            pt.pagelistHtml += (i == currentPage) ? (pt.current.replace(/{#pageId#}/g, i)) : (pt.goTo.replace(/{#pageId#}/g, i));
        }
    } else {
        var prePage = currentPage - 3; //连续页码的起点
        var frePage = currentPage + 3; //连续页码的终点
        prePage = (prePage <= 3) ? 1 : prePage;
        frePage = (frePage > pageCount - 3) ? pageCount : frePage;
        //特殊情况处理，前6页的时候，就多显示一些页码
        if (currentPage <= 6) {
            frePage = 8
        }
        //判断是否需要输出第一页及省略号,当前页跟第一页相差6页就输出
        pt.pagelistHtml += (currentPage > 6) ? (pt.goTo.replace(/{#pageId#}/g, 1) + pt.hide) : "";
        for (i = prePage; i <= frePage; i++) {
            pt.pagelistHtml += (i == currentPage) ? (pt.current.replace(/{#pageId#}/g, i)) : (pt.goTo.replace(/{#pageId#}/g, i));
        }
        //判断是否需要输出省略号及最后一页，当前页跟最后一页相差6页就输出
        pt.pagelistHtml += (currentPage <= pageCount - 6) ? (pt.hide + pt.goTo.replace(/{#pageId#}/g, pageCount)) : "";
    }
    //简短页码输出
    if (pageCount <= 8) {
        for (var i = 1; i <= pageCount; i++) {
            pt.shortPageListHtml += (i == currentPage) ? (pt.current.replace(/{#pageId#}/g, i)) : (pt.goTo.replace(/{#pageId#}/g, i));
        }
    } else {
        var prePage = currentPage - 2; //连续页码的起点
        var frePage = currentPage + 2; //连续页码的终点
        prePage = (prePage <= 2) ? 1 : prePage;
        frePage = (frePage > pageCount - 2) ? pageCount : frePage;
        //特殊情况处理，前4页的时候，就多显示一些页码
        if (currentPage <= 4) {
            frePage = 6;
        }
        //判断是否需要输出第一页及省略号,当前页跟第一页相差6页就输出
        pt.shortPageListHtml += (currentPage > 4) ? (pt.goTo.replace(/{#pageId#}/g, 1) + pt.hide) : "";
        for (i = prePage; i <= frePage; i++) {
            pt.shortPageListHtml += (i == currentPage) ? (pt.current.replace(/{#pageId#}/g, i)) : (pt.goTo.replace(/{#pageId#}/g, i));
        }
        //判断是否需要输出省略号及最后一页，当前页跟最后一页相差6页就输出
        pt.shortPageListHtml += (currentPage <= pageCount - 4) ? (pt.hide + pt.goTo.replace(/{#pageId#}/g, pageCount)) : "";
    }
    //显示更多模式的情况下，直接列出所有列表
    if (option.more) {
        //标准页码输出
        pt.pagelistHtml = "";
        for (var i = 1; i <= pageCount; i++) {
            pt.pagelistHtml += (i == currentPage) ? (pt.current.replace(/{#pageId#}/g, i)) : (pt.goTo.replace(/{#pageId#}/g, i));
        }
        //简短页码输出
        pt.shortPageListHtml = pt.pagelistHtml;
    }

    //清除模板区代码、当前页码、总页码数、记录总条数、首页、上一页、下一页、末页、页码列表、下5页标记
    template = templateList[option.type][2].replace(/{#currentPageId#}/g, currentPage).replace(/{#pageCountNum#}/g, pageCount).replace(/{#itemCountNum#}/g, itemCount).replace(/{#firstPage#}/g, pt.firstPageHtml).replace(/{#previousPage#}/g, pt.previousPageHtml).replace(/{#nextPage#}/g, pt.nextPageHtml).replace(/{#lastPage#}/g, pt.lastPageHtml).replace(/{#pageList#}/g, pt.pagelistHtml).replace(/{#shortPageList#}/g, pt.shortPageListHtml).replace(/{#morePage#}/g, pt.morePageHtml).replace(/{#miniPageList#}/g, pt.miniPageListHtml).replace(/{#maxlength#}/g, pageCount.toString().length);

    //准备工作：把所有要操作的dom对象压入列表
    var frameList = []; //最外部的div框dom列表
    var inputList = []; //输入页码的文本框dom列表
    var buttomList = []; //跳转按钮的dom列表
    var linkList = []; //页码链接的dom列表
    //option.domList是一个很不稳定的变量（非常奇怪）,一旦操作就会不断的增长，所以转存到新的变量中，顺便清理掉无效的dom
    frameList = frameList.concat(getItemFromArray(option.domList));

    function getItemFromArray(arr) {
        var array = [];
        for (var k = 0; k < arr.length; k++) {
            if (arr[k].length > 0) {
                array = array.concat(getItemFromArray(arr[k]));
            } else {
                array.push(arr[k]);
            }
        }
        return array;
    }
    var k = frameList.length;
    for (var i = 0; i < frameList.length; i++) {
        try {
            //填充代码、开始处理所有的操作对象上的方法
            frameList[i].innerHTML = template.replace(/{#debugtag#}/g, i);
            //获取文本框dom列表
            var temp = frameList[i].getElementsByTagName("input");
            for (var j = 0; j < temp.length; j++) {
                if (temp[j].getAttribute("pageTag") == "input") {
                    inputList.push(temp[j]);
                }
            }
            //获取确定按钮的dom列表
            var temp = frameList[i].getElementsByTagName("button");
            for (var j = 0; j < temp.length; j++) {
                if (temp[j].getAttribute("pageTag") == "jumper") {
                    buttomList.push(temp[j]);
                }
            }
            //获取页码链接的dom列表
            var temp = frameList[i].getElementsByTagName("a");
            for (var j = 0; j < temp.length; j++) {
                if (temp[j].getAttribute("pageTag") == "go") {
                    linkList.push(temp[j]);
                }
            }
        } catch (e) {}
    }
    //事件绑定
    //绑定文本框的相关blur,keydown事件
    for (var i = 0; i < inputList.length; i++) {
        inputList[i].onblur = function () {
            this.value = this.value.replace(/[^0-9]/g, '');
            if (this.value > pageCount || this.value < 1) {
                this.value = "";
            }
            for (var j = 0; j < inputList.length; j++) {
                inputList[j].value = this.value;
            }
        };
        inputList[i].onfocus = function () {
            this.select();
        };
        inputList[i].onkeydown = function (e) {
            var e = window.event || e;
            if (e.keyCode != 13) {
                return true;
            }else{
				this.onblur();
				buttomList[0].onclick();
				return false;
			}
        };
    }
    //绑定确定按钮事件
    for (var i = 0; i < buttomList.length; i++) {
        buttomList[i].onclick = function () {
            var input = (this.parentElement || this.parentNode).getElementsByTagName("input")[0];
            var goPage = parseInt(input.value, 10);
            input.onblur();
            if (goPage < 1 || !goPage) {
                input.focus();
                return;
            } else {
                goTo(goPage, option);
            }
        };
    }
    //绑定链接上的事件
    for (var i = 0; i < linkList.length; i++) {
        if (option.action == "url") {
            linkList[i].href = option.url.replace("{#pageId#}", linkList[i].getAttribute("pageId"));
        } else {
            linkList[i].onclick = function () {
                goTo(this.getAttribute("pageId"), option);
            };
        }
    }
    //跳转操作
    goTo = function (pageId, opt) {
        if (opt.action == "url") {
            location.href = opt.url.replace("{#pageId#}", pageId);
        }
        if (opt.action == "func") {
            return opt.func(pageId, opt);
        }
        return false;
    };
    option.onInit();
}
function $parseCommodityId(comdyid) {
	// 解析商品ID
	var isSpu = comdyid.substring(0,1);
	if (isSpu) {
		var snapid = parseInt(comdyid.substring(1, 4), 16);
		var cateid = parseInt(comdyid.substring(4, 12), 16);
		var spuid = parseInt(comdyid.substring(12, 20), 16);
		var skuid = parseInt(comdyid.substring(20), 16);
		return {
			spuid: spuid,
			skuid: skuid,
			cateid: cateid,
			snapid: snapid
		};
	} else {
		var skuid = parseInt(comdyid.substring(1, 4), 16);
		var subacc = parseInt(comdyid.substring(4, 20), 16);
		var skuid = parseInt(comdyid.substring(20), 16);
		return {
			skuid: skuid,
			subacc: subacc,
			snapid: snapid
		};
	};
}
function $picListShower(opt){
	var option={
		smallShowLength:5,	//小图展示数量
		bigPicArrayIndex:1,		//示意图地址在数组中的index
		smallPicArrayIndex:2,	//小图地址在数组中的index
		floatViewArrayIndex:0,	//浮出图地址在数组中的index
		picViewTemp:'<img title="点击看大图" alt="点击看大图" src="{#url#}" width="300" height="300" id="{#picViewId#}" style="cursor:pointer" />',							//示意图模版
		smallPicTemp:'<li id="{#id#}" {#style#}><img title="点击切换示意图" alt="点击切换示意图" src="{#url#}" style="cursor:pointer;" /></li>',		//小图模板
		floatPicTemp:'<table id="{#floatViewId#}" width="100%" height="500" border="0" cellpadding="0" cellspacing="0"><tr><td width="60" align="center" valign="top"><br /><br /><a href="javascript:;" id="{#previewLastId#}" style="display:none">&lt;&lt;上一张</a></td>  <td align="center" valign="middle"><img src="{#url#}" alt="点击图片可关闭大图" title="点击图片可关闭大图" id="{#floatViewItemId#}" width="450" height="450"/></td><td width="60" align="center" valign="top"><br /><br /><a href="javascript:;" id="{#previewNextId#}" style="display:none">下一张&gt;&gt;</a></td></tr></table>',				//浮出图片模版
		pics:[['','','']],	//图片数据
		picLength:0,		//图片数量
		picView:'',			//示意图dom
		picViewImg:'',		//示意图img对象
		bigPicView:'',		//大图浮窗
		smallView:'',		//小图ul
		smallViewIndex:0,	//小图展示起始index
		currentViewIndex:0,		//展示的index
		fix:true,				//是否在图片长度不足小图展示数量时展示空框
		initPicView:true,		//初始时是否重设示意图，如果html上已经设置则应为false
		smallViewDom:[],	//小图的dom	
		changePics:function(i){},		//换图
		showBigPic:function(i){},		//展示大图
		next:function(){},				//下一张
		prev:function(){},				//上一张
		goHead:function(o){},			//查看的是第一张时调用
		goLast:function(o){},			//查看的是最后一张时调用
		changing:function(o){}			//转换图片后调用
	}
	for(var i in opt){
		option[i]=opt[i];
	}
	option.changePics=changePics;
	option.showBigPic=showBigPic;
	option.next=showNext;
	option.prev=showPrev;
	//图片长度
	option.picLength=option.pics.length;
	//放置示意图
	if(option.picView){
		if(option.initPicView)option.picView.innerHTML=option.picViewTemp.replace(/{#url#}/g,option.pics[0][option.bigPicArrayIndex]).replace(/{#picViewId#}/g,'_picsViewShow');
		//获得img
		var imgList=option.picView.getElementsByTagName('img');
		option.picViewImg=imgList.length>0?imgList[0]:null;
		//展示
		option.picView.onclick=showBigPic;
	}
	//放置小图
	var smallHtml=[];
	for(var i=0;i<option.picLength;i++){
		smallHtml.push(option.smallPicTemp.replace(/{#id#}/g,'_picSmall'+i).replace(/{#style#}/g,i>=option.smallShowLength?'style="display:none;"':'').replace(/{#url#}/g,option.pics[i][option.smallPicArrayIndex]));
	}
	if(option.fix){
		for(var i=option.picLength;i<option.smallShowLength;i++){
			smallHtml.push('<li id="_picSmall'+i+'"></li>');
		}
	}
	if(option.smallView){
		option.smallView.innerHTML=smallHtml.join('');
	}
	//缓存小图对象
	option.smallViewDom=[];
	for(var i=0;i<option.picLength;i++){
		var smallTarget=document.getElementById('_picSmall'+i);
		if(smallTarget){
			option.smallViewDom.push(smallTarget);
			smallTarget.onclick=(function(pi){return function(){changePics(pi)} })(i);
		}
	}
	if(option.picLength>0){
		changePics(0);
	}
	return option;
	function changePics(index){
		//更新小图展示index
		if(option.smallViewIndex+option.smallShowLength<=index){
			option.smallViewIndex=index-option.smallShowLength+1;
		}
		if(option.smallViewIndex>index){
			option.smallViewIndex=option.smallViewIndex-option.smallShowLength+1;
		}
		option.currentViewIndex=index;
		//处理小图的展示
		for(var i=0;i<option.smallViewDom.length;i++){
			//去掉current
			option.smallViewDom[i].className=option.smallViewDom[i].className.replace(/current /ig,'').replace(/ current/ig,'').replace(/current/ig,'');
			if(i>=option.smallViewIndex&&i<option.smallViewIndex+option.smallShowLength){
				//可视范围内
				option.smallViewDom[i].style.display='';
				//当前展示的小图
				if(i==index){
					option.smallViewDom[i].className+=' current';
					//改变示意图
					if(option.picViewImg&&option.picViewImg.src!=option.pics[i][option.bigPicArrayIndex]){
						option.picViewImg.src=option.pics[i][option.bigPicArrayIndex];
					}
				}
			}else{
				//不在可视序号内
				option.smallViewDom[i].style.display='none';
			}
		}
		if(option.changing)option.changing(option);
		if(index==0&&option.goHead)option.goHead(option);
		if(index==option.picLength-1&&option.goLast)option.goLast(option);
	}
	function showNext(){
		if(option.currentViewIndex<(option.picLength-1)){
			option.currentViewIndex+=1;
			changePics(option.currentViewIndex);
		}
	}
	function showPrev(){
		if(option.currentViewIndex>0){
			option.currentViewIndex-=1;
			changePics(option.currentViewIndex);
		}
	}
	function showBigPic(index){
		var viewHtml=option.floatPicTemp.replace(/{#previewLastId#}/g,'_previewLast').replace(/{#previewNextId#}/g,'_previewNext').replace(/{#floatViewId#}/g,'_viewPics').replace(/{#floatViewItemId#}/g,'_previewPicsItem').replace(/{#url#}/g,option.pics[option.currentViewIndex][option.floatViewArrayIndex]);
		var pl=option.picLength;
		var width=pl>1?650:550;
		var opt={
			width:width,
			height:550,
			title:'查看大图',
			html:viewHtml,
			cover:true,
			onClose:function(){			
				changePics(option.currentViewIndex);
				return true;
			}
		};
		option.bigPicView=$float(opt);
		var oImg=document.getElementById('_previewPicsItem');
		oImg.onclick=function(){		
			option.bigPicView.close();
		};
		if(pl>1){
			var oLast=document.getElementById('_previewLast');
			var oNext=document.getElementById('_previewNext');
			oLast.style.display="block";
			oNext.style.display="block";
			if(option.currentViewIndex==0){			
				oLast.style.color='#ccc';
			}else if(option.currentViewIndex==(pl-1)){			
				oNext.style.color='#ccc';
			};
			oLast.onclick=function(){
				if(option.currentViewIndex>0){
					var last=option.currentViewIndex-1;
					oImg.src=option.pics[last][option.floatViewArrayIndex];
					option.currentViewIndex=last;
					oNext.style.color='#2266bb';
					if(last==0){
						oLast.style.color='#ccc';
					};
				};
				return false;
			};
			oNext.onclick=function(){
				if(option.currentViewIndex<(pl-1)){
					var next=option.currentViewIndex+1;	
					oImg.src=option.pics[next][option.floatViewArrayIndex];
					option.currentViewIndex=next;
					oLast.style.color='#2266bb';
					if(next==(pl-1)){
						oNext.style.color='#ccc';
					}
				};
				return false;
			}
		}
	}
}
function $postToWb(o){
	
	var opt = {
		title: encodeURIComponent(o.title),
		url: encodeURIComponent(o.url),
		appkey: encodeURI(o.appkey),//你从腾讯获得的appkey
		pic: encodeURIComponent(o.pic),//（例如：var _pic='图片url1|图片url2|图片url3....）
		site: encodeURIComponent(o.site)//你的网站地址
	};
	
	var query = [];
	for(var i in opt){
		query.push(i+"="+opt[i]);
	}
	
	var url = 'http://v.t.qq.com/share/share.php?'+query.join('&');
	window.open( url,'wb', 'width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no' );
}
function $preload(arr) {
	var length = arr.length,
		document = window.document,
	    body = document.body,
	    isIE = $isBrowser("ie"),
	    object;
	while (length--) {
		if (isIE) {
			new Image().src = arr[length];
			continue;
		}
		object = document.createElement('object');
		object.data = arr[length];
		object.style.cssText = "width:0;height:0;position:absolute;left:-9999px";
		body.appendChild(object);
	}
}
(function(){
//构造器
var _selecter = null;

var addEvent=function(obj, type, handle){
	if(window.addEventListener) {
		obj.addEventListener(type,handle,false);
	} else if(window.attachEvent) {
		obj.attachEvent("on" + type,handle);
	} else {
		obj["on" + type] = handle;
	}
};

//长度计算器
var _getDisplayLen=function(v){
	if(!v)return 0;
	var len = v.replace(/[\u00FF-\uFFFF]/g,"").length;
	return len*0.56+(v.length-len);
}
//构造工具
var _makeSelecter=function(dom){
	
	if(_selecter){
		return new _selecter(dom);
	}
	
	_selecter=function(dom){
		this.initSelecter(dom);
	}
	//初始化方法
	_selecter.prototype.initSelecter=function(dom){
		//是否有ID,无ID自动生成一个
		if(!dom.id){
			dom.id=_cache.autoID.gen();
		}
		this.id=dom.id;
		//原始input
		this.dom=dom;
		//可用状态
		this.disabled=false;
		//选择器的类型
		this.type = (dom.getAttribute("atag")+"")||"txt";
		//原始串
		this.optionStr = dom.getAttribute("options")+"";
		//选中值
		this.selectedValue = dom.value;
		//选中文本
		this.selectedText = [];
		//选项数组
		this.optionAr = [];
		//最长选项的长度
		this.maxLength = 0;
		//构造数组
		var opHtml=[],isSelected=false;
		if(this.optionStr){
			var opAr = this.optionStr.split("|");
			for(var i=0,l=opAr.length;i<l;i++){
				var opItemAr = opAr[i].split(",");
				if(opItemAr.length>=3){					
					//最大文本长度
					var len = _getDisplayLen(opItemAr[1]);
					(len>this.maxLength) && (this.maxLength=len);
					//顺便找到选中文本值
					isSelected=false;
					if((","+this.selectedValue+",").indexOf(","+opItemAr[0]+",") >-1){
						//放入选中文本中
						this.selectedText.push(opItemAr[1]);
						isSelected = true;
					}
					opHtml[opHtml.length] = "<label for='"+("opList_"+this.id+"_"+opItemAr[0])+"'><input type='checkbox' id='"+("opList_"+this.id+"_"+opItemAr[0])+"' text='"+opItemAr[1]+"' value='"+opItemAr[0]+"' "+(isSelected?"checked='checked'":"")+"/>"+opItemAr[1]+"</label>";
					this.optionAr.push({"value":opItemAr[0],"name":opItemAr[1],"shortname":(opItemAr[2]||"")});
				}
			}
		}
		//进一步确认最大长度
		if(this.optionAr.length >15){
			//有选择器
			this.maxLength = Math.ceil(Math.max(this.maxLength,11/0.9));
		}else{
			//“未选择”最少3
			this.maxLength = Math.ceil(Math.max(this.maxLength,3/0.9));
		}
		
		//找到选中文本值
		this.selectedText = this.selectedText.join("||");
		//回传给原始dom
		this.dom.setAttribute("text",this.selectedText);
		
		//根据选择器的类型，做不同处理
		//单选择器和多选择器做处理
		if(this.type=="select"){
		    //默认值
	        this.selectedText= this.selectedText||"未选择";
	        this.optionAr.unshift({"value":"","name":"未选择","shortname":""});
	        //选择器ID
	        this.showid = "slt_"+this.id;
			//选项表ID
		    this.tbid = "tbOption_"+this.id;
		    //搜索框ID
		    this.shid = "txtSearch_"+this.id;
			
	        if($id(this.showid)){
				this.showDom = $id(this.showid);
			}else{
				var showDom = document.createElement("input");
				showDom.id = this.showid;
				showDom.type = "text";
				showDom.className = "pseudo_selecter";
				
				//插入到DOM后面
				this.dom.parentNode.insertBefore(showDom,this.dom.nextSibling);
				this.showDom = showDom;
			}
			//初始化一个选择器
			
		    //设置只读
			this.showDom.readOnly=true;
            //this.showDom.setAttribute("readonly","readonly");
            //选中文本展示
            this.showDom.value = this.selectedText;
            //宽度调整
            this.showDom.style.width = (this.maxLength+2)+"em";
            this.showDom.setAttribute("autocomplete","off");
		    
	    }else if(this.type=="checkbox"){
	        //增加全选框
	        if(opHtml.length>2){
	            opHtml.push("<label for='opList_"+this.id+"_all'><input type='checkbox' id='opList_"+this.id+"_all' text='' value='' /><b>全选</b></label>");
	        }
	        //选项框Id
	        this.showid = "opList_"+this.id;
			if($id(this.showid)){
				this.opDom = $id(this.showid);
			}else{
				var opDom = document.createElement("span");
	        	opDom.id = this.showid;
				this.dom.parentNode.insertBefore(opDom,this.dom.nextSibling);
				this.opDom = opDom;
			}
	        this.opDom.innerHTML = $xss(opHtml.join(""),"none");
	    }
	}
	
	//更新选择器
	_selecter.prototype.update=function(dom){
		this.dom=dom;
		//值改变
		if(this.selectedValue !=dom.value){
			if(this.type=="select"){
				var text = "";
				for(var i=0,l=this.optionAr.length;i<l;i++){
					if(this.optionAr[i].value==dom.value){
						text = this.optionAr[i].name;
						break;
					}
				}
				this.dom.setAttribute("text",text);
				//没有找到选项
				text = text || "未选择";
				this.selectedText = text;
				this.showDom.value = text;
				
			}else if(this.type=="checkbox"){
				var text=[];
				var opAr = this.opDom.getElementsByTagName("input");
				for(var i=0,l=opAr.length;i<l;i++){
					if(opAr[i].type=="checkbox"){
						//选项有值且为选中值
						if((","+dom.value+",").indexOf(","+opAr[i].value+",") >-1 && opAr[i].value){
							opAr[i].checked=true;
							text.push(opAr[i].getAttribute("text")||"");
						}else{
							opAr[i].checked=false;
						}
					}
				}
				this.selectedText = text.join("||");
				this.dom.setAttribute("text",this.selectedText);
			}
			
		}
		
		//可改性改变或者是不可改，但是值发生了改变
		if(this.disabled != dom.readonly || (this.disabled && dom.getAttribute("range"))){
			if(this.type=="select"){
				this.showDom.disabled = dom.readonly;
			}else if(this.type=="checkbox"){
				var opAr = this.opDom.getElementsByTagName("input");
				for(var i=0,l=opAr.length;i<l;i++){
					if(opAr[i].type=="checkbox"){
						if(opAr[i].checked){
							opAr[i].disabled=false;
						}else{
							if(dom.readonly){
								var range = dom.getAttribute("range") || "";
								if( opAr[i].value && (","+range+",").indexOf(","+opAr[i].value+",") >-1){
									opAr[i].disabled=false;
								}else{
									opAr[i].disabled=true;
								}
							}else{
								opAr[i].disabled=dom.readonly;
							}
						}
					}
				}
			}
		}
		this.disabled = dom.readonly;
		this.selectedValue = dom.value;
	}
	
	//从选项中查找[{item:obj,order:num},..]
	_selecter.prototype.query=function(str){
		str = (str || "zgnwfppdaxb").toLowerCase();
		var result = [];
		var nomatch = [];
		for(var i=0,l=this.optionAr.length;i<l;i++){
			var op = this.optionAr[i];
			var index = (op.name.toLowerCase().indexOf(str)+1) || (op.shortname.toLowerCase().indexOf(str)+1);
			if(index){
				result.push({"item":op,"order":index});
			}else{
		        nomatch.push({"item":op,"order":0});
		    }
		}
		result.sort(function(a,b){
	        return a.order-b.order;
	    });
	    
		return result.concat(nomatch);
	}
    
    //非真实变化select专用方法
    _selecter.prototype.lightChange=function(text,value){
        if(!this.showDom)return;
        this.selectedText = text;
        this.selectedValue = value;
        this.showDom.value = text;
    }
    
    //真实变化select专用方法
    _selecter.prototype.change=function(text,value){
        if(!this.showDom)return;
        if(text == null){
            text = this.selectedText;
        }
        if(value ==null){
            value = this.selectedValue;
        }
        //发生变化
        if(this.dom.value != value){
            //赋值固化
            this.selectedValue = value;
            this.dom.value=value;
            //赋文本值
            this.selectedText = text;
            this.showDom.value=text;
            this.dom.setAttribute("text",text);
            //触发onchange
            $fireEvent(this.dom,"change");
        }
    }
    //checkbox值变化
    _selecter.prototype.checked=function(tDom){
        if(!this.opDom)return;
        var valAr=[],txtAr=[];
        var opAr = this.opDom.getElementsByTagName("input");
        for(var i=0,l=opAr.length;i<l;i++){
            if(opAr[i].type=="checkbox" && opAr[i].checked && opAr[i].value){
                valAr.push(opAr[i].value);
                txtAr.push((opAr[i].getAttribute("text")+"")||"");
            }
        }
        valAr = valAr.join(",");
        txtAr = txtAr.join("||");
        if(this.dom.value != valAr){
            this.selectedValue = valAr;
            this.selectedText = txtAr;
            this.dom.value = valAr;
            this.dom.setAttribute("text",txtAr);
			//记录触发对象
			this.dom.setAttribute("targetid",tDom.id);
            //触发
            $fireEvent(this.dom,"change");
        }
    }
    
    //全选或者全不选
    _selecter.prototype.checkAll=function(tDom){
        if(!this.opDom)return;
        var valAr=[],txtAr=[];
        var opAr = this.opDom.getElementsByTagName("input");
        for(var i=0,l=opAr.length;i<l;i++){
            //其他不选
            if(opAr[i].type=="checkbox"){
                if(opAr[i].getAttribute("text").indexOf("其他")<0){
                    opAr[i].checked=tDom.checked;
                }
                
                if(opAr[i].checked && opAr[i].value){
                    valAr.push(opAr[i].value);
                    txtAr.push((opAr[i].getAttribute("text")+"")||"");
                }
            }
        }
        valAr = valAr.join(",");
        txtAr = txtAr.join("||");
        if(this.dom.value != valAr){
            this.selectedValue = valAr;
            this.selectedText = txtAr;
            this.dom.value = valAr;
            this.dom.setAttribute("text",txtAr);
			//记录触发对象
			this.dom.setAttribute("targetid",tDom.id);
            //触发
            $fireEvent(this.dom,"change");
        }
    }
	
	return new _selecter(dom);
	
}


var _makeOptions = function(tb,ops){
	if(tb && ops && ops.length){
		//循环添加选项
		var html =[];
		var template="<li><span class='value'>{#value#}</span><span class='{#nameClass#}'>{#name#}</span></li>";
		for(var i=0,l=ops.length;i<l;i++){
			var op = ops[i].item;
			html[html.length] = template.replace(/{#value#}/g,op.value).replace(/{#name#}/g,op.name).replace(/{#nameClass#}/g,(ops[i].order?"result":"name"));
		}
		
		tb.innerHTML=$xss(html.join(""),"none");
	}
}

//全局缓存
var _cache={
	//生成默认ID相关
	autoID:{
		prefix:"pseudoSelecter_",
		count:0,
		//自动生成ID
		gen:function(){
			return this.prefix+(++this.count);
		}
	},
	//伪选择器数据
	items:{}
}

//事件捕捉方法
var _clickEvent=null;

//dom中的所有input 进行初始化
$pseudoSelecter=function(dom,flush){
	//初始化操作
	var hdSelecter = [];
	var inputs=[];
	//可以更新单个的input
	if(dom.tagName.toLowerCase()=="input"){
		inputs.push(dom);
	}else{
		inputs=dom.getElementsByTagName("input");
	}
	
	for(var i=0,l=inputs.length;i<l;i++){
		if(inputs[i].type=="hidden" && (inputs[i].getAttribute("atag")+"")){
			hdSelecter.push(inputs[i]);
		}
	}
	for(var i=0,l=hdSelecter.length;i<l;i++){
		var slt =hdSelecter[i];
		//没ID 不在缓存中 或者用于展示的dom已经被删除了
		if(flush || !slt.id || !_cache.items[slt.id] || !$id(_cache.items[slt.id].showid)){
			//不在缓存中加入缓存中
			var item = _makeSelecter(slt);
			_cache.items[item.id]=item;
		}else{
			//更新缓存中的数据
			_cache.items[slt.id].update(slt);
		}
	}
	
	//事件绑定只绑定一次，防止重复绑定
	if(!_clickEvent){
	    _clickEvent = function(e){
			//正在展示的选项
			var oldShow=null;
			var t = $getTarget(e);
			//进行过滤
			if(t.tagName.toLowerCase() != "input" || t.disabled)return;
			if(t.type !="text" && t.type !="checkbox")return;
			var item = _cache.items[t.id.replace(/^slt_/,"")];
			//是伪选择器
			if(item){
				//是否正在展示，防止重复事件
				if($id(item.tbid)){return;}
				var offsetL=0,offsetT=0;
				//位置兼容性处理
				if($isBrowser("ie")){
					offsetL = $getX(item.showDom);
					offsetT = $getYP(item.showDom)+20
				}else{
					offsetL = $getX(item.showDom);
					offsetT = $getYP(item.showDom)+20;
				}
				var opWin = $float({
					html:"<div class='brand_select_search'><div style='display:"+(item.optionAr.length>15?"":"none")+";' class='ipt_search'><input type='text' style='width:"+(item.maxLength-2)+"em;color:#999;' id='"+item.shid+"' value='输入名称或拼音首字母' title='输入名称或拼音首字母' maxLength='"+(item.maxLength-2)+"' /></div><div class='brand_list' style='width:"+(item.maxLength+2)+"em;overflow-y:"+(item.optionAr.length>15?"scroll":"hidden")+";overflow-x:hidden;background-color:#fff'><ul id ='"+item.tbid+"' class='pseudoOption'"+(item.optionAr.length>15?"":"style='margin-top:0px'")+"></ul></div></div>",
					left:offsetL,
					top:offsetT,
					width:0,
					style:"none",
					cover:false,
					onInit:function(){
						//构造选项
						_makeOptions($id(item.tbid),item.query(""));
						
						//搜索框焦点
						$id(item.shid).onfocus=function(){
						    if(this.value==this.title){
						        this.value="";
						        this.style.color="#000";
						    }
						}
						
						//搜索框键盘事件
						var oldValue="";
						var oldTimer=null;
						$id(item.shid).onkeyup=function(e){
						    //阻止事件冒泡
							$stopBubble(e);
							var keyCode = ~~($getKeyCode(e));
							var sDom = $getTarget(e);
						    //如果是功能按钮搜索
							if(keyCode==13 || keyCode==38 || keyCode==40){
								item.showDom.focus();
								keyboardHandle(e);
						        return false;
						    }
						    if(oldValue!=this.value){
								clearTimeout(oldTimer);
								//输入内容0.5秒后才开始查询
								oldTimer=setTimeout(function(){
									//查询时已经关掉了
									if(!$id(item.tbid)) return;
									_makeOptions($id(item.tbid),item.query(sDom.value));
									$id(item.tbid).parentNode.scrollTop="0px";
									oldShow=null;
								},500);
						    }
						}
						
						//鼠标滑过事件
						addEvent($id(item.tbid),"mouseover",function(e){
					       var t = $getTarget(e,$id(item.tbid),"li");
					       if(t && t.tagName.toLowerCase()=="li"){
					           if(t != oldShow){
					               oldShow && (oldShow.className="");
					               t.className="selected";
					               oldShow = t;
					           }
					       } 
					    });
					    
					    //双击事件 只会使用代码触发
					    addEvent($id(item.tbid),"dblclick",function(e){
					       var t = $getTarget(e,$id(item.tbid),"li");
					       if(t && t.tagName.toLowerCase()=="li"){
					           if(t != oldShow){
					               oldShow && (oldShow.className="");
					               t.className="selected";
					               oldShow = t;
					           }
					           //t.scrollIntoView(false);
					           //轻量级变化
					           item.lightChange(t.lastChild.innerHTML,t.firstChild.innerHTML);
					       } 
					    });
					    
					    return true
					},
					onClose:function(){return true}
				});
				
				//绑定关闭事件
				var closeHandle = function(e){
			        var t = $getTarget(e);
			        //搜索框和选择框点击忽略
			        if(t.id==item.showDom.id || t.id == item.shid || t.tagName.toLowerCase()=="button"){
				        return;
				    }
			        var tt = $getTarget(e,$id(item.tbid),"span");
			        if(tt && tt.tagName.toLowerCase()=="span"){
			            //实质变化
			            item.change(tt.innerHTML,tt.previousSibling.innerHTML);
			        }else{
						//有临时选中值时，这里会发生变化
						item.change();
					}
			        opWin.close();
			        $delEvent(document.body,"click",closeHandle);
			        //$delEvent(document,"keyup",keyboardHandle);
			    }
			    
			    //键盘点击事件
			    var keyboardHandle=function(e){
			        //阻止事件冒泡
					$stopBubble(e);
					//输入框键入Enter
			        var downkey = ~~($getKeyCode(e));
			        if($id(item.tbid) && (downkey==38 || downkey==40 || downkey==13)){
			            //遍历选项得到选中态的tr
			            var tr =oldShow;
			            var options = $id(item.tbid).childNodes;
			            switch(downkey){
			                case 38://up
    			                if(tr){
    			                    if(tr.previousSibling){
    			                        $fireEvent(tr.previousSibling,"dblclick");
    			                    }else{
										$fireEvent(options[options.length-1],"dblclick");
									}
    			                }else{
    			                    $fireEvent(options[options.length-1],"dblclick");
    			                }
			                    break;
			                case 40://dowm
    			                if(tr){
    			                    if(tr.nextSibling){
    			                        $fireEvent(tr.nextSibling,"dblclick");
    			                    }else{
										$fireEvent(options[0],"dblclick");
									}
    			                }else{
    			                    //无选中就选中第一条
    			                    $fireEvent(options[0],"dblclick");
    			                }
			                    break
			                case 13://enter
    			                if(tr){
    			                    item.change(tr.lastChild.innerHTML,tr.firstChild.innerHTML);
    			                    opWin.close();
			                        $delEvent(document.body,"click",closeHandle);
			                        //$delEvent(document,"keyup",keyboardHandle);
    			                }
			                    break;
			                default:break;
			            }
			        }
					return false;
			        
			    }
			    
				addEvent(document.body,"click",closeHandle);
				
				item.showDom.onkeyup=function(e){
					keyboardHandle(e);
					return false;
				}
				item.showDom.focus();
				//addEvent(document,"keyup",keyboardHandle);
			}
			else{
			    item = _cache.items[t.id.replace(/^opList_|_\d+$|_all$/g,"")];
			    //经判断是checkbox 不是全选框
			    if(item){
			       if(t.id.indexOf("_all")<0){
			            item.checked(t);
			        }else{
			            //全选框执行checkAll
			            item.checkAll(t);
			        } 
			    }			    
			}			
		}
		//点击显示下拉选项
		addEvent(dom,"click",_clickEvent);
	}
}
})()
function $qq2Commid(qq){
//qq号转十六进制的actionId
	qq = parseInt(qq);
	var id = qq.toString(16).toUpperCase();
	var num = 8-id.length;
	for (var i = 0; i<num; i++){
		id = "0"+id;
	}
	id =id.substring(4,8)+id.substring(0,4);
	id =id.substring(2,4)+id.substring(0,2)+id.substring(6,8)+id.substring(4,6);
	for (var j = 0; j<24; j++){
		id = id+"0";
	}
	return id;
}
//qqcert
(function(){

//global 证书对象的HTML
var certHTML = "<OBJECT  id='certObjForVirtual' \
				 classid='CLSID:BAEA0695-03A4-43BB-8495-C7025E1A8F42' \
				 codebase='https://www.tenpay.com/download/qqedit.cab#Version=1,0,1,1' \
				 height='0' width='0'></OBJECT>";
//global 证书对象
var certObj = null;

//财付通验证组件
$qqcert=function(option){
	//选项
	var opt = {
		tenpayId:"",
		certList:""
	}
	//继承
	for(var i in option){
		opt[i] = option[i];
	}
	
	
	//创建对象first
	if(!certObj){
		certObj = createCert();
	}
	
	//返回对象方法及值
	//状态
	opt.status = checkStatus();
	//证书编号
	opt.cn = getLocalCert();
	//签名方法
	opt.sign = cretSign;
	
	return opt;
	
	//priv创建证书OBJ
	function createCert(){
		if(document.body){
			var hdDiv = document.createElement("div");
			hdDiv.style.height="0";
			hdDiv.style.width="0";
			hdDiv.innerHTML = $xss(certHTML,"none");
			document.body.appendChild(hdDiv);
		}else{
			document.write(certHTML);
		}
		return $id("certObjForVirtual");
	}
	
	//priv检查状态
	function checkStatus(){
		if(certObj && ~~certObj.Version >=1011){
			return true;
		}
		return false;
	}
	
	//priv获取本地证书编号
	function getLocalCert(){
		//检查不通过
		if(!opt.status || !opt.tenpayId || !opt.certList){
			return "";
		}
		var cns = opt.certList.split("-");
		var tid = opt.tenpayId;
		
		for(var i=0,l=cns.length;i<l;i++){
			//转换成数字
			var cn = isNaN(cns[i])?0:parseInt(cns[i],10);
			if(cn){
				var exist = false;
				try{
					//控件方法进行判断
					exist = certObj.IsCertExist(cn+"");//正常返回1
				}catch(e){}
				
				//如果证书OK进一步判断
				if(exist){
					var res = "";
					try{
						res = certObj.CertSign(cn+"",certObj.Base64Encode("0123456789abcdef"));
					}catch(e){}
					
					if(res !=""){
						return cn;
					}
				}
			}
		}
		return "";
	}
	
	//public获取证书加密
	function cretSign(str){
		//要返回的签名
		var signStr="";
		//状态或者证书编号不OK，直接返回
		if(this.status && this.cn){
			try{
				signStr = certObj.CertSign(this.cn,certObj.Base64Encode(str));
			}catch(e){}
		}
		return signStr;
	}
}

})()
function $rbTip(){
	//展示tips广告
	var tipsShowCount=$getCookie("tipsShowCount")||0;
	tipsShowCount++;
	if(tipsShowCount > 2){
		return ;
	}
	var inpt = new Array(4);
	var oTip=$id("tipsArea");
	if($isBrowser("ie6")){
		oTip.innerHTML = '<!--[if IE 6]><iframe frameBorder="0" style="position:absolute;right:0;bottom:0;z-index:-1;filter:Alpha(Opacity=0);border:solid;width:312px;height:201px;"></iframe><![endif]-->'+oTip.innerHTML;
		oTip.style.position = "absolute";
		inpt[0] = setInterval(function(){
			var dom = document.compatMode=='BackCompat'?document.body:document.documentElement;
			oTip.style.left=Number(dom.scrollLeft)+Number(dom.clientWidth)-Number(oTip.style.width)-Number(oTip.scrollWidth)+"px";
			oTip.style.top=Number(dom.scrollTop)+Number(dom.clientHeight)-Number(oTip.style.height)-Number(oTip.scrollHeight)+"px";
		},30);
	};
	var oTip1=$id("tipsAds1"),
		oTip2=$id("tipsAds2"),
		oTip3=$id("tipsAds3"),
		oName=$id("tipsUserName"),
		counter=0;//计数器
	$id("tipsTime").innerHTML = $timeTipsStr();
	if($isLogin()){//若已经登录			
		var name = $getNick();
		oName.innerHTML = $strLenGB(name)>20?$getTextByByteLength(name,18)+"…":name;
		//设置延时1s上报
		$loadScript("http://ext.paipai.com/uinfo/colordiamondinfojs?userid="+$getUin()+"&callback=colorCallBack&t="+Math.random());	
		window.colorCallBack = function(colorData){
			oTip.style.display = "block";
			if(colorData.level > 0 && colorData.state == 1){//彩钻正常用户
				$id("tipsColorIcon").innerHTML = $getColorIcon(colorData.level,colorData.state);
				oTip1.style.display="block";
				$loadImg(oTip1);
			}else if(colorData.level > 0 && colorData.state == 0){//彩钻熄灭用户
				$id("tipsColorIcon").innerHTML = $getColorIcon(colorData.level,colorData.state);
				oTip2.style.display="block";
				$loadImg(oTip2);
			}else{//非彩钻用户
				oTip3.style.display="block";
				$loadImg(oTip3);	
			}
			setTipsRecord();//每展示一次就记录一次
			setDisapearEffect();
		}
	}else{//未登录 默认展示彩钻信息
		oTip.style.display = "block";
		oTip1.style.display="block";
		$loadImg(oTip1);
		setTipsRecord();//每展示一次就记录一次
		setDisapearEffect();
	}
	$mouseover(oTip,function(){
		if(inpt[1]){
			clearTimeout(inpt[1]);
			inpt[1] = null;	
		}
		if(inpt[2]){
			clearInterval(inpt[2]);
			inpt[2] = null;
		}
		var height = 201;
		var step = height/10;
		inpt[3] = setInterval(function(){//向上滚动
			if(counter == 0){
				clearInterval(inpt[3]);
				inpt[3] = null;
				setDisapearEffect();
				return ;
			}
			counter--;
			oTip.style.bottom = -counter*step + "px";
		},150);
	});
	$id("tipsClose").onclick=function(){
		oTip.style.display="none";
		setTipsRecord();//若关闭，也记录一次
		if(inpt[0]){
			clearInterval(inpt[0]);
			inpt[0] = null;
		}
	};
	//tips展示记录
	function setTipsRecord(){
		var now = new Date(),
		todayLastTime = new Date(now.getFullYear(),now.getMonth(),now.getDate(),23,59,59),
		minuteDiff = Math.floor((todayLastTime-now)/(1000*60)),
		tipsShowCount=$getCookie("tipsShowCount")||0,
		tipsShowCount = tipsShowCount*1+1;
		$setCookie("tipsShowCount",tipsShowCount,minuteDiff);	
	}
	//逐步消失效果
	function setDisapearEffect(){
		//10S后tips消失
		inpt[1] = setTimeout(function(){
			var height = 201;//parseInt(oTip.style.height);
			var step = height/10;
			inpt[2] = setInterval(function(){
				if(counter == 10){
					oTip.style.display = "none";
					clearInterval(inpt[2]);
					inpt[2] = null;
					clearTimeout(inpt[1]);
					inpt[1] = null;
					return ;
				}
				counter++;
				oTip.style.bottom = -counter*step+"px";
			},150);
		},6000);	
	}
}
function $regionGetIdByProvinceName(Prov){
//根据省的名字获取省的id
	var regionMap=$getRegionMap();
	for(var i in regionMap){
		if(Prov==regionMap[i][0]){
			return i;
		}
	}
	return "";
}
function $regionGetPath(rid){
//根据地址id获取地址的省市区的路径,返回对象结构:[省id，省名称，市id，市名称，地区id，地区名称，是否是一个完整有效的地址结果]
	var regionMap=$getRegionMap();
	var regionPath=["","","","","","",false];
	if(!(parseInt(rid)>=0)){
		return regionPath;
	}
	for(var i in regionMap){
		if(i.toString()==rid.toString()){
			//如果直接在省一级找到了，就直接返回路径结果
			regionPath=[i,regionMap[i][0],"","","","",true];
			return regionPath;
		}else{
			//把省的id放入数组，并从这个省开始查找所有市的匹配
			regionPath[0]=i;
			regionPath[1]=regionMap[i][0];
			//匹配当前省里面的所有市
			for(var j in regionMap[i][2] ){
				//如果匹配到了市，就返回新的路径
				if(j.toString()==rid.toString()){
					regionPath=[regionPath[0],regionPath[1],j,regionMap[i][2][j][0],"","",true];
					return regionPath;
				}else{
					//当前市写入路径，做记忆
					regionPath[2]=j;
					regionPath[3]=regionMap[i][2][j][0];
					//如果匹配不到就到这个市的地区信息里面匹配
					for(var k in regionMap[i][2][j][2]){
						//如果匹配到了地区，就返回新的路径,匹配不到就什么也不做
						if(k.toString()==rid.toString()){
							regionPath=[regionPath[0],regionPath[1],regionPath[2],regionPath[3],k,regionMap[i][2][j][2][k][0],true];
							return regionPath;
						}
					}
					//如果走到这里就表示当前市的地区都不合适，要返回上一级循环去匹配下一个市。我们清空路径中当前市的id
					regionPath[2]="";
					regionPath[3]="";
				}
			}
			//如果走到这里，但当前省里面的所有市里都找不目标地址的配置，要返回上一级循环，去匹配下一个省，我们清空路径中的当前省
			regionPath[0]="";
			regionPath[1]="";
		}
	}
	//如果走到这里，则标识从整个地址信息中都匹配不到目标地址，数据是无效的，我们直接返回空路径
	return regionPath;
}
function $regionInit(obj){
//初始化并展示省市区选择框
	var option={
		id:Math.floor(Math.random()*1000),	//随机标记
		div:"",	//显示的div区域
		regionId:"",	//地区id
		currId:["","","","","","",false,""],	//当前选中的结果[省id，省名称，市id，市名称，地区id，地区名称，是否有效结果，最低一级的id]
		onChange:function(obj){return true;}
	};
	if(!window._regionZindex){
		window._regionZindex=100;
	}else{
		window._regionZindex-=1;
	}
	var regionMap=$getRegionMap();
	for(var i in obj){
		option[i]=obj[i];
	}
	if(option.div==""){
		return;
	}else{
		document.getElementById(option.div).innerHTML='<div class="area" style="z-index:'+_regionZindex+';"><span class="province" id="provinceName_'+option.id+'" >- 选择省 -</span><div class="provincelist" id="provinceList_'+option.id+'" style="display:none;z-index:10000"><iframe class="maskiframe" marginwidth="0" marginheight="0" hspace="0" vspace="0" frameborder="0" scrolling="no"></iframe><a href="#pl">北京</a> <a href="#pl">天津</a> <a href="#pl">上海</a> <a href="#pl">重庆</a><br /><a href="#pl">广东</a> <a href="#pl">广西</a> <a href="#pl">海南</a> <a href="#pl">山东</a> <a href="#pl">江苏</a> <a href="#pl">安徽</a> <a href="#pl">浙江</a><br /><a href="#pl">福建</a> <a href="#pl">湖北</a> <a href="#pl">湖南</a> <a href="#pl">河南</a> <a href="#pl">江西</a> <a href="#pl">吉林</a> <a href="#pl">黑龙江</a><br /><a href="#pl">辽宁</a> <a href="#pl">四川</a> <a href="#pl">云南</a> <a href="#pl">贵州</a> <a href="#pl">西藏</a> <a href="#pl">陕西</a> <a href="#pl">青海</a><br /><a href="#pl">甘肃</a> <a href="#pl">宁夏</a> <a href="#pl">新疆</a> <a href="#pl">河北</a> <a href="#pl">山西</a> <a href="#pl">内蒙古</a><br /><a href="#pl">香港</a> <a href="#pl">澳门</a> <a href="#pl">台湾</a> <a href="#pl">海外</a></div><select name="cityId" id="cityId_'+option.id+'" style="width:90px;"><option style="color:#666" value="">- 选择市 -</option></select> <select name="areaId" id="areaId_'+option.id+'" style="width:90px;"><option style="color:#666" value="">- 选择区 -</option></select><input type="hidden" name="provinceId" id="provinceId_'+option.id+'" /></div>';
	}
	option.regionPath=$regionGetPath(option.regionId);
	var plist=document.getElementById("provinceList_"+option.id);
	//绑定省列表的浮出事件,并阻止点击操作的冒泡
	$addEvent(document.getElementById("provinceName_"+option.id),"click",function(event){
		try{
			plist.style.display=(plist.style.display=="none")?"":"none";
			event = (event)?event:window.event;
			event.cancelBubble=true;
		}catch(e){}
	}); 
	//鼠标在别出点击的时候关掉省列表
	$addEvent(document,"click",function(event){
		event = (event)?event:window.event;
		try{
			document.getElementById("provinceList_"+option.id).style.display="none";
		}catch(e){}
	});
	//地址选框范围内点击不冒泡
	$addEvent(document.getElementById("provinceList_"+option.id),"click",function(event){
		try{
			event = (event)?event:window.event;
			event.cancelBubble=true;
		}catch(e){}
	});
	//市列表的onchange事件
	$addEvent(document.getElementById("cityId_"+option.id),"change",function(event){
		try{
			var _this=event.srcElement||event.target;
			_this.onCityChange();
		}catch(e){}
	});
	//区列表的onchange事件
	$addEvent(document.getElementById("areaId_"+option.id),"change",function(event){
		var _this=event.srcElement||event.target;
		_this.onAreaChange();
	});
	//绑定链接的选择省的事件
	var alist=plist.getElementsByTagName("a");
	for(var i=0;i<alist.length;i++){
		$addEvent(alist[i],"click",function(event){
			var _this=event.srcElement||event.target;
			var _pname=_this.innerHTML;
			document.getElementById("provinceId_"+option.id).onProvinceChange($regionGetIdByProvinceName(_pname));
			document.getElementById("provinceList_"+option.id).style.display="none";
		});
	};
	//省id变更的事件，当省id触发的时候就开始进行市列表的填充
	document.getElementById("provinceId_"+option.id).onProvinceChange=function(pid){
		document.getElementById("provinceName_"+option.id).innerHTML=regionMap[pid][0];
		document.getElementById("provinceId_"+option.id).value=pid;
		var clist=regionMap[this.value][2];
		var cdom=document.getElementById("cityId_"+option.id);

		cdom.options.length=1;
		document.getElementById("areaId_"+option.id).options.length=1;
		document.getElementById("areaId_"+option.id).selectedIndex=0;
		for(var i in clist){
			cdom.options[cdom.options.length]=new Option(clist[i][0],i);
		}
		//抽查当前省的市是否有下级地区,只要有一个市有下级
		var hasAera=false;
		for(var i in regionMap[pid][2]){
			if(regionMap[pid][2][i].length>=3){
				hasAera=true;
			}
		}
		document.getElementById("areaId_"+option.id).style.display=hasAera?"":"none";
		getRegionEnd();
	};
	//市选择的变更事件，当市变更时间触发的时候就开始进行地区的填充
	document.getElementById("cityId_"+option.id).onCityChange=function(){
		if(document.getElementById("provinceName_"+option.id).innerHTML!=option.currId[1]){
			document.getElementById("provinceName_"+option.id).innerHTML=option.currId[1];
			document.getElementById("provinceId_"+option.id).value=option.currId[0];
		}
		var cdom=document.getElementById("areaId_"+option.id);
		cdom.options.length=1;
		if(document.getElementById("cityId_"+option.id).value!=""){
			var clist=regionMap[document.getElementById("provinceId_"+option.id).value][2][this.value][2];
			document.getElementById("areaId_"+option.id).style.display=(regionMap[document.getElementById("provinceId_"+option.id).value][2][this.value].length<3)?"none":"";
		}else{
			var clist={};
			document.getElementById("areaId_"+option.id).style.display="";
		}
		for(var i in clist){
			cdom.options[cdom.options.length]=new Option(clist[i][0],i);
		}
		getRegionEnd();
	};
	//地区选择的变更事件
	document.getElementById("areaId_"+option.id).onAreaChange=function(){
		if(document.getElementById("provinceName_"+option.id).innerHTML!=option.currId[1]){
			document.getElementById("provinceName_"+option.id).innerHTML=option.currId[1];
			document.getElementById("provinceId_"+option.id).value=option.currId[0];
		}
		getRegionEnd();
	};
	//如果表单有默认值，则自动给他选中
	if(option.regionPath[6] ){
		if(option.regionPath[0]!="" && option.regionPath[1]!=""){
			document.getElementById("provinceId_"+option.id).onProvinceChange(option.regionPath[0]);
		}
		if(option.regionPath[2]!="" && option.regionPath[3]!=""){
			document.getElementById("cityId_"+option.id).value=option.regionPath[2];
			document.getElementById("cityId_"+option.id).onCityChange();
		}
		if(option.regionPath[4]!="" && option.regionPath[5]!=""){
			document.getElementById("areaId_"+option.id).value=option.regionPath[4];
			document.getElementById("areaId_"+option.id).onAreaChange();
		}
	};
	//获取返回结果
	function getRegionEnd(){
		//省的数据
		option.currId=[document.getElementById("provinceId_"+option.id).value,document.getElementById("provinceName_"+option.id).innerHTML,"","","","",false,document.getElementById("provinceName_"+option.id).innerHTML];
		document.getElementById("provinceId_"+option.id).value=document.getElementById("provinceId_"+option.id).value;
		document.getElementById("provinceName_"+option.id).innerHTML=document.getElementById("provinceName_"+option.id).innerHTML;
		//市的数据
		var cityDom=document.getElementById("cityId_"+option.id);
		if(cityDom.value!=""){
			option.currId=[parseInt(option.currId[0]),option.currId[1],parseInt(cityDom.value),cityDom.options[cityDom.selectedIndex].text,"","",false,parseInt(cityDom.value)];
			//如果当前市没有地区信息，则返回有效地址：
			if(option.currId[2]){
				if(regionMap[option.currId[0]][2][option.currId[2]].length<3){
					option.currId[6]=true;
				}
			}
			//地区的信息
			var areaDom=document.getElementById("areaId_"+option.id);
			if(parseInt(areaDom.value)){
				option.currId=[option.currId[0],option.currId[1],option.currId[2],option.currId[3],parseInt(areaDom.value),areaDom.options[areaDom.selectedIndex].text,true,parseInt(areaDom.value)];
			}
		}
		option.onChange(option);
		return option.currId;
	};
	//返回对象
	return option;
}
function $remindMessage(obj) {
	  //单个商品的短信提醒功能
	  //参数:option = {cid:"",//商品IDleft: 0, //当前位置离左边框的位移 top: 0	//当前位置离顶部的位};
        var option = {
			cid:"",//商品ID
            left: 0, //当前位置离左边框的位移
            top: 0,	//当前位置离顶部的位移	
			currentFloatWindow:null,//保存当前浮动窗体的引用
			currentUserName:"",//当前登录用户
			openSmsUrl: "http://my.paipai.com/user/subscribe_phone.shtml?src=1",//开通手机短息服务页面地址
			time:0//短信提醒时间，以分钟为单位
        };
        for (var i in obj) {
            option[i] = obj[i];
        }
        option.left = (option.left == 0 ? ($getPageScrollWidth() + $getWindowWidth()/ 2 - 200): option.left);
        option.top = (option.top == 0 ? ($getPageScrollHeight() + $getWindowHeight()/2 - 200): option.top);
        window["remindSmsOption"] = option;
		
		$loadCss("http://static.paipaiimg.com/css/my/v1/subscibe_phone.css");
		
        //模板
        var template = {openSms:'<div class="box_content"><div class="box_hint_normal"><span class="icon msg3-icon-info"></span><div class="hint_content  phone_hint_content"><p class="hint_title"><strong>对不起，你未开通<span>拍拍手机短信服务</span>，暂时无法设置短信提醒。</strong></p><div class="hint_op  pmarginbottom"><p>开通拍拍手机短信服务，您可以：</p><p>1.<span class="fontBold"><span>免费设置</span>短信提醒功能</span></p><p>2.<span class="fontBold"><span>免费订阅</span>短信内容</span></p><p class="textindent">发货提醒、投诉处理提醒、中差评处理反馈、规则变更...</p><p class="ppaddingtop"><button id="btnOpenSms">立即开通</button><span class="hint_op_tiips1">开通后返回本页面设置短信提醒</span></p></div></div></div></div>',
        confirmSms : '<div class="box_content"><div class="box_hint_normal"> <span class="icon msg3-icon-info"></span><div class="hint_content  phone_hint_content"><p class="hint_title"><strong>请在新打开的<span>拍拍手机短信服务</span>网页中完成开通。</strong></p><div class="hint_op"><p class="ppaddingtop"><button class="phone_hint_content_btn_long" id="btnSetSms">已开通，设置短信提醒</button><button class="phone_hint_content_btn_long" id="btnReopenSms">未开通，返回重新开通</button></p></div></div></div></div>',
        setSms : '<div class="box_content "><div class="phone_tips_box"><p>尊敬的{#userName#}：</p><p class="textindent"><!--您开通拍拍手机短信服务的手机号码为：158*****555，-->提醒手机短信将会在设置的时间发送到您的设定的手机。</p></div><div class="phone_tips_commander" id="phone_tips_commander"><p><span>提醒时间：</span><span class="colright"><span><input type="radio" time="10" name="rdTime">提前10分钟</span><span><input type="radio" name="rdTime" time="30">提前30分钟</span><span><input type="radio" time="60" name="rdTime">提前60分钟</span></span></p><!--<p><span>短信内容：</span><span class="colright">你的商品降价拉，好便宜呀，快行动！</span></p>--><p class="phone_tips_commander_btn"><button id="btnConfirmSms">设置提醒</button><span><a href="#" id="btnCancelSms">取消</a></span></p></div></div></div>',
        successSms : '<div class="box_content "><div class="box_hint_normal"> <span class="icon msg3-icon-right"></span><div class="hint_content phone_hint_content"><p class="hint_title"><strong>短信提醒设置成功！</strong></p><p>短息提醒将会<span class="beforemin">提前{#time#}分钟</span>发送到您设定的手机。</p><div class="hint_op"><button id="btnCloseWindow">关闭窗口</button></div></div></div></div>',
		colorInfo: '<div class="box_content"><div class="box_hint_normal"><span class="icon msg3-icon-info"></span><div class="hint_content  phone_hint_content"><p class="hint_title"><strong>对不起，您的彩钻等级<span>未达到LV3</span>，不能设置短信提醒。</strong></p><div class="hint_op "><p class="ppaddingtop"><button id="btnShowColorInfo">查看彩钻等级</button><button id="btnCloseColor">关闭</button></p></div></div></div></div>'}

        //打开新浮窗
        function openFloatWindow(template) {
            return $floatTip({ width: "500", cover: false, style: 'stand', title: "设置短信提醒", html: template, left: window.remindSmsOption.left, top: window.remindSmsOption.top });
        };

        //事件处理函数映射表
        var handleMap = {
            "btnConfirmSms": function(event) {
                //设置提醒的相关动作
				//期待回调buyerVipCallBack
				window.remindSmsOption.time = getRemindTime(); 
				if(!window.remindSmsOption.time){
					alert("请选择短信提醒时间！");
					return false;
				}
				$loadScript("http://service.paipai.com/cgi-bin/buyervip_level?t="+Math.random());
				window.buyerVipCallBack = function(colorData){
						if(!(colorData.code == 200 && colorData.state == 1 && colorData.level >=3)){
							//展开浮窗,提示用户需要开通短信服务
							var floatWindow = openFloatWindow(template.colorInfo);
							//给提示用户开通短信服务模板中的"立即开通"按钮添加时间处理函数
							bindEvent("btnShowColorInfo",floatWindow);//"查看彩钻等级"按钮
							bindEvent("btnCloseColor",floatWindow);//"关闭窗体"按钮
						}else{
							//期待回调：getMqqInfoCallBack
							$loadScript("http://ext.paipai.com/oadsms/subscribeitem?cid="+window.remindSmsOption.cid+"&time="+window.remindSmsOption.time);
						}
				};
            },
            "btnCancelSms": function (event) {
                //关闭浮窗
                window.remindSmsOption.currentFloatWindow.close();
            },
            "btnCloseWindow": function (event) {
                //关闭浮窗
                window.remindSmsOption.currentFloatWindow.close();
            },
            "btnOpenSms": function (event) {
                //打开新页面，开通手机短信服务
                window.open(window.remindSmsOption.openSmsUrl);
                //关闭当前浮窗
                window.remindSmsOption.currentFloatWindow.close();
				//打开新浮窗,用于确认用户已经开通短息服务
				var floatWindow = openFloatWindow(template.confirmSms);	
				 //给确认短息服务模板中的“已开通，设置短信提醒”按钮添加事件处理
				bindEvent("btnSetSms",floatWindow);
				//给确认短息服务模板中的“未开通，返回重新开通”按钮添加事件处理  
				bindEvent("btnReopenSms",floatWindow);
				
            },
            "btnSetSms": function (event) {
                //关闭当前浮窗
                window.remindSmsOption.currentFloatWindow.close();
                //打开新浮窗,提供用户设置短信提醒的功能
				//期待回调：subscribeItemCallBack
				$loadScript("http://ext.paipai.com/oadsms/getmqqinfo?cid="+window.remindSmsOption.cid);
            },
            "btnReopenSms": function (event) {
                //打开新页面，开通手机短信服务
                window.open(window.remindSmsOption.openSmsUrl);
            },
			"btnShowColorInfo":function(){
				window.open("http://www.paipai.com/buyervip/my.shtml","_blank");	
			},
			"btnCloseColor":function(){
				window.remindSmsOption.currentFloatWindow.close();	
			}
        };

        //绑定相关按钮的时间处理函数
        function bindEvent(id,floatWindow) {
            var e = $id(id);
            if (e) {
				window.remindSmsOption.currentFloatWindow = floatWindow;
                $addEvent(e, "click", handleMap[id]);
            }
        };
		
		//获取短信提醒模板中设定的时间
		function getRemindTime(){
			var o = $id("phone_tips_commander");	
			if(!o){return "";}
			var checkList = o.getElementsByTagName("input");
			for(var i=0,len=checkList.length;i<len;i++){
				if(checkList[i].type=="radio" && checkList[i].checked){
					return 	checkList[i].getAttribute("time");
				}	
			}
			return "";
		};
	
		//获取用户订阅资料回调函数
        window.getMqqInfoCallBack = function (userInfoMqq) {
			if(!userInfoMqq || userInfoMqq.i_ret == -2){//出错
				alert("系统出错，获取商品信息失败，请重试！");
			}
			else if(userInfoMqq.i_ret == -1){//未登录
				$loginFrame({type:'func',check:false,model: false,x:window.remindSmsOption.left,y:window.remindSmsOption.top,action:function (){
					//期待回调：getMqqInfoCallBack
                	$loadScript("http://ext.paipai.com/oadsms/getmqqinfo?cid="+window.remindSmsOption.cid);}
				});	
			}else {//正常情况
				window.remindSmsOption.currentUserName = userInfoMqq.nickname;
				//已经开通短信服务,但未开通短信提醒功能
				if (userInfoMqq.state == 0) {
					//打开新浮窗,提供用户设置短信提醒的功能
					var floatWindow = openFloatWindow(template.setSms.replace("{#userName#}",window.remindSmsOption.currentUserName));
					//给设置短信提醒模板中的“取消”按钮添加事件处理函数
					bindEvent("btnCancelSms",floatWindow);
					//给设置短信提醒模板中的“设置提醒”添加事件处理函数  
					bindEvent("btnConfirmSms",floatWindow);
				}
				//未开通短信服务
				else{
					$loadScript("http://service.paipai.com/cgi-bin/buyervip_level?t="+Math.random());
					window.buyerVipCallBack = function(colorData){
							if(!(colorData.code == 200 && colorData.state == 1 && colorData.level >=3)){
								//展开浮窗,提示用户需要开通短信服务
								var floatWindow = openFloatWindow(template.colorInfo);
								//给提示用户开通短信服务模板中的"立即开通"按钮添加时间处理函数
								bindEvent("btnShowColorInfo",floatWindow);//"查看彩钻等级"按钮
								bindEvent("btnCloseColor",floatWindow);//"关闭窗体"按钮
							}else{
								//展开浮窗,提示用户需要开通短信服务
								var floatWindow = openFloatWindow(template.openSms);
								//给提示用户开通短信服务模板中的"立即开通"按钮添加时间处理函数
								bindEvent("btnOpenSms",floatWindow);
							}
					};
				}
			}
        };
		
		//设置短信提醒回调函数
		window.subscribeItemCallBack = function(subscribe){
			if(!subscribe || subscribe.i_ret == -2){
				alert("设置短息提醒失败！");
				return ;
			}
			//关闭浮窗
            window.remindSmsOption.currentFloatWindow.close();
            //打开新浮窗,提示短信提醒设置成功
            var floatWindow = openFloatWindow(template.successSms.replace(/{#time#}/gi,subscribe.time));
            bindEvent("btnCloseWindow",floatWindow); 
		};

		$$(document).ready(function(){
			//显示登录框
        	$loginFrame({type:'func',model:false,x:window.remindSmsOption.left,y:window.remindSmsOption.top,action: function () {
				//期待回调：getMqqInfoCallBack
                $loadScript("http://ext.paipai.com/oadsms/getmqqinfo?cid="+window.remindSmsOption.cid);}
			});
		});
    }
function $remindQQ(Title,Content,CType,CPTime,CParam){
	window.get_Param2=function(){
		var sunday   =  parseInt("1",2);
		var monday   =  parseInt("11",2);
		var tuesday  =  parseInt("111",2);
		var wednesday=  parseInt("1111",2);
		var thursday =  parseInt("11111",2);
		var friday   =  parseInt("111111",2);
		var saturday =  parseInt("1111111",2);
		return (sunday|monday);
	}
	if (document.all){
		try{
			var xmlhttp=new ActiveXObject("TimwpDll.TimwpCheck");
			var  n = xmlhttp.GetHummerQQVersion();
			if (n < 2509){
				if (confirm("您未安装QQ或者当前使用的QQ版本过低，请重新安装最新版本QQ。\r\n\r\n安装成功后需要重新启动浏览器，才能正常使用。")){
					window.target="_top";
					window.open("http://im.qq.com/qq/#/");
				}
			}else{
				if (CType == 3){CParam = get_Param2();}
				var cpAdder = new ActiveXObject("QQCPHelper.CPAdder");
				var retVal = cpAdder.AddMemoNote(Title, Content, CType, CParam, CPTime,0);
			}
		}catch (e){
			if (confirm("您未安装QQ或者当前使用的QQ版本过低，请重新安装最新版本QQ。\r\n\r\n安装成功后需要重新启动浏览器，才能正常使用。")){
				window.target="_top";
				window.open("http://im.qq.com/qq/#/");
			}
		}
	}else{
		alert("您当前使用的浏览器不支持QQ备忘录提醒功能，目前QQ备忘录提醒功能仅支持IE、TT浏览器。");
		return false;
	}
}
function $remindSms(obj){
	var option={
		cid:"", //商品ID
		left:0, //当前位置离左边框的位移
		top:0	//当前位置离顶部的位移	
	};
	for(var i in obj){
		option[i]=obj[i];
	}
	window["remindSmsOption"]=option;
	
	//加载用户的超q状态,期待回调getMqqInfoCallBack
	$loadScript("http://ext.paipai.com/mqq/getmqqinfo?cid="+option.cid+"&t="+Math.random());
	window.getMqqInfoCallBack=function(obj){
		var title='';
		var template_noqq ='<div class="tipsinfobig"><p><span class="msg2-icon-info"></span>设置短信提醒需要开通超级QQ短信版！</p></div><div class="mq_box"><div class="mq_info"><p>开通超级QQ短信版，设置短信提醒，特价商品永不错过。</p><img src="http://static.paipaiimg.com/assets/index/sale/logo_mq.png" /> </div><div class="mq_vip"><dl><dt>您还可以拥有众多VIP特权：</dt><dd>·QQ升级更快</dd><dd>·24小时在线</dd><dd>·游戏送大礼</dd><dd>·音乐免费下</dd><dd>·消费享折扣</dd><dd>·手机QQ VIP</dd><dd>·任何手机都能聊QQ</dd></dl></div></div><div class="txt_op_tips"><p><a target="_blank"  id="openSQQ" href="http://service.paipai.com/cgi-bin/go?pageId=30340&domainId=108&linkId=1&url=http://member.paipai.com/cgi-bin/cross%3Furl%3Dhttp://mq.qq.com/open.shtml">现在就去开通超级QQ短信版</a></p><p>您可以开通超级QQ短信版后返回今日特价页面重新设置提醒。</p></div>';
		var template_nosms = '<div class="txt_msg_set"><p>提醒短信将会在设置的时间发送到您在超级QQ绑定的手机。</p><p class="txt_msg_setimportant">本月还可以设置 <strong>0</strong> 条短信提醒。</p><p>您在{#rtime#}可重新获得10条提醒额度。</p></div><div style="margin:15px;"><div class="tipserrorbig"><p><span class="msg2-icon-warn"></span>尊敬的用户，本月可使用的短信提醒额度已经用完。您可以选择其他提醒方式。</p></div></div><div class="txt_op_tips txt_op_pad"><p><a href="#nolink" id="remindClose">取消</a></p></div>'
		
		var template_sms = '<div class="box_tips"><p>尊敬的{#uname#}，您本月短信提醒还有 <strong>{#leftnum#}</strong> 条，<br />绑定手机{#phonenum#}，提醒短信将会在设置的时间发送到您绑定的手机。</p></div><div class="operate_settime"><p><span class="title">提醒时间：</span><span><select id="timeSelect"><option value="15">提前15分钟</option><option value="30">提前30分钟</option><option value="60">提前60分钟</option></select></span></p><p><span class="title">短信内容：</span><span>您关注的今日特价商品“{#cname#}”在<em id="timeSpan">15</em>分钟之后开始抢购，限量{#cleftnum#}件。马上去看看吧！</span></p></div><div class="txt_op_tips txt_op_pad"><p><input id="setRemind" name="" type="submit" value="设置提醒" /><a id="cancleRemind" href="#nolink">取消</a></p></div>'; 
		
		  var template_success = '<div class="tipsrightbig"><p><span class="msg2-icon-right"></span><strong>温馨提示：1个商品只能设置1次短信提醒，我们将以您最近设置的时间下发短信提醒。</strong></p></div><div class="txt_msg_tips"><p>我们将在您关注的今日特价商品“<strong>{#cname#}</strong>”开始抢购 <strong>{#remindtime#}分钟之前</strong> 发送短信到：</p><p><strong>{#phonenum#}</strong></p></div><div class="txt_op_tips"><p><input id="finishRemind" name="" type="submit" value="完　成" /></p></div>'; 
		 
		var theleft=$getPageScrollWidth()+($getWindowWidth()-399)/2;
		var thetop=$getPageScrollHeight()+($getWindowHeight()-356)/2;
		  		  
		if(obj.error=="很抱歉，使用者权限不正确，您不能继续当前操作。请您重新登录后再试。"){
			$loginFrame({
				type:'func',
				check:false,
				model:false,
				action:function(){
					$remindSms(window.remindSmsOption)
				},
				"x":theleft,
				"y":thetop
			});
			return false;
		}
		
		var nextMonth = new Date().getMonth()+1;
		if(nextMonth>11){
			nextMonth = 0; 
		}

		var hc = "";
		if(obj.leftNum==0){
			hc = template_nosms.replace(/{#rtime#}/g,(nextMonth+1)+"月1号"); 
			title ="设置短信提醒";
		}else if(obj.leftNum>0){
			hc = template_sms.replace(/{#leftnum#}/g,obj.leftNum).replace(/{#phonenum#}/g,obj.telephone).replace(/{#cname#}/g,obj.cName).replace(/{#uname#}/g,obj.nickname).replace(/{#cleftnum#}/g,obj.cNum);
			title="设置短信提醒（超级QQ短信版用户专享）";
		}else{
			hc = template_noqq;
            title="开通超级QQ短信版";
		}
		//展开浮窗 
		window.floatWindow=$floatTip({
			width:"500",
			cover:false,
            style:'stand',
			title:title,
			html:hc,
			left:window.remindSmsOption.left,
			top:window.remindSmsOption.top
		});
		
		$$("#remindClose,#cancleRemind,a[tag='closeFloat']").click(function(){
			floatWindow.close();
		});
		
		$$("#openSQQ").click(function(){
			//增加开通短信提醒按钮统计
			$countRd("1041.1.4");
		});
		
		$$("#remindClose").click(function(){
			//增加点击“取消”按钮统计
			$countRd("1041.1.5");
		});
		
		
		$$("#timeSelect").change( function() {				  
			$$("#timeSpan").text($$("#timeSelect").val());							  
  		// 这里可以写些验证代码
		}); 
		
		$$("#setRemind").click(function(){
			
			//增加成功设置提醒按钮统计
			$countRd("1041.1.6");	
			window.remainTimeSelect=$$("#timeSelect").val();
			
			//设置短信提醒，期待回调getMqqInfoCallBack
			$loadScript("http://ext.paipai.com/mqq/subscribeitem?cid="+option.cid+"&time="+remainTimeSelect);
			floatWindow.close();
			window.orderMqqRemindCallBack=function(obj){
				window.floatWindow=$floatTip({
					width:"500",
					cover:false,
					style:"stand",
					title:"设置短信提醒",
					html:template_success.replace(/{#cname#}/g,obj.cName).replace(/{#phonenum#}/g,obj.telephone).replace(/{#remindtime#}/g,remainTimeSelect),
					left:option.left,
					top:option.top
				});
				$$("#finishRemind,#remindClose,#cancleRemind,a[tag='closeFloat']").click(function(){
					floatWindow.close();
				});
			};
		});
		window.getMqqInfoCallBack="";
	};
}
function $remindTime(){
	//根据setRemind标记初始化抢购提醒功能	
	//<div tag="setRemind" cid="0E0A632F00000000000E38CC00001067" id="setmsg" cname="商品一" remindtime="2008-08-09 05:21:00" style="position:absolute;top:456px;right:8px;_right:18px;"></div>
	var s='<div class="itemtitle">到点提醒我<span>?</span></div><div class="openset h" tag="setRemind_menu"><h6>设置提醒<span>▲</span></h6><ul><li cid="{#cid#}" tag="setRemind_sms"><img  src="http://pics.paipai.com/common/icon/mq.png" /><a href="#nolink">短信提醒</a></li><li cid="{#cid#}" cname="{#cname#}" remindtime="{#remindtime#}" tag="setRemind_qq"><img src="http://pics.paipai.com/common/icon/mark.png" /><a href="#nolink">QQ提醒</a></li></ul></div>';	 
	
	
	$$("div[tag='setRemind']").each(function(){
		
		var cid=$$(this).attr("cid");
		var cname=$$(this).attr("cname");
		var remindtime=$$(this).attr("remindtime"); 
		
		$$(this).html(s.replace(/{#cid#}/g,cid).replace(/{#cname#}/g,cname).replace(/{#remindtime#}/g,remindtime));
		$$(this).find("div:first").mouseover(function(){
			$$("div[tag='setRemind_menu']").addClass("h");
			$$(this).next("div").removeClass("h");
		});
		$$(this).find("div:first").mouseout(function(){
			$$(this).parent().next("div").addClass("h");
		});
		$$("div[tag='setRemind_menu']").mouseover(function(){
			$$(this).removeClass("h");															
	    });
		$$("div[tag='setRemind_menu']").mouseout(function(){
			$$(this).addClass("h");															
	    });
		//短信提醒
		$$(this).find("li[tag='setRemind_sms']").click(function(){   
                           //增加短信提醒按钮统计
			$countRd("1041.1.3");	

			var thecid=$$(this).attr("cid");
			$$("div[tag='setRemind_menu']").addClass("h");
			$$(this).parent().removeClass("h"); 
			
			$remindMessage({cid:thecid}); 	 		
		}); 
		//QQ提醒
		$$(this).find("li[tag='setRemind_qq']").click(function(){
                         
                           //增加QQ提醒按钮统计
			$countRd("1041.1.2");
 
			var theCid=$$(this).attr("cid");
			var theCname=$$(this).attr("cname");
			var theTime=$$(this).attr("remindtime");
			//时间格式			
			//2008-08-09 05:21:00
			//调用QQ备忘接口
			var arrTemp=theTime.split(" ");
			var arrDate=arrTemp[0].split("-");
			var arrTime=arrTemp[1].split(":");
			var d=new Date(arrDate[0],arrDate[1]*1-1,arrDate[2],arrTime[0],arrTime[1]*1-5);
			var newTime=$formatDate(d,"YYYY-MM-DD hh:ii");
			var content='亲爱的QQ用户：您关注的“今日特价”商品“'+theCname+'”将在“'+theTime.substr(11,5)+'”准时开始抢购，点击下面地址进入抢购页面：http://auction2.paipai.com/'+theCid+'?PTAG=40026.2.3';
			$remindQQ(theCname,content,2,newTime,0);
		});
	});
}
var $renderDealList = (function() {
	if(typeof $renderDealList=="function"){
		return $renderDealList;
	}
	//获取订单列表CGI
	var getDealList = $createCGICallback("http://virtual.paipai.com/account/GetAllDealList?istate={#dealState#}&itype={#dealType#}&page={#page#}&size={#size#}&fr_time={#fTime#}&to_time={#tTime#}&callback=getDealList", "getDealList", {
		cacheTime : 0, //无缓存
		seed : "dtag"//校验标记
	});
	//载入订单数据
	function loadDealList(param, callback, getDealListCGICallback) {
		var context = this;
		var args = arguments,cgi=getDealListCGICallback || getDealList;
		//清除定时器
		if(loadDealList.timer){
			window.clearTimeout(loadDealList.timer);
			loadDealList.timer=0;
		}
		//设置阶段一加载中定时器
		loadDealList.timer=window.setTimeout(function(){
			callback({state:"loading",wtime:500});
			//设置慢速加载定时器
			loadDealList.timer=window.setTimeout(function(){
				callback({state:"loading",wtime:5000});
				loadDealList.timer=0;
			},4500);
		},500);
		cgi(param, function(result) {
			var retCode = result.retCode, errCode = result.errCode, msg = result.msg, dtag = result.dtag, data = result.data;
			if(dtag == cgi.seed) {//校验位匹配
				//清除定时器
				if(loadDealList.timer){
					window.clearTimeout(loadDealList.timer);
					loadDealList.timer=0;
				}
				if(retCode == "0") {
					callback({state:"complete",data:data});
				} else if(retCode == "-1") {
					$loginFrameNotice({
						type : "func", //登录后的操作类型：parent/top/self/blank/func 默认top
						action : function() {//登录后的转向地址或者执行的函数
							$freshHeadLogin();
							//刷新页头登录态
							loadDealList.apply(context, args);
							//重新加载
						},
						check : false, //是否需要检测用户登录状态
						onClose : function() {//关闭窗口时的操作
							loadDealList.apply(context, args);
							//重新加载
						}
					});
				} else {
					$float({
						title : "错误",
						html : msg
					});
				}
			}
		});
	}

	//渲染列表
	function renderDealList(dealDatas, container, template, extData) {
		//渲染模版
		container.innerHTML = $xss($formatJson(template, $extend(dealDatas, extData)), "none");
	}

	//渲染分页组件
	function renderPaginator(page, container, pageParam, callback, getDealListCGICallback) {
		$page({
			pageCount : 1 * page.totalPage, //总页码
			currentPage : 1 * page.page, //当前页码
			domList : [container], //内容输出区域的dom列表
			action : "func", //点击分页的操作类型
			func : function(pageId, opt) {//点击分页操作
				pageParam.page = pageId;
				loadDealList(pageParam, callback, getDealListCGICallback)
			}
		});
	}

	return function(param, opt, extData) {
		var dealUrl = $extend({
			"1" : "http://virtual.paipai.com/mobile/GetDealInfo?order_id={#dealId#}",
			"3" : "http://virtual.paipai.com/onlinegame/GetDealInfo?order_id={#dealId#}",
			"100" : "http://virtual.paipai.com/gameprop/GetDealInfo?deal_id={#dealId#}",
			"101" : "http://virtual.paipai.com/gamecurrency/GetDealInfo?strDealId={#dealId#}"
		}, opt.dealUrl);
		var payUrl = $extend({
			"1" : "http://virtual.paipai.com/mobile/PayDeal?order_id={#dealId#}",
			"3" : "http://virtual.paipai.com/onlinegame/GetPayUrl?order_id={#dealId#}",
			"100" : "",
			"101" : "http://virtual.paipai.com/gamecurrency/GetPayUrl?strDealId={#dealId#}"
		}, opt.payUrl);
		var dealState = $extend({
			"1" : "等待买家付款",
			"2" : "等待发货",
			"3" : "发货中",
			"4" : "退款中",
			"5" : "交易完成",
			"6" : "交易完成，已退款",
			"7" : "交易取消"
		}, opt.dealState);
		//默认选项
		var option = $extend({
			formatDate : function(time, format) {//时间格式化
				return $formatDate(time, format);
			},
			genDealUrl : function(deal,lkType) {//生成订单详情URL
				//订单类型
				var type = deal.dealType;
				var formatDealUrl=$formatStr(dealUrl[type] || "", deal);
				return formatDealUrl?$addToken(formatDealUrl,lkType||"lk"):formatDealUrl;
			},
			genPayUrl : function(deal,lkType) {//生成订单支付URL
				//订单类型
				var type = deal.dealType;
				var formatPayUrl=$formatStr(payUrl[type] || "", deal);
				return formatPayUrl?$addToken(formatPayUrl,lkType||"lk"):formatPayUrl;
			},
			getState : function(state) {//获得订单状态
				return dealState[state] || "未知";
			}
		}, extData);
		//载入订单列表
		loadDealList(param, function(datas) {
			var dealDatas=datas.data;
			var listContainer = opt.listContainer;
			var listTemplate = opt.listTemplate;
			var pageContainer = opt.pageContainer;
			if(datas.state=="loading"){
				try{//尝试loading状态加载
					//渲染订单列表
					renderDealList(datas, listContainer, listTemplate, option);
				}catch(e){};
			}else if(datas.state=="complete"){
				//渲染分页组件
				renderPaginator(dealDatas, pageContainer, param, arguments.callee, opt.getDealListCGICallback);
				//渲染订单列表
				renderDealList(datas, listContainer, listTemplate, option);
				opt.callback&&opt.callback(dealDatas);
			}
		}, opt.getDealListCGICallback);
	};
})()
function $replaceVb2ctagId(url,tagId){
	var vb2ctag=$getQuery("vb2ctag",url);
	if(vb2ctag){
		vb2ctag=$addVb2ctagSeg(vb2ctag,tagId);
		url=$replaceParam("vb2ctag",vb2ctag,url,true);
	}
	return url;
}
function $reportVb2cSearch(type,param){
	switch(type+""){
		case "1":
		chkStat(param);
		return;
		case "2":
		CheckAuction(param.index,param.commid,param.leadclassid);
		return;
	}
//商品搜索用户功能点击信息系统search page模块
	function chkStat(str){
		var chkUrl = "http://search.paipai.com/cgi-bin/clicklog?",tempStr;
		var visitkey = $getCookie("visitkey"),uin = $getCookie("uin"),refUrl = escape(document.URL);
		tempStr = str.split("{|}");
		chkUrl = chkUrl + "uin=" + uin + "&ls=" + tempStr[1] + "&subls=" + tempStr[2] + "&visitKey=" + visitkey + "&ref=" + refUrl + "&herf=" + tempStr[3];
		if (tempStr[1]){
			if (tempStr[0] == "1"){
				$setCookie("lgStat",chkUrl,0 , '/', 'paipai.com');
			}else{
				$loadScript(chkUrl + "&t=" + (new Date).getTime(),"chkStatScript");
			}
		}
	}
//商品搜索用户详情点击信息系统search page模块
	function CheckAuction(index,commid,leadclassid){
		var searchlogURL = "http://search.paipai.com/cgi-bin/search_log?",visitkey = $getCookie("visitkey"),uin = $getCookie("uin"),ref = document.URL;
		var keyword = "";
		var tempUrl = searchlogURL + "pos=" + index + "&visitkey=" + visitkey + "&uin=" + uin + "&ref="+ escape(ref) + "&commid=" + commid +"&leafclassid="+ leadclassid +"&keyword=" + keyword +"&t=" + (new Date).getTime();
		$loadScript(tempUrl);
	};
}
function $returnCode(opt) {
	//返回码上报组件
	var option = {
		version : 1, //返回码上报版本 1为旧版 2为新版本
		id : "", //返回码id，对应返回码系统FLAG1
		url : "", //需要上报的接口url，用于上报异步请求的返回码
		action : "", //需要上报的功能名称，用于拼装伪地址，与url互斥，用于上报跨业务
		sTime : "", //请求开始时间
		eTime : "", //响应结束时间
		retCode : "", //请求返回是否成功，成功1，失败2
		errCode : "", //请求返回错误码：=errcode
		frequence : 1, //采样频率，1/n，这个数值为分母，数字越小采样频率越高
		refer : location.href, //异步请求的refer是当前页面
		uin : "", //用户QQ(uin) 只做详细记录查询，不做统计； 如果没有上报，cgi会从cookie中去解析uin字段
		domain : "paipai.com", //设置的域名，用于设置cookie
		from : 1, //上报的场景     0为clien，1为web
		report : report, //进行上报的方法
		reg : reg//跨页面上报的方法，用reg方法启动
	};
	for(var i in opt) {
		option[i] = opt[i];
	}
	if(option.url) {
		//开始计时
		option.sTime = new Date();
	}
	//如果参数action不为空，则表示是非异步接口类上报，将当前信息写入cookie
	function reg() {
		this.sTime = new Date();
		if(!this.action) {
			return;
		}
		var rcookie = $getCookie("retcode"), cookie2 = [];
		rcookie = rcookie ? rcookie.split("|") : [];
		for(var i = 0; i < rcookie.length; i++) {
			if(rcookie[i].split(",")[0] != this.action) {
				cookie2.push(rcookie[i]);
			}
		}
		cookie2.push(this.action + "," + this.sTime.getTime());
		$setCookie("retcode", cookie2.join("|"), 60, "/", this.domain);
	}

	//返回码上报方法,参数：是否成功请求（true,false），返回码（如果无返回码则直接上报错误码）
	function report(ret, errid) {
		//计时
		this.eTime = new Date();
		//是否成功，成功1，失败2
		this.retCode = ret ? 1 : 2;
		this.errCode = isNaN(parseInt(errid)) ? "0" : parseInt(errid);
		if(this.action) {
			this.url = "http://retcode.paipai.com/" + this.action;
			var rcookie = $getCookie("retcode"), ret = "", ncookie = [];
			rcookie = rcookie ? rcookie.split("|") : [];
			for(var i = 0; i < rcookie.length; i++) {
				if(rcookie[i].split(",")[0] == this.action) {
					ret = rcookie[i].split(",");
				}
				else {
					ncookie.push(rcookie[i]);
				}
			}
			$setCookie("retcode", ncookie.join("|"), 60, "/", this.domain);
			if(!ret) {
				return;
			}
			this.sTime = new Date(parseInt(ret[1]));
		}
		if(!this.url) {
			return;
		}
		this.timer = this.eTime - this.sTime;
		if(this.version == 1) {
			this.reportUrl = "http://isdspeed.qq.com/cgi-bin/return_entry.cgi/postentry?" + (this.id ? ("flag1=" + this.id + "&") : "") + "ret_flag=" + this.retCode + "&err_ret=" + this.errCode + "&frequence=" + this.frequence + "&user_time=" + this.timer + "&websvc_time=0&source_flag=" + this.from + "&url=" + escape(this.url) + "&refer=" + escape(this.refer);
		}
		else {
			if(this.id) {
				this.reportUrl = "http://isdspeed.qq.com/cgi-bin/v.cgi?flag1=" + this.id + "&flag2=" + this.retCode + "&flag3=" + this.errCode + (this.uin ? ("&flag4=" + this.uin) : "") + "&1=" + this.frequence + "&2=" + this.timer;
			}
		}
		//采样判断
		if(this.reportUrl && Math.random() < (1 / this.frequence) && this.url) {
			(new Image()).src = this.reportUrl;
		}
	}

	return option;
}
function $roll(opt){
	var option = {
		auto:false,//是否自动
		contentId:"",//内容id
		contentTag:"li",//内容元素类型
		orientation:"h",//滚动方向,取值h(指水平方向horizational)和v(指垂直方向vertical)
		width:"",//单个子元素宽度,在orientation = h时必填
		height:"",//内容元素的高度，在orientation = v时必填
		prevId:"",//上一页的按钮id
		nextId:"",//下一页按钮id
		rollSize:1,//每次滚动的元素个数,即单页的元素个数，每次滚动视为滚动一页
		showSize:5,//展示几个图片,即当前容器中显示的图片个数(一般showSize>=slideSize，且showSize为slideSize的整数倍)
		initIndex:NaN,//初始显示第几页(一组rollSize个元素视为一页，初始位置为该页元素靠显示框左侧或上侧靠齐)
		eventType:"click",//分页的事件类型,目前支持click和mouseover
		effectTime:1000,//滚动效果执行时间，即滚动一次需要的毫秒数
		duration:4000,//滚动间隔，即每隔多少毫秒滚动一次，此参数在autoRoll = true时有效
		maxRollTimes:100//最大滚动次数，滚动到最大次数之后即停止滚动(自动滚动的情况),除非手动触发
	};	
	for(var i in opt){
		option[i] = opt[i];	
	}
	if(!$id(option.contentId)){return ;}	
	init();	
	bindBtnEvent();
	option.auto&&startRoll();
	//提供给外部的方法
	option.startRoll = startRoll;
	option.stopRoll = stopRoll;
	return option;
	//初始化
	function init(){
		option.content = $id(option.contentId);//dom
		option.childList = $child(option.content,option.contentTag);//保存对子节点的引用
		option.length = option.childList.length;//子元素的个数
		option.direction = "next";//滚动方向，向前滚还是向后滚,取值 next和prev
		option.rollTimes = 0;//滚动次数
		option.effectInptr = null;//滚动效果句柄
		option.durationInptr = null;//滚动间隔句柄
		option.widthInfo = option.orientation=="h"?option.width:option.height;
		option.rectInfo = option.orientation=="h"?"left":"top";
		option.content.style.position = "relative";
		option.content.style.overflow = "hidden";
		for(var i=0,len=option.childList.length;i<len;i++){
			option.childList[i].style.position = "absolute";	
		}
		var pageCount = option.length/option.rollSize;//总页数
		var pageIndex = option.initIndex?option.initIndex:$randomInt(pageCount);
		option.offset = option.rollSize*pageIndex;//偏移量
		setPosition(option.offset);
		option.leftIndex = option.length-option.offset;//靠近左侧边框的索引
		var rIndex = option.leftIndex + option.showSize-1;
		option.rightIndex = rIndex>=option.length?(rIndex-option.length):rIndex;//靠近右侧边框的索引
		
	}
	//滚动图片(翻页)
	function rollIt(){
		if(option.effectInptr){
			stopCurrentRoll();
		}
		var effectCount = option.effectTime/50;//将单次的滚动分解为多次的位置偏移,每为50毫秒执行一次，此为当次图片滚动需要执行的总次数
		var counter=0;
		var step = option.rollSize/effectCount;//每次执行增加的偏移的步长
		option.effectInptr = setInterval(function(){
			if(counter == effectCount){
				stopCurrentRoll();
			}else{
				++counter;
				var offset = option.offset + (option.direction=="next"?1:-1)*step*counter;//本次偏移量 
				setPosition(offset);
			}
		},50);//此50毫秒和上面的对应 
	}
	//结束当次滚动
	function stopCurrentRoll(){
		//结束当次滚动
		clearInterval(option.effectInptr);
		option.effectInptr = null;
		option.rollTimes++;
		if(option.auto&&option.rollTimes>=option.maxRollTimes){//超过最大滚动次数，则停止自动滚动
			stopRoll();
		}
		//设置偏移
		option.offset += (option.direction=="next"?1:-1)*option.rollSize;
		if(option.offset>=option.length){
			option.offset-=option.length;	
		}else if(-option.offset>option.length){
			option.offset+=option.length;	
		}
		setPosition(option.offset);
		//计算靠近显示框左右两侧的元素的索引
		if(option.offset==0){//靠近左侧边框的索引
			option.leftIndex=option.offset;	
		}else if(option.offset>0){
			option.leftIndex=option.length-option.offset;
		}else{
			option.leftIndex=-option.offset;
		}
		var rIndex = option.leftIndex + option.showSize-1;
		option.rightIndex = rIndex>=option.length?(rIndex-option.length):rIndex;//靠近右侧边框的索引
	};
	//设置每个元素的位置
	function setPosition(offset){
		var len=option.childList.length;
		for(var i=0;i<len;i++){
			if(offset>=0){
				if(i+offset-len+option.rollSize>=0){//左侧(上侧)不足,需要将右侧的子节点偏移到左边,option.rollSize是为了做预偏移，以保证滚动的连续性
					option.childList[i].style[option.rectInfo] = (i+offset-len)*option.widthInfo+"px";	
				}else{
					option.childList[i].style[option.rectInfo] = (i+offset)*option.widthInfo+"px";
				}
				if(i+offset-len==0){option.leftIndex==i;}//靠近左侧边框的索引
			}else{
				if(option.showSize-(i+offset)-len+option.rollSize>0){//右侧(下侧)不足，需要将左侧的子节点偏移到右边option.rollSize以保证滚动的连续性
					option.childList[i].style[option.rectInfo] = (i+offset+len)*option.widthInfo+"px";	
				}else{
					option.childList[i].style[option.rectInfo] = (i+offset)*option.widthInfo+"px";
				}
			}
		}
	}
	//开始自动滚动
	function startRoll(){
		if(option.durationInptr){//先清空句柄，确保不会重复滚动
			clearInterval(option.durationInptr);
			option.durationInptr == null;
		}
		option.durationInptr = setInterval(function(){
			rollIt();								
		},option.duration);
	}
	//停止滚动
	function stopRoll(){
		if(option.durationInptr){//先清空句柄，确保不会重复滚动
			clearInterval(option.durationInptr);
			option.durationInptr == null;
		}	
	}
	//绑定滚动按钮的事件
	function bindBtnEvent(){
		$addEvent($id(option.prevId),option.eventType,btnEventHandler);
		$addEvent($id(option.nextId),option.eventType,btnEventHandler);	
	};
	//按钮处理事件
	function btnEventHandler(e){
		if(option.effectInptr){return ;}//若已经在滚动，则拒绝执行行的滚动指令
		if(option.auto){//先结束自动滚动
			clearInterval(option.durationInptr);
			option.durationInptr == null;
		}
		option.direction = ($getTarget(e).id == option.nextId?"next":"prev");
		rollIt();
		return false;
	}
}
function $scroller(opt){
//滚动器定义的代码
	var option={
		framer:"",		//滚动区的框架 div的id，框架内的内容就是要被滚动的区域，框架本身不滚动
		html:undefined,		//滚动显示的内容html，如果为空，则取framer的innerHTML
		height:20,		//滚动区域的高度
		width:100,		//滚动区域的宽度
		viewtime:2000,		//每一屏停止时的展示时间,单位毫秒
		speed:40,		//滚动的速度，每次移动一个像素的等待时间。单位毫秒
		scrollHeight:0,	//每次滚屏的高度，如果不设置则等于滚动区域高度，即默认1屏1屏的滚动
		mouseControl:true,//鼠标控制开关，为true的时候，onmouserover的时候会增加停止开关,onmouserout的时候又会打开，这个状态控制的是stopScroll属性
		currentTop:0,	//代码中的状态机：已经滚动了多少？
		stopTime:0,		//代码中的状态机：处于停止状态时的计数器
		stopScroll:0	//代码中的状态机：是否停止状态
	};
	//合并参数
	$$.extend(option,opt);
	//获取外部框架的句柄，如果不存在就什么也不做
	//option.div=$$("#"+option.framer);
	option.div = $$((typeof option.framer=="string") ? ("#"+option.framer) : option.framer);
	if(option.div.length<1){
		return;
	}
	//如果滚屏高度为0的时候就让他等于默认一屏的高度
	if(option.scrollHeight==0){
		option.scrollHeight=option.height;
	}
	//把框架内的内容复制几份，为连续滚动做准备,并设置框架的有效高度和宽度
	var _html = option.html || option.div.html();
	option.div.html(_html+_html).css({
		"height":option.height,
		"width":option.width,
		"overflow":"hidden",
		"display":"block"
	}).get(0).scrollTop=0;;
	//绑定鼠标事件，鼠标在上面的时候把停止标记上打1
	if(option.mouseControl){
		option.div.mouseover(function(){
			option.stopScroll=1;;
		}).mouseout(function(){
			option.stopScroll=0;
		});
	}
	//每个单位时间启动一次滚动
	doScroll.runEach(option.speed,option);
	//辅助函数：执行一次滚动操作
	function doScroll(opt){
		if(opt.stopScroll==1) return;		//判断是否返回
		opt.currentTop +=1 ;			//滚动高度+1
		if(opt.currentTop == opt.scrollHeight+1){//这个时候应该是刚好滚动了一轮，就应该开始停止一段时间了
			opt.stopTime+=1;//停止的时间开始计数
			opt.currentTop -=1 ;	//倒退一个像素，让他始终停在同一个位置
			if(opt.stopTime*opt.speed >= opt.viewtime){//已经停止了指定的时间长度
				opt.currentTop=0;	//把滚动高度设置为0，就可以继续滚动了
				opt.stopTime=0;	//停止时间设置为0
			}
		}else{//这一块是符合向上滚动条件的时候逻辑，向上滚动一像素
			var preTop = opt.div.get(0).scrollTop;		//已经滚动的高度
			option.div.get(0).scrollTop += 1;//真正在视觉上像上滚动一个像素，如果已经到了底部的话这次滚动无效，数值不会变
			if(preTop==opt.div.get(0).scrollTop){//滚到底部则需要重新跳到头部去。
				opt.div.get(0).scrollTop=0; 
				opt.currentTop=0;
			}
		}
	}
}
function $scrollFix(dom){
	//父元素
	if(!dom.parentNode)return;
	var p = dom.parentNode;
	//相对位置元素
	var posDom = dom.parentNode;
	//递归找到定位元素
	while(posDom && posDom!=document.body && posDom!=document){
		var position = $curStyle(posDom,"position");
		if(position=="relative" || position=="absolute")
		break;
		posDom=posDom.parentNode;
	}
	//定位元素的位置信息
	var pos = {x: parseInt($getX(posDom)||0,10),y:parseInt($getY(posDom)||0,10)};
	
	$addEvent(window,"scroll",function(){
		setTimeout(function(){
			if(p.getBoundingClientRect().top>=0){
				dom.style.position="static";
				dom.className=dom.className;
			}else{
				if($isBrowser("ie6")){
					var rect = dom.getBoundingClientRect();
					dom.style.top= (parseInt($getPageScrollHeight(),10)-pos.y)+"px";
					if(dom.style.position=="absolute")return;
					dom.style.position="absolute";
					dom.style.zIndex=255;
					dom.className=dom.className;
				}else{
					if(dom.style.position=="fixed")return;
					dom.style.position="fixed";
					dom.style.top="0px";
					dom.style.zIndex=255;
					dom.className=dom.className;
				}
			}
		},0);
	});
}
function $serializeCxPlan(plan){
	//打包车险套餐xml
	var info=plan.info;
	var benefitMap={
		"thirdParty":"tpBenefit",
		"driver":"dBenefit",
		"passenger":"pBenefit",
		"scrape":"sBenefit"
	};
	var keyMap={
		"thirdParty":"第三者责任保险",
		"carDamnify":"机动车损失保险",
		"driver":"司机座位责任险",
		"passenger":"乘客座位责任险",
		"scrape":"车身划痕损失险",
		"carLosing":"机动车盗抢保险",
		"glass":"玻璃单独破碎险",
		"nd_thirdParty":"不计免赔率特约条款-第三者责任保险",
		"nd_carDamnify":"不计免赔率特约条款-机动车损失保险",
		"nd_carLosing":"不计免赔率特约条款-机动车盗抢保险",
		"nd_passenger":"不计免赔率特约条款-乘客座位责任险",
		"nd_driver":"不计免赔率特约条款-司机座位责任险",
		"nd_scrape":"不计免赔率特约条款-车身划痕损失险",
		"carTax":"车船税"
	}
	var xmlStr='<insureinfo>';
	//保险人信息
	xmlStr+='<insured_info>';
	if(plan.info.owner){
		xmlStr+='<insured_name><![CDATA['+info.owner+']]></insured_name>';
	}
	if(plan.info.idType){
		xmlStr+='<insured_certificate_type>'+info.idType+'</insured_certificate_type>';
	}
	if(plan.info.idNo){
		xmlStr+='<insured_certificate_no>'+info.idNo+'</insured_certificate_no>';
	}
	if(plan.info.mobile){
		xmlStr+='<insured_mobile_no>'+info.mobile+'</insured_mobile_no>';
	}	
	xmlStr+='</insured_info>';
	//车辆信息
	xmlStr+='<vehicle_info>';
	xmlStr+='<vehicle_license_code><![CDATA['+info.vehicleCode+']]></vehicle_license_code>';
	xmlStr+='<vehicle_year>'+info.year+'</vehicle_year>';
	xmlStr+='<vehicle_month>'+info.date+'</vehicle_month>';
	if(info.regDate){
		xmlStr+='<vehicle_first_register_date>'+info.regDate+'</vehicle_first_register_date>';
	}
	if(info.model){
		xmlStr+='<vehicle_auto_model_chn_code><![CDATA['+info.model+']]></vehicle_auto_model_chn_code>';
	}
	if(info.vin){
		xmlStr+='<vehicle_frame_no>'+info.vin+'</vehicle_frame_no>';
	}
	if(info.engine){
		xmlStr+='<vehicle_engine_no>'+info.engine+'</vehicle_engine_no>';
	}
	if(info.trans){
		xmlStr+='<transfer_date>'+info.trans+'</transfer_date>';
	}
	//TODO需要修改过户情况
	xmlStr+='<vehicle_seats>'+plan.seat+'</vehicle_seats>';
	xmlStr+='<vehicle_price>'+info.price+'</vehicle_price>';
	xmlStr+='<city_name><![CDATA['+info.city+']]></city_name>';
	xmlStr+='<city_code>'+info.cityCode+'</city_code>';
	xmlStr+='<province_name><![CDATA['+info.province+']]></province_name>';
	xmlStr+='<province_code>'+info.provinceCode+'</province_code>';
	xmlStr+='</vehicle_info>';
	
	xmlStr+='<commerce>';
	//商业险基本信息
	xmlStr+='<basic_info>';
	xmlStr+='<insurance_pay_fee>'+plan.fee+'</insurance_pay_fee>';
	xmlStr+='<package_type>'+plan.planName+'</package_type>';
	if(plan.applyPolicyNo){
		xmlStr+='<apply_policy_no>'+plan.applyPolicyNo+'</apply_policy_no>';
	}
	if(plan.policyNo){
		xmlStr+='<policy_no>'+plan.policyNo+'</policy_no>';
	}
	if(plan.expirePayTime){
		xmlStr+='<expire_pay_time>'+plan.expirePayTime+'</expire_pay_time>';
	}
	if(info.validDate){
		var vd=info.validDate.split('-');
		vd[0]=Number(vd[0])+1;
		xmlStr+='<insurance_begin_time>'+info.validDate+'</insurance_begin_time>';
		xmlStr+='<insurance_end_time>'+vd.join('-')+'</insurance_end_time>';
	}
	xmlStr+='</basic_info>';
	xmlStr+='<duty_list>';
	for(var i=0;i<plan.ins.length;i++){
		xmlStr+='<duty_info>';
		var key=plan.ins[i];
		xmlStr+='<duty_key>'+key+'</duty_key>';
		xmlStr+='<duty_name><![CDATA['+keyMap[key]+']]></duty_name>';
		xmlStr+='<duty_premium>'+plan.feeMap[key]+'</duty_premium>';
		if(key=='glass'){
			xmlStr+='<duty_insured_amount><![CDATA['+(plan.imp==1?'国产玻璃':'进口玻璃')+']]></duty_insured_amount>';
		}else{
			xmlStr+=(benefitMap[key]?'<duty_insured_amount>'+plan[benefitMap[key]]+'</duty_insured_amount>':'');
		}
		if(key=='driver'||key=='passenger'){
			xmlStr+='<duty_seats>'+plan.seat+'</duty_seats>';
		}
		xmlStr+='</duty_info>';
	}
	for(var i=0;i<plan.nd.length;i++){
		var key='nd_'+plan.nd[i];
		xmlStr+='<duty_info>';
		xmlStr+='<duty_key>'+key+'</duty_key>';
		xmlStr+='<duty_name><![CDATA['+keyMap[key]+']]></duty_name>';
		xmlStr+='<duty_premium>'+plan.feeMap[key]+'</duty_premium>';
		xmlStr+='</duty_info>';
	}
	xmlStr+='</duty_list>';
	xmlStr+='</commerce>';
	if(plan.info.jq==1){
		//交强险
		xmlStr+='<complus>';
		xmlStr+='<basic_info>';
		xmlStr+='<insurance_pay_fee>'+plan.jq.fee+'</insurance_pay_fee>';
		if(plan.jq.applyPolicyNo){
			xmlStr+='<apply_policy_no>'+plan.jq.applyPolicyNo+'</apply_policy_no>';
		}
		if(plan.jq.policyNo){
			xmlStr+='<policy_no>'+plan.jq.policyNo+'</policy_no>';
		}
		if(plan.jq.expirePayTime){
			xmlStr+='<expire_pay_time>'+plan.jq.expirePayTime+'</expire_pay_time>';
		}
		if(plan.jq.validDate){
			var vd=plan.jq.validDate.split('-');
			vd[0]=Number(vd[0])+1;
			xmlStr+='<insurance_begin_time>'+plan.jq.validDate+'</insurance_begin_time>';
			xmlStr+='<insurance_end_time>'+vd.join('-')+'</insurance_end_time>';
		}
		xmlStr+='</basic_info>';
		xmlStr+='<duty_list>';
		xmlStr+='<duty_info>';
		xmlStr+='<duty_key>carTax</duty_key>';
		xmlStr+='<duty_name><![CDATA[车船税]]></duty_name>';
		xmlStr+='<duty_premium>'+plan.jq.carTax+'</duty_premium>';
		xmlStr+='</duty_info>';
		xmlStr+='</duty_list>';
		xmlStr+='</complus>';
	}
	xmlStr+='</insureinfo>';
	return xmlStr;
}
function $serializeInsForm(form){
    //序列化保险的表单
    var data=form.data;
    var code=form.itemCode;
    var xmlStr='<INSURENCEINFO><POLICYINFO NUM="1">';
    xmlStr+='<CERTIFYCODE>'+code+'</CERTIFYCODE>';
    //基本信息
    for(var i in data){
        var val=data[i];
        xmlStr+='<'+i+'>'+(/[\u0391-\uFFE5]/.test(val)?'<![CDATA['+val+']]>':val)+'</'+i+'>';
    }
	//旅行信息
	if(form.travel){
		xmlStr+='<TRAVEL>';
		for(var i in form.travel){
			var val=form.travel[i];
			xmlStr+='<'+i+'>'+(/[\u0391-\uFFE5]/.test(val)?'<![CDATA['+val+']]>':val)+'</'+i+'>';
		}
		xmlStr+='</TRAVEL>';
	}
    //投保人信息
    for(var j in form.applicant){
        var val=form.applicant[j];
        xmlStr+='<'+j+'>'+(/[\u0391-\uFFE5]/.test(val)?'<![CDATA['+val+']]>':val)+'</'+j+'>';
    }
    //被保人信息
    if(form.insured){
        xmlStr+='<INSUREDLIST NUM="'+form.insured.length+'">';
        for(var k=0;k<form.insured.length;k++){
            var insured=form.insured[k];
            xmlStr+='<INSURED SEQNO="'+(k+1)+'">';
            for(var o in insured){
				if(o!="benefit"&&o!="health"&&o!="subinsurance"){
					var val=insured[o];
					xmlStr+='<'+o+'>'+(/[\u0391-\uFFE5]/.test(val)?'<![CDATA['+val+']]>':val)+'</'+o+'>';
				}
            }
			if(insured.benefit){
				xmlStr+='<BENEFITORLIST NUM="'+insured.benefit.length+'">';
				for(var p=0;p<insured.benefit.length;p++){
					xmlStr+='<BENEFITOR SEQNO="'+(p+1)+'">';
					var benefit=insured.benefit[p];
					for(var u in benefit){
						var val=benefit[u];
						xmlStr+='<'+u+'>'+(/[\u0391-\uFFE5]/.test(val)?'<![CDATA['+val+']]>':val)+'</'+u+'>';
					}
					xmlStr+='</BENEFITOR>';
				}
				xmlStr+='</BENEFITORLIST>';
			}
			if(insured.health){
				xmlStr+='<HEALTHLIST>';
				for(var p in insured.health){
					var val=insured.health[p];
					xmlStr+='<HEALTH ID="'+p+'">'+(/[\u0391-\uFFE5]/.test(val)?'<![CDATA['+val+']]>':val)+'</HEALTH>';
				}
				xmlStr+='</HEALTHLIST>';
			}
			if(insured.subinsurance){
				xmlStr+='<SUBINSURANCELIST>';
				for(var p=0;p<insured.subinsurance.length;p++){
					xmlStr+='<SUBINSURANCE>';
					var subins=insured.subinsurance[p];
					for(var u in subins){
						var val=subins[u];
						xmlStr+='<'+u+'>'+(/[\u0391-\uFFE5]/.test(val)?'<![CDATA['+val+']]>':val)+'</'+u+'>';
					}
					xmlStr+='</SUBINSURANCE>';
				}
				xmlStr+='</SUBINSURANCELIST>';
			}
            xmlStr+='</INSURED>';
        }
        xmlStr+='</INSUREDLIST>';
    }
    
    xmlStr+='</POLICYINFO></INSURENCEINFO>';
    return xmlStr;
}
function $setAioSub(obj){
	var option={
		aid:1,
		x:0,
		y:0,
		template_success:'<div style="height: 80px;" class="favo_main"><div class="g1h4"><img src="http://pics.paipai.com/member/login_ico_right.gif" align="absmiddle" vspace="5"> {#tp_nickname#}订制拍拍网每日精选成功!</div><div id="" style="font-size:12px; line-height:1.5; text-align:left;">您可以随时在 <a style="text-decoration:underline; color:blue;" href="http://my.paipai.com/commodity/hideInfo_AIO.shtml?isSellLink=22" target="_blank">我的拍拍 &gt; 基本设置：QQ相关功能设置</a> 中设置关闭或打开该功能。</div></div>',
		template_again:'<div style="height: 80px;" class="favo_main"><div class="g1h4"><img src="http://pics.paipai.com/member/login_ico_right.gif" align="absmiddle" vspace="5"> {#tp_nickname#}已订制过拍拍网每日精选!</div><div id="" style="font-size:12px; line-height:1.5; text-align:left;">您可以随时在 <a style="text-decoration:underline; color:blue;" href="http://my.paipai.com/commodity/hideInfo_AIO.shtml?isSellLink=22" target="_blank">我的拍拍 &gt; 基本设置：QQ相关功能设置</a> 中设置关闭或打开该功能。</div></div>',
		template_false:'<div style="height: 80px;" class="favo_main"><div class="g1h4" style="color:red;"><img src="http://pics.paipai.com/member/login_ico_alert.gif" align="absmiddle" vspace="5"> {#tp_nickname#}订制拍拍网每日精选失败!</div><div id="" style="font-size:12px; line-height:1.5; text-align:left;">您可以随时在 <a style="text-decoration:underline; color:blue;" href="http://my.paipai.com/commodity/hideInfo_AIO.shtml?isSellLink=22" target="_blank">我的拍拍 &gt; 基本设置：QQ相关功能设置</a> 中设置关闭或打开该功能。</div></div>'
	}
	for(var i in obj){
		option[i]=obj[i];
	}
	//全局变量
    window.PP_core_AioSub_option = option;
	//浮窗登录
    $loginFrame({
        type : 'func',
        model : false,
        action : function(){
            //期待回调函数ModifyShoppingGuideInfo_CallBack(syscode,status)
            $loadScript("http://service.paipai.com/cgi-bin/shoppingguide_modify?shoppingguideoption=1&aioSrc="+window.PP_core_AioSub_option.aid+"&t="+Math.random());
        },
        x : option.x,
        y : option.y
    });
	window.ModifyShoppingGuideInfo_CallBack=function(syscode,status){
		if(parseInt(syscode) < 0){
			if(parseInt(syscode) == -4){
				$loginFrame({
					type : 'func',
					check:false,
					model : false,
					action : function(){
						//期待回调函数ModifyShoppingGuideInfo_CallBack(syscode,status)
						$loadScript("http://service.paipai.com/cgi-bin/shoppingguide_modify?shoppingguideoption=1&aioSrc="+window.PP_core_AioSub_option.aid+"&t="+Math.random());
					},
					x : option.x,
					y : option.y
				});
			}else{
				//订阅失败
				$float({
					title:"提示",
					html:window.PP_core_AioSub_option.template_false.replace(/{#tp_nickname#}/g,$getNick()+"("+$getUin()+")")
				});
			}
			return;
		}
		if(parseInt(status) == 2){
			//订阅失败
			$float({
				title:"提示",
				html:window.PP_core_AioSub_option.template_again.replace(/{#tp_nickname#}/g,$getNick()+"("+$getUin()+")")
			});
		} else if(parseInt(status) == 1){
			$float({
				title:"提示",
				html:window.PP_core_AioSub_option.template_success.replace(/{#tp_nickname#}/g,$getNick()+"("+$getUin()+")")
			});
		} 
	};

}
function $setchkSelectedItem(objs,selectedValue){
//专门用于check设置选择项，设置成功则返回true;
var isExit = false;
     for(var i=0;i<objs.options.length;i++)
     {
         if(objs.options[i].value == selectedValue)
         {
             objs.options[i].selected = true;
             isExit = true;
             break;
         }
     } 
	return isExit;
}
$setConsole = function(){
	var sc = $id("setConsole"),visit = $getCookie("visitkey"),tempStr,setFlag = $getCookie("closeSet"),len,lastNum;
	if (sc){
		len = visit.length;
		lastNum = visit.substring ((len - 1),len);
		window["changeSet"] = function(str){
			var visit = $getCookie("visitkey");
			var len = visit.length,lastNum = visit.substring ((len - 1),len);
			if (str == "a"){
				if (len > 17 && parseInt(lastNum) > 1){
					visit = visit.substring (0,(len - 1))
				}else if (parseInt(lastNum) > 1){
					visit = [visit,"0"].join("");
				}
			}else if (str == "b"){
				if (len > 17 && parseInt(lastNum) < 2){
					visit = visit.substring (0,(len - 1))
				}else if (parseInt(lastNum) < 2){
					visit = [visit,"3"].join("");
				}
			}else{
				if (len > 17){visit = visit.substring (0,(len - 1))}
			}
			$setCookie("visitkey",visit,(30*24*60*100),"/","paipai.com");
			location.reload(true);
		};
		window["closeSet"] = function(){
			$id("setConsole").className += " hide";
			$setCookie("closeSet",1);
		};
		if (parseInt(lastNum) > 1){
			tempStr = "您正通过腾讯内网访问拍拍搜索，现在访问的是【正式IDC】环境。 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<button style='height:20px' onclick='changeSet(\"a\")'>体验网</button> &nbsp;<button style='height:20px' onclick='changeSet(\"c\")'>恢复默认</button> &nbsp;<button style='height:20px' onclick='closeSet()'>关闭</button>";
		}else{
			tempStr = "您正通过腾讯内网访问拍拍搜索，现在访问的是【体验网】环境。 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<button style='height:20px' onclick='changeSet(\"b\")'>正式IDC</button> &nbsp;<button style='height:20px' onclick='changeSet(\"c\")'>恢复默认</button> &nbsp;<button style='height:20px' onclick='closeSet()'>关闭</button>";
		}
		sc.innerHTML = tempStr;
		if (setFlag && setFlag == 1){
			sc.className += " h";
		}
	}
}
function $setHtml(o,html){
	if(o&&o.nodeType==1){
		o.innerHTML=$xss(html,"none");
	}
}
function $setLoginUrl(option){
	var opt={
		type:'paipai',		//paipai/qq
		dom:document.body,	//可以传入obj，那么会去找该obj下面所有链接，也可以传入string，那么会找这个id本身
		uin:$getQuery("uin") || 0,
		key:$getQuery("skey") || $getCookie("skey") || 0,
		prefix:{
			'paipai':'http://ptlogin2.paipai.com/client_jump_paipai?uin={#uin#}&skey={#key#}&keyindex=0&u1=',
			'qq':'http://ptlogin2.qq.com/jump?uin={#uin#}&skey={#key#}&keyindex=0&u1='
		},
		ptag:'',
		filter:[]
	};
	for(var k in option){opt[k] = option[k]};

	var dom=$id(opt.dom);
	
	if(!(opt.uin && opt.key)){
//		alert(!(opt.uin && opt.key));
//		alert( "@return     " + document.cookie);
		return;	
	}else{
		var Domain =  ( window.location.href.indexOf("qq.com") != -1 )?"qq.com":"paipai.com";
		$setCookie("skey",opt.key,60, "/",Domain);
		$setCookie("pt2gguin",opt.uin,60, "/",Domain);
		//alert(opt.key + opt.uin);
		//alert(document.cookie);
	}
	
	$addEvent(dom,"mousedown",function(e){
		
		var tar=$getTarget(e,dom,"a");
		//当点击sroll的时候也会触发mousedown，但它的parent是null
		if(tar){
			var href=tar.href,
				tag=href.indexOf("?")!=-1?"&":"?";
			//如果已经加上了 | js操作 | # |为空 | 当前页面本身，均不做操作。
			if(href.indexOf("http://ptlogin2")==-1 && href.indexOf("javascript")==-1 && href.indexOf(window.location.href)==-1 && href.indexOf("#")!=0 && href != ""){
				//判断有没有被排除的链接，如果有也不加
				for(var i=0,len=opt.filter.length;i<len;i++){
					if(href.indexOf(opt.filter[i])!=-1){return;}
				}
				//如果指定了ptag且ptag值没有被指定
				opt.ptag && href.toLowerCase().indexOf("ptag")==-1 && (href=href+tag+"PTAG="+opt.ptag);	
				
				//检查当前链接是在哪个域名下，设置相应的opt.type
				opt.type = ( href.indexOf("qq.com") != -1 )?"qq":"paipai";
				//组合新的链接
				var prefix=opt.prefix[opt.type].replace("{#uin#}",opt.uin).replace("{#key#}",opt.key);
				if(opt.type == "paipai"){
					
					tar.href=prefix	+ escape('http://member.paipai.com/cgi-bin/ptlogin?u1='+ escape(href));	
//					alert("paipai url done");
//					alert(document.cookie + "    @paipai");
				}else{
					
					tar.href=prefix	+ escape(href);
//					alert("qq url done");
//					alert(document.cookie + "    @QQ");
				}
			};
		}
	});
}
function $setSaleMail(obj){
    //邮件订阅组件
    var option={
        mid:0,
        x:document.documentElement.clientWidth / 2 - 200,
        y:document.documentElement.scrollTop + 150,
        template:'<div class="box_hint_normal"><span class="icon msg3-icon-right"></span><div class="hint_content" style="width:560px;"><p class="hint_title"><strong>恭喜您成功订阅“<em class="orange">{#mailTitle#}</em>”栏目。</strong></p>{#mailDesc#}<div class="hint_op"><p><a href="http://mail.qq.com/cgi-bin/loginpage" ptag="10007.41.13" target="_blank">在QQ邮箱订阅平台查收邮件</a> <a href="http://my.paipai.com/cgi-bin/mailbook_query" ptag="10007.41.14" target="_blank">管理订阅</a><p></div>{#showOther#}<div class="hint_other"><h5>推荐订阅栏目：</h5><ul>{#otherCommend#}</ul><a class="order_link all" target="_blank" href="http://www.paipai.com/sale/qqmail/order.shtml" title="更多订阅" id="ID_MoreMailOrder">更多订阅</a></div>{#showOther#}<div style="clear:both"></div></div></div></div></div> ',
        templateForNoMail:'<div class="box_hint_normal"> <span class="icon msg2-icon-info"></span><div class="hint_content"><p class="hint_title"><strong>您尚未激活QQ邮箱，请激活后再订阅本栏目。</strong></p><div class="hint_op"><button type="submit" value="激活QQMail" ptag="" onclick="window.open(\'http://mail.qq.com\');">激活QQMail</button></div></div>',
        templateForCommend:'<li><img src="{#commendImage#}" alt="{#commendType#}" />{#commendDesc#}{#commendStatus#}</li>',
        typeForCommend: ["200", "201", "202", "206", "306", "320", "322", "329", "330", "332", "333", "334"],
        mailConfig:{
            "200":["促销信息大全","<p>本栏目为您搜罗最优惠的促销精选！</p><p>您的订阅邮件将在每周五发送至您的QQ邮箱，敬请关注。</p>"],
            "201":["新品推荐","<p>本栏目为您推荐最潮人气新品！</p><p>您的订阅邮件将在每周三发送至您的QQ邮箱，敬请关注。</p>"],
            "202":["时尚指标","<p>本栏目为您速递最前沿的时尚情报！</p><p>您的订阅邮件将在每周一发送至您的QQ邮箱，敬请关注。</p>"],
            "206":["我关注的店铺最近更新","<p>本栏目为您播报您关注店铺最新推荐精品！</p><p>您的订阅邮件将在每周一发送至您的QQ邮箱，敬请关注。</p>"],
            "306":["QQ商城优质生活每周精选","<p>本栏目为您速递QQ商城时尚购物资讯！</p><p>您的订阅邮件将在每周五发送至您的QQ邮箱，敬请关注。</p>"],
			"320":["女装潮流精选","<p>本栏目为您搜罗最in最潮的女装情报！</p><p>您的订阅邮件将每周四发送至您的QQ邮箱，敬请关注。</p>"],
            "322":["拍拍精品团购","<p>本栏目为您抢先播报每日团购！</p><p>您的订阅邮件将每天发送至您的QQ邮箱，敬请关注。</p>"],
            "329":["彩钻贵族周刊","<p>本栏目为您推荐彩钻最新精华购物特权！</p><p>您的订阅邮件将发送至您的QQ邮箱，敬请关注。</p>"],
            "330":["美容美妆","<p>本栏目为您传递美容扮靓最新资讯</p><p>您的订阅邮件将在每周五发送至您的QQ邮箱，敬请关注。</p>"],
            "331":["数码导购宝典","<p>本栏目为您速递省钱放心的数码潮品！</p><p>您的订阅邮件将发送至您的QQ邮箱，敬请关注。</p>"],
            "332":["品质生活家","<p>本栏目为推荐最优质的家居美食资讯</p><p>您的订阅邮件将每周五发送至您的QQ邮箱，敬请关注。</p>"],
            "333":["便民充值服务","<p>本栏目为您甄选最超值的充值送礼优惠</p><p>您的订阅邮件将每双周发送至您的QQ邮箱，敬请关注。</p>"],
            "334":["母婴期刊","<p>本栏目为您精选官方认证最可信的母婴精品</p><p>您的订阅邮件将发送至您的QQ邮箱，敬请关注。</p>"],
            "777":["拍拍网所有","<p>您的订阅信息将以邮件形式发送至您的QQ邮箱，敬请关注。</p>"]
        }
    }
    for(var i in obj){
        option[i]=obj[i];
    }
    //全局变量
    window.PP_core_saleMail_option = option;
    //浮窗登录
    $loginFrame({
        type : 'func',
        model : false,
        action : function(){
            //期待回调函数ModifySaleMailInfo(json)
            var mid = window.PP_core_saleMail_option.mid=="777"?"200|201|202|206|306|320|322|329|330|332|333|334":window.PP_core_saleMail_option.mid;
            $loadScript("http://my.paipai.com/cgi-bin/mailbook_setbook?callback=ModifySaleMailInfo&option=1&bookitem="+mid+"&t="+Math.random());
        },
        x : window.PP_core_saleMail_option.x,
        y : window.PP_core_saleMail_option.y
    });
    $loadCss("http://static.paipaiimg.com/css/common/salemail.css");
    $loadCss("http://static.paipaiimg.com/module/msg_tips.css");
    
    window.ModifySaleMailInfo=function(json){
        /*    返回数据：    ModifySaleMailInfo({"i_ret":0,"data":[200, 201, 202, 206, 306, 320, 322, 329, 330, 331, 332, 333, 334],"msg":"success!"});     i_ret：状态：（1需要激活邮件，0订阅成功，-1登陆超时）
        data：状态为0的时候有效，值为[200, 201, 202, 206, 306, 320, 322, 329, 330, 331, 332, 333, 334]已经订阅的栏目id        */
        if(json.i_ret == -1){
            $loginFrame({
                type :'func',
                check:false,
                model :false,
                action : function(){
                    //期待回调函数ModifySaleMailInfo(json)
                    var mid = window.PP_core_saleMail_option.mid=="777"?"200|201|202|206|306|320|322|329|330|331|332|333|334":window.PP_core_saleMail_option.mid;
                    $loadScript("http://my.paipai.com/cgi-bin/mailbook_setbook?callback=ModifySaleMailInfo&option=1&bookitem="+mid+"&t="+Math.random());
                },
                x : window.PP_core_saleMail_option.x,
                y : window.PP_core_saleMail_option.y
            });
        }else if(json.i_ret == 0){
            var hc=window.PP_core_saleMail_option.template;
            var mailConfig=window.PP_core_saleMail_option.mailConfig[window.PP_core_saleMail_option.mid];
            if(!mailConfig){
                alert("邮件配置错误，请联系客服！");
                return false;
            }
            hc=hc.replace(/{#mailTitle#}/g,mailConfig[0]);
            hc=hc.replace(/{#mailDesc#}/g,mailConfig[1]);
            //根据typeForCommend过滤栏目
            var userOrder = [];
            if(window.PP_core_saleMail_option.mid == "777"){
                userOrder = window.PP_core_saleMail_option.typeForCommend.concat();
            }else{
                for(var i=0, len=json.data.length; i<len; i++) {
                    if($inArray(json.data[i].toString(), window.PP_core_saleMail_option.typeForCommend) != -1) {
                        userOrder.push(json.data[i].toString());
                    }
                }
				
				//邮件订阅接口偶尔不会把当前订阅id返回
                if($inArray(window.PP_core_saleMail_option.mid.toString(), userOrder) == -1){
                    userOrder.push(window.PP_core_saleMail_option.mid.toString());
                }
            }
            //检查是否已全部订阅，全部订阅时不显示推荐栏
			if (userOrder.length < window.PP_core_saleMail_option.typeForCommend.length) {
				var commendStr = getCommendList(userOrder, window.PP_core_saleMail_option.mid, window.PP_core_saleMail_option.templateForCommend);
				hc = hc.replace(/{#otherCommend#}/g, commendStr);
			}
            if(commendStr){
                hc=hc.replace(/{#showOther#}/g,"");
            }else{
                hc=hc.replace(/{#showOther#}.*{#showOther#}/g,"");
            }
            var float = $float({
                title:"邮件订阅",
                html:hc,
                width:"650"
            });
			$id("ID_MoreMailOrder").onclick = function() {
				float.close();
			}
        }else if(json.i_ret == 1){        
            $float({
                title:"提示",
                html:window.PP_core_saleMail_option.templateForNoMail
            });
        }    
        
        function getCommendList(bookItem, curItem, template){
            if(curItem == "777" || bookItem.length >= option.typeForCommend.length) return "";
            var bookItemObj = {
                "200" : ["1", "200", "http://mat1.gtimg.com/paipaimai/images/email/2010/0205/icon_sale.png","促销信息大全",	"<p>搜罗最优惠促销精选！</p><p>逢周五投递</p>", 	"10007.41.17"],
                "202" : ["2", "202", "http://mat1.gtimg.com/paipaimai/images/email/20101217/l2.png",		"时尚指标",		"<p>速递最前沿时尚情报！</p><p>逢周一投递</p>", 	"10007.41.19"],
                "201" : ["3", "201", "http://mat1.gtimg.com/paipaimai/images/email/20101217/l3.png",		"新品推荐",		"<p>推荐最潮人气新品！</p><p>逢周三投递</p>", 		"10007.41.18"],
                "322" : ["4", "322", "http://mat1.gtimg.com/paipaimai/images/email/20101217/l4.png",		"精品团购",		"<p>每日团购优惠抢先报！</p><p>每天投递</p>", 		"10007.41.26"],
                "206" : ["5", "206", "http://mat1.gtimg.com/paipaimai/images/email/20101217/l1.png",		"店铺更新",		"<p>播报关注店铺最新推荐。</p><p>逢周一投递</p>", 	"10007.41.25"],
                "320" : ["6", "320", "http://mat1.gtimg.com/paipaimai/images/email/20101217/01.jpg",		"女装潮流",		"<p>推荐最人气潮爆女装！</p><p>逢周四投递</p>", 	"10007.41.29"],
                "306" : ["7", "306", "http://mat1.gtimg.com/paipaimai/images/email/20101217/02.jpg",		"商城生活",		"<p>QQ商城精品抢先看！</p><p>逢周四投递</p>", 		"10007.41.23"],
                "329" : ["8", "329", "http://mat1.gtimg.com/paipaimai/images/email/20101217/03.jpg",		"彩钻周刊",		"<p>推荐最精华购物特权！</p><p>逢周一投递</p>", 	"10007.41.31"],
                "330" : ["9", "330", "http://mat1.gtimg.com/paipaimai/images/email/20101217/04.jpg",		"美容美妆",		"<p>最新最优惠美妆推荐！</p><p>逢周五投递</p>", 	"10007.41.32"],
                "331" : ["10", "331", "http://mat1.gtimg.com/paipaimai/images/email/20101217/05.jpg",		"数码导购宝典",	"<p>最全特价数码集散地！</p><p>逢周二投递</p>", 	"10007.41.33"],
                "332" : ["11", "332", "http://mat1.gtimg.com/paipaimai/images/email/20101217/06.jpg",		"品质生活家",	"<p>打造白领优质生活样板</p><p>逢周五投递</p>", 	"10007.41.34"],
                "334" : ["12", "334", "http://mat1.gtimg.com/paipaimai/images/email/20101217/07.jpg",		"母婴期刊",		"<p>搜罗最全育儿宝典！</p><p>每周投递</p>", 		"10007.41.35"],
                "333" : ["13", "333", "http://mat1.gtimg.com/paipaimai/images/email/20101217/08.jpg",		"便民充值服务",	"<p>超值充值优惠抢先看！</p><p>双周投递</p>", 		"10007.41.36"]
			},
			core = ["200", "201", "202", "322"], unCore = ["206", "320", "306", "329", "330", "332", "334", "333"],bookCore = [],
			str = "", commObj = [], unsubscribedItems=[];
			//过滤已订阅的主要订阅项，将未订阅的主要订阅项作为推荐内容存入commObj，已订阅的存入bookCore备用。
			for(var i=0, len=core.length; i<len; i++) {
				//当前执行的订阅项不显示在推荐内容中
				$inArray(core[i], bookItem) < 0 ? commObj.push(core[i]) : bookCore.push(core[i]);
			}
			//将已订阅以及当前执行的订阅项从unCore中剔除，unCore是次要订阅项，用于后面补足commObj的个数，总数由commLen控制
			for(var i=unCore.length; i--;) {
				if($inArray(unCore[i], bookItem) != -1) {
					unCore.splice(i, 1);
				}
			}
			//补足commObj的个数，unCore有值时从unCore中随机吐出，unCore无值时从core中随机吐出，并显示“已订阅”。
			for(var i=0; ;i++){
				var j = Math.floor(Math.random() * unCore.length);
				if(unCore[j]){
				    unsubscribedItems.push(unCore[j]);
					unCore.splice(j, 1);
				}
				if(unCore.length == 0)break;
			}
			commObj = commObj.concat(unsubscribedItems.concat(bookCore));
		    
			var item;
            for(var i=0; i<4; i++) {
                var comm = template;
				item = bookItemObj[commObj[i]];
				comm = comm.replace(/{#commendImage#}/g, item[2]);
				comm = comm.replace(/{#commendType#}/g, item[3]);
				comm = comm.replace(/{#commendDesc#}/g, item[4]);
				comm = comm.replace(/{#commendStatus#}/g, $inArray(item[1], bookCore ) < 0 ? '<a class="order_link" href="javascript:void(0);" title="' + item[3] + '" mailid="' + item[1] + '" tag="saleMail" ptag="' + item[5] + '">免费订阅</a>' : '<p class="done">已订阅</p>');
                str += comm;
            }
            
            return str;
        };	
        return;
    };
}
function $share(config){
	var opt={
		cname:"",//商品名|店铺名|活动名
		cid:"",//商品id|店铺id|活动id（暂不支持多条）
		uid:"",//分享人的QQ号码
		left:0,
		top:0,
		stype:1,//纯文本1|商品2|店铺3|活动4
		ptype:1,//分享类型 1：原创 2：转发 3：点评
		sreason:'',
		price:"0",//商品价格信息
		color:'blue',	//blue|red|yel|gray
		defaultNote:'我也来写几句…',
		isClearDefault:0,	//是否清除默认文字
		src:"1",//发起地点
		srcshareid:'',//源分享id
		srcuin:'',//源分享发表人
		srcposttime:'',//源分享发表时间
		title:"购物分享",
		imgInfo:{
			src:"",
			alt:"",
			href:""
		},//活动类型时分享的图片信息
		rd:{
			"btnCloseRd":"1057.2.1",//关闭按钮
			"btnCancelRd":"1057.2.4",//取消按钮
			"btnShareRd":"1057.2.3",//分享按钮
			"btnSynWb":"",//同步到微博
			"btnSynQz":""//同步到qzone
		},//统计rd
		errormsg:null,//错误信息
		cover:false,//是否生成覆盖层
		dragble:false,//所有浮层是否可拖动
		shareCallBack:null  //分享后回调函数
	};
	for(var i in config){
			if(typeof(config[i])=="object"){
				for(var ch in config[i]){
					opt[i][ch]=config[i][ch];
				}
			}else{
				opt[i]=config[i];
			}
		}
	if(!opt.uid || opt.uid == ""){
		opt.uid = $getUin();
	}	
	//样式载入
	window.setTimeout(function(){
		$loadCss("http://static.paipaiimg.com/module/layout_share_v2.css?t=20110505");
	},0);
	//$loadCss("http://static.paipaiimg.com/module/msg_tips.css");
	var path = "http://ext.paipai.com/qzone/IsLogin?comid="+opt.cid+"&t="+Math.random();
	//返回码统计对象_retCoder
	var _retCoder0=$returnCode({url:path,frequence:2});
    //期待回调LoginInfoCallBack
	$loadScript(path,"sharelogin");
	
	window.LoginInfoCallBack = function(conf){
		//返回码上报
		_retCoder0.report((conf.retcode=="0"?true:false),conf.retcode);
		if(conf.retcode == "1"){
			//如果未登陆
			$loginFrame({
				type:'func',
				check:false,
				model:false,
				action:function(){
					if(!opt.uid || opt.uid == ""){
						opt.uid = $getUin();
					}
					$share(opt);
				},
				"x":opt.left,
				"y":opt.top
			});
			return;
		};
	
		var html = $strReplace('<div class="layout_box"><div class="layout_share layout_share_{#color#}"><div class="title">{#title#}<a href="javascript:" title="关闭" id="closeShare">关闭</a></div><p class="descript">全新的购物分享，与大家一起分享购物的乐趣……</p><div class="main_area"><div class="photo_area"><p class="photo">{#nickLogo#}</p><p class="name">{#nick#}</p></div><div class="details"><textarea id="shareCont" class="text_roll"><\/textarea><p class="num_count" id="shareNote">0/140</p><div class="goods" style="display:none" id="viewGoods"> </div><span class="arrow">&nbsp;</span> </div><div class="layout_bom"><button id="cancelShare">取消</button><button id="doshare">分享</button><div id="shareCoreSync" class="tit_with" style="display:none"><p class="fx_qz_on" id="shareCoreQz" style="display:none">&nbsp;</p><p class="fx_t_on" id="shareCoreWb" style="display:none">&nbsp;</p><p class="tb">同步：</p></div></div></div></div></div>',{
			"{#color#}":opt.color,
			"{#title#}":opt.title,
			"{#nickLogo#}":$getUserPic(opt.uid,50),
			"{#nick#}":$strSubGB($getNick() || opt.uid,0,6,"…")
		});
			
		var fs=$float({
			cover:opt.cover,
			style:"none",
			html:html,
			left:opt.left,
			top:opt.top,
			dragble:opt.dragble
		});

		/* @interface:153;
		 * 接口url：http://ext.paipai.com/uinfo/cooperateaccountstatus
		 * 接口名称：取腾讯微博及QQ空间开通状态
		 * 期待回调：shareCoreCallback
		 * @interfaceEnd*/
		//调用接口前全复位 
		var isSyncQz=0,
			isSyncWb=0;
		if(opt.ptype==1){
			$loadScript("http://ext.paipai.com/uinfo/cooperateaccountstatus?callback=shareCoreCallback");
		
			window.shareCoreCallback=function(info){
				if(info.retCode*1 == 0){
					if(info.TWbOpen*1==1 || info.QzoneOpen*1==1){
						var oQz=$id("shareCoreQz"),
							oWb=$id("shareCoreWb");
						$display("shareCoreSync");
						if(info.QzoneOpen*1==1 && (opt.stype+"") == "2"){
							isSyncQz = 1;
							$display(oQz);
							oQz.onclick=function(){
								if(opt.rd["btnSynQz"]){
									$countRd(opt.rd["btnSynQz"]);
								}
								if(oQz.className=="fx_qz"){
									isSyncQz = 1;
									oQz.className = "fx_qz_on";
								}else{
									isSyncQz = 0;
									oQz.className = "fx_qz";
								}
							}
						};
						if(info.TWbOpen*1==1){
							isSyncWb = 1;
							$display(oWb);
							oWb.onclick=function(){
								if(opt.rd["btnSynWb"]){
									$countRd(opt.rd["btnSynWb"]);
								}
								if(oWb.className=="fx_t"){
									isSyncWb = 1;
									oWb.className = "fx_t_on";
								}else{
									isSyncWb = 0;
									oWb.className = "fx_t";
								}
							}
						};								
					}
				}
			}
		};
		
		$id("closeShare").onclick=function(){
			$countRd(opt.rd["btnCloseRd"]);
			fs.close();			
		};
			
		$id("cancelShare").onclick=function(){
			$countRd(opt.rd["btnCancelRd"]);
			fs.close();						  
		};
			
		var that=$id("shareCont"),
			oNote=$id("shareNote");
			
		if(opt.defaultNote && opt.sreason==""){
			that.value=opt.defaultNote;
			$focus(that,"");
		}else{
			that.value=opt.sreason;
			$focus(that,0);
		};
		oNote.innerHTML=that.value.length+"/140";
		that.onkeyup=function(){
			var len = $getContentLenWithUrl(this.value, 20);
			oNote.innerHTML=len+"/140";
			if(len <= 140){
				oNote.className="num_count";
			}else{
				oNote.className="num_count num_count_spill";
			}
		};
		if(opt.errormsg){
		   oNote.innerHTML=opt.errormsg;
		   oNote.className="num_count num_count_spill";
		}    
		/* @interface:86;
		 * 接口url：http://auction1.3c.paipai.com/getItemInfo.xhtml
		 * 接口名称：3c-获取商品简要数据
		 * 期待回调：window._PP_3c_getItemInfo
		 * @interfaceEnd*/
		switch(opt.stype+""){
			case "2":
				/* @interface:23;
				 * 接口url：http://my.paipai.com/cgi-bin/item_view/item_list
				 * 接口名称：今日特价-批量获取商品信息
				 * 期待回调：itemCommInfoCallBack
				 * @interfaceEnd*/
				var path = "http://auction1.paipai.com/"+opt.cid+".1",
					_retCoder=$returnCode({url:path,frequence:2});
				$loadScript(path,"auctionScript");	
				
				window.commodityJsonInfoCallBack=function(info){
					//返回码上报
					_retCoder.report();
					if(info.pic){
						$display("viewGoods");
						var html=[];
						html.push('<p class="gs_img"><img src="'+info.pic.replace(".jpg.3.jpg ",".80x80.jpg")+'" /></p>');
						html.push('<div class="gs_desc">');
						html.push('	<p class="gs_name">'+info.name.substr(0,24)+(info.name.length>24?"…":"")+'</p>');
						html.push('	<p class="gs_price"><span>'+info.price+'</span><span>元</span> </p>');
						html.push('</div>');
		
						$id("viewGoods").innerHTML=html.join("");
					}
				};		
			break;
			case "4":
				if(opt.imgInfo["src"]){
					$display("viewGoods");
					var html=[];
					html.push('<p class="gs_img"><img src="'+opt.imgInfo["src"]+'" width="80px" height="80px" /></p>');
					if(opt.price!="0"){
						html.push('<div class="gs_desc">');
						html.push('	<p class="gs_name">'+opt.cname.substr(0,24)+(opt.cname.length>24?"…":"")+'</p>');
						html.push('	<p class="gs_price"><span>'+opt.price+'</span><span>元</span> </p>');
						html.push('</div>');
					}
					$id("viewGoods").innerHTML=html.join("");
				}
		};
			
		//提交事件
		$id("doshare").onclick=function(){	
			var val=that.value,
				len = $getContentLenWithUrl(val, 20);
			//0/140
			//<p class=" none">分享内容中含有敏感词，请重新输入</p>
			switch(true){
				case val=="" || (val==opt.defaultNote && opt.isClearDefault==1):
					oNote.innerHTML="分享内容不能为空，请输入内容";
					oNote.className="num_count num_count_spill";
					that.value="";
					that.focus();
				return;
				case len<8:
					oNote.innerHTML="分享内容不能少于8个字，请继续输入";
					oNote.className="num_count num_count_spill";
				return;
				case len>140:
					oNote.innerHTML="超出"+(len-140)+"字";
					oNote.className="num_count num_count_spill";
				return;
			};
			$countRd(opt.rd["btnShareRd"]);
			var tempCid = opt.cid ? $strTrim(opt.cid) : "";
			var tempSrc = opt.imgInfo["src"] ? $strTrim(opt.imgInfo["src"]) : "";
			var tempAlt = opt.imgInfo["alt"] ?  $strTrim(opt.imgInfo["alt"]) : "";
			var tempHref = opt.imgInfo["href"] ? $strTrim(opt.imgInfo["href"]) : "";			
			var path = "http://ext.paipai.com/share/addshare?callback=addShareCore&posttype="+opt.ptype+"&synqzone="+isSyncQz+"&synwb="+isSyncWb+"&sharetype="+opt.stype+"&src="+opt.src+"&context="+encodeURIComponent(val)+"&id="+tempCid+"&srcshareid="+opt.srcshareid+"&srcuin="+opt.srcuin+"&srcposttime="+opt.srcposttime+"&logo="+tempSrc+"&desc="+tempAlt+"&url="+tempHref;

			var _retCoder1=$returnCode({url:path,frequence:2});
			$loadScript(path);
			
			fs.close();
			
			var waitHtml = '<div class="class="share_to_friend"><img src="http://pics.paipai.com/common/icon/loading.gif" align="absmiddle"/>正在分享，请稍候<div>';
			var fw=$float({
				cover:opt.cover,
				style:"stand",
				title:opt.title,
				width:'420',
				html:waitHtml,
				left:opt.left,
				top:opt.top,
				height:137,
				dragble:opt.dragble
			});
			window.addShareCore=function(info){
				//返回码上报
				_retCoder1.report();
				fw.close();
				
				var msg="";
				switch(info.ret+""){
					 case "-1":
						$loginFrame({
							type:'func',
							check:false,
							model:false,
							action:function(){
								if(!opt.uid || opt.uid == ""){
									opt.uid = $getUin();
								}
								$share(opt);
							},
							"x":opt.left,
							"y":opt.top
						});
						return;
					 break;
					 case "0":
						var finishHtml = '<div class="class="share_to_friend"><!-- S 通用提示 --> <div class="box_hint_normal"> <span class="{#classname#}"></span> <div class="hint_content"> <p class="hint_title"><strong>{#username#}（{#uin#}）{#shareresult#}！</strong></p> <p class="hint_title"><a href="http://t.paipai.com/'+opt.uid+'/mine?PTAG=1057.2.5" target="_blank">点击查看我所有的分享</a></p><div class="hint_op"> <button id="closeSaveShare">关闭窗口</button> </div> </div> </div> <!-- E 通用提示 --><div>';
						finishHtml=$strReplace(finishHtml,{
								"{#username#}":$getNick(),
								"{#uin#}":opt.uid,
								"{#shareresult#}":"分享成功",
								"{#classname#}":"icon msg2-icon-right"
						});
						var fh=$float({
							cover:opt.cover,
							style:"stand",
							title:opt.title,
							width:'420',
							html:finishHtml,
							left:opt.left,
							top:opt.top,
							dragble:opt.dragble
						});			
						$id("closeSaveShare").onclick=function(){
							fh.close();					
						};
						opt.shareCallBack && opt.shareCallBack();
					 break;
					 case "16":
						opt.errormsg = "转发内容中含敏感词，请重新输入";
						opt.sreason = that.value;
						$share(opt);          
					 break;
					 case "18":
						opt.errormsg = "您信息中的链接存在安全隐患";
						opt.sreason = that.value;
						$share(opt);          
					 break;
					 default:
						alert("服务繁忙，请稍后再试");
					 break;
				};
			};		
		};
	};
}
function $shareComm(config){
	var opt={
		cname:"",//商品名|店铺名|活动名
		cid:"",//商品id|店铺id|活动id
		uid:"",//qq号码
		left:0,
		top:0,
		stype:'1',//商品1|店铺2|活动3
		sreason:'',
		color:'blue',	//blue|red|yel|gray
		defaultNote:'我也来写几句…'
	};
	for(var i in config)opt[i]=config[i];
	//样式载入
	$loadCss("http://static.paipaiimg.com/module/layout_share.css");
	
	var path = "http://ext.paipai.com/qzone/IsLogin?comid="+opt.cid+"&t="+Math.random();
	//返回码统计对象_retCoder
	var _retCoder1=$returnCode({url:path,frequence:2});
    //期待回调LoginInfoCallBack
	$loadScript(path,"sharelogin");
	
	window.LoginInfoCallBack = function(config){
		//返回码上报
		_retCoder1.report((config.retcode=="0"?true:false),config.retcode);
		if(config.retcode == "1"){
			//如果未登陆
			$loginFrame({type:'func',check:false,model:false,action:function(){opt.uid=$getUin();$shareComm(opt)},"x":opt.left,"y":opt.top});
			return;
		};
	
		var html = $strReplace('<div class="layout_box"><div class="layout_share layout_share_{#color#}"><div class="title">购物分享<a href="javascript:" title="关闭" id="closeShare">关闭</a></div><p class="descript">全新的购物分享，与大家一起分享购物的乐趣……</p><div class="main_area"><div class="photo_area"><p class="photo">{#nickLogo#}</p><p class="name">{#nick#}</p></div><div class="details"><textarea id="shareCont"><\/textarea><p class="num_count" id="shareNote">0/140</p><div class="goods"><p class="gs_img"><img id="shareItemImg" /></p><div class="gs_desc"><p class="gs_name" id="shareItemName"></p><p class="gs_price"><span id="shareItemPrix"></span><span>元</span> </p></div></div><span class="arrow">&nbsp;</span> </div><div class="layout_bom"> <a href="http://help.paipai.com/content/help_20123.shtml?PTAG=1057.2.2" target="_blank">什么是购物分享?</a><button id="cancelShare">取消</button><button class="btn_share" id="doshare">分享</button></div></div></div>',{
			"{#color#}":opt.color,
			"{#nickLogo#}":$getUserPic(opt.uid,50),
			"{#nick#}":$strSubGB($getNick() || opt.uid,0,6,"…")
		});
		
		var fs=$float({
			cover:false,
			style:"none",
			html:html,
			left:opt.left,
			top:opt.top
		});
		
		$id("closeShare").onclick=function(){
			$countRd("1057.2.1");
			fs.close();			
		};
		
		$id("cancelShare").onclick=function(){
			$countRd("1057.2.4");
			fs.close();						  
		};
		
		var that=$id("shareCont"),
			oNote=$id("shareNote");
		
		if(opt.defaultNote && opt.sreason==""){
			that.value=opt.defaultNote;
			$focus(that,"");
		}else{
			that.value=opt.sreason;
			$focus(that,0);
		};
		that.onkeyup=function(){
			var len=this.value.length;
			oNote.innerHTML=len+"/140";
			if(len <= 140){
				oNote.className="num_count";
			}else{
				oNote.className="num_count num_count_spill";
			}
		};
		/* @interface:86;
		 * 接口url：http://auction1.3c.paipai.com/getItemInfo.xhtml
		 * 接口名称：3c-获取商品简要数据
		 * 期待回调：window._PP_3c_getItemInfo
		 * @interfaceEnd*/
		 if(opt.stype==1){
			 var path = "http://auction1.paipai.com/"+opt.cid+".1?t="+Math.random();
			 //返回码统计对象_retCoder
			var _retCoder2=$returnCode({url:path,frequence:2});
            //期待回调commodityJsonInfoCallBack
			$loadScript(path,"auctionScript")
			window.commodityJsonInfoCallBack=function(json){
				//返回码上报
				_retCoder2.report();
				$id("shareItemImg").src=json.pic.replace(".jpg.3.jpg ",".80x80.jpg");//80*80
				$id("shareItemName").innerHTML=json.name.substr(0,24)+(json.name.length>24?"…":"");
				$id("shareItemPrix").innerHTML=json.price;
			};
		 }		
		
		//提交事件
		$id("doshare").onclick=function(){	
			
			var val=that.value,
				len=val.length;
			//0/140
			//<p class=" none">分享内容中含有敏感词，请重新输入</p>
			switch(true){
				case val=="" || val==opt.defaultNote:
					oNote.innerHTML="分享内容不能为空，请输入内容";
					oNote.className="num_count num_count_spill";
					that.value="";
					that.focus();
				return;
				case len<8:
					oNote.innerHTML="分享内容不能少于8个字，请继续输入";
					oNote.className="num_count num_count_spill";
				return;
				case len>140:
					oNote.innerHTML="超出"+(len-140)+"字";
					oNote.className="num_count num_count_spill";
				return;
			};

			$countRd("1057.2.3");
			var path = "http://ext.paipai.com/qzone/AddShare?type="+opt.stype+"&title="+encodeURIComponent($id("shareItemName").innerHTML)+"&id="+opt.cid+"&reason="+encodeURIComponent(val)+"&t="+Math.random();
			//返回码统计对象_retCoder
			var _retCoder3=$returnCode({url:path,frequence:2});
			/* @interface:66;
			 * 接口url：http://ext.paipai.com/qzone/AddShare
			 * 接口名称：商品详情--商品分享给好友操作接口
			 * 期待回调：getShareInfoCallBack
			 * @interfaceEnd*/
			$loadScript(path,"qzshare");
			
			fs.close();
			
			var waitHtml = '<div class="class="share_to_friend"><img src="http://pics.paipai.com/common/icon/loading.gif" align="absmiddle"/>正在分享，请稍候<div>';
			var fw=$float({
				cover:false,
				style:"stand",
				title:"分享给好友",
				width:'420',
				html:waitHtml,
				left:opt.left,
				top:opt.top,
				height:137
			});
			
			//收藏回调
			window.getShareInfoCallBack = function(config){
				//返回码上报
				_retCoder3.report();
				fw.close();
				if(config.msg == "请登录后再分享"){
					$loginFrame({type:'func',check:false,model:false,action:function(){$shareComm(opt)},"x":opt.left,"y":opt.top});
					return;
				}
				var finishHtml = '<div class="class="share_to_friend"><!-- S 通用提示 --> <div class="box_hint_normal"> <span class="{#classname#}"></span> <div class="hint_content"> <p class="hint_title"><strong>{#username#}（{#uin#}）{#shareresult#}！</strong></p> <p class="hint_title"><a href="http://ext.paipai.com/uinfo/info?userid='+config.uin+'" target="_blank">点击查看我所有的分享</a></p><div class="hint_op"> <button id="closeSaveShare">关闭窗口</button> </div> </div> </div> <!-- E 通用提示 --><div>';
				finishHtml=config.msg=="分享商品成功"?$strReplace(finishHtml,{
						"{#username#}":config.nickname,
						"{#uin#}":config.uin,
						"{#shareresult#}":config.msg,
						"{#classname#}":"icon msg2-icon-right"
					}):	$strReplace(finishHtml,{
						"{#username#}":"",
						"（{#uin#}）":"",
						"{#shareresult#}":config.msg,
						"{#classname#}":"icon msg2-icon-right"
					});

				var fh=$float({
					cover:false,
					style:"stand",
					title:"分享给好友",
					width:'420',
					html:finishHtml,
					left:opt.left,
					top:opt.top
				});
				
				$id("closeSaveShare").onclick=function(){
					fh.close();					
				};
			};
		};
	};
}
function $shareSns(cfg) {
	var opt= {
		cname:"",//商品名|店铺名|活动名
		cid:"",//商品id|店铺id|活动id（暂不支持多条）
		uid:"",//分享人的QQ号码
		left:0,
		top:0,
		stype:1,//纯文本1|商品2|店铺3|活动4
		ptype:1,//分享类型 1：原创 2：转发 3：点评
		sreason:'',
		price:"0",//商品价格信息
		color:'blue',	//blue|red|yel|gray
		defaultNote:'我也来写几句…',
		isClearDefault:0,	//是否清除默认文字
		src:"1",//发起地点
		srcshareid:'',//源分享id
		srcuin:'',//源分享发表人
		srcposttime:'',//源分享发表时间
		title:"拍拍乐享，快乐传递，跟您的粉丝一起分享购物的乐趣",
		imgInfo: {
			src:"",
			alt:"",
			href:""
		},//活动类型时分享的图片信息
		rd: {
			"btnCloseRd":"1057.2.1",//关闭按钮
			"btnCancelRd":"1057.2.4",//取消按钮
			"btnShareRd":"1057.2.3",//分享按钮
			"btnSynWb":"",//同步到微博
			"btnSynQz":""//同步到qzone
		},//统计rd
		errormsg:null,//错误信息
		cover:false//是否生成覆盖层
	};
	$extend(opt,cfg);

	if(!opt.viewId)
		return null;

	$id(opt.viewId).innerHTML='<div style="width:200px;height:16px;" id="shareSns"><p style="width:200px;height:16px;line-height:14px;line-height:18px\9;_line-height:14px;">分享到：<span style="display:inline-block;height:16px;width:16px;line-height:16px;background:url(http://static.paipaiimg.com/module/share-logo.png) 0 0 no-repeat;cursor:pointer;'+(opt.cid ? "" : "display:none")+'" tag="snsPaipai" title="拍拍乐享">&nbsp;</span><span style="margin-left:10px;display:inline-block;height:16px;width:16px;line-height:16px;background:url(http://static.paipaiimg.com/module/share-logo.png) -26px 0 no-repeat;cursor:pointer" tag="snsTencent" title="腾讯微博">&nbsp;</span><span style="margin-left:10px;display:inline-block;height:16px;width:16px;line-height:16px;background:url(http://static.paipaiimg.com/module/share-logo.png) -52px 0 no-repeat;cursor:pointer" tag="snsQzone" title="QQ空间">&nbsp;</span><span style="margin-left:10px;display:inline-block;height:16px;width:16px;line-height:16px;background:url(http://static.paipaiimg.com/module/share-logo.png) -78px 0 no-repeat;cursor:pointer" tag="snsSina" title="新浪微博">&nbsp;</span><span style="margin-left:10px;display:inline-block;height:16px;width:16px;line-height:16px;background:url(http://static.paipaiimg.com/module/share-logo.png) -104px 0 no-repeat;cursor:pointer" tag="snsPengyou" title="腾讯朋友">&nbsp;</span><span style="margin-left:10px;display:inline-block;height:16px;width:16px;line-height:16px;background:url(http://static.paipaiimg.com/module/share-logo.png) -128px 0 no-repeat;cursor:pointer" tag="snsMeilishou" title="美丽说">&nbsp;</span></p></div>';

	$id("shareSns").onclick= function(e) {
		var tar=$getTarget(e),
			url=opt.imgInfo.href || document.location.href;				
		url+=(url.indexOf("?")!=-1?"&":"?") + "PTAG=";
		$preventDefault(e);
		var tempImgSrc = $strTrim(opt.imgInfo["src"]);
		switch(tar.getAttribute("tag")) {
			case "snsPaipai":
				$countRd("1057.3.1");
				$share(cfg);
				break;
			case "snsTencent":
				$countRd("1057.3.2");
				$postToWb({
					title: opt.title,
					appkey: "1b1c2e0887c04f17a4419ce60d557e15",//你从腾讯获得的appkey
					pic:tempImgSrc,//（例如：var _pic='图片url1|图片url2|图片url3....）
					url:url+"10064.2.1",
					site:"http://www.paipai.com/"
				});
				break;
			case "snsQzone":
				$countRd("1057.3.3");
				window.open("http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?url="+encodeURIComponent(url+"10064.2.2")+"&pics="+encodeURIComponent(tempImgSrc)+"&site="+encodeURIComponent("腾讯拍拍"),"wb", "width=640, height=550, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no");
				break;
			case "snsSina":
				$countRd("1057.3.4");
				window.open("http://service.weibo.com/share/share.php?url="+encodeURIComponent(url+"10064.2.3")+"&appkey=&title="+encodeURIComponent(opt.title)+"&pic="+encodeURIComponent(tempImgSrc)+"&ralateUid=","_blank","width=615,height=505");
				break;
			case "snsPengyou":
				$countRd("1057.3.5");
				window.open("http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?to=pengyou&url="+encodeURIComponent(url+"10064.2.4")+"&pics="+encodeURIComponent(tempImgSrc)+"&site="+encodeURIComponent("腾讯拍拍"),"wb", "width=640, height=550, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no");
				break;
			case "snsMeilishou":
				$countRd("1057.3.6");
				window.open("http://www.meilishuo.com/share/share?url="+encodeURIComponent(url+"10064.2.5")+"&content="+encodeURIComponent("拍拍乐享，快乐传递，跟您的粉丝一起分享购物的乐趣"+url+"10064.2.5")+"&image="+encodeURIComponent(tempImgSrc),"_blank", "width=980,height=505,scrollbars=yes,location=yes,resizable=yes,status=no");
				break;
		};
	};
}
function $shareToFriend(opt){
	$loadCss("http://static.paipaiimg.com/module/msg_tips.css");
	$loadCss("http://static.paipaiimg.com/module/module_box.css?t=20100719");
	$loadCss("http://static.paipaiimg.com/module/m_share.css");
	//基本配置
	var option = {
		limit : 20,		//好友选择上限
		cover : false,	//是否显示覆盖背景
		title : "邀请好友",
		actionId : "",	//好友选择提交功能
		validityId : "",
		detail : "#",
		status : "0"	//在线状态 0：全部;  1：在线;  2：离线; 3：离开;
	};
	for( var i in opt ){
		option[i]=opt[i];
	}
	//全局变量
	window.PP_core_stf_option = option;
	//校验登录
	if ( !$isLogin() ){
		//浮窗登录
		$loginFrame({
			type : 'func',
			check : false,
			model : false,
			action : function(){location.reload();},
			x : 0,
			y : 0
		});
		return;
	}
	//输出好友选择器框架
	var template=
	'<div id="shareTofriend" class="module_box_normal m_share">'+
	'<!--[if IE 6]><iframe frameBorder="0" style="position:absolute;left:-5px;top:-5px;z-index:-1;filter:Alpha(Opacity=0);border:solid;width:486px;height:580px;"></iframe><![endif]-->'+
	'<iframe style="display:none" name="iframe1" id="iframe1"></iframe><div class="box_title"><h4>{#title#}</h4><a href="#nogo" class="bt_close" id="close_frame"></a></div>'+
	'<div class="box_content m_scnt">'+
	'<div class="m_sabs"><span class="m_stit">邀请QQ好友参加此优惠活动</span><span class="m_sfaqs"><a href="{#detail#}" target="_blank"><span class="msg0-icon-help"></span>了解此活动详情</a></span></div>'+
	'<p class="m_snum">已选 <span>0</span> 人/上限 <span>20</span> 人</p>'+
	'<div class="m_sselecter"><dl class="m_sfriens">'+
	'<dt class="tit"><span>好友</span></dt><dd class="bd"><div class="m_slist">正在加载中。。。。</div></dd></dl>'+
	'<dl class="m_sinvite"><dt class="tit">选中的好友</dt><dd class="bd"><div class="m_slist"><ul></ul></div></dd></dl></div>'+
	'<p class="msg-para-warn" style="display:none"></p><div class="m_sbtn"><button>邀请</button><a href="javascript:;">取消</a></div>'+
	'<p class="m_snote">友情提醒：您一次最多只能邀请20位好友。</p></div></div>';
	template = $json2temp( option, template);
	
	if ($$("#shareTofriend").length>0){
		$$("#shareTofriend").show();
	}else{
		$$("body").append(template);
	}
	$$("#close_frame, .m_sbtn a").click(function(){
		$$("#shareTofriend").hide();
	});
	//加载好友信息
	$loadScript( "http://ext.paipai.com/buddy/RecommendFriend?status=" + option.status +"&t="+Math.random() );
	window.friendListCallBack = function( friends ){
		if(friends.ret=="1"){
			//浮窗登录
			//$$("#shareTofriend").hide();
			$loginFrame({
				type : 'func',
				check : false,
				model : false,
				action : function(){$loadScript( "http://ext.paipai.com/buddy/RecommendFriend?status=" + window.PP_core_stf_option.status );},
				x : 0,
				y : 0
			});
			return;
		}
		//处理返回信息，格式化输出
		var html=[];
		for ( var i = 0, len1 = friends.groups.length; i < len1 ; i++){
			var groups = friends.groups[i];
			//小组
			html.push('<dt><a href="#" class="m_sgroup">' + groups.name + '</a><a href="javascript:;" class="m_sadd">组选</a></dt>');
			html.push('<dd style="display:none"><ul>');
			//小组成员
			for ( var j = 0, len2 = groups.list.length; j < len2; j++ ){
				var list = groups.list[j];
				var state = list.onlineStatus==1?"m_soff":"";
				html.push("<li qq=" + list.qq + " time="+list.time+" checkKey="+list.checkKey+" class='"+state+"' style=''><a href='javascript:;' >" + list.nickName + "</a><span></span></li>");
			}
			html.push('</ul></dd>');
		}
		html = "<dl>" + html.join("") + "</dl>";
	
		//定义区域
		var oList = $$( ".m_sfriens .m_slist" );
		var oSelected = $$( ".m_sinvite .m_slist ul" );
		var ofsCount = $$(".m_snum");
		var oTips = $$( ".msg-para-warn" );
		var oSubmit = $$( ".m_sbtn button" );
		oList.html( html );
		oList.find(".m_sgroup").toggle(
			function(){
				$$(this).parent().next("dd").show();
			},
			function(){
				$$(this).parent().next("dd").hide();
			}
		);
		oList.find(".m_sadd").click(function(){
		
			//总人数限制
			if ( oSelected.find("li").length < window.PP_core_stf_option.limit ){
				var list = $$(this).parent().next("dd").find("ul li");
				var limit = window.PP_core_stf_option.limit - oSelected.find("li").length;
				limit = limit> list.length ? list.length : limit;
				for (var i = 0 ; i < limit; i++){
					var qq = $$(list[i]).attr("qq");
					if ( oSelected.find("[qq='"+qq+"']").length == 0 ){
					
						$$(list[i]).find("span").addClass("m_scur");
						$$(list[i]).clone().appendTo(oSelected);
						oSelected.find("li:last span").remove();
						oSelected.find("li:last").append('<a href="javascript:;" class="m_sdel" title="删除">删除</a>');
						ofsCount.html('已选 <span>'+oSelected.find("li").length+'</span> 人/上限 <span>'+window.PP_core_stf_option.limit+'</span> 人');
					}
				}
				if(oSelected.find("li").length == window.PP_core_stf_option.limit){
					oTips.html('<span class="msg0-icon-warn"></span>您选择的好友数已达上限');
					oTips.show();
				}
			}else{
				oTips.html('<span class="msg0-icon-warn"></span>您选择的好友数已达上限');
				oTips.show();
			}
		});
		oList.find("dd>ul>li").click(function(){
			if( oSelected.find("li").length < window.PP_core_stf_option.limit ){
				var qq = $$(this).attr("qq");
				if ( oSelected.find("[qq='"+qq+"']").length == 0 )
				{
					$$(this).find("span").addClass("m_scur");
					$$(this).clone().appendTo(oSelected);
					oSelected.find("li:last span").remove();
					oSelected.find("li:last").append('<a href="javascript:;" class="m_sdel" title="删除">删除</a>');
					ofsCount.html('已选 <span>'+oSelected.find("li").length+'</span> 人/上限 <span>'+window.PP_core_stf_option.limit+'</span> 人');
				}
			}
			else
			{
				oTips.html('<span class="msg0-icon-warn"></span>您选择的好友数已达上限');
				oTips.show();
			}
		});
		oSelected.find("li .m_sdel").live("click",function(){
			var qq = $$(this).parent().attr("qq");
			$$(this).parent().remove();
			oList.find("[qq='"+qq+"'] span").removeClass("m_scur");
			ofsCount.html('已选 <span>'+oSelected.find("li").length+'</span> 人/上限 <span>'+window.PP_core_stf_option.limit+'</span> 人');
			oTips.hide();
		});
		oSubmit.click(function(){
			var qqList = oSelected.find("li");
			if ( qqList.length > 0 )
			{
				var query = [];
				for (var i = 0, len = qqList.length; i < len; i++)
				{
					
					query.push("<input name='Fid' value='"+$$(qqList[i]).attr("qq")+","+$$(qqList[i]).attr("time")+","+$$(qqList[i]).attr("checkKey")+"' type='hidden'>");
				}
				var html = '<form target="iframe1" action="http://party.paipai.com/cgi-bin/comm_sendtips1" method="post" id="friendlist_form">'+
							'<input type="hidden" value="'+window.PP_core_stf_option.actionId+'" id="aid" name="aid">'+
							'<input type="hidden" value="'+window.PP_core_stf_option.validityId+'" id="vid" name="vid">'+
							query.join("")+
							'</form>';
				if($$("#friendlist_form").length==0)
				{
					$$("body").append(html);
				}
				else
				{
					$$("#friendlist_form").remove();
					$$("body").append(html);
				}
				
				$$("#shareTofriend").hide();
				$$("#friendlist_form").submit();
				
				var tips='<div class="box_hint_normal"><span class="icon msg2-icon-right"></span><div class="hint_content"><p class="hint_title"><strong>发送成功！</strong></p></div></div>';
				var float=$float({
					title:"提示",
					html:tips,
					fix:true,	//是否固定居中随屏幕滚动，如果为true则left和top无效
					cover:true	//显示覆盖背景
				});
				$$(".bt_close").click(function(){
					$$(".module_box_normal").hide();
				});
				
			}
			else
			{
				oTips.html('<span class="msg0-icon-warn"></span>请选择好友');
				oTips.show();
			}
		});
	};
}
function $shareToWB(o) {//{appkey : '060743ad174843ad824bed3528ed608a',content:"",imgUrl:"",sendMessageRd:""}
	var options = {
		path : 1,// 微博API的类型
		params : {
			format : 'json',// 返回接口内容的格式
			content:"",//分享内容
			appkey : 'ae7a90553add461c9a19f89164a89355'// appkey 默认为拍拍
		},
		login : 1,// 是否需要鉴权
		callBack : 'addFriend',// 回调函数名
		method : 'post',
		sendMessageRd:""//转播按钮rd
	};
	// 初始化参数
	$extend(options,o);
	if (options.appkey&&options.appkey.length==32) {
		options.params.appkey = options.appkey;
	}
	if (options.content) {
		options.params.content = options.content;
	}
	if (options.imgUrl) {
		options.params.pic = options.imgUrl;
		options.path = 4;
	}
	var appkey=options.params.appkey,content=options.params.content,imgUrl=options.params.pic,sendMessageRd=options.sendMessageRd;
	var userName = '';
	$loadCss('http://static.paipaiimg.com/module/tshare.css');
	checkLoginAndDo(showShareMessage, false);
	// 显示需要转播的信息
	function showShareMessage() {
		var checkLoginOpt = {
			path : 6,
			params : {
				format : 'json',
				appkey : options.params.appkey
			},
			login : 1,
			callBack : 'getUserInfo',
			method : 'get'
		}
		callTwiter(checkLoginOpt);
		window.getUserInfo = function(data) {
			if (data.ret == 5) {
				checkLoginAndDo(showShareMessage, true);
				return;
			}
			var userName='';
			var name = '';
			var url = '';
			if (data.ret == 0) {
				url = 'http://t.qq.com/' + data.data.name;
				name = "@" + data.data.name + ",";
				userName = data.data.name;
			}
			var size = 140 - msgLength(options.params.content);
			var showImg = '';
			if (imgUrl == '') {
				showImg = "display:none";
			} else {
				showImg = "display:\'\'";
			}
			var temp = '<div class="tshare_mainc"><div class="tshare_main"><div class="tshare_note"><span class="tshare_ntit"><a target="_blank" href="{#url#}">{#name#}</a>转播给您的听众</span><span class="tshare_nnum" id="msgLen" >还剩<em >{#size#}</em>字</span></div><div class="tshare_textarea" ><textarea cols="" rows="" id="msgContent">{#content#}<\/textarea></div><div class="tshare_photos" style="{#showImg#}" id="tsharePhotos"><p><a id="hideImg" class="tshare_pac" href="javascript:;" >取消图片</a></p><ul class="tshare_photos_list" id="twiterImg"><li class="s"><b></b><div class="i"><p><img height="80" src="{#twiterImg#}" rel="{#twiterImg#}"></p></div></li></ul></div><div class="tshare_action"><a href="javascript:;" class="tshare_btn"  id="sendMessage">转播</a></div></div></div>';
			var html = temp.replace(/{#content#}/g, options.params.content)
					.replace(/{#appkey#}/g, options.params.appkey).replace(
							/{#name#}/g, name).replace(/{#size#}/g, size)
					.replace(/{#twiterImg#}/g, imgUrl).replace(/{#showImg#}/,
							showImg).replace(/{#url#}/g, url);
			var opt = {
				title : '转播到腾讯微博',
				html : html,
				cName : 'module_box_normal tshare_box',
				leaver : 2,
				cover : true,
				fix : true,
				width : '550'
			};
			shareMessageFloat = $float(opt);
			$id("hideImg").onclick = hideImg;
			$id("msgContent").onkeyup = getMsgLength;
			$id("sendMessage").onclick = sendWeiboMessage;
		}
	}

	// 隐藏图片
	function hideImg() {
		if ($id("twiterImg").style.display == 'none') {
			$id("twiterImg").style.display = '';
			$id("hideImg").innerHTML = '取消图片';
		} else {
			$id("twiterImg").style.display = 'none';
			$id("hideImg").innerHTML = '选择图片';
		}
	}
	;
	// 检测字数，微博的信息的字数不应超过140
	function getMsgLength() {
		obj = $id("msgContent");
		var length = msgLength(obj.value);
		if (length > 140) {
			$id("msgLen").innerHTML = "超出<em>" + (length - 140) + "</em>字";
			return -1;
		} else {
			$id("msgLen").innerHTML = "还剩<em>" + (140 - length) + "</em>字";
			return 0;
		}
	};
	function msgLength(str){
		var length ;
		var reg = /(http:\/\/)[?]?([\w.]+)(\/[\w-   \.\/\?%&=#]*)?/g;
		var url =  str.match(reg);
		if(url&&$getTextLengthByByte($strTrim(url[0]))>40){
			length = parseInt(($getTextLengthByByte($strTrim(str))-$getTextLengthByByte($strTrim(url[0])))/2 +20);
		}else{
			length = parseInt($getTextLengthByByte($strTrim(str))/2);
		}
		return length;		
	}
	//转播微博信息
	function sendWeiboMessage() {
		if(sendMessageRd){
			$countRd(sendMessageRd);
		}
		obj = $id("sendMessage");
		if (getMsgLength($id("msgContent")) != 0) {
			return false;
		}
		var content = $id("msgContent").value;
		if ($id("twiterImg").style.display != 'none'
				&& $id("tsharePhotos").style.display != 'none') {
			var options = {
				path : 4,
				params : {
					format : 'json',
					appkey : appkey,
					content : content,
					pic : imgUrl
				},
				login : 1,
				callBack : 'sendMessage'
			}
			callTwiter(options);
		} else {
			var options = {
				path : 5,
				params : {
					format : 'json',
					appkey : appkey,
					content : content
				},
				login : 1,
				callBack : 'sendMessage'
			}
			callTwiter(options);
		}
		window.sendMessage = function(data) {
			if (data.ret == 0) {
				var opt = {
					title : '转播到腾讯微博',
					html : '<div class="tshare_suc"><h3><span class="msg2-icon-right"></span>转播成功！</h3><p><span id="closeTimer">3</span>秒后窗口自动关闭，<a href="javascript:;" onclick="clearInterval(twiterClose);shareMessageFloat.destruct();">立即关闭</a></p><a target="_blank" class="tshare_sucgo" href="http://t.qq.com/'
							+ userName + '">去我的微博</a></div>',
					cName : 'module_box_normal tshare_box',
					cover : true,
					fix : true,
					onInit : function(o) {
						var times = 3;
						twiterClose = setInterval(function() {
							if (times == 0) {
								shareMessageFloat.destruct();
								clearInterval(twiterClose);
								return;
							}
							if($id("closeTimer")){
								$id("closeTimer").innerHTML = times;	
							}else{
								$id("closeTimer").innerHTML = '3';
							}
							times = times - 1;
						}, 1000);
						return true;
					},
					width : '350'
				};
				shareMessageFloat = $float(opt);
			} else if (data.ret == 6) {
				var opt = {
					title : '转播到腾讯微博',
					html : '<div class="tshare_suc"><h3><span class="msg2-icon-warn"></span> 您的QQ号还没有注册微博！</h3><a class="tshare_sucgo" href="http://t.qq.com/invite/?pref=qqcom.mininav" onclick="shareMessageFloat.destruct();" target="_blank">马上去注册</a></div>',
					cName : 'module_box_normal tshare_box',
					cover : true,
					fix : true,
					leaver : 3,
					width : '350'
				};
				shareMessageFloat = $float(opt);
			}
		}
		return false;

	}
	;
	function checkLoginAndDo(func, login) {
		if (login || !$isLogin()) {
			var opt = {
				'float' : true, // 浮动模式，是否浮窗登录，【true/false】
				model : false, // 是否模态登录，如果float为false的时候强制为模态，模态登录显示覆盖背景，不显示关闭窗口
				drag : true, // 是否可以拖动，如果float为false时强制为false
				check : false, // 是否需要检测用户登录状态?
				quick : true, // 是否支持快速登录
				close : true, // 模态登录框和非浮动登录框的时候为false
				x : document.documentElement.clientWidth / 2 - 200,
				y : document.documentElement.scrollTop + 150,
				type : "func",
				title : "请您登录后继续",
				action : function() {
					func(options)
				}
			};
			$loginFrame(opt);
		} else {
			func(options);
		}
	}

	function callTwiter(opt) {
		var hc = [];
		for ( var i in opt) {
			if (i == 'params') {
				var phc = [];
				for ( var j in opt[i]) {
					if (j == 'content') {
						phc.push(j + '=' + encodeURIComponent(opt[i][j]));
					} else {
						phc.push(j + '=' + opt[i][j]);
					}
				}
				hc
						.push(i
								+ '='
								+ encodeURIComponent(encodeURIComponent(phc
										.join('&'))));
			} else {
				hc.push(i + '=' + opt[i]);
			}

		}
		var url = 'http://auction1.3c.paipai.com/microBlog.xhtml?'
				+ hc.join('&');
		$loadScript(url);
	}
}
function $shareWeiboMessage(appkey, content, imgUrl) {
	var options = {
		path : 1,// 微博API的类型
		params : {
			format : 'json',// 返回接口内容的格式
			appkey : '060743ad174843ad824bed3528ed608a'// appkey 默认为拍拍
		},
		login : 1,// 是否需要鉴权
		callBack : 'addFriend',// 回调函数名
		method : 'post'
	};
	// 初始化参数
	if (appkey&&appkey.length==32) {
		options.params.appkey = appkey;
	}
	if (content) {
		options.params.content = content;
	}
	if (imgUrl) {
		options.params.pic = imgUrl;
		options.path = 4;
	}
	var userName = '';
	$loadCss('http://static.paipaiimg.com/module/tshare.css');
	checkLoginAndDo(showShareMessage, false);
	// 显示需要转播的信息
	function showShareMessage() {
		var checkLoginOpt = {
			path : 6,
			params : {
				format : 'json',
				appkey : options.params.appkey
			},
			login : 1,
			callBack : 'getUserInfo',
			method : 'get'
		}
		callTwiter(checkLoginOpt);
		window.getUserInfo = function(data) {
			if (data.ret == 5) {
				checkLoginAndDo(showShareMessage, true);
				return;
			}
			var userName='';
			var name = '';
			var url = '';
			if (data.ret == 0) {
				url = 'http://t.qq.com/' + data.data.name;
				name = "@" + data.data.name + ",";
				userName = data.data.name;
			}
			var size = 140 - msgLength(options.params.content);
			var showImg = '';
			if (imgUrl == '') {
				showImg = "display:none";
			} else {
				showImg = "display:\'\'";
			}
			var temp = '<div class="tshare_mainc"><div class="tshare_main"><div class="tshare_note"><span class="tshare_ntit"><a target="_blank" href="{#url#}">{#name#}</a>转播给您的听众</span><span class="tshare_nnum" id="msgLen" >还剩<em >{#size#}</em>字</span></div><div class="tshare_textarea" ><textarea cols="" rows="" id="msgContent">{#content#}<\/textarea></div><div class="tshare_photos" style="{#showImg#}" id="tsharePhotos"><p><a id="hideImg" class="tshare_pac" href="javascript:;" >取消图片</a></p><ul class="tshare_photos_list" id="twiterImg"><li class="s"><b></b><div class="i"><p><img height="80" src="{#twiterImg#}" rel="{#twiterImg#}"></p></div></li></ul></div><div class="tshare_action"><a href="javascript:;" class="tshare_btn"  id="sendMessage">转播</a></div></div></div>';
			var html = temp.replace(/{#content#}/g, options.params.content)
					.replace(/{#appkey#}/g, options.params.appkey).replace(
							/{#name#}/g, name).replace(/{#size#}/g, size)
					.replace(/{#twiterImg#}/g, imgUrl).replace(/{#showImg#}/,
							showImg).replace(/{#url#}/g, url);
			var opt = {
				title : '转播到腾讯微博',
				html : html,
				cName : 'module_box_normal tshare_box',
				leaver : 2,
				cover : true,
				fix : true,
				width : '550'
			};
			shareMessageFloat = $float(opt);
			$id("hideImg").onclick = hideImg;
			$id("msgContent").onkeyup = getMsgLength;
			$id("sendMessage").onclick = sendWeiboMessage;
		}
	}

	// 隐藏图片
	function hideImg() {
		if ($id("twiterImg").style.display == 'none') {
			$id("twiterImg").style.display = '';
			$id("hideImg").innerHTML = '取消图片';
		} else {
			$id("twiterImg").style.display = 'none';
			$id("hideImg").innerHTML = '选择图片';
		}
	}
	;
	// 检测字数，微博的信息的字数不应超过140
	function getMsgLength() {
		obj = $id("msgContent");
		var length = msgLength(obj.value);
		if (length > 140) {
			$id("msgLen").innerHTML = "超出<em>" + (length - 140) + "</em>字";
			return -1;
		} else {
			$id("msgLen").innerHTML = "还剩<em>" + (140 - length) + "</em>字";
			return 0;
		}
	};
	function msgLength(str){
		var length ;
		var reg = /(http:\/\/)[?]?([\w.]+)(\/[\w-   \.\/\?%&=#]*)?/g;
		var url =  str.match(reg);
		if(url&&$getTextLengthByByte($strTrim(url[0]))>40){
			length = parseInt(($getTextLengthByByte($strTrim(str))-$getTextLengthByByte($strTrim(url[0])))/2 +20);
		}else{
			length = parseInt($getTextLengthByByte($strTrim(str))/2);
		}
		return length;		
	}
	//转播微博信息
	function sendWeiboMessage() {
		obj = $id("sendMessage");
		if (getMsgLength($id("msgContent")) != 0) {
			return false;
		}
		var content = $id("msgContent").value;
		if ($id("twiterImg").style.display != 'none'
				&& $id("tsharePhotos").style.display != 'none') {
			var options = {
				path : 4,
				params : {
					format : 'json',
					appkey : appkey,
					content : content,
					pic : imgUrl
				},
				login : 1,
				callBack : 'sendMessage'
			}
			callTwiter(options);
		} else {
			var options = {
				path : 5,
				params : {
					format : 'json',
					appkey : appkey,
					content : content
				},
				login : 1,
				callBack : 'sendMessage'
			}
			callTwiter(options);
		}
		window.sendMessage = function(data) {
			if (data.ret == 0) {
				var opt = {
					title : '转播到腾讯微博',
					html : '<div class="tshare_suc"><h3><span class="msg2-icon-right"></span>转播成功！</h3><p><span id="closeTimer">3</span>秒后窗口自动关闭，<a href="javascript:;" onclick="clearInterval(twiterClose);shareMessageFloat.destruct();">立即关闭</a></p><a target="_blank" class="tshare_sucgo" href="http://t.qq.com/'
							+ userName + '">去我的微博</a></div>',
					cName : 'module_box_normal tshare_box',
					cover : true,
					fix : true,
					onInit : function(o) {
						var times = 3;
						twiterClose = setInterval(function() {
							if (times == 0) {
								shareMessageFloat.destruct();
								clearInterval(twiterClose);
								return;
							}
							if($id("closeTimer")){
								$id("closeTimer").innerHTML = times;	
							}else{
								$id("closeTimer").innerHTML = '3';
							}
							times = times - 1;
						}, 1000);
						return true;
					},
					width : '350'
				};
				shareMessageFloat = $float(opt);
			} else if (data.ret == 6) {
				var opt = {
					title : '转播到腾讯微博',
					html : '<div class="tshare_suc"><h3><span class="msg2-icon-warn"></span> 您的QQ号还没有注册微博！</h3><a class="tshare_sucgo" href="http://t.qq.com/invite/?pref=qqcom.mininav" onclick="shareMessageFloat.destruct();" target="_blank">马上去注册</a></div>',
					cName : 'module_box_normal tshare_box',
					cover : true,
					fix : true,
					leaver : 3,
					width : '350'
				};
				shareMessageFloat = $float(opt);
			}
		}
		return false;

	}
	;
	function checkLoginAndDo(func, login) {
		if (login || !$isLogin()) {
			var opt = {
				'float' : true, // 浮动模式，是否浮窗登录，【true/false】
				model : false, // 是否模态登录，如果float为false的时候强制为模态，模态登录显示覆盖背景，不显示关闭窗口
				drag : true, // 是否可以拖动，如果float为false时强制为false
				check : false, // 是否需要检测用户登录状态?
				quick : true, // 是否支持快速登录
				close : true, // 模态登录框和非浮动登录框的时候为false
				x : document.documentElement.clientWidth / 2 - 200,
				y : document.documentElement.scrollTop + 150,
				type : "func",
				title : "请您登录后继续",
				action : function() {
					func(options)
				}
			};
			$loginFrame(opt);
		} else {
			func(options);
		}
	}

	function callTwiter(opt) {
		var hc = [];
		for ( var i in opt) {
			if (i == 'params') {
				var phc = [];
				for ( var j in opt[i]) {
					if (j == 'content') {
						phc.push(j + '=' + encodeURIComponent(opt[i][j]));
					} else {
						phc.push(j + '=' + opt[i][j]);
					}
				}
				hc
						.push(i
								+ '='
								+ encodeURIComponent(encodeURIComponent(phc
										.join('&'))));
			} else {
				hc.push(i + '=' + opt[i]);
			}

		}
		var url = 'http://auction1.3c.paipai.com/microBlog.xhtml?'
				+ hc.join('&');
		$loadScript(url);
	}
}
function $shiftHover(dom1,dom2){
		if(dom1&&dom2){
			$addEvent(dom1,"mouseover",function(){	dom2.style.display="";});
			$addEvent(dom1,"mouseout",function(){	dom2.style.display="none";});
		}
	}
function $shopGray(callback){
	var uin = $getUin();
	var lists=[116417846,2202041314,83196497,30257939,58347430,88881332];
	if($inArray(uin,lists)>=0){
		callback();
		return;
	}
        /*
	if(uin % 10==1){
		callback();
	}
        */
}
//店铺留言组件入口
function $shopLeaveMsg(opt){
    var option={
        dom:"",
        shopId:"",
        minLength:4,    //最少字符 数
        maxLength:250,    //最多字符数
        pageSize:0,        //每页条数，缺省时展示3条，非零时展示20条
        showType:"0",
        url:"http://shop1.paipai.com/cgi-bin/shopmsg/showshopmsg?shopId={$tp_shopId$}&page={$pageId$}&iPageSize={$tp_pageSize$}&t="+Math.random()
    };
    $extend(option,opt);
    ;
    option.frame=$$(option.dom);
    //显示留言的结构frame
    option.frame.append(getLeavemsgHtml("frame",option.shopId));    
    option.frame.find("[shopBbs='page']").hide();
    var postHTML="";
    
    if(option.showType!="1"){
        if($isLogin()){
            //显示留言入口,不包括验证码
 	    option.frame.find("[shopBbs='post']").html($strReplace(getLeavemsgHtml("post"),'{$tp_itemid$}',option.shopId));
        }else{
            //显示提示信息
            postHTML=getLeavemsgHtml("nologin",option.shopId);
            option.frame.find("[shopBbs='post']").html(postHTML);
        }
    }
    window._PP_shops_leavemsg_option=option
    
    loadList(1);        //开始加载数据
    
    //开始加载商品留言列表,构造指定串
    function loadList(pageId){
        var option=window._PP_shops_leavemsg_option;
        var url=option.url.replace("{$tp_shopId$}",option.shopId).replace("{$pageId$}",pageId).replace("{$tp_pageSize$}",option.pageSize);
        option.frame.find("[shopBbs='list']").html('<font color=\"red\">正在加载数据中,请稍候...</font>');
        window._PP_shops_leavemsg_option.curpage=pageId;
        $loadScript(url,"leavemsg.loadList");
    };
    //拉取留言的回调函数 显示留言列表,开始构造留言输出的列表
    window.showLeaveMsg=function(obj,sPageId){
        var option=window._PP_shops_leavemsg_option;
        if(obj[0]){
            option.frame.find("[shopBbs='list']").html("<font color=\"red\">网络传输数据错误,很抱歉... :)</font>");
            return false;    
        };
        //启动数据的转换函数,把返回的数据转换成便于操作的json数据
        exchangeData(obj);
        var cc="";
        //根据每条消息的情况生成代码
        for(var i=0;i<window._PP_shops_leavemsg.length;i++){    
            var msg=window._PP_shops_leavemsg[i];
            var vc="";
            vc+=msg.isSeller?getLeavemsgHtml("sellermess"):getLeavemsgHtml("mess");
            //替换标签内容
	    vc=$strReplace(vc,'{$tp_askTime$}',msg.askTime);
	    vc=$strReplace(vc,'{$tp_msg$}',msg.msg);
	    vc=$strReplace(vc,'{$tp_nickName$}',msg.nickName.substr(0,msg.nickName.length-3)+"***");
	    vc=$strReplace(vc,'{$tp_qqlink$}',msg.qqLink);
	    vc=$strReplace(vc,'{$tp_msgQQ$}',msg.msgQQ);
	    vc=$strReplace(vc,'{$tp_answerTime$}',msg.answerTime);
	    vc=$strReplace(vc,'{$tp_replyTitle$}',msg.replyTitle);
	    vc=$strReplace(vc,'{$tp_answer$}',msg.replyContent);
	    cc+=vc;
        };
        cc=(cc=="")?"<div class='shopnonemsg'>暂时没有留言。</div>":cc;
        
        option.frame.find("[shopBbs='list']").html(cc).find("li:even").addClass("odd");
        option.frame.find("[shopBbs='replyItem'][time=' ']").hide();
        //生成分页导航条
        if (!_PP_shops_leavemsg_option.hasMess){
            return false;
        }
        
        $page({
            pageCount:_PP_shops_leavemsg_option.totalpage,    //总页码
            currentPage:sPageId,    //当前页码
            domList:option.frame.find("[shopBbs='page']").get(),        //内容输出区域的id列表，jquery语法
            type:"simple",    //控制条样式
            action:"func",    //点击分页的操作类型：url、func
            func:function(pageId,opt){
                loadList(pageId);
                return true;
            }        //点击链接时的处理函数，参数为页码id和对象本身，当action=func时有效
        });

        
        option.frame.find("[shopBbs='page']").show();
    };
    //把返回的数据转换成便于操作的json数据
    function exchangeData(obj){
        window._PP_shops_leavemsg_option.haserror=obj[0];        //是否出错,true表示有错误
        window._PP_shops_leavemsg_option.islogin=obj[1];        //是否登陆
        window._PP_shops_leavemsg_option.totalpage=obj[2];        //总页数
        window._PP_shops_leavemsg_option.hasMess=(obj.length > 4); //本店铺是否有留言
        //从第四个开始,每10个数据标识一条留言记录
        var i=3;
        var msg=new Array();    //初始化新的留言数组
        while(obj[i+3]){
            var amsg={};
            amsg.hasReply = obj[i];        //是否店主留言
            amsg.msgName = obj[i+1];        //留言者昵称
            amsg.qqLink = obj[i+2];        //QQ聊天链接wpa
            amsg.msg = obj[i+3];        //留言内容
            amsg.askTime = obj[i+4]+' '+obj[i+5];    //留言时间
            amsg.replyTitle = obj[i+6];        //回复标题
            amsg.replyContent = obj[i+7];        //回复内容
            amsg.answerTime = obj[i+8]+' '+obj[i+9];    //回复时间
            
            if(amsg.msgName!="店主留言"){
                amsg.msgQQ=amsg.msgName.split(":")[0];
                if(amsg.msgName.indexOf(":")<0){
                    amsg.nickName=amsg.msgName;
                }else{
                    amsg.nickName=$strTrim(amsg.msgName.split(":")[1]);
                }
                amsg.isSeller=false;
            }else{
                amsg.msgQQ="";
                amsg.nickName=amsg.msgName;
                amsg.isSeller=true;
            }
            if ($strTrim(amsg.replyContent).length>1){
                amsg.showReply=true;    
            }
            msg.push(amsg);
            i+=10;//跳到下一条数据 
        };    
        window._PP_shops_leavemsg=msg;
    };
    //更新验证码图片
    window._PP_shops_leavemsg_refreshCodes = function(){
        $$('#loginImg').attr("src",$$('#loginImg').attr("src")+$randomInt(10000));
    };
    //文本框的输入控制
    window._PP_shops_leavemsg_countInput =function(){
        if($strLenGB($$("#leavemsgarea").val())>250){
            $$("#leavemsgarea").val($strSubGB($$("#leavemsgarea").val(),0,250));
            if($strLenGB($$("#leavemsgarea").val())>250){
                $$("#leavemsgarea").val($strSubGB($$("#leavemsgarea").val(),0,249));
            }
        }
    };
    //表单内容验证
    window._PP_shops_leavemsg_checkSubmit =function(){
        if($strLenGB($strTrim($$("#leavemsgarea").val()))<2){
            alert("您输入的内容太短。两端的空格不计入字数！");
            return false;
        }
        if($strLenGB($strTrim($$("#leavemsgarea").val()))>250){
            alert("您输入的内容太长,规定不得超过125个汉字,250个字节。");
            return false;
        }
        if($strTrim($$("#verifycode").val()).length!=4){
            alert("您输入的验证码长度不对。");
            _PP_shops_leavemsg_refreshCodes();
            return false;
        }
		
        return true;
    };
    
    
    
    //输出留言相关的html结构
    function getLeavemsgHtml(type,uin){
        var hc="";
        if(type=="frame"){        //总体框架
        
            if(option.pageSize==1){
                hc+='<div class="leavewordpage" shopBbs="page"></div><ul class="leavewordlist" shopBbs="list"></ul><div class="leavewordpage" shopBbs="page"></div><div class="leavewordcontent" id="leavewordcontent" shopBbs="post"></div>';
            }else{
                if(option.showType=="2"){
                    hc+='<div style="height:10px"></div><ul class="leavewordlist" shopBbs="list"></ul><div class="leavewordpage" shopBbs=""><a href="http://shop.paipai.com/'+option.shopId+'/leavemsg/index.shtml">更多留言</a></div><div class="leavewordcontent" id="leavewordcontent" shopBbs="post"></div>';
                }else if(option.showType=="1"){
                    hc+='<div style="height:10px"></div><ul class="leavewordlist" shopBbs="list"></ul><div class="leavewordpage" shopBbs=""><a href="http://shop.paipai.com/'+option.shopId+'/leavemsg/index.shtml">更多留言</a></div>';
                }else{
                    hc+='<div class="leavewordpage" shopBbs="page"></div><ul class="leavewordlist" shopBbs="list"></ul><div class="leavewordpage" shopBbs="page"></div><div class="leavewordcontent" id="leavewordcontent" shopBbs="post"></div>';
                }
            }            
        }
        if(type=="nologin"){        //总体框架
            hc+='<p class="shopnologinmsg">您要先<A href="http://member.paipai.com/cgi-bin/login_entry">登录</A>才能给店主留言 :)</p>';
        }
        if(type=="post"){        //总体框架
            hc+='<form name="formLeaveMsg" id="formLeaveMsg" class="formleavemsg" onSubmit="return _PP_shops_leavemsg_checkSubmit()" action="http://shop1.paipai.com/cgi-bin/shopmsg/postshopmsg" method="post" target="_top"><INPUT type="hidden" name="relatesubjectid" value="{$tp_itemid$}" /> <INPUT type="hidden" name="msgtype" value="4" /><ul><li><div class="hint">我要留言：</div><div class="input"><textarea cols="60" rows="5" onBlur="_PP_shops_leavemsg_refreshCodes();" onKeyUp="_PP_shops_leavemsg_countInput()" name="leavemsgarea" id="leavemsgarea" /><\/textarea></div><div class="des">字数在2～250之间</div></li><li><div class="btn"><input type="checkbox" align="left" value="1" name="IsHidden" id="IsHidden"/>隐藏我的留言，只让我的留言给店主看到。</div></li><li><div class="hint">验证码：</div><div class="input"><INPUT maxLength="4" size="16" name="verifycode" id="verifycode" msg="附加码长度为4字节" min="4" datatype="LimitB" require="true" value="" /><br /><a href="javascript:_PP_shops_leavemsg_refreshCodes();">看不清，换一张</a> </div><div class="checkcode"><IMG id="loginImg" src="http://ptlogin2.paipai.com/getimage?aid=17000101&CacheTime=" align="absMiddle" onclick=\'_PP_shops_leavemsg_refreshCodes();\' style="cursor:pointer;" /></div></li><li><div class="btn"><input type="submit" name="Submit" value="提交留言" /></div></li></ul></form>';
            
        }
        if(type=="sellermess"){        //店主留言的内容
            hc+='<li><div class="ask"><div class="name">{$tp_nickName$}： </div><div class="text">{$tp_msg$}</div><div class="time">[{$tp_askTime$}]</div></div></li>';
        }
        if(type=="mess"){        //留言的内容
            hc+='<li><div class="ask"><div class="name">{$tp_nickName$}： </div><div class="text">{$tp_msg$}</div><div class="time">[{$tp_askTime$}]</div></div><div class="respond" shopBbs="replyItem" time="{$tp_answerTime$}"><div class="name">{$tp_replyTitle$}： </div><div class="text" >{$tp_answer$}</div><div class="time">[{$tp_answerTime$}]</div></div></li>';
        }
        return hc;
    };

}
function $shortUrlMini(option){
  var ShortUrlSafeShowObj = window['pp_mini_short_url_obj'];
  if(ShortUrlSafeShowObj){
    if(option.show){
      ShortUrlSafeShowObj.show(option);
    }else ShortUrlSafeShowObj.hide();
    return; 
  }
  var opt = {
    shortUrl : "",  //短url--必选
    x : 0,
    y : 0,
    show : true  //必选
  },
  urlFlag = false,
  cou = 0,
  urlfs = null,
  shortUrls = {}, //缓存
  strHtml = "<p class='{#class#}'><b></b>{#dec#}:&nbsp; <span>{#url#}</span>{#copy#}</p>",
  loadTemp = '<img class="photo_popup_loading" src="http://static.paipaiimg.com/assets/common/loading2.gif" alt="loading..." />';
  function show(option){
    urlFlag = true;
    cou++;
    window.setTimeout(function(){
      cou--;
      if(!urlFlag || cou > 0) return;
      for(var o in option){
        opt[o] = option[o];
      }
      opt.shortUrl = $strTrim(opt.shortUrl);
      if(!urlfs){
        urlfs = document.createElement("div");
        urlfs.id = "suSafeShow";
        urlfs.className = "ly-safe";
        urlfs.style.display = "none";
        urlfs.style.position = "absolute";
        urlfs.style.zIndex = 255;
        urlfs.innerHTML = $xss(loadTemp,"none");
        document.body.appendChild(urlfs);
        urlfs.onmouseover = function(){
          urlFlag = true;
        };
        urlfs.onmouseout = function(){
           hide();
        };
        urlfs.onclick = function(e){
          var tar = $getTarget(e),
              id = tar.id;
          if(id == "shortUrlCopy"){
            copyUrl(tar);
          }
        };
      }      
      var urlObj = shortUrls[opt.shortUrl];
      if(urlObj){
        _show(urlObj);
      }else{
        urlfs.innerHTML = $xss(loadTemp,"none");      
        loadShortUrl();
      }
      $display(urlfs);
      urlfs.style.left = opt.x + "px";
      urlfs.style.top = opt.y + "px";
    },500);
  }
  function loadShortUrl(){  //获取短url信息    
    var _retCoder;
    /* @interface:174;获取短url信息 */
    var url = "http://ext.paipai.com/share/checkurl?callback=shortUrlCb&urllist=" + opt.shortUrl;
    _retCoder = $returnCode({url:url,frequence:2});
    window.shortUrlCb = function(info){
      _retCoder.report(true,info.ret);
      var uList = info.data.urllist;
      var len = uList.length;
      if(len == 0) return;
      var uObj = uList[0];
      shortUrls[$strTrim(uObj.ShortUrl)] = uObj;
      _show(uObj);
    };
    $loadScript(url);
  }
  function _show(data){
    var classNameStr = "",
        dec = "",
        copyStr = "",
        url = $htmlEncode($strTrim(data.SrcUrl));
    if($isBrowser('ie')){  //ie显示复制url到剪贴板
       copyStr = "<a href='javascript:' cUrl='{#url#}' id='shortUrlCopy'>[复制]</a>".replace("{#url#}",url);
    }
    switch(data.UrlType*1){
       case 1:
         classNameStr = "ico-safe ico-safe-4";
         dec = "原链接";
       break;
       case 2:
         classNameStr = "ico-safe ico-safe-2";
         dec = "原链接有风险，不建议打开";
         copyStr = "";
       break;
       case 3:
         classNameStr = "ico-safe ico-safe-1";
         dec = "原链接可能有风险";
       break;
    }
    urlfs.innerHTML = $xss(strHtml.replace("{#class#}",classNameStr).replace("{#dec#}",dec).replace("{#url#}",url).replace("{#copy#}",copyStr),"none");
  }
  function hide(){
     urlFlag = false;
     window.setTimeout(function(){
        if(urlFlag) return;
        urlfs && $displayHide(urlfs);
     },500);
  }  
  function copyUrl(obj){  //复制到剪贴板
    var url = $decodeHtml(obj.getAttribute("cUrl"));
    try{
      window.clipboardData.setData('Text',url);
      obj.innerHTML = $xss("复制成功","none");
      obj.style.color = "#CCCCCC";
      obj.style.cursor = "default";
      obj.disabled = true;
    }catch(e){
      alert("您的浏览器不支持此功能，请直接复制网页地址!");
    }
  };
  
  ShortUrlSafeShowObj = window['pp_mini_short_url_obj'] =  {
    show : function(option){
      show(option);
    },
    hide : hide
  };
  ShortUrlSafeShowObj.show(option);
}
function $showActiveEnd(err, lvl, prizename, resultFun, virtualLevel) {
    if ($$("[tag='left_gift_num']").length>0) {
         PP.market.base.loadUsrDiamond();
    }
    if (!window.lvl_text) {
        return $float({
            title: "温馨提示",
            html: err
        });
    }
    if (!window.activeErrMsg_text) {
        //系统提示，请勿更改
        window.activeErrMsg_text = ["对不起，活动尚未开始。", //1活动未开始
		"对不起，活动已结束。", //2活动已结束
		"对不起，您暂时不能参与该活动，详细情况请联系拍拍客服。", //3买家正受处罚
		"对不起，服务器繁忙，请稍后再试。", //4没法调用查询订单接口系统
		"对不起，请输入正确的订单号。", //5订单号为空
		"对不起，您输入的订单号无效。", //6查询不到订单信息
		"对不起，您输入的订单号无效。", //7修改了订单时间
		"对不起，您的订单付款金额不满足活动要求，不能参与本活动。", //8订单金额是否满足活动要求
		"对不起，您的订单中商品不属于本活动指定类目，详情请参看活动规则！", //9订单类目不满足活动要求
		"对不起，该订单没有完成财付通付款，不能使用该订单", //10订单没有完成付款
		"对不起，当前订单支付方式不支持此次活动，详情请参看活动规则！", //11订单不是通过财付通付款
		"对不起，您不是该订单的买家，不能使用该订单", //12兑奖用户不是订单买家
		"对不起，您的订单卖家不满足活动要求，不能参与活动，详情请参看活动规则！", //13卖家不满足活动要求
		"对不起，您的订单不是在指定的时间内完成付款，不能参与活动。", //14订单没有在指定时间内完成付款
		"对不起，当日订单仅限当天参加活动，当晚24：00订单失效，详情请参看活动规则。", //15订单不是在当日付款
		"对不起，您的信用等级不满足活动要求，不能参与活动。", //16买家信用不满足活动要求
		"对不起，您尚未开通彩钻，不能参与活动。", //17买家没开通彩钻
		"对不起，您的彩钻等级不满足活动要求，不能参与活动。", //18用户彩钻等级不满足活动要求
		"对不起，您尚未选择奖品等级。", //19用户未选择兑奖/抽奖的等级
		"对不起，该奖池暂无该奖品，请稍后再试。", //20（某等级）奖品已经兑、抽完
		"对不起，今日奖品已发放完，请稍后再试。", //21（某等级）当日奖品已经兑、抽完
		"对不起，本时段的奖品已发放完，请稍后再试。", //22（某等级）当小时奖品已经兑、抽完
		"对不起，您在本活动中的参与次数已达到上限。", //23已达到活动指定的兑、抽奖上限
		"对不起，您在本活动中单日的参与次数已达到上限。", //24已达到活动单日指定的兑、抽奖上限
		"对不起，您兑换该奖品次数已达到上限", //25兑换某等级奖品次数已达到上限
		"对不起，该订单已经参与过拍拍网活动了。", //26订单重复使用
		"对不起，该QQ号码已经参与过拍拍网活动了。", //27QQ号码重复使用
		"对不起，您在本活动中兑换次数已达到上限！", //28兑奖次数达到上限
		"对不起，您在本活动的中奖次数已达到上限！", //29中奖次数已达到上限
		"对不起，您不是非彩钻点亮用户, 不能参与活动。" //30中奖次数已达到上限
		];
    }
    if (!window.lvl_text2) {
        window.lvl_text2 = window.lvl_text;
    }
   
    if(!window.lv_end){
      window.lv_end="本活动已结束，感谢您的关注！";
    }

    //抽奖结果反馈
    if (err.length > 0 && err.indexOf("自动发奖") < 0) {
        //根据抽奖接口返回的信息同系统标准提示和运营自定义提示做匹配，返回正确提示
        var smsg = window.activeErrMsg_text;
        var umsg = window.user_text ? window.user_text : window.activeErrMsg_text;
        var index = -1;
        for (var i = 0, j = smsg.length; i < j; i++) {
            if (smsg[i] == err) {
                index = i;
            }
        }
        var errStr = (umsg[index] && (index >= 0)) ? umsg[index] : err;
        if (resultFun) {
            resultFun('error', errStr);
        } else {
            (typeof errStr == "function") ? errStr('err') : $float({
                title: "温馨提示",
                html: errStr
            });
        }
    } else if (err.length > 0 && err.indexOf("自动发奖失败") >= 0) {
        if (window.lvl_text2[lvl]) {
            var errStr = window.lvl_text2[lvl];
        } else {
            var errStr = window.lv_end;
        }
        if (resultFun) {
            resultFun('error', errStr);
        } else {
            (typeof errStr == "function") ? errStr(lvl) : $float({
                title: "温馨提示",
                html: errStr
            });
        }
    } else {
        var result = window.lvl_text[lvl] || window.lv_end;
        if (resultFun) {
            resultFun(lvl, result);
        } else {
            (typeof result == "function") ? result(lvl) : $float({
                title: "温馨提示",
                html: result
            });
        }
    }
    return;
}
function $showBuyerVipFlash(opt){
//输出彩钻vip成长值进度条FLASH代码
	var option={
		maxXp:30000, //成长值上限
		userXp:0,	//当前成长值
		state:0		//彩钻状态，0为激活，1为灰态
	}
	for(var i in opt){
		option[i]=opt[i];
	}
	var temp ='<object width="490" height="50" data="http://static.paipaiimg.com/flash/release/buyervip/main.swf?t=201003101&maxXp={#maxXp#}&userXp={#userXp#}&invalid={#invalid#}" type="application/x-shockwave-flash"><param value="http://static.paipaiimg.com/flash/release/buyervip/main.swf?t=201003101maxXp={#maxXp#}&userXp={#userXp#}&invalid={#invalid#}" name="movie"><param name="quality" value="high"><param value="transparent" name="wmode"><param value="maxXp={#maxXp#}&userXp={#userXp#}&invalid={#invalid#}" name="flashvars"></object>';
	temp = temp.replace(/{#maxXp#}/g,option.maxXp);		
	temp = temp.replace(/{#userXp#}/g,option.userXp);
	temp = temp.replace(/{#invalid#}/g,option.state);
	return temp;
}
/**
 * @desc: 显示未付款订单列表
 * @param: obj. 参数列表；
 *         <b>currDeals</b>: Array.当前带入的订单列表序列，格式为  ["dealID1","dealID2","dealID3"]
 */
function $showDealList(obj){
	obj = obj||{}; //如果obj为undefined，那么设置为空对象 
	//拉取订单列表，唯一的参数callback为回调函数名，期待回调deallistCallback
	$loadScript("http://pay.paipai.com/cgi-bin/query_deal/query?deal_state=1&start=0&size=10&callback=deallistCallback&"+Math.random());
	window.deallistCallback = function showInfo(data){
		var rCode = parseInt(data.retcode);
		if(rCode===0){
			//加载css文件
			$loadCss("http://static.paipaiimg.com/module/show_deal_list.css?"+Math.random());
			var dls = data.dealList,
				dLen = dls.length;
			//拉取的订单列表为空，暂时啥也不做，待确认。
			if(dLen==0){
				return alert("您选中的订单均已付款，无须重复付款");
			}
			var tpl = '<div class="deal_list_box"><div class="txt_description">您还有其它等待付款的订单，您现在可以选中一次性完成付款：</div><div class="pro_list"><span tag="textMeasure" style="display:none;">M</span><ul><li class="t_head" ><div class="pro_name"><input name="" type="checkbox" value="" />全选</div><div class="pro_price">应付小计</div></li>【#deallist#】</ul></div><div class="totall_price">应付总计：<span class="color_orange" tag="total"></span>元</div><input type="hidden" tag="s"></input><button class="btn_hit_b">继续去付款</button><a name="closeWindow" href="#">关闭窗口</a></div>';
			var deallist = [];
			for(var i=0;i<dLen;i++){
				var dl = dls[i],
					dlts = dl.tradeList,
					dlid = dl.dealId,
					dName = dlts[0].itemName;
				//判断循环的当前的订单id是否在参数数组中，如果在参数数组中，那么对应的checkbox将disabled，并且checked。
				var isCurrDeal = function(dlArr){
					dlArr = dlArr||[];
					//88881336-20100726-5044183   88881332-20100201-5020183
					for(var i=0, len = dlArr.length; i<len; i++){
						if(dlArr[i]==dlid){
							//性能优化：当在目标数组中找到对应元素后将元素删除（前置条件是目标数组没有其他用途）
							dlArr.splice(i, 1);
							return true;
						}
					}
					return false;
				}(obj.currDeals);
				var	dNameA = '<span tag="ruler" class="ruler"><a tag="context" href="http://pay.paipai.com/cgi-bin/deal_detail/view?deal_id='+ dlid +'" target="_blank" title="'+ dName +'">'+dName+'<span tag="omit"></span></a>'+(dlts.length > 1 ? '<span tag="others" class="others" style="">等商品</span>':'') + '</span>';
				deallist.push('<li><div class="pro_name" tag="infos"><input type="checkbox"'+ (isCurrDeal ? 'checked="checked" disabled="disabled" ':'' )+' v="'+dl.totalPrice+'" s="'+ dl.dealId +'"/>'+dNameA+'</div><div class="pro_price">'+ dl.totalPrice +'</div></li>');
			}
			//显示浮层并拿到浮层内容的jq对象
			var f = $float({
				title:"温馨提示",
				width: 600,
				html: tpl.replace(/【#deallist#】/, deallist.join(""))
			});
			bh = $$(f.boxHandel);
			//如果商品名过长，那么显示省略号.这里设定timer的原因是dom渲染有可能不及时造成计算错误
			setTimeout(function(){
				//这里在dom中存放一个内容为单字节字符的隐藏span，用来测量一个字节在当前dom中的显示宽度，作为后面计算的基数。
				var aByteWidth = bh.find("span[tag=textMeasure]").width();
				bh.find(".pro_list div.pro_name[tag=infos]").each(function(){
					var _this = $$(this),
						span_ruler = _this.find("span[tag=ruler]"),
						a = _this.find("a"),
						span_omit = a.find("span[tag=omit]"),//省略号
						span_others = _this.find("span[tag=others]");
						has_others = span_others.length > 0;//是否有多个子订单
					if(has_others){
						//console.debug(a.width(), span_others.width());
						a.width(a.width()-span_others.width()-5);
					}
					//解决在FF等浏览器下 前面的checkbox和后面的a上下不对齐。
					if(!$isBrowser("ie")){
						a.add(_this.find(":checkbox")).css("verticalAlign", "middle");
					}
					if(a.width()>span_ruler.width()){
						/*
						span_omit.show();//不能完整显示，那么就将省略号显示出来
						//span_ruler.width(span_ruler.width() * (has_others ? 0.8 : 0.9 ));
						console.info(span_ruler.width());
						span_ruler.width(span_ruler.width() -20- (has_others ? span_omit.width() : 0 ));
						console.log(span_ruler.width(), "|"+span_context.text()+"|"+span_context.text().length);
						//var text = span_context.text(),
						var text = span_context.text().replace(/ +/g, " "),
							len = Math.round(span_ruler.width()/aByteWidth);//能存放得下多长的半角字符
						console.debug("|"+$getTextByByteLength(text, len)+"|");
						span_context.text($getTextByByteLength(text, len));
						*/
						a.width(span_ruler.width());
					}
				});
			}, 100);
			//列表元素的鼠标滑过样式切换,最后一行特殊样式
			bh.find(".pro_list li:gt(0)").hover(
				function(){$$(this).addClass("hover");}, 
				function(){$$(this).removeClass("hover");}
			).filter(":last").addClass("t_footer");
			//全选事件
			var select_all = bh.find("li.t_head :checkbox"),
				select_single = bh.find("li :checkbox").not(select_all),
				hidden = bh.find(":hidden[tag=s]"),
				total = bh.find("span[tag=total]");
			//每个订单列表的checkbox单击事件绑定
			select_single.click(function(){refreshState();});
			//“全选”的checkbox单击事件
			select_all.click(function(){
				select_single.filter(":not([disabled])").attr("checked", $$(this).attr("checked"));
				refreshState();
			});
			//去付款按钮
			bh.find("button.btn_hit_b").click(function(){
				f.close();
				window.open("http://pay.paipai.com/cgi-bin/trade_account/TenpayFast?"+hidden.val()+ "&t=" + new Date().valueOf());
			});
			//关闭窗口
			bh.find("a[name=closeWindow]").click(function(){f.close();return false;});
			//刷新状态
			function refreshState(){
				//如果都没有一个选中，那么将全选的按钮置为不可选
				if(select_single.filter(":checked").length==0){
					select_all.attr("checked", false);
				}
				var totalCount = 0, ciString = [];//实时计算总价和更新提交串
				select_single.filter(":checked").each(function(){
					totalCount += parseFloat($$(this).attr("v"));
					ciString.push("dealCodeList="+$$(this).attr("s"));
				});
				//刷新总价
				total.html(totalCount.toFixed(2));
				//刷新hidden隐藏值
				hidden.val(ciString.join("&"));
			}
			refreshState();
		}else{//出错了，执行什么处理呢？
			return false;//...todo
		}
	}
}
function $showFloatLoading(opt) {
    /**
    * 展示loading图标
    *
    * @content : 展示loading的对象
    * @timeout : 超时时间
    * @callback : 异步的回调函数
    * @actionBtn : 触发异步处理的按钮
    * @mode : loading样式（full：展示默认的提示，simple：展示简单的提示）
    */
    var option = {
        timeout: 5000,
        callback: null,
        showFloat: false,
        timeoutCallback: function () { }
    }
    for (var key in opt) {
        if (opt[key]) {
            option[key] = opt[key];
        }
    }

    if (!$showFloatLoading['showFloatLoading_data']) {
        $showFloatLoading['showFloatLoading_data'] = {};
    }

    $showFloatLoading['showFloatLoading_data']['floatObj'] = $float({
        html: '<div id="showFloatLoading_content" style="padding:0px 10px;font-size:14px;font-weight:bold;"><span><img src="http://static.paipaiimg.com/assets/common/loading.gif" hspace="5" align="absmiddle" /> 数据加载中，请稍等……</span></div>',
        fix: false,
        style: "stand",
        cover: true,
        leaver: 30,
        width: '350'
    });

    //清除原有的setTimeout
    if ($showFloatLoading['showFloatLoading_data']['loadtag']) {
        clearTimeout($showFloatLoading['showFloatLoading_data']['loadtag']);
    }
    //创建超时处理函数
    var timeoutFunc = (function (option) {
        return function () {
            //超时后，回调函数置空
            if (option.callback) {
                $showLoading[option.callback] = function () { }
            }
            //展示错误信息
            var content = getEl('showFloatLoading_content');
            content.innerHTML = '<p><span class="msg3-icon-warn"></span>系统繁忙，请稍候再试</p><p style="text-align:center;padding:10px 0px 0px 0px;"><button id="showFloatLoading_okBtn"> 确 定 </button></p>';
            //绑定确定方法
            getEl('showFloatLoading_okBtn').onclick = function () {
                //关闭浮层
                $showFloatLoading['showFloatLoading_data']['floatObj'].close();
            }
            if (option.timeoutCallback) {
                option.timeoutCallback();
            }
        }
    })(option);


    //记录setTimeout标记
    $showLoading['showLoading_data']['loadtag'] = setTimeout(timeoutFunc, option.timeout);
    return {
        //取消展示超时信息的倒计时，同时隐藏loading对象
        clear: (function (option) {
            return function () {
                //清理超时等待
                var timeoutId = $showLoading['showLoading_data']['loadtag'];
                clearTimeout(timeoutId);
                //关闭浮层
                $showFloatLoading['showFloatLoading_data']['floatObj'].close();
            }
        })(option),
        showMsg: function (msg) {
            //清理超时等待
            var timeoutId = $showLoading['showLoading_data']['loadtag'];
            clearTimeout(timeoutId);
            //展示错误信息
            var content = getEl('showFloatLoading_content');
            content.innerHTML = '<p><span class="msg3-icon-warn"></span>' + msg + '</p><p style="text-align:center;padding:10px 0px 0px 0px;"><button id="showFloatLoading_okBtn"> 确 定 </button></p>';
            //绑定确定方法
            getEl('showFloatLoading_okBtn').onclick = function () {
                //关闭浮层
                $showFloatLoading['showFloatLoading_data']['floatObj'].close();
            }
        }
    }

    function getEl(id) {
        if (typeof id === 'string') {
            return document.getElementById(id);
        }
        return id;
    }
}
function $showGotopButton(){
	//显示一个回到顶部的浮动按钮
	$$(document).ready(function(){
		$$("body").append("<a href='#' class='toTop' title='回到顶部'  id='flowLink' style='top:587px;right:50%; position:absolute; margin-right:-502px; width:25px; height:80px;'><img src='http://paipai.lady.qq.com/images/magazine6/totop_03.jpg' /></a>");
		window._gotopLy=0
		window._gotopItem=document.getElementById("flowLink");
		setInterval(function(){
			var f=window._gotopItem;
			var y =((document.documentElement)?document.documentElement.scrollTop:document.body.scrollTop);
			temp=.1*(y-window._gotopLy); 
			temp=((temp>0)?Math.ceil(temp):Math.floor(temp)); 
			f.style.top=(parseInt(f.style.top)+temp)+"px";
			window._gotopLy+=temp; 
		},10)
	});
}
function $showItemVisitCount() {
    var tag = $$("[tag='visitCount']");
	if(tag.length==0){return false;}
    PP.market.base.visitCountItem = {};
    for (var i = 0; i < tag.length; i++) {
        var cid = tag[i].getAttribute('cid');
        if (!PP.market.base.visitCountItem[cid]) {
            PP.market.base.visitCountItem[cid] = [];
        }
        PP.market.base.visitCountItem[cid].push(tag[i]);
        $loadScript('http://auction1.paipai.com/' + cid + '.1');
    }
    window.commodityJsonInfoCallBack = function (data) {
        var cid = data.sItemid;
        var doms = PP.market.base.visitCountItem[cid];
        if (doms && doms.length > 0) {
            for (var j = 0; j < doms.length; j++) {
                if (doms[j].getAttribute("initVisitCount")) {
                    doms[j].innerHTML = parseInt(doms[j].getAttribute("initVisitCount")) + data.visitCount * 1;
                } else {
                    doms[j].innerHTML = data.visitCount;
                }
            }
        }
    }
}
function $showManlisong(activeObj) {
    //满立送逻辑,延时加载
    var option = {
        shopqq: "",
        cate: "",
        promotetype: '0', //0为店铺促销，1为商品促销，2为2级页面
		linktype:'0' //0普通尾部，1带2级页面链接，2不带链接，2级页面
		};
    for (var i in activeObj) option[i] = activeObj[i];



    $$(document).ready(function () {
		window.selfmarket_showactiveCallBack = function (obj) {
		//返回码上报
		_retCoder.report(true);
        var head = '<div class="ploy"><div class="hd"><div class="ploy_icon"></div><h4><span>商家促销</span>（活动时间：{#time#}）</h4></div><div class="bd">';

        var template = '<p class="ploy_list">{#nocond#}本店买就优惠：{#nocond#}{#condmoney#}{#firstsay#}满<em>{#cost#}{#condmoney#}{#hasFree#}{#free#}{#hasFree#}{#hassend#}，送<a href="{#sendLink#}" target="_blank">{#sendName#}</a>{#hassend#}{#hasExchange#}，加<em>{#exchangeMin#}</em>元换购<a href="{#exchangeLink#}" target="_blank">{#exchangeName#}</a>{#hasExchange#}{#hasExpress#}，免运费{#hasExpress#}！</p>';

        var tail = '<p class="ploy_reason">{#activeText#}<br/><span class="ploy_give">{#remark#}</span></p></div></div> ';
		
		
        var codes = "";
        head = head.replace("{#time#}", obj.beginTime + " - " + obj.endTime);
        tail = tail.replace("{#remark#}", obj.remark);
		switch(option.linktype){
			case "0":
			tail=tail.replace("{#activeText#}","<strong>本店指定商品参加促销活动。</strong>");
			break;
			case "1":
			tail=tail.replace("{#activeText#}", "<strong>此商品参与商家促销。</strong>");
			break;
			case "2":
			tail=tail.replace("{#activeText#}", '<strong>本店带有</strong>“'+'<span class="ico-span ico-man" title="此商品参加店铺促销，按照店铺制定规则，购满一定金额或数量，则可享受优惠。"></span>'+'”<strong>图标的商品参与商家促销。</strong>');
			break;
			case "3":
			tail=tail.replace("{#activeText#}", '<strong>此分类商品参与商家促销。</strong>');
			break;
		}
        var actives = obj.content;
        for (var i = 0; i < actives.length; i++) {
            var hc = template;
			hc = hc.replace("{#firstsay#}",i==0?"每笔订单":"");
            hc = hc.replace("{#cost#}", (actives[i].cond[0] == "0") ? actives[i].cond[1] + "</em>件" : actives[i].cond[1] + "</em>元");
            if (actives[i].favo1) {
                hc = hc.replace("{#free#}", (actives[i].favo1[0] == "0") ? "减<em>" + actives[i].favo1[1] + "</em>元" : "就打<em>" + actives[i].favo1[1] + "<\/em>折");
            }
            if (actives[i].favo2) {
                hc = hc.replace("{#sendLink#}", actives[i].favo2[1]);
                hc = hc.replace("{#sendName#}", actives[i].favo2[0]);
            }
            if (actives[i].favo3) {
                hc = hc.replace("{#exchangeMin#}", actives[i].favo3[0]);
                hc = hc.replace("{#exchangeName#}", actives[i].favo3[1]);
                hc = hc.replace("{#exchangeLink#}", actives[i].favo3[2]);
            }
            //判断是否有减xx元
            hc = hc.replace((!actives[i].favo1) ? /{#hasFree#}.*?{#hasFree#}/ : /{#hasFree#}/g, "");
            //判断是否有包快递
            if (actives[i].favo4) {
                hc = hc.replace((actives[i].favo4[0] == "0") ? /{#hasExpress#}.*?{#hasExpress#}/ : /{#hasExpress#}/g, "");
            }
            else {
                hc = hc.replace(/{#hasExpress#}.*?{#hasExpress#}/, "");
            }
            //判断是否有条件
            hc = hc.replace((!actives[i].cond) ? /{#nocond#}/g : /{#nocond#}.*?{#nocond#}/, "");
            //判断消费条件
            hc = hc.replace((!actives[i].cond) ? /{#condmoney#}.*?{#condmoney#}/ : /{#condmoney#}/g, "");
            //判断是有商品赠送
            if (actives[i].favo2) {
                hc = hc.replace((actives[i].favo2[0] == "") ? /{#hassend#}.*?{#hassend#}/ : /{#hassend#}/g, "");
            } else {
                hc = hc.replace(/{#hassend#}.*?{#hassend#}/, "");
            }
            //判断是有商品换购
            if (actives[i].favo3) {
                hc = hc.replace((actives[i].favo3[1] == "") ? /{#hasExchange#}.*?{#hasExchange#}/ : /{#hasExchange#}/g, "");
            } else {
                hc = hc.replace(/{#hasExchange#}.*?{#hasExchange#}/, "");
            }

            codes += hc;
        }

        var viewhtml = head + codes + tail;
		
		switch(option.promotetype){
			case '0':
				if($id("userContent")){
					$$("#userContent").after(viewhtml);
				}else{
					$$("#content").prepend(viewhtml);
				}
			break;	
			case '1':
			$$("#iteminfo").before(viewhtml);
			break;
	
			
			case '2':
				$$("div.fr_main").children().eq(0).after(viewhtml);
			break;
			case '3':
				$$("div.fr_main").prepend(viewhtml);
			case '4':
				$$("div.pfhlkd_main [segid=0]:first").after(viewhtml);
			case '5':
				$$("div[modid=19]").before(viewhtml);				
			break;
		}
		
		//重绘一次，要不页面有问题
		//商品单元优化-postion定位 IE下不重绘会有问题
		setTimeout(function(){
			try{
				document.body.className = document.body.className;
			}catch(e){};
		},1000);
    };						 
								 
		var path = "http://my.paipai.com/cgi-bin/selfmarket_show?uin=" + option.shopqq+ "&t=" + Math.random();
		//返回码统计对象_retCoder
		var _retCoder=$returnCode({url:path,frequence:2});
        //期待回调函数：commPromotionListCallBack（obj）
        $loadScript(path, "manlisong");
    });
}
function $showRecommend(comid, mark, shopqq) {
    //抢购商品卖完后 加量加价推荐商品

    //加价模板temps[0]和推荐其他商品模板temps[1]
    var temps = ['<div class="oneaday" id="recommendInfo"><div class="hd"><h3>温馨提示</h3><p><a id="closeRecommend" href="">关闭</a></p></div><div class="bd"><p class="note">您下手晚了，以特价出售的商品已卖完！但该商品仍有少量以优惠价格出售，欲购从速。</p><h4>推荐原件商品</h4><dl class="original"><dt><a href="http://auction1.paipai.com/{#cid#}?PTAG=30340.72.1">{#cname#}</a></dt><dd class="pic"><a href="http://auction1.paipai.com/{#cid#}?PTAG=30340.72.1"><img src="{#img#}" alt="{#cname#}" /></a></dd><dd class="price">价格：<em>{#price#}</em>元</dd><dd class="relink"><a href="http://auction1.paipai.com/{#cid#}?PTAG=30340.72.1">查看商品详情</a></dd></dl></div></div>', '<div class="oneaday" id="recommendInfo"><div class="hd"><h3>温馨提示</h3><p><a 		id="closeRecommend" href="">关闭</a></p></div><div class="bd"><p class="note">	您下手晚了，特价商品已被抢完。卖家专门为您推荐另一款特价商品，也很超值哦。</p><h4>卖家特价推荐</h4><dl class="original"><dt><a href="http://auction1.paipai.com/{#cid#}?PTAG=30340.72.1">{#cname#}</a></dt><dd class="pic"><a href="http://auction1.paipai.com/{#cid#}?PTAG=30340.72.1"><img src="{#img#}" alt="{#cname#}" /></a></dd><dd class="price">价格：<em>{#price#}</em>元</dd><dd class="relink"><a href="http://auction1.paipai.com/{#cid#}?PTAG=30340.72.1">查看商品详情</a></dd></dl></div></div>'];

    window.commodityJsonInfoCallBack = function (commodityInfo) {
        //目标商品不是在售或者目标商品的卖家跟当前商品卖家不一样的话就不显示
        if (commodityInfo.state != "2" || commodityInfo.uin != shopqq) {
            return false;
        }

        var temp = temps[mark];
        temp = temp.replace(/{#cname#}/g, commodityInfo.name);
        temp = temp.replace(/{#cid#}/g, commodityInfo.sItemid);
        temp = temp.replace(/{#img#}/g, commodityInfo.pic);
        temp = temp.replace(/{#price#}/g, commodityInfo.price);

        var al = $float({
            title: "温馨提示",
            html: temp,
            fix: true,
            width: '565',
            height: "300",
            style: "none", //stand\none\poptip
            cover: true	//显示覆盖背景
        });
        $$("#alterframe").css("border", "").css("background", "");
        $$("#closeRecommend").click(function () {
            this.href = "#nolink";
            al.close();
            return;
        });
    };


    try {
        //返回json的商品信息，期待commodityJsonInfoCallBack回调 
        $loadScript("http://auction1.paipai.com/" + comid + ".1?t=" + Math.random(), "recommendItem");
    } catch (e) { }
}
function $showRelativeComms(cfg) {
    var configs = {
        url: "",
        ptagIndex: "",
        ptagCur: "-1",
        tpl: '<li><div class="img_wp"><a href="http://auction1.paipai.com/{#itemid#}?PTAG={#ptag#}&iFlag={#pageType#}" target="_blank"><img src="{#imageUrl#}" /></a></div><div class="name"><a href="http://auction1.paipai.com/{#itemid#}?PTAG={#ptag#}&iFlag={#pageType#}" target="_blank">{#title#}</a></div><div class="price">拍拍价：<span class="num">{#price#}</span>元</div></li>',
        domArea: "#ad1_1",
        domContent: "#mutuGoodsDiv",
        domHide: "",
        domBtnLeft: "",
        domBtnRight: "",
        itemLength: 5,
	itemCount: 0,
        imgSize: 0,
		scrollDelay: 0,
        emptyDataAct: function() {
            $$(this.domArea).hide();
            return true;
        }
    };
	//合并参数
    for (var x in cfg) {
        configs[x] = cfg[x] || configs[x];
    }
    var pageType = parseInt(configs.ptagIndex) - 1;
    var currPtag = ["31409", "31410", "31411", "31412", "31413"][pageType];
	//调用关联推荐接口
    $loadScript(configs.url + "&callback=showRelatedItems&t=" + new Date().valueOf());
    window.showRelatedItems = function(obj) {
		if (obj.retcode != 0) {
            return false;
        }
		//限定商品数量
		if(configs.itemCount != 0) {
			obj.itemlist = obj.itemlist.slice(0, configs.itemCount);
		}
		
		//设置当前页码并加载图片列表
		var currentPage = 0;
		currentPage = showPage("init", currentPage, obj.itemlist, configs);
		//设置定时滚动
		if(configs.scrollDelay != 0) {
			var scroller = setInterval(function() {
				currentPage = showPage("auto", currentPage, obj.itemlist, configs);
			}, configs.scrollDelay);
		}
		//设置按钮
		if(configs.domBtnLeft != "") {
			$$(configs.domBtnLeft).click( function() {
				currentPage = showPage("previous", currentPage, obj.itemlist, configs);
				$countRd(currPtag + ".5.1");
				if(configs.scrollDelay != 0) {
					clearInterval(scroller);
					scroller = setInterval(function() {
						currentPage = showPage("auto", currentPage, obj.itemlist, configs);
					}, configs.scrollDelay);
				}
			});
		}
		if(configs.domBtnRight != "") {
			$$(configs.domBtnRight).click( function() {
				currentPage = showPage("next", currentPage, obj.itemlist, configs);
				$countRd(currPtag + ".5.2");
				if(configs.scrollDelay != 0) {
					clearInterval(scroller);
					scroller = setInterval(function() {
						currentPage = showPage("auto", currentPage, obj.itemlist, configs);
					}, configs.scrollDelay);
				}
			});
		}
		//显示图片列表页
		function showPage(mode, current, itemlist, configs) {
			var totalPage = Math.ceil(itemlist.length / configs.itemLength);
			//过滤无效页码并设置
			(current > totalPage-1) && (current = totalPage-1);
			(current < 0) && (current = 0);
			switch(mode) {
				case "next":
					(current < totalPage-1) && current++;
					break;
				
				case "previous":
					(current > 0) && current--;
					break;
				
				case "auto":
					(current < totalPage-1) ? current++ : current = 0;
					break;
			}
			//分割关联推荐数组
			var ls = obj.itemlist.slice(current * configs.itemLength, (current + 1) * configs.itemLength);
			//设置图片列表元素
			if (ls.length > 0) {
				var imgSize = configs.imgSize;
				$$(configs.domContent).html($$.map(ls, 
				function(i, idx) {
					if (imgSize == 80 || imgSize == 120 || imgSize == 160) {
						i.logourl = i.logourl.replace(/(\d+)x(\d+)(?=\.\w+)/g, imgSize + "x" + imgSize);
					}
					if(configs.ptagCur != "-1") {
						var ptag = currPtag + "." + configs.ptagCur + "." + (idx + 1);
					} else {
						var ptag = currPtag + "." + (current + 1) + "." + (idx + 1);
					}
					var hc = configs.tpl.replace(/{#imageUrl#}/g, i.logourl).replace(/{#itemid#}/g, i.itemid).replace(/{#title#}/g, i.itemtitle).replace(/{#price#}/g, i.price).replace(/{#ptag#}/g, ptag).replace(/{#pageType#}/g, pageType);
					return i ? hc: "";
				}).join(""));
				$$(configs.domArea).show() && configs.domHide && $$(configs.domHide).hide();
			} else {
				configs.emptyDataAct();
			}
			//设置按钮状态（第一页时#btn_l无效，最后一页时#btn_r无效）
			(current == totalPage - 1) ? ($$(configs.domBtnRight)[0].className = "next next_dis") : ($$(configs.domBtnRight)[0].className = "next");
			(current == 0) ? ($$(configs.domBtnLeft)[0].className = "pre pre_dis") : ($$(configs.domBtnLeft)[0].className = "pre");			
			return current;
		};
    };
}
function $showTip(opt){
	//显示黄色浮动提示条
	var option={
		title:'',
		content:'',
		height:200,
		width:50,
		left:'0',
		top:'0',
		autoHide:true,
		type:'0'
	};
	for(var i in opt){option[i]=opt[i];}
	(!window._tipsHandler)?window._tipsHandler={}:"";
	window._tipsHandler.option=option;
	if(!window._tipsHandler.dom){
		var c=document.createElement("div");
		c.style.display="";
		c.style.opacity=1;
		c.style.position="absolute";
		c.style.left=0;
		c.style.top=0;
		c.className="hover_tips";
		c.style.zIndex=20;
		c.id="hoverTips";
//(option.type=="0")?"hover_tips_ztb":"hover_tips_zt"
		c.innerHTML='<span class="'+((option.type=="0")?"hover_tips_ztb":"hover_tips_zt")+'" id="hover_tips_ztb" style="left:25px"></span><div class="hover_tips_cont"><strong id="hoverTips_title"></strong><div id="hoverTips_content" style="display:block;overflow:hidden;"></div></div>';
		document.body.appendChild(c);
		window._tipsHandler.dom=document.getElementById("hoverTips");
		window._tipsHandler.ztb=document.getElementById("hover_tips_ztb");
		window._tipsHandler.content=document.getElementById("hoverTips_content");
		window._tipsHandler.title=document.getElementById("hoverTips_title");
		if(window._tipsHandler.option.autoHide){
			window._tipsHandler.dom.onmouseover=function(){
				window._tipsHandler.option.show();
			};
			window._tipsHandler.dom.onmouseout=function(){
				window._tipsHandler.option.close();
		};
		}
	}
	var _t=window._tipsHandler;
	_t.title.innerHTML=option.title;
	_t.content.innerHTML=option.content;
	option.height==0?"":_t.content.style.height=option.height+"px";
	_t.content.style.width=option.width+"px";
	_t.dom.style.display="";
	_t.dom.style.opacity=1;
	_t.dom.style.left=(_t.option.left)+"px";
	_t.dom.style.top=(_t.option.top)+"px";
	_t.ztb.className = (option.type=="0")?"hover_tips_ztb":"hover_tips_zt";
	_t.ztb.style.left="25px";
	//防止溢出
	var p=[parseInt(option.left),parseInt(option.top)];
	//超出右侧
	leftOut=(parseInt(option.left)+_t.dom.scrollWidth-$getPageScrollWidth()-$getWindowWidth())
	if(leftOut>0){
		_t.dom.style.left=(parseInt(option.left)-leftOut)+"px";
		_t.ztb.style.left=(25+leftOut)+"px";
	}
	option.close=function(){
			if(window._tipsHandler.timer){
				window.clearInterval(window._tipsHandler.timer);
			}
			window._tipsHandler.timer=setInterval(function(){
			if(window._tipsHandler.dom.style.opacity>0){	
				if( (window._tipsHandler.dom.style.opacity-=0.1)<0.1){
					window._tipsHandler.dom.style.opacity=0;
				}
			}else{
				window.clearInterval(window._tipsHandler.timer);
				window._tipsHandler.dom.style.opacity=0;
				window._tipsHandler.dom.style.display="none";
			}
		},30);
	};
	option.show=function(){
		if(window._tipsHandler.timer){
			window.clearInterval(window._tipsHandler.timer);
		}
		window._tipsHandler.dom.style.opacity=1;
		window._tipsHandler.dom.style.display="";
	}
	option.dom = window._tipsHandler.dom;
	return option;
}
function $slider(obj){
    var opt={
        titleId:"",    			//tab标题的id
        titleTag:"",    		//tab的元素类型
        contentId:"",    		//内容的id
        contentTag:"",    		//内容元素类型
		prevId:"",				//前一页
		nextId:"",				//下一页
		perView:1,				//每页显示个数
		className:"current",	//title选中的样式
		eventType:"mouseover",	//mouseover && click
        initIndex:NaN,			//初始化定位
        timeLag:300,			//启动延时，防止用户滑来滑去的情况
		funcInit:$empty(),		//初始化循环内容时候执行的函数
		funcTabInit:$empty(),	//初始化循环title时候执行的函数
		func:$empty(),			//当前元素显示时候执行的函数
		auto:false,				//是否自动轮播
		autoKeep:true,			//鼠标移开后继续轮播
		autoTimes:100,			//轮播次数
		autoLag:5000,			//自动轮播延时
		fadeLag:50,				//效果延时
		fadeTimes:500,			//效果要求执行时间，比如0.5s切换完成，而效果延时是0.1s，那么就是说五个步骤之后就执行完毕了
		initSpeed:100,			//初速度加成
		effect:'none',          //播放效果 'none','scrollx', 'scrolly', 'fade'
		width:0,				//内容区宽度
		height:0,				//内容区高度
		backAttr:"back_src",	//存储图片地址的属性
		isLoadInit:true	,		//初始化的时候是否载入图片，当切换在屏幕不可见范围内进行的时候有用
		focusIndex:setEffect,	//提供给外部定位的接口
		clearAuto:function(){clearInterval(autoIntr)},//提供给外部的接口，清空轮播
		cont:null,				//内容列表
		tabs:null				//菜单列表
    };

    for(var i in obj){opt[i]=obj[i]};

	//自动获取的宽高不太准确，需要传入
	((opt.width==0 && opt.effect=="scrollx") || (opt.height==0 && opt.effect=="scrolly")) && (opt.effect="none");

	//if(!opt.titleId) debugger;
    //遍历所有的标题和内容，并绑定事件
    var	total=0,		//统计数字
		autoCount=0,	//当前已播次数
		isInit=true,	//是否初始化进入;
		intr=null,		//tab切换的interval
		autoIntr=null,	//自动切换的interval
		 _imgs=[];		//图片是否已经载入


	if(opt.contentId){
		//支持只有tab切换然后做别的事情的情况
		var oContent=$id(opt.contentId),
			_cont=$child(oContent,opt.contentTag,function(dom){
			//给内容的状态初始化
			switch(opt.effect){
				case "none":
					dom.style.display="none";
				break;
				case "scrollx":
					//考虑到动态加载图片的情况，区域的大小要限定
					dom.style.width=opt.width+"px";
					//如果效果为scrollx和fade，则全部向右漂移
					dom.style.styleFloat = dom.style.cssFloat = "left";
					dom.style.visibility = "hidden";
				break;
				case "scrolly":
					//考虑到动态加载图片的情况，区域的大小要限定
					dom.style.height=opt.height+"px";
					dom.style.visibility = "hidden";
				break;
				case "fade":
					dom.style.display="none";
					dom.style.position="absolute";
					dom.style.left=0;
					dom.style.top=0;
				break;
			};
			//执行初始化函数
			opt.funcInit(total++,dom);
		});

		if(opt.auto){
			//循环播放进入和离开content的操作
			$addEvent(oContent,"mouseover",function(){
				clearInterval(autoIntr);
			});
			opt.autoKeep && $addEvent(oContent,"mouseout",function(){
				setAuto();
			});
		};
		opt.cont=_cont;
	}

	//如果没有定义initIndex则随机
	var len=opt.perView,//下面多次用到，所以存储一下
		now=0;			//临时变量，当前显示的元素

	if(opt.titleId){
		//支持无titile切换
		var oTitle=$id(opt.titleId),
			_tabs=$child(oTitle,opt.titleTag,function(dom){
				opt.funcTabInit(now,dom);
				dom.setAttribute("index",now++);
			});

		$addEvent(oTitle,opt.eventType,function(e){
			var tar=$getTarget(e,oTitle,opt.titleTag);
			if(tar){
				//放置current还没有设置为cur，然后鼠标又触发的状况
				//setClass在current=cur之前
				var cur=tar.getAttribute("index")*1;
				clearInterval(autoIntr);
				if(cur!=current){
					intr=setTimeout(function(){
						setEffect(cur);
					},opt.timeLag);
				}
			}
		});

		$addEvent(oTitle,"mouseout",function(e){
			var tar=$getTarget(e,oTitle,opt.titleTag);
			if(tar){
				//clearInterval(autoIntr);
				clearTimeout(intr);
				opt.auto && opt.autoKeep && setAuto();
			}
		});
		opt.tabs=_tabs;
		total=now;
	};

	var	pageTotal=Math.ceil(total/len),	//分页
		current=isNaN(opt.initIndex)?$randomInt(pageTotal):opt.initIndex,
		autoTotal=opt.autoTimes * total - 1; //总共轮播次数;


	//默认展示配置项目
	setEffect(current);

	//判断是否自动切换
	opt.auto && setAuto();

	//绑定上一个、下一个的点击
	opt.prevId && (
		$id(opt.prevId).onclick=function(e){
			$preventDefault(e);
			clearInterval(autoIntr);
			setEffect((now=current-1)<0?(pageTotal-1):now);
		}
	);

	opt.nextId && (
		$id(opt.nextId).onclick=function(e){
			$preventDefault(e);
			clearInterval(autoIntr);
			setEffect((now=current+1)>=pageTotal?0:now);
		}
	)

	//初始化结束
	isInit=false;

	return opt;

	//自动切换设置
	function setAuto(){
		autoIntr=setInterval(function(){
			if(autoCount>=autoTotal){
				clearInterval(autoIntr);
			}else{
				setEffect((now=current+1)>=pageTotal?0:now);
				autoCount++;
			}
		},opt.autoLag);
	}

	//设置特效
	function setEffect(cur){
		//if(opt.isLoadInit==false) debugger;
		if(!opt.contentId){
			//如果没有contentId，简单解决
			showItem(cur);
			current=cur;
			return;
		};
		if(isInit){
			//初始化动态效果
			switch(opt.effect){
				case "scrollx":
					oContent.style.position="relative";
					oContent.style.width=total * opt.width +"px";
					oContent.style.left=-current*opt.width+"px";
				break;
				case "scrolly":
					oContent.style.position="relative";
					oContent.style.top=-current*opt.height+"px";
				break;
				case "fade":
					oContent.style.position="relative";
				break;
			};
			for(var i=0;i<len;i++){
				(now = cur+i) < total && showItem(now);
			};
			current=cur;
		}else{
			//传入来之前应确保cur!=curren，否则会被当作是初始化
			var fadeStep=Math.floor(opt.fadeTimes/opt.fadeLag),	//计算效果步骤
				fadeIntr=null,
				fadeCount=0;
			switch(opt.effect){
				case "none":
					//if(len>1) debugger;
					for(var i=0;i<len;i++){
						(now = current*len+i) < total && (_cont[now].style.display="none");
						(now = cur*len+i) < total && showItem(now);
					};
					current=cur;
				break;
				case "scrollx":
					var left=getSpeed(opt.width);
					showItem(cur);
					fadeIntr=setInterval(function(){
						//debugger;
						if(fadeCount++>=fadeStep){
							clearInterval(fadeIntr);
							oContent.style.left=-left.end+"px";
							current=cur;
						}else{
							oContent.style.left=-getMove(left)+"px";
							left.t = left.t<opt.fadeTimes?(left.t+opt.fadeLag):opt.fadeTimes;
						};
					},opt.fadeLag);
				break;
				case "scrolly":
					//debugger;
					var top=getSpeed(opt.height);
					showItem(cur);
					fadeIntr=setInterval(function(){
						//debugger;
						if(fadeCount++>=fadeStep){
							clearInterval(fadeIntr);
							oContent.style.top=-top.end+"px";
							current=cur;
						}else{
							oContent.style.top=-getMove(top)+"px";
							top.t = top.t<opt.fadeTimes?(top.t+opt.fadeLag):opt.fadeTimes;
						};
					},opt.fadeLag);
				break;
				case "fade":
					showItem(cur);
					fadeIntr=setInterval(function(){
						//if(!opt.titleId) debugger;
						if(fadeCount++>=fadeStep){
							clearInterval(fadeIntr);
							//oContent.style.top=-endTop+"px";
							//如果不加zIndex问题，某些情况下会有问题，例如title提示
							_cont[current].style.zIndex=0;
							_cont[cur].style.zIndex=1;
							current=cur;
						}else{
							var per=fadeCount/fadeStep;

							_cont[current].style.filter="alpha(opacity="+(1-per)*100+")";
							//_cont[current].style.MozOpacity=1-per;
							_cont[current].style.opacity=1-per;

							_cont[cur].style.filter="alpha(opacity="+(per*100)+")";
							//_cont[cur].style.MozOpacity=per;
							_cont[cur].style.opacity=per;
						};
					},opt.fadeLag);
				break;
			};
		}

		function getSpeed(s){
			var flag=(cur - current)<0?-1:1,
				end=cur*s,
				here=(cur - flag)*s,//直接定位到它的前一个
				oFirst=_cont[0];
			current == 0 && (oFirst.style.position="static");
			if(current + 1 == total && cur == 0){
				//如果是最后一个到第一个情况，仍然保持向左侧滑动
				flag = 1;
				end=(current+1)*s;
				here=current*s;
				oFirst.style.position="relative";
				opt.effect=="scrollx"?oFirst.style.left=end + "px":oFirst.style.top=end + "px";
			};
			return {
				t:0,
				distance:flag*s,
				end:end,
				here:here
			}
		}

		function getMove(obj){
		  //举一个简单的例子，一个div要向右缓动，left初始值是50，那么b就是50，要向右移动100，那c就是100，如果知道的是目标值，例如要向右移动到150，那就把目标值150减初始值b就是变化量c了。
		  //至于d的设置就比较灵活，只要符合t是从0向d递增（或递减）就可以了。
		  //d跟步长配合使用来设置持续时间，例如d设置为100，如果设置步长是10，那么从0到100就有10步，即分10次来完成这个过程，步数越多那么持续时间就越长。
		  //至于t的变化相当于时间的变化，一般是均匀变化的，每次变化都增加一个步长，当t从0递增（或递减）到d时，缓动就结束了。
		  //要注意的是t是从0开始的，设置步长时必须确定t确实能到达d，如果上面的步长是3，那么t就永远都到不了d了。更好的处理是当t等于或超过d之后，就停止定时器并设置当前值为目标值。
			var b=obj.here,
				c=obj.distance,
				d=opt.fadeTimes,
				t=obj.t/d-1;
			return parseInt(-c * (t*t*t*t - 1) + b,10);
		}

		function showItem(cur){
			//设定当前元素的状态
			//if(opt.effect=="none") debugger;
			//设置title的样式，并将滚动到的地方设置为当前
			//如果当前是隐藏的，先显示出来
			if(opt.contentId && !_imgs[cur] && (isInit==false || (isInit==true && opt.isLoadInit==true))){
				//并不能确保分页的最后一页数量为len && 如果图片未载入，并且不是初始化或是初始化且需要加载
				$loadImg(_cont[cur],opt.backAttr);
				_imgs[cur]=true;
			};
			if(opt.contentId){
				_cont[cur].style.display=="none" && (_cont[cur].style.display="block");
				_cont[cur].style.visibility=="hidden" && (_cont[cur].style.visibility="visible");
			};
			if(opt.titleId){
                //_tabs[current].className="";
                for(var i=0,len=_tabs.length;i<len;i++){
                    i!=cur && $delClass(_tabs[i],opt.className);
                }
				$addClass(_tabs[cur],opt.className);
				_tabs[cur].style.display=="none" && (_tabs[cur].style.display="block");
			};
			opt.func(cur);
		}
	}
}
function $smartDrawWidget(o){
	/*
	//搜索相关词smartDraw
	//20100720 create by homerhuang 
	*/
	var smartDrawItem = {
		isAvai:true,		//是否启用(默认不启用)
		sourceUrl:"http://search.paipai.com/cgi-bin/isuggest_v6",
		domTag:"smartDrawCallBack",		//接口回调函数名称
		formName:"searchForm",			//下拉展示的输入框提交表单名称
		smartBrawItem:"KeyWord",		//下拉展示的输入框对象
		drawListItem:"searchDrawList",	//下拉展示Dom容器元素
		markListItem:"maskSearchDrawList",
		nowLink:-1,			//当前展示的下拉项节点的数组下标
		curKeyWord:"",		//当前输入框的关键字
		mutuKey:[],		//接口回调后数据保存在此数组变量
		maxNum:0,			//当前展示下拉项节点长度
		onBeforSubmit:function(){return true;},
		//pTag:"20084.2.2",
		template:'<li attr="{#idx#}" class="text" onmouseover="smartDrawObj.setNowLink(this)"><a href="http://search.paipai.com/cgi-bin/comm_search?keywordtype=goods&KeyWord={#pramKeyWord#}&PTAG=20084.31.{#idx#}" lg="1005" pos="{#sPos#}" onclick="javascript:smartDrawObj.nowLink = -1;"><span>{#keyWord#}</span><em>约{#keyNum#}结果</em></a></li>{###}<li attr="{#idx#}" class="photo" onmouseover="smartDrawObj.setNowLink(this)"><a href="http://auction1.3c.paipai.com/spu.xhtml?pd={#commId#}&PTAG=20058.1.1" target="_blank" lg="1006" pos="{#sPos#}" onclick="javascript:smartDrawObj.nowLink = -1;"><img src="http://img5.paipaiimg.com/{#commPic#}" width="40" height="40" /><span>{#commName#}</span></a></li>{###}<li attr="{#idx#}" onmouseover="smartDrawObj.setNowLink(this)"><a href="http://search.paipai.com/cgi-bin/comm_search?keywordtype=goods&KeyWord={#keyWord#}&sClassid={#sclass#}&PTAG=20084.31.{#idx#}" lg="1008" pos="{#sPos#}" onclick="javascript:smartDrawObj.nowLink = -1;"><span>{#showWord#}</span></a></li>',		//模版
		//初始化下拉选框
		initDrawItem:function(){
			var objFrm = document.forms[this["formName"]],drawItem = objFrm.elements[this["smartBrawItem"]];
			objFrm.onsubmit = function(){return false;};
			if (window.smartDrawObj){
				for (var n in window.smartDrawObj){
					this[n] = window.smartDrawObj[n];
				}
			}
			$id("headSubmitBtn").onclick =function(){
				if (smartDrawObj["nowLink"] > -1){
					if (smartDrawObj["mutuKey"][smartDrawObj["nowLink"]].length == 3 && isNaN(smartDrawObj["mutuKey"][smartDrawObj["nowLink"]][1])){
						smartDrawObj["submitSPU"]();
					}else{
						smartDrawObj["submitSearch"](smartDrawObj["formName"]);
					}
				}else{
					smartDrawObj["submitSearch"](smartDrawObj["formName"]);
				}
			};
			if (objFrm){
				drawItem = objFrm.elements[this["smartBrawItem"]];
				if (drawItem){
					drawItem.onkeydown = function(){
						this.parentNode.className = this.parentNode.className.replace(/ empty/gi,"");
					};
					drawItem.onkeyup = this["keyEvent"];
					/*drawItem.onfocus = function(){
						if (this.value == '想找什么？输入商品名称试试'){
							this.value = '';
						}
					};*/
				}
			}
			if ($isBrowser("ie")){
				document.attachEvent("onclick",this["hidesmartDraw"]);
			}else{
				document.addEventListener("click",this["hidesmartDraw"],true);
			}
		},
		//设置当前选中项(参数为当前选中节点)
		setNowLink:function(dom){
			try{
				if (dom && dom.getAttribute("attr") != null){
					smartDrawObj["nowLink"] = dom.getAttribute("attr");
					var objListItem = $id(smartDrawObj["drawListItem"]).getElementsByTagName("li");
					for (var i = 0; i < objListItem.length; i++){
						if (objListItem[i].className.indexOf("autoResultLink") > -1){objListItem[i].className = objListItem[i].className.replace(" autoResultLink","");}
					}
					dom.className += " autoResultLink";
				}
			}catch (e){
			}
		},
		//隐藏下拉展示
		hidesmartDraw:function(){
			var drawListItem = $id(smartDrawObj["drawListItem"]),drawListMark = $id(smartDrawObj["markListItem"])
			if (drawListItem && drawListItem.style.display == "block"){
				drawListItem.style.display="none";
				if (drawListMark){drawListMark.style.display="none";}
				var e = arguments[0],srcEls,tempStr;
				if ($isBrowser("firefox") && e){
					srcEls = e.target;
					tempStr = srcEls.getAttribute("type");
					if (tempStr && tempStr.toLowerCase() != "submit"){smartDrawObj["nowLink"] = -1;}
				}
			}
		},
		//键盘响应事件
		keyEvent:function(e){
			var keyCode=$getKeyCode(e),objFrm = document.forms[smartDrawObj["formName"]];
			var drawListItem = $id(smartDrawObj["drawListItem"]),drawItem = objFrm.elements[smartDrawObj["smartBrawItem"]];
			if (smartDrawObj["isAvai"]){
				if (keyCode == 13){
					smartDrawObj["chkSearchKey"]();
				}else if (keyCode == 38 || keyCode == 40){
					if (smartDrawObj["maxNum"] > 0 && drawListItem.style.display == "block"){
						if(keyCode == 38){
							smartDrawObj["nowLink"]--;
						}else if(keyCode == 40){
							smartDrawObj["nowLink"]++;
						}
						if(smartDrawObj["nowLink"] < 0){
							smartDrawObj["nowLink"] = smartDrawObj["maxNum"] - 1;
						}else if(smartDrawObj["nowLink"] > (smartDrawObj["maxNum"] - 1)){
							smartDrawObj["nowLink"] = 0;
						}
						var objListItem = drawListItem.getElementsByTagName("li");
						for (var i = 0; i < objListItem.length; i++){
							if (objListItem[i].className.indexOf("autoResultLink") > -1){objListItem[i].className = objListItem[i].className.replace(" autoResultLink","");}
						}
						objListItem[smartDrawObj["nowLink"]].className += " autoResultLink";
						if (!(smartDrawObj["mutuKey"][smartDrawObj["nowLink"]].length == 3 && isNaN(smartDrawObj["mutuKey"][smartDrawObj["nowLink"]][1]))){
							drawItem.value = smartDrawObj["curKeyWord"] = smartDrawObj["mutuKey"][smartDrawObj["nowLink"]][0];
							if (smartDrawObj["mutuKey"][smartDrawObj["nowLink"]].length == 3 && objFrm.elements["sClassid"]){
								objFrm.elements["sClassid"].value = smartDrawObj["mutuKey"][smartDrawObj["nowLink"]][1];
							}else{
								objFrm.elements["sClassid"].value = "";
							}
						}
					}
				}else{
					if (this.value == ""){
						this.parentNode.className += " empty";
						smartDrawObj.hidesmartDraw();
					}else if(this.value != smartDrawObj["curKeyWord"]){
						$loadScript(smartDrawObj["sourceUrl"] + "?KeyWord=" + this.value + "&dTag=" + smartDrawObj["domTag"] + "&t=" + (new Date).getTime());
					}
					if (this.value != ""){this.parentNode.className = this.parentNode.className.replace(/ empty/gi,"");}
					smartDrawObj["curKeyWord"] = this.value;

				}
			}else{
				smartDrawObj.hidesmartDraw();
				if (keyCode == 13){smartDrawObj["submitSearch"](smartDrawObj["formName"]);}
			}
			return false;
		},
		//回车是检查操作类型(可能是输入法回车、提交关键词、提交spu推荐)
		chkSearchKey:function(){
			var objFrm = document.forms[smartDrawObj["formName"]];
			var drawItem = objFrm.elements[smartDrawObj["smartBrawItem"]];
			if (smartDrawObj["nowLink"] != -1){
				if (smartDrawObj["mutuKey"][smartDrawObj["nowLink"]].length == 3 && isNaN(smartDrawObj["mutuKey"][smartDrawObj["nowLink"]][1])){
					smartDrawObj["submitSPU"]();
				}else{
					smartDrawObj["nowLink"] = -1;
					smartDrawObj["submitSearch"](smartDrawObj["formName"]);
				}
			}else{
				if (drawItem.value == ""){
					window.location = "http://search.paipai.com/";
				}else{
					if (drawItem.value != smartDrawObj["curKeyWord"]){
						$loadScript(smartDrawObj["sourceUrl"] + "?KeyWord=" +drawItem.value + "&dTag=" + smartDrawObj["domTag"] + "&t=" + (new Date).getTime());
						smartDrawObj["curKeyWord"] = drawItem.value;
					}else{
						smartDrawObj["nowLink"] = -1;
						smartDrawObj["submitSearch"](smartDrawObj["formName"]);
					}
				}
			}
		},
		//提交spu推荐
		submitSPU:function(){
			var spuFrm = document.forms["spuSearchFrom"];
			if (spuFrm){
				spuFrm.elements["pd"].value = smartDrawObj["mutuKey"][smartDrawObj["nowLink"]][2];
			}else{
				spuFrm = document.createElement("form");
				spuFrm.setAttribute("target","_blank");
				spuFrm.setAttribute("action","http://auction1.3c.paipai.com/spu.xhtml");
				spuFrm.setAttribute("method","get");
				var tempNode = document.createElement("input");
				tempNode.setAttribute("type","hidden");
				tempNode.setAttribute("name","PTAG");
				tempNode.value = "20058.1.1";
				spuFrm.appendChild(tempNode);
				var tempNode = document.createElement("input");
				tempNode.setAttribute("type","hidden");
				tempNode.setAttribute("name","pd");
				tempNode.value = smartDrawObj["mutuKey"][smartDrawObj["nowLink"]][2];
				spuFrm.appendChild(tempNode);
				document.body.appendChild(spuFrm);
			}
			smartDrawObj["nowLink"] = -1;
			spuFrm.submit();
		},
		//提交当前搜索词
		submitSearch:function(){
			var frm = arguments[0],event = window.event,srcEls;
			if (typeof(frm) == "object" || !frm){
				if ($isBrowser("firefox")){event = frm;}
				srcEls = event.target || event.srcElement;
				frm = srcEls.getAttribute("frm");
			}
			var objFrm = document.forms[frm];
			//如果存在表单，则进行提交逻辑判断
			if (objFrm){
				var t = objFrm.elements["searchType"].value,clsObj = objFrm.elements["sClassid"];
				var clsId = (!clsObj || clsObj.value == "")?0:clsObj.value;
				if(objFrm.elements[smartDrawObj["smartBrawItem"]].value == "输入手机号进行话费充值，Q币、农场礼包等你拿！"){
					objFrm.elements[smartDrawObj["smartBrawItem"]].value = '';
				}
				
				if(objFrm.elements[smartDrawObj["smartBrawItem"]].value == "" && clsId == "0"){
					window.location = "http://search.paipai.com/";
					return false;
				}else{
					if (t && t == "1"){
						objFrm.action="http://shopsearch.paipai.com/SearchShopAction.xhtml";
					}else{
						objFrm.action="http://search1.paipai.com/cgi-bin/comm_search1";
					}
					if (smartDrawObj["onBeforSubmit"]){
						smartDrawObj["onBeforSubmit"]();
					}
					objFrm.submit();
					return false;
				}
			}
		},
		//相关词回调数据接口函数
		smartDrawCallBack:function(o){
			try{
				var drawListItem = $id(smartDrawObj["drawListItem"]),drawListMark = $id(smartDrawObj["markListItem"]);
				if (o["list"] && o["list"].length > 0){
					smartDrawObj["mutuKey"] = [];
					smartDrawObj["maxNum"] = 0;
					var strAuto=['<ul>',[],[],[],'</ul>'],mutuCommStr = smartDrawObj["template"].split("{###}"),tempStr,i,m = 1;
					/*if (o["spu"] && o["spu"].length > 0){
						for (i = 0; i < o["spu"].length; i++,m++){
							tempStr = mutuCommStr[1].replace(/\{\#idx\#\}/gi,i);
							tempStr = tempStr.replace("{#commId#}",o["spu"][i][2]);
							tempStr = tempStr.replace("{#commName#}",o["spu"][i][0]);
							tempStr = tempStr.replace("{#commPic#}",o["spu"][i][1]);
							tempStr = tempStr.replace("{#sPos#}",m);
							strAuto[1].push(tempStr);
							smartDrawObj["maxNum"]++;
						}
						smartDrawObj["mutuKey"] = smartDrawObj["mutuKey"].concat(o["spu"]);
					}*/
					if (o["hotclass"] && o["hotclass"].length > 1){
						for (i = 0,m = 1; i < o["hotclass"].length; i++,m++){
							if($isBrowser("ie")){o["hotclass"][i][0] = decodeURI(o["hotclass"][i][0]);}
							tempStr = mutuCommStr[2].replace(/\{\#idx\#\}/gi,smartDrawObj["maxNum"]);
							tempStr = tempStr.replace("{#keyWord#}",o["hotclass"][i][0]);
							if (o["hotclass"][i][1] == 0){
								tempStr = tempStr.replace("{#showWord#}",o["hotclass"][i][0]);
							}else{
								tempStr = tempStr.replace("{#showWord#}","&nbsp; 在<strong lg='1008' pos='" + m + "'>" + o["hotclass"][i][2] + "</strong>中搜索“<b lg='1008' pos='" + m + "'>" + o["hotclass"][0][0] + "</b>”");
							}
							tempStr = tempStr.replace("{#sclass#}",o["hotclass"][i][1]);
							tempStr = tempStr.replace("{#sPos#}",m);
							strAuto[1].push(tempStr);
							smartDrawObj["maxNum"]++;
						}
						smartDrawObj["mutuKey"] = smartDrawObj["mutuKey"].concat(o["hotclass"]);
					}
					if (o["ext"]){
						tempStr = '<li attr="{#idx#}" class="text" onmouseover="smartDrawObj.setNowLink(this)"><a href="http://search.paipai.com/cgi-bin/comm_search?keywordtype=goods&KeyWord={#keyWord#}&PTAG=20084.31.{#idx#}" lg="1006" pos="1" onclick="javascript:smartDrawObj.nowLink = -1;"><span style="font-size: 14px;">{#keyWord#}</span> &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<i style="color:#aaaaaa; font-size: 14px;">全场满三百送三百</i></a></li>';
						tempStr = tempStr.replace(/\{\#keyWord\#\}/gi,smartDrawObj["curKeyWord"] + " 疯抢节");
						tempStr = tempStr.replace(/\{\#idx\#\}/gi,smartDrawObj["maxNum"]);
						strAuto[1].push(tempStr);
						smartDrawObj["maxNum"]++;
						smartDrawObj["mutuKey"] = smartDrawObj["mutuKey"].concat([[smartDrawObj["curKeyWord"] + " 疯抢节",""]]);
					}
					if(o["list"].length > 0){
						for(i=0,m = 1;i<o["list"].length;i++,m++){
							tempStr = mutuCommStr[0].replace(/\{\#idx\#\}/gi,smartDrawObj["maxNum"]);
							tempStr = tempStr.replace(/\{\#keyWord\#\}/gi,o["list"][i][0].replace(o["hotclass"][0][0],"<span class='match' lg='1005' pos='" + m + "'>" + o["hotclass"][0][0] + "</span>"));
							tempStr = tempStr.replace("{#pramKeyWord#}",o["list"][i][0]);
							tempStr = tempStr.replace("{#keyNum#}",o["list"][i][1]);
							tempStr = tempStr.replace("{#sPos#}",m);
							strAuto[3].push(tempStr);
							smartDrawObj["maxNum"]++;
						};
						smartDrawObj["mutuKey"] = smartDrawObj["mutuKey"].concat(o["list"]);
					}
					strAuto[1] = strAuto[1].join("");
					strAuto[2] = strAuto[2].join("");
					strAuto[3] = strAuto[3].join("");
					strAuto = strAuto.join("");
					drawListItem.innerHTML = strAuto;
					if (drawListItem.style.display != "block"){
						drawListItem.style.display = "block";
						if(drawListMark){drawListMark.style.display = "block";}
					}
					smartDrawObj["nowLink"]=-1;
				}else{
					smartDrawObj["nowLink"]=-1;
					smartDrawObj.hidesmartDraw();
				}
			}catch(e){
			}
		}
	};
	if (o){
		for (var n in o){smartDrawItem[n] = o[n]}
	}
	smartDrawItem["initDrawItem"]();
	window.smartDrawObj = smartDrawItem;
	window._PP_head_callback = function(o){
		if (smartDrawObj[o["dTag"]]){
			smartDrawObj[o["dTag"]](o);
		}else if (window[o["dTag"]]){
			window[o["dTag"]](o);
		}
	};
}
function $smsAdd(paramObj) {
	//接口文档见: http://legos.paipaioa.com/php/interface_info.php?fid=264
	var param = {
		"phone": "", //手机号码
		"confirmPhone": "", //手机号码确认
		"code": "", //4位验证码
		"onSuccess": $empty(),
		"onPhoneFormatError": $empty(),
		"onConfirmError": $empty(),
		"onCodeFormatError": $empty(),
		"onCodeError": $empty(),
		"onLimitError": $empty(),
		"onUnlogin": $empty(),
		"onError": $empty()
	};
	$extend(param, paramObj);
	
	if(param.phone.match(/^1\d{10}$/)) {
		if(param.phone == param.confirmPhone) {
			//验证验证码
			if(param.code.length == 4) {
				window.subscribe_callback = function(retcode) {
					if(retcode == "0") {
						param.onSuccess();
					} else if(retcode == "1") {
						param.onUnlogin();
					} else if(retcode == "11") {
						param.onCodeError();
					} else if(retcode == "12") {
						param.onCodeLimitError();
					} else {
						param.onError();
					}
				};
				$loadScript("http://service.paipai.com/cgi-bin/smssubscribe_add?jump=no&subs_mobile=" + param.phone + "&subs_checkCode=" + param.code + "&t=" + Math.random());
			} else {
				param.onCodeFormatError();
			}
		} else {
			param.onConfirmError();
		}
	} else {
		param.onPhoneFormatError();
	}
}
function $smsGetCode(paramObj) {
	//接口文档见: http://legos.paipaioa.com/php/interface_info.php?fid=262
	var param = {
		"templateId": "1", //模板类型，0为取消提醒操作，1为订阅提醒操作
		"phone": "", //手机号码
		"confirmPhone": "", //手机号码确认
		"onSuccess": $empty(),
		"onFormatError": $empty(),
		"onConfirmError": $empty(),
		"onError": $empty()
	};
	$extend(param, paramObj);
	
	if(param.phone.match(/^1\d{10}$/)) {
		if(param.templateId == "1" && param.phone != param.confirmPhone) {
			param.onConfirmError();
			return;
		}
		window.checkcode_callback = function(retcode) {
			if(retcode == "0") {
				param.onSuccess();
			} else if(retcode == "1") {
				$loginFrame({
					type: 'func',
					check: false,
					model: false,
					action: function(){
						$smsGetCode(paramObj);
					}
				});
			} else {
				param.onError();
			}
		};
		$loadScript("http://service.paipai.com/cgi-bin/smssubscribe_checkcode?subs_mobile=" + param.phone + "&subs_templateId=" + param.templateId + "&t=" + Math.random());
	} else {
		param.onFormatError();
	}
}
function $smsModify(paramObj) {
	//接口文档见: http://legos.paipaioa.com/php/interface_info.php?fid=265
	var param = {
		"whiteList": [], //黑名单
		"blackList": [], //白名单（具体匹配看接口文档）
		"onSuccess": $empty(),
		"onUnlogin": $empty(),
		"onError": $empty()
	};
	$extend(param, paramObj);
	
	window.modify_callback = function(retcode) {
		if(retcode == "0") {
			param.onSuccess();
		} else if(retcode == "1") {
			param.onUnlogin();
		} else {
			param.onError();
		}
	};
	$loadScript("http://service.paipai.com/cgi-bin/smssubscribe_modify?jump=no&whiteList=" + param.whiteList.join(",") + "&blackList=" + param.blackList.join(",") + "&t=" + Math.random());
}
function $smsQuery(paramObj) {
	//接口文档见: http://legos.paipaioa.com/php/interface_info.php?fid=261
	var param = {"onSuccess": $empty(), "onOff": $empty(), "onError": $empty(), "onUnlogin": $empty()};
	$extend(param, paramObj);
	
	var option = {};
	option.state = 0; //订阅状态 0-未订阅, 1-已订阅
	//名单用于修改订阅项时使用，详见smssubscribe_modify接口文档: http://legos.paipaioa.com/php/interface_info.php?fid=265
	option.blackList = []; //黑名单
	option.whiteList = []; //白名单
	
	window.smsQueryOption = option;
	window.query_callback = function(retCode, subscribelist) {
		if(retCode == "0") {
			option.smsList = subscribelist.split(":");
			for(var i=0, len=option.smsList.length; i<len; i++) {
				var temp = option.smsList[i].split("_");
				if(temp[1] != temp[2]) {
					temp[1] == "1" ? option.blackList.push(temp[0]) : option.whiteList.push(temp[0]);
				}
			}
			//彩钻用户发货提醒(id=5)，团购发货提醒(id=108)
			if($inArray("5_1_1", option.smsList) >= 0 || $inArray("108_2_1", option.smsList) >= 0) {
				option.state = 1;
			}
			window.smsQueryOption = option;
			param.onSuccess();
		} else if(retCode == "1") { //登录超时
			param.onUnlogin();
		} else if(retCode == "2") { //未开通
			param.onOff();
		} else {
			param.onError();
		}
	};
	$loadScript("http://service.paipai.com/cgi-bin/smssubscribe_query?jump=no&t=" + Math.random());
}
function $stockManage(obj){
/*		
 商品库存管理组件相关代码
 *作者:kpxu
 */
 
/*
 *更新日期:2011-02-21
 *更新内容:	1.库存框中的库存编码和备注允许输入小数点"."
 *		  	2.复制为EXCEL在和输入框的复制事件在FF下会报JS错误--BUGFIX
 *			3.从表格复制的内容验证规则与手动输入一致化
 *更新人  :johnna
 */
 
/*
 *更新日期:2011-07-11
 *更新内容:增加库存属性显示图片功能
 *更新人  :johnna
 */
    var option = {
        input: "", //最终结果值所保存的input dom，初始化的时候也会从这里取值，如果有就初始化出来，表示是修改。
		attrImgInput:"",//属性图片值
        area: "", //输出内容的区域的dom
        maxLength: 200, //最多可支持的库存条数
        stockSwitch: true, //是否启用库存管理
		canEdit:true,//是否可编辑库存
		//中间的提醒文字
		middleTip:"",
        onInited: function(obj){
            return true;
        }, //初始化成功事件
        onChange: function(obj){
            return true;
        }, //用户修改了输入
        onSwitch: function(obj){
            return true;
        },
		makeAttrUploader:function(){
			return true;
		},
        tp: '{#attrlist#}<div id="stockAttrsFrame0"><input type="checkbox" name="stockSwitch" id="stockSwitch" /><label for="stockSwitch">启用库存配置</label>&nbsp;&nbsp;<a href="http://help.paipai.com/content/help_30122.shtml" target="_blank">查看使用帮助>></a><font color="#FF0000"></font></div><div class="attr-add" id="stockAttrsFrame1">{#attrContent#}{#attrItem#}<dl><dt><img src="http://static.paipaiimg.com/assets/index/close.png" alt="点击删除整行库存属性" style="cursor:pointer;" tag="delAttr" var1="{#attrItem_name#}"  /> {#attrItem_name#}：</dt><dd>{#attrItem_valueItem#}<span>{#attrItem_value#}</span>{#attrItem_valueItem#}</dd></dl>{#attrItem#}{#attrItemEdit#}<dl><dt class="n"><input name="" type="text" value="{#attrItem_name#}" id="{#attrItem_Id#}" maxlength="20" class="ipt_txt" />：</dt><dd>{#attrItem_valueItem#}<input name="" id="{#attrItem_Id#}" type="text" value="{#attrItem_value#}" maxlength="20" style="{#attrItem_style#}" class="ipt_txt"/>{#attrItem_valueItem#}<button type="button" id="showMore_{#attrItem_Id#}" style="{#ItemsShow_style#}" tag="showMore">+</button></dd></dl>{#attrItemEdit#}{#editSave#}<div class="p_btn"><p><button type="button" id="saveEditStockAttrs">确定</button>　<a href="#nolink" id="cancelEditStockAttrs">取消</a>　<em>(属性不超过10个汉字)</em></p></div>{#editSave#}{#goedit#}<div class="p_btn">{#attrCanadd#}<a href="#nolink" id="addStockAttrs">增加一行</a><br />{#attrCanadd#}{#attrCanedit#}<p><button id="editStockAttrs" type="button">编辑</button>　<button id="editAttrImg" type="button">上传属性图片</button></p>{#attrCanedit#}</div>{#goedit#}{#attrContent#}</div><div class="upload_tips flash_tips" id="AttrFlashNoTips" style="display:none;margin-top:10px"><img class="upload_tips_icon" src="http://static.paipaiimg.com/module/b.png" /><em style="color:#F60;font-weight:bold">您的电脑未安装或未启用flash播放器，无法使用“上传属性图片”功能。</em><p>安装flash播放器。<a href="http://www.adobe.com/go/getflashplayer" target="_blank">点击此处安装</a></p></div><div style="display:none;margin-top:10px" class="upload_tips" id="stockMiddleTip"></div>{#attrlist#}{#stock#}<div class="item-list" id="stockAttrsFrame2" >{#stockContent#}<div style="text-align:left;" class="stock_tips">小提示：复制excel表格里的内容，粘贴到下面的列表中试试？</div><div class="item-tip" style="display:none;"><div class="tip-content"></div><span class="tip-dot"></span></div><table class="stock_tb"><colgroup>{#stock_rows#}<col />{#stock_rows#}<col width="160" /><col width="85" /><col width="85" /><col width="95" /></colgroup><thead><tr>{#stock_names#}<th>{#stock_name#}</th>{#stock_names#}<th>库存编码</th><th><input name="" type="checkbox" id="stockSetPriceSame" stype="price" onclick="setStockVarToSame(this)" /><label>价格</label></th><th><input name="" type="checkbox" id="stockSetNumSame" stype="num" onclick="setStockVarToSame(this)" /><label>数量</label></th><th>备注</th></tr></thead><tbody>{#stock_line#}<tr style="{#stock_css#}" >{#stock_values#}<td class="col0">{#stock_value#}</td>{#stock_values#}<td class="col1" nowrap><input name="" id="{#stock_id#}_0"  maxlength="20" class="inp-01" dtype="string" type="text" value="{#stock_info_0#}" tag="stockInput" onblur="stockInputCheck(this)" onchange="stockInputCheck(this)" onpaste="return stockOnPaste(this)" /></td><td class="col2" nowrap><input name=""  id="{#stock_id#}_1" class="inp-02" type="text" value="{#stock_info_1#}" tag="stockInput" dtype="price" onblur="stockInputCheck(this)" onchange="stockInputCheck(this)" style="ime-mode:disabled" onpaste="return stockOnPaste(this)" maxlength="10" /> 元</td><td class="col3" nowrap><input name="" id="{#stock_id#}_2"  class="inp-03" type="text" maxlength="6" value="{#stock_info_2#}" tag="stockInput" dtype="num" style="ime-mode:disabled" onblur="stockInputCheck(this)" onchange="stockInputCheck(this)" onpaste="return stockOnPaste(this)" /> 件</td><td class="col4" nowrap><input name="" id="{#stock_id#}_3" maxlength="20" dtype="string" value="{#stock_info_3#}" class="inp-04" type="text" tag="stockInput" onblur="stockInputCheck(this)" onchange="stockInputCheck(this)" onpaste="return stockOnPaste(this)" /></td></tr>{#stock_line#}</tbody></table><div><a onclick="var v=window.stockOption.getExcelCopy();" href="#nolink">复制上图表为Excel表格格式</a></div>{#stockContent#}</div>{#stock#}' //模板
    };
    for (var i in obj) {
        option[i] = obj[i];
    }
    //判断必要条件
    if (!option.input || !option.area) {
        return;
    }
    option.decodeStockStr = decodeStockStr;
    option.createDicars = createDicars;
    option.encodeStockStr = encodeStockStr;
    option.drawStock = drawStock;
    option.getStockInfo = getStockInfo;
    option.getAttrsState = getAttrsState;
    option.showAttrsHtml = showAttrsHtml;
    option.showAttrsEditHtml = showAttrsEditHtml;
    option.showAttrsAddHtml = showAttrsAddHtml;
    option.showStockInputHtml = showStockInputHtml;
	option.showEditAttrImgHtml =showEditAttrImgHtml;
    option.getNewAttrsObj = getNewAttrsObj;
    option.addAttr = addAttr;
	option.deleteAttr = deleteAttr;
	option.delAttrItem = delAttrItem;
	option.addAttrItem = addAttrItem;
    option.check = checkStockInput;
    option.getStockInput = getStockInput;
    option.saveNewVar = saveNewVar;
    option.setStockSwitch = setStockSwitch;
    option.getExcelCopy = getExcelCopy;
    option.countStock = countStock;
    option.resetStock = resetStock;
	option.setStockEdit=setStockEdit;
	option.encodeAttrImgStr = encodeAttrImgStr;
    window.stockInputCheck = stockInputCheck;
    window.setStockVarToSame = setStockVarToSame;
    window.stockOnPaste = stockOnPaste;
    //构造库存数据对象，不管有没有默认值
    option.stock = decodeStockStr(option.input.value);
	option.attrImgCache=decodeAttrImgStr(option.attrImgInput.value);
	option.attrImgCache.uploadDom = option.makeAttrUploader();
    option.drawStock(option, "init");
    bindAttrsSelectAction(option);
    option.onInited(option);
    window.stockOption = option;
    //判断是否启用
    document.getElementById("stockSwitch").checked = option.stockSwitch ? true : false;
    (!option.stockSwitch) ? option.setStockSwitch() : "";
    option.onSwitch(option);
    return option;
    //解码字符串，参数：编码串、库存数据对象
    //编码字符串的示例结构：A.A1,B.B1,C.C1:货号，价格，数量，备注|A.A1,B.B1,C.C2:货号，价格，数量，备注
    //改成：1#颜色:s|尺寸:s~货号，价格，数量，备注;2#颜色:s|尺寸:s~货号，价格，数量，备注;3#颜色:s|尺寸:s~货号，价格，数量，备注;
    function decodeStockStr(str){
        //解码空串
        if (str == "") {
            return {
                attrs: {},
                values: {},
                encodeStr: ""
            };
        }
        var stock = {};
        stock.values = {};
        var tmp = str.split(";");
        for (var i = 0; i < tmp.length; i++) {
            //先去掉每条数据前面的编号
            tmp[i] = tmp[i].replace(/^\d.*#/, "");
            //如果库存对象中没有属性map就先构建属性map,等于直接把第一条记录转换成一个值对
            if (!stock.attrs) {
                stock.attrs = {};
                var s = tmp[i].split("~")[0].split("|");
                for (var j = 0; j < s.length; j++) {
                    //切开s[i]，会得到2元素的数据，第一个是属性名，第2个是属性值
                    stock.attrs[s[j].split(":")[0]] = [s[j].split(":")[1]];
                }
            }
            //分析当前记录的属性值，如果不存在map里面就加入进去
            var s = tmp[i].split("~")[0].split("|");
            for (var j = 0; j < s.length; j++) {
                //取出当前属性的值列表，如果当前属性值不存在就加入到属性列表中
                if (("," + stock.attrs[s[j].split(":")[0]].join(",") + ",").indexOf("," + s[j].split(":")[1] + ",") < 0) {
                    stock.attrs[s[j].split(":")[0]].push(s[j].split(":")[1]);
                }
            }
            //分析当前的记录，解析并压入数据库
            stock.values[tmp[i].split("~")[0].toString()] = tmp[i].split("~")[1].split(",");
        }
        return stock;
    };
    //根据属性的map笛卡尔集
    //map的结构如下：｛a:[a1,a2,a3],b:[b1,b2,b3],c:[c1,c2,c3]｝生成的笛卡尔集结构：["a:a1|b:b1|c:c1","a:a1|b:b1|c:c2","a:a1|b:b1|c:c3","a:a2.."...]
    function createDicars(obj){
        //先生成一个2维数组，作为临时对象,方便后面递归
        //如：[[a:a1,a:a2,a.a3],[b.b1,b.b2,b.b3],[c.c1,c.c2,c.c3]]
        var tmp = [];
        for (var i in obj) {
            var t = [];
            for (var j = 0; j < obj[i].length; j++) {
                t.push(i + ":" + obj[i][j]);
            }
            tmp.push(t);
        }
        if (tmp.length == 0) {
            return tmp;
        }
        //递归生成属性值的笛卡尔集
        return ceateDicar(tmp);
        //2维数组迪卡集生成算法
        function ceateDicar(tmp){
            if (tmp.length == 1) {
                //笛卡尔集本身是2维的，如果1级只有一个数组，就只返回第一项，去掉2维特性
                return tmp[0];
            }
            else {
                var t = [];
                //生成第一行和第2行的简单迪卡集为一个新的一位数组，如：["a:a1|b:b1","a:a1|b:b2","a：a1|b：b3","a：a2.."...]
                for (var i = 0; i < tmp[0].length; i++) {
                    for (var j = 0; j < tmp[1].length; j++) {
                        t.push(tmp[0][i] + "|" + tmp[1][j]);
                    }
                }
                //把简单笛卡尔结果作为新数组的第一个元素，再把原来数组的第3行开始合并到新数组中。
                //如：[["a:a1|b:b1","a:a1|b:b2","a:a1|b:b3","a:a2.."...],["c:c1","c:c2"]]
                var t2 = [t];
                for (var i = 2; i < tmp.length; i++) {
                    t2.push(tmp[i]);
                }
                //继续递归，对新生成的2维数组继续进行迪卡集运算，直到变成1维
                return ceateDicar(t2);
            }
        };
   };
    //生成已经填写的库存数据库：
    //编码库存字符串，参数：库存对象。
    function encodeStockStr(){
        //生成组合全集
        this.stock.dicar = this.createDicars(this.stock.attrs);
        //生成需要取值的库存数据库（属性值的笛卡尔集）
        for (var i = 0; i < this.stock.dicar.length; i++) {
            //如果数组元素id为：“a:a1|b:b1|c:c1”
            if (!this.stock.values[this.stock.dicar[i]]) {
                this.stock.values[this.stock.dicar[i]] = [, , , ];
            }
            this.stock.dicar[i] = i + "#" + this.stock.dicar[i] + "~" + this.stock.values[this.stock.dicar[i]];
        }
        //生成最终编码
        this.stock.encodeStr = this.stock.dicar.join(";");
        //把值写回表单，更新表单中的值，应该可以不用写，最后再返回内容就行
        this.input.value = this.stock.encodeStr;
        //返回一下编码后的串，免得会用上
        return this.stock.encodeStr;
    };
	//属性图片串解码
	//字符串格式 颜色:黑色|http://static.paipaiimg.com/xxxx.jpg;颜色:红色|http://static.paipaiimg.com/xxxx.jpg;
	function decodeAttrImgStr(str){
		var strReg = /(.+:.+\|.+;?)+/g;
		var attrImgCache = {
			"attrName":"",
			"data":{},
			"encodeStr":str,
			"tempAttrName":"",
			"tempData":{} 		
		};
		if(strReg.test(str)){
			var attrImgAr = str.split(";");
			if(attrImgAr.length){
				//临时数据里也存一份
				attrImgCache.tempAttrName = attrImgCache.attrName = attrImgAr[0].split(":")[0];
				var info=null,attrValue=null;
				for(var i=0,l=attrImgAr.length;i<l;i++){
					info = attrImgAr[i].split("|");
					attrValue = info[0].split(":")[1];
					//临时数据里也存一份
					attrImgCache.tempData[attrValue] =attrImgCache.data[attrValue] = info[1];
				}
			}
			
		}
		return attrImgCache;
	};
	
	//从缓存中生成属性图片字符串并回填
	function encodeAttrImgStr(){
		var attrName = this.attrImgCache.attrName;
		//不存在，或者不允许编辑状态下，不保存图片信息
		if(!this.stock.attrs[attrName] || !this.canEdit){
			this.attrImgCache.encodeStr = this.attrImgInput.value = "";
			return "";
		}
		var data = this.attrImgCache.data;
		if(attrName){
			var resultAr =[];
			for(var i in data){
				resultAr.push(attrName+":"+i+"|"+data[i]);
			}
			this.attrImgCache.encodeStr = resultAr.join(";");
		}else{
			this.attrImgCache.encodeStr ="";
		}
		//回填
		this.attrImgInput.value = this.attrImgCache.encodeStr
		//返回
		return this.attrImgCache.encodeStr;
	}
	
    //输出当前属性列表的统计信息：属性的数量以及属性的最大长度等。
    function getAttrsState(){
        var obj = this
        this.stock.state = {
            num: 0,
            maxlength: 0
        };
        for (var i in this.stock.attrs) {
            this.stock.state.num += 1;
            this.stock.state.maxlength = (this.stock.attrs[i].length > this.stock.state.maxlength) ? this.stock.attrs[i].length : this.stock.state.maxlength;
        }
    };
    //输出属性列表的展示状态html代码
    function showAttrsHtml(obj, dom){
        //一条属性的模板
        var it = ((new RegExp("{#attrItem#}(.*){#attrItem#}", "ig")).exec(obj.tp)) ? RegExp.$1 : "";
        //单个属性值的模板
        var it2 = ((new RegExp("{#attrItem_valueItem#}(.*){#attrItem_valueItem#}", "ig")).exec(it)) ? RegExp.$1 : "";
        var hc = "";
        //遍历所有属性，获得每条属性的html代码
        for (var i in obj.stock.attrs) {
            var hc3 = "";
            for (var j = 0; j < obj.stock.attrs[i].length; j++) {
                hc3 += it2.replace(/{#attrItem_value#}/g, obj.stock.attrs[i][j]);
            }
			
			//允许编辑且是要展示图片的属性
			if(obj.canEdit && obj.attrImgCache.attrName && i==obj.attrImgCache.attrName){
				hc3 = hc3.replace(new RegExp(it2.replace(/{#attrItem_value#}/g,"(.+?)"),"g"),function(){ 
					var attrImg = obj.attrImgCache.data[arguments[1]];
					//如果存在
					if(attrImg){
						//以前的文字替换成图片
						return it2.replace(/{#attrItem_value#}/g,"<img src='"+attrImg+"' alt='"+arguments[1]+"' width='30' height='30' />");
					}else{
						//返回文字
						return arguments[0];
					}
				});
			}
			
            hc += it.replace(/{#attrItem_name#}/g, i).replace(/{#attrItem_valueItem#}.*?{#attrItem_valueItem#}/, hc3);
        }
        //输出新增、编辑按钮
        hc += (((new RegExp("{#goedit#}(.*){#goedit#}", "ig")).exec(obj.tp) )&& obj.canEdit) ? RegExp.$1 : "";
        //控制编辑按钮的展示
        hc = hc.replace(((obj.stock.state.num > 0) ? /{#attrCanedit#}/g : /{#attrCanedit#}.*?{#attrCanedit#}/g), "");
        //控制添加按钮的展示
        hc = hc.replace(((obj.stock.state.num < 5) ? /{#attrCanadd#}/g : /{#attrCanadd#}.*?{#attrCanadd#}/g), "");
        obj.state = "show";
        dom.innerHTML = hc;
        $$("#stockAttrsFrame1").removeClass("attr-edit");
        //绑定删除属性按钮的操作
        $$("#stockAttrsFrame1 [tag='delAttr']").click(function(){
			//如果当前商品是SPU化商品，那么不允许删除属性
			if(!obj.canEdit){
				return false;
			}
            if (confirm("您确认删除属性\"" + this.getAttribute("var1") + "\"吗？删除后不可恢复。")) {
                obj.delAttrItem(obj, this.getAttribute("var1"));
            }
        });
        //绑定添加事件(先判断添加按钮是否存在)
        ($id("addStockAttrs")) ? $id("addStockAttrs").onclick = function(){
            obj.drawStock(obj, "addAttr");
        }:"";
        //绑定编辑事件(先判断编辑按钮是否存在)
        ($id("editStockAttrs")) ? $id("editStockAttrs").onclick = function(){
            obj.drawStock(obj, "editAttr");
        }:"";
		
		if($id("editAttrImg")){
			if(obj.attrImgCache.uploadDom){
				$id("editAttrImg").onclick = function(){
					obj.drawStock(obj, "editAttrImg");
				}
				$id("AttrFlashNoTips").setAttribute("odisplay","none");
			}else{
				//提示未安装flash
				$id("AttrFlashNoTips").style.display="";
				$id("AttrFlashNoTips").setAttribute("odisplay","show");
				$id("editAttrImg").onclick =function(){
					$$("#AttrFlashNoTips").fadeTo("normal",0.25,function(){
						$$("#AttrFlashNoTips").fadeTo("fast",1);
					});
				}
			}
		}
    };
    //输出属性列表的编码状态代码
    function showAttrsEditHtml(obj, dom){
        //一条属性信息的编辑状态模板
        var it = ((new RegExp("{#attrItemEdit#}(.*){#attrItemEdit#}", "ig")).exec(obj.tp)) ? RegExp.$1 : "";
        //一个属性值的编辑状态模板
        var it2 = ((new RegExp("{#attrItem_valueItem#}(.*){#attrItem_valueItem#}", "ig")).exec(it)) ? RegExp.$1 : "";
        var hc = "";
        
        //循环生成每条属性的编辑状态代码
        for (var i in obj.stock.attrs) {
            var hc3 = "";//临时记录单条属性的编辑代码
            //((obj.stock.state.maxlength+1)>20?20:(obj.stock.state.maxlength>=10?20:10))
            var itemStyle = obj.stock.state.maxlength >= 10 ? "" : "display:none;"; //第10个之后的编辑框的样式
            var showAllStyle = obj.stock.state.maxlength >= 10 ? "display:none;" : ""; //每行的显示更多按钮的样式
            for (var j = 0; j < 20; j++) {
                hc3 += it2.replace(/{#attrItem_value#}/g, obj.stock.attrs[i][j] ? obj.stock.attrs[i][j] : "").replace(/{#attrItem_Id#}/g, "editAttrInput_" + i + "_" + j).replace(/{#attrItem_style#}/g, j >= 10 ? itemStyle : "");
            }
            hc += it.replace(/{#attrItem_name#}/g, i).replace(/{#attrItem_valueItem#}.*?{#attrItem_valueItem#}/, hc3).replace(/{#attrItem_Id#}/g, "editAttrTitle_" + i).replace("{#ItemsShow_style#}", showAllStyle);
        }
        //输出保存、取消按钮
        hc += ((new RegExp("{#editSave#}(.*){#editSave#}", "ig")).exec(obj.tp)) ? RegExp.$1 : "";
        obj.state = "edit";
        dom.innerHTML = hc;
        $$("#stockAttrsFrame1").addClass("attr-edit");
        //绑定显示更多输入框的事件：
        $$("#stockAttrsFrame1 button[tag='showMore']").click(function(){
            $$(this).hide().prevAll("input").show();
        });
        //开始绑定取消事件
        document.getElementById("cancelEditStockAttrs").onclick = function(){
            obj.drawStock(obj, "editCancel");
        };
        //绑定保存事件
        document.getElementById("saveEditStockAttrs").onclick = function(){
            //检查输入
            var at = obj.getNewAttrsObj(obj, "edit");
            if (at == true) {
                obj.drawStock(obj, "init");
            }
            else {
                alert("温馨提示:\n\n" + at.join("\n"))
            }
        };
    }
    //输出属性列表的添加状态代码
    function showAttrsAddHtml(obj, dom){
        //一条属性列表的展示模板
        var it = ((new RegExp("{#attrItem#}(.*){#attrItem#}", "ig")).exec(obj.tp)) ? RegExp.$1 : "";
        //单个属性值的展示模板
        var it2 = ((new RegExp("{#attrItem_valueItem#}(.*){#attrItem_valueItem#}", "ig")).exec(it)) ? RegExp.$1 : "";
        //一条属性信息的编辑状态模板
        var it3 = ((new RegExp("{#attrItemEdit#}(.*){#attrItemEdit#}", "ig")).exec(obj.tp)) ? RegExp.$1 : "";
        //一个属性值的编辑状态模板
        var it4 = ((new RegExp("{#attrItem_valueItem#}(.*){#attrItem_valueItem#}", "ig")).exec(it3)) ? RegExp.$1 : "";
        var hc = "";
        //同属性列表展示代码输出相同，只是多输出一行空白输入框
        for (var i in obj.stock.attrs) {
            var hc3 = "";
            for (var j = 0; j < obj.stock.attrs[i].length; j++) {
                hc3 += it2.replace(/{#attrItem_value#}/g, obj.stock.attrs[i][j]);
            }
			//允许编辑且是要展示图片的属性
			if(obj.canEdit && obj.attrImgCache.attrName && i==obj.attrImgCache.attrName){
				hc3 = hc3.replace(new RegExp(it2.replace(/{#attrItem_value#}/g,"(.+?)"),"g"),function(){ 
					var attrImg = obj.attrImgCache.data[arguments[1]];
					//如果存在
					if(attrImg){
						//以前的文字替换成图片
						return it2.replace(/{#attrItem_value#}/g,"<img src='"+attrImg+"' alt='"+arguments[1]+"' width='30' height='30' />");
					}else{
						//返回文字
						return arguments[0];
					}
				});
			}
			
            hc += it.replace(/{#attrItem_name#}/g, i).replace(/{#attrItem_valueItem#}.*?{#attrItem_valueItem#}/, hc3);
        }
        //输出一行编辑框，数量为总长度+1，总长为0的时候就=5
        var hc4 = "";
        //for(var i=0;i<(obj.stock.state.maxlength>0?((obj.stock.state.maxlength+1)>20?20:(obj.stock.state.maxlength>=10?20:10)):10);i++){
        var itemStyle = "display:none;";
        for (var i = 0; i < 20; i++) {
            hc4 += it4.replace(/{#attrItem_value#}/g, "").replace(/{#attrItem_Id#}/g, "editAttrInput_0_" + i).replace(/{#attrItem_style#}/g, i >= 10 ? itemStyle : "");
        }
        hc += it3.replace(/{#attrItem_name#}/g, "").replace(/{#attrItem_valueItem#}.*?{#attrItem_valueItem#}/, hc4).replace(/{#attrItem_Id#}/g, "editAttrTitle_0").replace("{#ItemsShow_style#}", "");
        //输出保存按钮
        hc += ((new RegExp("{#editSave#}(.*){#editSave#}", "ig")).exec(obj.tp)) ? RegExp.$1 : "";
        //控制编辑按钮的展示
        obj.state = "add";
        dom.innerHTML = hc;
        $$("#stockAttrsFrame1").addClass("attr-edit");
        //绑定显示更多输入框的事件：
        $$("#stockAttrsFrame1 button[tag='showMore']").click(function(){
            $$(this).hide().prevAll("input").show();
        });
        //绑定取消事件：
        document.getElementById("cancelEditStockAttrs").onclick = function(){
            drawStock(obj, "editCancel");
        };
        //绑定保存事件
        document.getElementById("saveEditStockAttrs").onclick = function(){
            //检查输入合法性
            var at = obj.getNewAttrsObj(obj, "add");
            if (at == true) {
                drawStock(obj, "init");
            }
            else {
                alert("温馨提示:\n\n" + at.join("\n"))
            }
        };
    };
	//编辑属性图片时的html
	function showEditAttrImgHtml(obj,dom){
		
		//一条属性信息的编辑状态模板
        var it = "<dl><dt><label><input type='radio' name='attrImgRd' {#checked#} title='设置此属性图片' class='ipt_radio'/>{#attrName#}：</label></dt><dd>{#attrShowList#}</dd></dl>";
		var it2 = "<div class='stk_pic'><span title='{#attrValue#}'>{#attrValue#}</span><p><button type='button' class='attr_upload'>上传</button></p></div>";
		var it3 = "<div class='stk_pic'><span title='{#attrValue#}'><img src='{#attrImgUrl#}' alt='{#attrValue#}' width='30' height='30' /></span><p><button type='button' class='attr_delete'>删除</button></p></div>";
		var it4 = "<span>{#attrValue#}</span>";
		var it5 = '<div class="p_btn"><p><button type="button" id="saveEditStockAttrs">保存</button>　<a href="#nolink" id="cancelEditStockAttrs">取消</a>　<em>(图片大小不能超过990K)</em></p></div>';
        //一个属性值的编辑状态模板
       
	   	var hc = [];
		//是否已经确定了那条属性作为图片属性
		var showAttr = obj.stock.attrs[obj.attrImgCache.tempAttrName] && obj.attrImgCache.tempAttrName;
		//如果没有
		if(!showAttr){
			//默认选第一条
			for(var i in obj.stock.attrs){
				showAttr=obj.attrImgCache.tempAttrName=i;
				break;
			}
		}
        //循环生成每条属性的编辑状态代码
        for (var i in obj.stock.attrs) {
            var tempObj={};
			tempObj.attrName=i;
			var tempHtml=[];
			//是图片属性
			if(i==showAttr){
				tempObj.checked="checked='checked'";
				for(var j=0,k=obj.stock.attrs[i].length;j<k;j++){
					var tempValue = obj.stock.attrs[i][j];
					var tempUrl =obj.attrImgCache.tempData[tempValue];
					if(tempUrl){
						tempHtml.push(it3.replace(/{#attrValue#}/g,tempValue).replace(/{#attrImgUrl#}/g,tempUrl));
					}else{
						tempHtml.push(it2.replace(/{#attrValue#}/g,tempValue));
					}
				}
			}else{
				tempObj.checked="";
				for(var j=0,k=obj.stock.attrs[i].length;j<k;j++){
					var tempValue = obj.stock.attrs[i][j];
					tempHtml.push(it4.replace(/{#attrValue#}/g,tempValue).replace(/{#attrImgUrl#}/g,tempUrl));
				}
			}
			tempObj.attrShowList = tempHtml.join("");
			hc.push($formatStr(it,tempObj));
        }
        //输出保存、取消按钮
        hc .push(it5);
        obj.state = "edit";
        dom.innerHTML = hc.join("");
        $$("#stockAttrsFrame1").removeClass("attr-edit");
		
		
		
		//切换选中属性
		$$("#stockAttrsFrame1 input[type=radio]").click(function(){
			var newAttr = $strTrim(this.nextSibling.nodeValue,"：");
			if(newAttr!=obj.attrImgCache.tempAttrName){
				var isLoading=false;
				$$("#stockAttrsFrame1 img").each(function(){
					if(this.src=="http://static.paipaiimg.com/assets/common/loading2.gif"){
						isLoading=true;
						return false;
					}
				});
				if(isLoading){
					alert("图片正在上传，请稍后再进行操作");
					return false;
				}
				
				obj.attrImgCache.tempAttrName = newAttr;
				drawStock(obj,"editAttrImg");
			}
		});
		
		//保存按钮
		$$("#saveEditStockAttrs").click(function(){
			obj.attrImgCache.attrName = obj.attrImgCache.tempAttrName;
			var info ={};
			var isLoading=false;
			$$("#stockAttrsFrame1 img").each(function(){
				if(this.src=="http://static.paipaiimg.com/assets/common/loading2.gif"){
					isLoading=true;
					return false;
				}
				info[this.alt]=this.src;
			});
			
			if(isLoading){
				alert("图片正在上传，请稍后再进行保存");
				return false;
			}
			

			obj.attrImgCache.data = info;
			
			//数据拷贝到临时文件中
			obj.attrImgCache.tempData={};
			for(var i in obj.attrImgCache.data){
				obj.attrImgCache.tempData[i] = obj.attrImgCache.data[i];
			}
			drawStock(obj,"editCancel");
		});
		
		//取消按钮
		$$("#cancelEditStockAttrs").click(function(){
			var isLoading=false;
			$$("#stockAttrsFrame1 img").each(function(){
				if(this.src=="http://static.paipaiimg.com/assets/common/loading2.gif"){
					isLoading=true;
					return false;
				}
			});
			if(isLoading){
				alert("图片正在上传，请稍后再进行操作");
				return false;
			}						   
			//还原临时数据为真实数据
			obj.attrImgCache.tempAttrName = obj.attrImgCache.attrName;
			//数据真拷贝
			obj.attrImgCache.tempData={};
			for(var i in obj.attrImgCache.data){
				obj.attrImgCache.tempData[i] = obj.attrImgCache.data[i];
			}
			drawStock(obj,"editCancel");
		});
		
		//上传按钮
		$$("#stockAttrsFrame1 button.attr_upload").die().live("mouseover",function(){
			var _this=this;
			var udom = obj.attrImgCache.uploadDom;
			var cdom = obj.attrImgCache.currentDom;
			var pdom = udom.parentNode;
			
			udom.style.left = ($getX(this)-$getX(pdom))+"px";
			udom.style.top = ($getYP(this)-$getYP(pdom))+"px";
			udom.style.display="";
			if(cdom){
				try{
					window.SWFUpload.instances[udom.id].setButtonDisabled(false);
				}catch(e){
				}
			}
			setTimeout(function(){
				try{
					obj.attrImgCache.currentDom=cdom=_this;
				}catch(e){
				}
			},500);
			
		})
		
		$$("#stockAttrsFrame1 button.attr_delete").die().live("click",function(){
			var container = this.parentNode.previousSibling;
			var imgDom = container.lastChild;
			delete obj.attrImgCache.tempData[imgDom.alt];
			container.innerHTML = imgDom.alt;
			this.className="attr_upload";
			this.innerHTML="上传";
			$fireEvent(this,"mouseover");
		})
	};
	
    //输出库存输入框列表
    function showStockInputHtml(obj, dom){
        this.stock.dicar = this.createDicars(this.stock.attrs);
        //库存列表框架模板
        var hc = ((new RegExp("{#stockContent#}(.*){#stockContent#}", "ig")).exec(this.tp)) ? RegExp.$1 : "";
        //库存列表行模板
        var tp_tr = ((new RegExp("{#stock_line#}(.*){#stock_line#}", "ig")).exec(this.tp)) ? RegExp.$1 : "";
        var tp_tr_a = tp_tr.replace(/{#stock_values#}.*{#stock_values#}/, "{#stock_trs#}").replace(/{#.*?#}/g, "||---||").split("||");
        //库存列head区宽度控制列
        var tp_row = ((new RegExp("{#stock_rows#}(.*){#stock_rows#}", "ig")).exec(this.tp)) ? RegExp.$1 : "";
        //库存表头区域的属性名输出单元
        var tp_tit = ((new RegExp("{#stock_names#}(.*){#stock_names#}", "ig")).exec(this.tp)) ? RegExp.$1 : "";
        //库存表行里面的属性值输出单元
        var tp_val = ((new RegExp("{#stock_values#}(.*){#stock_values#}", "ig")).exec(this.tp)) ? RegExp.$1 : "";
        var row_hc = tit_hc = tr_hc = "";
        var tr_hc = []
        //输出表格的列对象
        for (var i in this.stock.attrs) {
            row_hc += tp_row; //生成所有属性的宽度
            tit_hc += tp_tit.replace(/{#stock_name#}/g, i); //输出所有属性的标题
        }
        for (var i = 0; i < this.stock.dicar.length; i++) {
            var t = this.stock.dicar[i].split("|");
            var td_hc = [];
            var tinfo = this.getStockInfo(this, this.stock.dicar[i]);
            var tp_css = parseInt(tinfo[2]) == 0 ? "background-color:#fdc689;" : ""
            for (var j = 0; j < t.length; j++) {
                td_hc.push(tp_val.replace(/{#stock_value#}/g, t[j].split(":")[1]));
            }
            tp_tr_a[1] = tp_css;
            tp_tr_a[3] = td_hc.join("");
            tp_tr_a[5] = this.stock.dicar[i];
            tp_tr_a[7] = tinfo[0];
            tp_tr_a[9] = this.stock.dicar[i];
            tp_tr_a[11] = tinfo[1] ? parseFloat(tinfo[1]).toFixed(2) : "";
            tp_tr_a[13] = this.stock.dicar[i];
            tp_tr_a[15] = tinfo[2];
            tp_tr_a[17] = this.stock.dicar[i];
            tp_tr_a[19] = tinfo[3];
            tr_hc.push(tp_tr_a.join(""));
        }
        hc = hc.replace(/{#stock_rows#}.*?{#stock_rows#}/g, row_hc);
        hc = hc.replace(/{#stock_names#}.*?{#stock_names#}/g, tit_hc);
        hc = hc.replace(/{#stock_line#}.*?{#stock_line#}/g, tr_hc.join(""));
        dom.innerHTML = hc;
        this.countStock()
        this.onChange(this);
        //为了性能，这里就不批量绑定表单的鼠标事件了，放在代码里面用onclick处理
    };
    //获取修改后的属性列表，返回一个新的attrs对象
    function getNewAttrsObj(obj, type){
        var err = [];//返回的错误对象
        var newAttrs = {};//编辑后的新attrs对象
        var count = [0, [], 1, [], [], [], []]; //[属性条数，为空值的属性名称的数组，最终生成的库存条目数量，所有用到的属性名称或者属性值的数组（用于判断重复值），重复的值,命名不合法的属性,长度过长的属性]
        //先把错误的错误状态都清空
        $$("#stockAttrsFrame1 :text.errorInput").removeClass("errorInput");
        //编辑状态的检查
        if (type == "edit") {
            //遍历所有的属性，取得新值
            for (var i in obj.stock.attrs) {
                var t_t = document.getElementById("editAttrTitle_" + i).value;
                //如果当前为空就跳过：忽略所有属性名为空的行
                if (t_t == "") {
                    continue;
                }
                //创建一个空的当前属性行对象
                newAttrs[t_t] = [];
                //给这个属性对象填值，取得所有的子值对象，并遍历
                var t_list = $$("#stockAttrsFrame1 :input[id^='editAttrInput_" + i + "_']").each(function(){
                    this.value = this.value.replace(/^ */g, "").replace(/ *$/g, "").replace(/_/g, "-");
                    this.value ? newAttrs[t_t].push(this.value) : "";
                });
                //如果这个属性对象的属性值列表为空的话就提示空值错误,并把这一行的文本框都设置为错误状态
                if (newAttrs[t_t].length < 1) {
                    count[1].push(t_t);
                    $$("#stockAttrsFrame1 :input[id^='editAttrInput_" + i + "_']").addClass("errorInput");
                }
                count[0]++;//属性条数加1
                count[2] = count[2] * (newAttrs[t_t].length < 1 ? 1 : newAttrs[t_t].length);//算出总库存条数的乘集
                count[3].push(newAttrs[t_t]);//把所有的名词全部压入，后面用来判断是否有重复项目
            }
        }
        //添加状态的保存。
        if (type == "add") {
            //先完整的把已有数据深拷贝一份
            for (var i in obj.stock.attrs) {
                newAttrs[i] = obj.stock.attrs[i];
            }
            //获得新增项目的值
            var t_t = document.getElementById("editAttrTitle_0").value;
            if (t_t) {
                //判断新增的元素是否已经存在，存在就压入重复错误列表
                newAttrs[t_t] ? count[4].push(t_t) : "";
                //剩下的操作同修改
                newAttrs[t_t] = [];
                var t_list = $$("#stockAttrsFrame1 :input[id^='editAttrInput_0_']").each(function(){
                    this.value = this.value.replace(/^ */g, "").replace(/ *$/g, "").replace(/_/g, "-");
                    this.value ? newAttrs[t_t].push(this.value) : "";
                });
                //如果这个属性对象为空的话就提示空值错误,并把这一行的文本框都设置为错误状态
                if (newAttrs[t_t].length < 1) {
                    count[1].push(t_t);
                    $$("#stockAttrsFrame1 :input[id^='editAttrInput_0_']").addClass("errorInput");
                }
            }
            for (var i in newAttrs) {
                count[0]++;//属性条数加1
                count[2] = count[2] * (newAttrs[i].length < 1 ? 1 : newAttrs[i].length);//算出总库存条数的乘集
                count[3].push(newAttrs[i]);//把所有的名词全部压入，后面用来判断是否有重复项目
            }
        }
        /*开始检查输入的错误	
         *属性编辑检查规则:
         *1、属性最多5个；
         *2、笛卡尔最长100；
         *3、属性值、属性名所有的都不能相同；
         *4、内容只能为：中文字母数字；
         *5、属性必须有至少一个值
         */
        //判断输入内容，只能为中文字母数字
        $$("#stockAttrsFrame1 :text").each(function(){
        
            if (this.value != "") {
                if (!/^[\u4e00-\u9fa5\w\*\(\) （）\.\/\\\-%\@\+]*$/.test(this.value)) {
                    count[5].push(this.id);
                }
                if ($strLenGB(this.value) > 20) {
                    count[6].push(this.id);
                }
            }
        });
        if (count[5].length > 0) {
            err.push("存在不合法的属性名或者属性值,名称只能由中文、字母、数字、（、）、*、\\、\/、+、-、%、@、.以及空格组成。");
            $$("#" + count[5].join(",#")).addClass("errorInput");
        }
        if (count[6].length > 0) {
            err.push("您填写的属性超过了10个汉字（20个字符），请修改后提交。");
            $$("#" + count[6].join(",#")).addClass("errorInput");
        }
        if (count[0] > 5) {

            err.push("最多只支持5种库存属性，请重新选择，清空不必要的项目。");
        }
        if (count[1].length > 0) {
            err.push("属性“" + count[1].join(",") + "”至少要有一个以上的属性值。");
        }
        if (count[2] > option.maxLength) {
            err.push("您生成的库存记录超过"+option.maxLength+"条的最大限制，请适当调整属性。")
        }
        //扫描相同元素
        for (var i = 0; i < count[3].length; i++) {
            var repeatObj={},onceObj={};
			for(var j=0;j<count[3][i].length;j++){
				//是否已经存在
				if(repeatObj[count[3][i][j]]){
					//只在数组里添加一次
					if(!onceObj[count[3][i][j]]){
						count[4].push(count[3][i][j]);
					}
				}else{
					repeatObj[count[3][i][j]]=1;
				}
			}
        }
        //同名元素检查
        if (count[4].length > 0) {
            err.push("您填写的属性存在相同名称，请修改后提交。");//+count[4].join("、"))
            $$("#stockAttrsFrame1 :input[value='" + count[4].join("'],#stockAttrsFrame1 :input[value='") + "']").addClass("errorInput");
        }
        //检查是否有错，有错误就返回false并提示错误
        if (err.length > 0) {
            for (var i = 0; i < err.length; i++) {
                err[i] = (i + 1) + "、" + err[i];
            }
            return err;
        }
        else {
            obj.stock.attrs = newAttrs;
            obj.stock.dicar = obj.createDicars(obj.stock.attrs);
            //生成需要缺乏的库存数据库
            for (var i = 0; i < obj.stock.dicar.length; i++) {
                //如果数组元素id为：“a.a1,b.b1,c.c1”
                if (!obj.stock.values[obj.stock.dicar[i]]) {

                    obj.stock.values[obj.stock.dicar[i]] = [, , , ];
                }
            }
            return true;
        }
    }
    //获取某个属性组合的默认值，如果没有就返回空数组
    function getStockInfo(obj, str){
        var t = ["", "", "", ""];
        var n = str.split("|");
        for (var i in obj.stock.values) {
            if (inArray(i.split("|"), n)) {
                return obj.stock.values[i];
            }
        }
        return t;
        //判断数组的是否包含
        function inArray(a, b){
            //保证前面是大数组
            if (a.length < b.length) {
                var t = a;
                a = b;
                b = t;
            }
            var isin = 0;
            for (var i = 0; i < b.length; i++) {
                for (var j = 0; j < a.length; j++) {
                    if (b[i] == a[j]) {
                        isin++;
                        continue;
                    }
                }
            }
            if (isin == b.length) {
                return true;
            }
            else {
                return false;
            }
        }
    }
    //获取所有的用户输入的库存信息，打入values
    function getStockInput(obj){
        obj.stock.dicar = obj.createDicars(obj.stock.attrs);
        var inputs = {};
        var c = ""
        $$("#stockAttrsFrame2 :text").each(function(){
            var _id = this.id.split("_")
            var _value = this.value;
            if (!inputs[_id[0]]) {
                inputs[_id[0]] = [_value, , , ];
            }
            else {
                inputs[_id[0]][parseInt(_id[1])] = _value;
            }
        });
        obj.stock.values = inputs;
        obj.countStock()
        obj.onChange(obj);
    }
    //根据库存对象渲染页面
    function drawStock(obj,type){
        obj.getAttrsState();
        if (type == "init") {
            //输出框架
            var hc = (((new RegExp("{#attrlist#}(.*){#attrlist#}", "ig")).exec(obj.tp)) ? RegExp.$1 : "").replace(/{#attrContent#}.*?{#attrContent#}/, '');
            if (obj.stock.state.num > 0) {
                hc += (((new RegExp("{#stock#}(.*){#stock#}", "ig")).exec(obj.tp)) ? RegExp.$1 : "").replace(/{#stockContent#}.*?{#stockContent#}/, '');
            }
            obj.area.innerHTML = hc;
            $$("#stockSwitch").click(function(){
                obj.stockSwitch = !obj.stockSwitch;
                obj.setStockSwitch();
            }).attr("checked", obj.stockSwitch).attr("disabled", !obj.canEdit);
			//输出属性列表的展示状态
            obj.showAttrsHtml(obj, document.getElementById("stockAttrsFrame1"));
            //输出库存输入列表
            if (obj.stock.state.num > 0) {
                obj.showStockInputHtml(obj, document.getElementById("stockAttrsFrame2"));
				//展示提示
				if($id("stockMiddleTip")){
					if(obj.middleTip){
						$id("stockMiddleTip").innerHTML = obj.middleTip;
						$id("stockMiddleTip").style.display="";
						$id("stockMiddleTip").setAttribute("odisplay","show");
					}else{
						$id("stockMiddleTip").setAttribute("odisplay","none");
					}
				}
            }
			//如果当前商品是SPU化的商品，那么不允许编辑。
			$id("addStockAttrs") && ($id("addStockAttrs").parentNode.parentNode.style.display = !obj.canEdit ? "none" : "");
        }
		if(obj.attrImgCache.uploadDom){
			obj.attrImgCache.uploadDom.style.display="none";
		}
		var showDom = $id("stockAttrsFrame1");
        if (type == "addAttr") {
            //更新属性列表区域为添加状态
            obj.showAttrsAddHtml(obj,showDom);
        }
        if (type == "editAttr") {
            //更新属性列表区域为编辑状态
            obj.showAttrsEditHtml(obj,showDom);
        }
        if (type == "editCancel") {
            //更新属性列表区域为展示状态
            obj.showAttrsHtml(obj,showDom);
        }
		if(type=="editAttrImg"){
			obj.showEditAttrImgHtml(obj,showDom);
		}
		if(!obj.stockSwitch){
			$$("#stockAttrsFrame1, #stockAttrsFrame2,#AttrFlashNoTips,#stockMiddleTip").hide();
		}
    }
    //删除一条属性项
    function delAttrItem(obj, attr){
		if (!obj.stockSwitch) {
            return false;
        }
        var newAttrs = {};
        //先完整的把已有数据深拷贝一份，免得修改影响到原来的数据
        for (var i in obj.stock.attrs) {
            if (i == attr) {
                continue;
            }
            newAttrs[i] = [];
            for (var j = 0; j < obj.stock.attrs[i].length; j++) {
                newAttrs[i][j] = obj.stock.attrs[i][j];
            };
        }
        obj.stock.attrs = newAttrs;
        obj.drawStock(obj, "init");
    }
	//更新一属性项 obj,属性名,属性项
	function addAttrItem(obj,name,attr){
		if (obj==null || !obj.stockSwitch) {
            return false;
        }
		//数据正常
		if(obj.stock.attrs && name && name.length && attr && attr.length){
			//新增或更新
			obj.stock.attrs[name]=attr;
		}
		//重绘
		obj.drawStock(obj, "init");
	}
	//删除一个属性值。跟上面的delAttr的不同是上面是删除一个属性下所有的属性值，这里是删除一个属性值。
	//如上面删除的是“颜色”，这里删除的是“绿色”。因为名字被占用。不改名了，算了。本方法才是跟下面的addAttr对应的。
	function deleteAttr(obj,attr,attrVar){
		var newAttrs = {};
        //先完整的把已有数据深拷贝一份，免得修改影响到原来的数据
        for (var i in obj.stock.attrs){
            newAttrs[i] = [];
			for (var j = 0; j < obj.stock.attrs[i].length; j++){
				var currAttrVal = obj.stock.attrs[i][j];
				if(attr==i && currAttrVal==attrVar){
					continue;
				}else{
					newAttrs[i].push(currAttrVal);
				}
            };
			if(newAttrs[i].length<1){
				delete newAttrs[i];
			}
		}
        obj.stock.attrs = newAttrs;
        obj.drawStock(obj, "init");
	}
    //添加新的属性进来
    function addAttr(obj, attr, attrvar){
        var newAttrs = {};
        var count = 1;
        var attrsCount = 0;
        //先完整的把已有数据深拷贝一份，免得修改影响到原来的数据
        for (var i in obj.stock.attrs) {
            newAttrs[i] = [];
            for (var j = 0; j < obj.stock.attrs[i].length; j++) {
                newAttrs[i][j] = obj.stock.attrs[i][j];
            };
            attrsCount += 1
        }

        if (!newAttrs[attr]) {
            newAttrs[attr] = [];
            attrsCount += 1
        }
        if (attrsCount > 5) {
            return;
        }
        for (var i = 0; i < newAttrs[attr].length; i++) {
            if (newAttrs[attr][i] == attrvar) {
                return;
            }
        }
        newAttrs[attr].push(attrvar);
        //进行统计
        for (var i in newAttrs) {
            count = count * (newAttrs[i].length < 1 ? 1 : newAttrs[i].length);//算出总库存条数的乘集
        }
        if (count > option.maxLength) {
            return;
        }
        //走到这里的时候说明新加的数据符合要求则更新原来的属性map
        obj.stock.attrs = newAttrs;
        for (var i in obj.stock.attrs) {
            count = count * (newAttrs[i].length < 1 ? 1 : newAttrs[i].length);//算出总库存条数的乘集
        }
        obj.stock.attrs = newAttrs;
		obj.drawStock(obj, "init");
    }
    //绑定类目属性区域的选择时间
    function bindAttrsSelectAction(obj){
        $$(":checkbox[attrName][attrVar][tag='forstock']").click(function(){
            this.checked ? obj.addAttr(obj, $$(this).attr("attrName"), $$(this).attr("attrVar")) : "";
        });
    }
    //库存输入文本框的检查
	function stockInputCheck(obj){
        var dtype = $$(obj).attr("dtype");
        switch (dtype) {
            case "string":
				var v = obj.value;
				//if (!/^[\u4e00-\u9fa5\w-]*$/.test(v))
				//	obj.value = v.replace(/[^\u4e00-\u9fa5\w-]/g, "");
                //
				obj.value = v.replace(/[^\u4e00-\u9fa5\w-\/\.]/g, "");
                break;
            case "price":
                var p = obj.value;
                if (p == "") {
                    return;
                }
                p = p.replace(/[^\d\.]/g, "");
                if (p != obj.value) {
                    obj.value = p;
                }
                if (p != "" && parseFloat(p).toFixed(2) != obj.value) {
                    if (parseFloat(p).toFixed(2).length > 10 || parseFloat(p) > 1000000) {
                        obj.value = "1000000.00";
                    }
                    else {
                        obj.value = parseFloat(p).toFixed(2);
                    }
                }
                break;
            case "num":
                var p = obj.value;
                if (p == "") {
                    return;
                }


                p = $strTrimLeft(p,"0");
                if (p != obj.value) {
                    obj.value = p;
                }
                p = p.replace(/[^\d]/g, "");
                if (p != obj.value) {
                    obj.value = p;
                }
                if (p != "" && parseInt(p).toString() != obj.value) {
                    obj.value = parseInt(p);
                }
                if (p == "") {
                    obj.value = 0;
                }
                break;
        };
        //如果有性能问题，这里可以修改为直接在stock。value上修改值，不从dom中取，代码见下面的注释
        window.stockOption.getStockInput(window.stockOption);
        //window.stockOption.saveNewVar(obj.id.split("_")[0],obj.id.split("_")[1],obj.value);
    };
    //在历史数据记录中插入新的值
    function saveNewVar(t, i, v){
        var o = window.stockOption.stock.values;
        (!o[t]) ? o[t] = [, , , ] : "";
        o[t][i] = v;
    }
    //设置相同值的操作
    function setStockVarToSame(dom){
        var dtype = $$(dom).attr("stype");
        var items = $$("#stockAttrsFrame2 [dtype='" + dtype + "']");
        if (dom.checked) {
            if (confirm("您确定把所选列全部设置一行中的内容吗？")) {
                var t = items.val()
                items.val(t);
                //如果有性能问题，这里可以修改为直接在stock。value上修改值，不从dom中取，代码见下面的注释
                window.stockOption.getStockInput(window.stockOption)
                //				for(var i in window.stockOption.stock.values){
                //					window.stockOption.saveNewVar(i,dtype=="num"?2:1,t)
                //				}
            }
            else {
                dom.checked = false;
            }
        }
    };
    //切换库存对象的启用关闭开关
    function setStockSwitch(){
		if(window.stockOption.stockSwitch){
			$$("#stockAttrsFrame1,#stockAttrsFrame2").show();
			//根据原始状态恢复显示
			$$("#AttrFlashNoTips,#stockMiddleTip").each(function(){
				this.style.display=this.getAttribute("odisplay")=="show"?"":"none";
			});
		}else{
			$$("#stockAttrsFrame1,#stockAttrsFrame2,#AttrFlashNoTips,#stockMiddleTip").hide();
		}
        $id("stockSwitch") &&( $id("stockSwitch").checked=!!window.stockOption.stockSwitch);
		window.stockOption.onSwitch(window.stockOption);
    }
    //检查表单的输入状态
    function checkStockInput(){
        //如果没启用库存
		if (!this.stockSwitch) {
            //库存串清空
			this.input.value = "";
			//库存图片串清空
			this.attrImgInput.value = "";
            return true;
        }
        this.getStockInput(this);
		this.encodeAttrImgStr();
        var err = [];
        var inputs = [];
        if (this.state != "show") {
            err.push("库存属性列表处于编辑状态，请先保存修改再提交。");
        }
        for (var i in this.stock.values) {
            //			if(this.stock.values[i][0]==""){
            //				inputs.push(":text[id='"+i+"_0']");
            //			}
            if (this.stock.values[i][1] == "") {
                inputs.push(":text[id='" + i + "_1']");
            }
            if (this.stock.values[i][2] == "") {
                inputs.push(":text[id='" + i + "_2']");
            }
        }
        if (inputs.length > 0) {
            err.push("请您完整填写价格、数量。");
        }
        if (err.length < 1) {
            this.encodeStockStr()
            return true;
        }
        else {
            return err;
        }
    }
    //把库存的当前数据拷贝到内存中
    function getExcelCopy(){
        if(!window.clipboardData){return};
		this.getStockInput(this);
        var t = [];
        for (var i in this.stock.values) {
            t.push(this.stock.values[i].join("\t"));
        }
        t = t.join("\r\n");
        window.clipboardData.setData("text", t);
        alert("温馨提示:\n\n" + "数据已复制，请直接粘贴在Excel表格中。");
    }
    //用户粘贴数据事件判断
    function stockOnPaste(obj){
        if(!window.clipboardData){return};
		var t = clipboardData.getData("text");
        if (t.length > 10 * 1000) {
            alert("温馨提示:\n\n" + "您粘帖的表格过大，请复制时适当减少表格数量。")
            return false;
        }
        if (/(.*\n.*){2,}/.test(t)) {
            //if(confirm("温馨提示:\n\n"+"检测到你要粘贴的数据是多行格式，是否要按照表格结构分拆到各个输入框？")){
            var d = t.replace(/^\n|\n$/, "").split("\r\n");
            for (var i = 0; i < d.length; i++) {
                d[i] = d[i].split("\t");
            }
            var _id = obj.id.split("_")[0];
            var _s = parseInt(obj.id.split("_")[1]);
            var _o = window.stockOption;
            var _l = _o.stock.dicar = _o.createDicars(_o.stock.attrs);
            var _v = _o.stock.values;
            var startTag = false;
            var curLine = 0;
            for (var i = 0; i < _l.length; i++) {
                //如果找到起点就打上标记
                (_l[i] == _id) ? startTag = true : "";
                //发现标记打上并且数据还没有粘贴完的话，就开始粘贴一行
                if (startTag && curLine < d.length) {
                    for (var j = _s, k = 0; j < 4 && k < d[curLine].length; j++, k++) {
                        switch (j) {
                            case 1:
                                (!/^[\d\.]*$/.test(d[curLine][k])) ? d[curLine][k] = d[curLine][k].replace(/[^\d\.]/g, "") : "";
                                if (d[curLine][k] != "") {
                                    d[curLine][k] = parseFloat(d[curLine][k]).toFixed(2);
                                }
                                break;
                            case 2:
                                (!/^[\d]*$/.test(d[curLine][k])) ? d[curLine][k] = d[curLine][k].replace(/[^\d]/g, "") : "";
                                if (d[curLine][k] && d[curLine][k] != "0") {
                                    d[curLine][k] = parseInt($strTrimLeft(d[curLine][k].toString(),"0"));
                                }
                                break;
                            default:
                                (/[^\u4e00-\u9fa5\w-\/\.]/g.test(d[curLine][k])) ? d[curLine][k] = d[curLine][k].replace(/[^\u4e00-\u9fa5\w-\/\.]/g, "") : "";
                                break;
                        };
                        _v[_l[i]] ? "" : _v[_l[i]] = [, , , ];
                        _v[_l[i]][j] = d[curLine][k];
                    }
                    curLine++;
                }
            }
            window.stockOption.showStockInputHtml(window.stockOption, document.getElementById("stockAttrsFrame2"));
            return false
        }
        //}
        return true;
    }
    //统计库存数据中的最大价格、最小价格、商品总数
    function countStock(){
        this.maxPrice = "";
        this.minPrice = "";
        this.stockCount = 0;
        for (var i = 0; i < this.stock.dicar.length; i++) {
            var d = this.stock.values[this.stock.dicar[i]];
            if (!d) {
                continue;
            }
            if (!this.maxPrice) {
                this.maxPrice = parseFloat(d[1]);
                this.minPrice = parseFloat(d[1]);
            }
            if (d[1] && parseFloat(d[1]) > parseFloat(this.maxPrice)) {
                this.maxPrice = parseFloat(d[1]);
            }
            if (d[1] && parseFloat(d[1]) < parseFloat(this.minPrice)) {
                this.minPrice = parseFloat(d[1]);
            }
            if (d[2]) {
                this.stockCount += parseInt(d[2]);
            }
        }
    }
    //重置库存属性（清空内存值）--beanmao
	function resetStock(){
		//option.input.value = "";
		//option.stock = decodeStockStr(option.input.value);
		//option.drawStock(option, "init");
		for(var i in this.stock.attrs){
			this.delAttrItem(this,i);
		}
	}
	//设置库存属性配置是否可以编辑
	function setStockEdit(s){
		if(s){
			this.canEdit=true;
			this.drawStock(this, "init");
			
		}else{
			this.canEdit=false;
			this.drawStock(this, "init");
		}
	}
}
function $stockSelector(obj){
	//库存属性
	var option={
		stockStr:"",		//库存配置串
		stockItems:"",		//所有库存属性的对象列表
		mainDom:"",         //主图容器dom
		mainImg:"",         //主图dom 
		bigImg:"",          //放大图dom   
		css_disable:"disable",	//禁止选择元素时的样式
		css_select:"select",		//选中元素的样式
		checkedItems:"",	//系统参数，不可覆盖，表当前选中的属性
		checkedStr:"",	//选择结果编码串
		onCheckSuccess:function(obj){return true;},	//选择状态检查成功
		onCheckFail:function(obj){return true;},	//选择状态检查不合格
		onSelectChange:function(obj){return true;},	//当选择状态变更时的事件
		onSelectReady:function(obj){return true;},	//完整选择属性的事件
		onSelectNotReady:function(obj){return true;}	//未完整选择属性的事件
	};
	for(var i in obj){
		option[i]=obj[i];
	}
	//数据解码成可用数据对象
	option.stock=decodeStockStr(option.stockStr);
	
	
	//给所有的属性绑定点击事件
	option.stockItems.click(function(){
		var _this=$$(this);
		
		if(option.mainImg){
			var imgMain = _this.attr("info-img300"),
				 imgBig = _this.attr("info-img");
			if(!!imgMain){			
				option.mainImg.src = imgMain;
				option.bigImg.src = imgBig;
		
				var imgs=[];
				imgs.push(imgBig);
				option.mainDom?option.mainDom.onclick = function (e) {
            		$picPreview(imgs, "0", 520, 720);
        		}:"";
			}
		}
		
		
		//如果当前是无任何库存的项目则不 做任何操作
		if(option.stock.attrCount[_this.attr("attrName")+":"+_this.attr("attrValue")]<1){
			return;
		}
		//判断当前的选择组合下本属性是否有库存,没有库存则为错误操作
		if(!checkSelectHasStock(option.stock,_this.attr("attrName"),_this.attr("attrValue"))){
			return;
		}
		//判断当前是否为选中，如果已经选中则去掉选择，否则选中之
		option.stock.selectVal[_this.attr("attrName")]=(option.stock.selectVal[_this.attr("attrName")]==_this.attr("attrValue"))?"":_this.attr("attrValue");
		//将库存信息的状态显示到页面上
		showStockSelectState(option);
	});
	option.decode=decodeStockStr;
	option.checkHaveStock=checkSelectHasStock;
	option.drawStock=showStockSelectState;
	option.check=checkStockSelect;
	option.getUnselectList=getUnselectList;
	//默认选择的状态设置
	if(option.checkedStr!=""){
		var t=option.checkedStr.split("|");
		for(var i=0;i<t.length;i++){
			t[i]=t[i].split(":");
			if(t[i][1]!="" && option.stock.selectVal[t[i][0]]==""){
				option.stock.selectVal[t[i][0]]=t[i][1];
			}
		}
		showStockSelectState(option);
	}
	//如果某种属性的可选属性值只有一个的话就自动给用户选中
	var autoChecked=false;
	for(var i in option.stock.attrs){
		var zeroattrs=0;
		var unZeroName=""
		for(var j=0;j<option.stock.attrs[i].length;j++){
			if(option.stock.attrCount[i+":"+option.stock.attrs[i][j]]<1){
				zeroattrs+=1;
			}else{
				unZeroName=option.stock.attrs[i][j];
			}
		}
		if(option.stock.attrs[i].length-zeroattrs==1){
			option.stock.selectVal[i]=unZeroName;
			autoChecked=true;
		}
	}
	if(autoChecked){
		showStockSelectState(option);
	}
	return option;
	//检查输入是否正常ok
	function checkStockSelect(){
		var str=[];
		var opt=this;
		for(var i in opt.stock.selectVal){
			if(opt.stock.selectVal[i]==""){
				//库存选择检查失败事件
				if(!opt.onCheckFail(opt)){return false;}
				return false;
			}
			str.push(i+":"+opt.stock.selectVal[i]);
		}
		
		if(opt.stock.values[str.join("|")][2]>0 ){
			opt.checkedStr=str.join("|");
			//库存选择检查成功事件
			if(!opt.onCheckSuccess(opt)){return false;}
			return true;
		}else{
			//库存选择检查失败事件
			if(!opt.onCheckFail(opt)){return false;}
			return false;
		}
	}
	//解码库存属性串，转换为一个可用大对象
	function decodeStockStr(str){
		//解码空串:属性map，值列表，构造串,所有属性值的列表（统计用）,已经选中的内容
		var stock={attrs:{},values:{},attrNum:0,encodeStr:"",attrCount:{},selectVal:{},zeroValues:{},zeroMap:{},zeroLength:0};
		if(str==""){return stock;}
		var tmp=str.split(";");
		var s=tmp[0].replace(/^\d.*#/,"").split("~")[0].split("|");
		//直接把第一条记录转换成一个属性map结构
		for(var j=0;j<s.length;j++){
			//切开s[i]，会得到2元素的数据，第一个是属性名，第2个是属性值的结构【属性值，该属性值对应的库存数，】
			stock.attrs[s[j].split(":")[0]]=[s[j].split(":")[1]];
			stock.attrNum+=1;	//统计已有的属性总数
			stock.selectVal[s[j].split(":")[0]]="";	//设置用户要选中的值
		}
		//遍历所有的数据分拆数据结构成一个大map
		for(var i=0;i<tmp.length;i++){
			//先去掉每条数据前面的编号
			tmp[i]=tmp[i].replace(/^\d.*#/,"");
			if(tmp[i]==""){continue;}
			//分析当前记录的属性值，如果不存在map里面就加入进去
			var s=tmp[i].split("~")[0].split("|");
			for(var j=0;j<s.length;j++){
				//统计所有属性的对应商品数
				if(stock.attrCount[s[j]]){
					stock.attrCount[s[j]]=parseInt(stock.attrCount[s[j]])+parseInt(tmp[i].split("~")[1].split(",")[2]);
				}else{
					stock.attrCount[s[j]]=parseInt(tmp[i].split("~")[1].split(",")[2]);
				}
				//取出当前属性的值列表，如果当前属性值不存在就加入到属性列表中
				if((","+stock.attrs[s[j].split(":")[0]].join(",")+",").indexOf(","+s[j].split(":")[1]+",")<0){
					stock.attrs[s[j].split(":")[0]].push(s[j].split(":")[1]);
				}
				
			}
			//分析当前的记录，解析并压入数据库
			stock.values[tmp[i].split("~")[0].toString()]=tmp[i].split("~")[1].split(",");
			//如果是0库存数据就再压一份到0库存表中,并把对象构入0库存属性map
			if(parseInt(tmp[i].split("~")[1].split(",")[2])<1){
				var s=tmp[i].split("~")[0].split("|");
				for(var j=0;j<s.length;j++){
					if(!stock.zeroMap[s[j].split(":")[0]]){
						stock.zeroMap[s[j].split(":")[0]]=[s[j].split(":")[1]];
					}
					if((","+stock.zeroMap[s[j].split(":")[0]].join(",")+",").indexOf(","+s[j].split(":")[1]+",")<0){
						stock.zeroMap[s[j].split(":")[0]].push(s[j].split(":")[1]);
					}
				}
				stock.zeroValues[tmp[i].split("~")[0].toString()]=tmp[i].split("~")[1].split(",");
				stock.zeroLength+=1;
			}
		}
		return stock;
	};
	//判断当前组合是否有库存
	function checkSelectHasStock(obj,aName,aValue){
		//如果当前属性名不在0库存map中，就直接返回真
		if(!obj.zeroMap[aName]){
			return true;
		}
		//如果当前属性不在0库存map中，就直接返回真
		if((","+obj.zeroMap[aName].join(",")+",").indexOf(","+aValue+",")<0){
			return true;
		}
		//求当前属性0库存数大于实际0库存数的时候（当某库存属性为0库存的时候，至少产生的0库存记录条数），则说明当前肯定是有库存的，返回真
		var minZeroCount=1;
		for(var i in obj.selectVal){
			if(obj.selectVal[i]=="" && i!=aName){
				minZeroCount=obj.attrs[i].length*minZeroCount;
			}
		}
		if(minZeroCount>obj.zeroLength){
			return true;
		}
		//遍历当前属性选择在0库存中匹配到的条数，如果匹配的条数小于属性零库存总条数，则表示还有库存，返回真
		var findCount=0;
		var newS={};	//深拷贝已选择状态
		for(var i in obj.selectVal){
			newS[i]=(i==aName)?aValue:obj.selectVal[i];
		}
		//遍历所有的库存记录，单某条记录中包括所有的选择状态时，就把这个记录的总数统计起来
		for(var i in obj.zeroValues){
			//遍历当前所有的选择，只要有一种选择没在当前库存记录里面就不匹配
			var isMatch=true;
			for(var j in newS){
				if(newS[j]!="" && ("|"+i+"|").indexOf("|"+j+":"+newS[j]+"|")<0){
					isMatch=false;
				}
			}
			//如果当前库存记录中存在
			findCount+=isMatch?1:0;
		}
		//如果记录总数小于0库存记录数，则标识还有库存，返回真
		if(findCount<minZeroCount){
			return true;
		}
		//其他情况返回无库存
		return false;
	}
//将库存信息的状态显示到页面上
	function showStockSelectState(opt){
		//把所有的状态还原
		var obj=opt.stock;
		var attrs=opt.stockItems;
		attrs.filter("."+opt.css_disable+","+"."+opt.css_select).find("a").removeClass("current").removeClass(opt.css_disable);
		attrs.filter("."+opt.css_disable+","+"."+opt.css_select).removeClass(opt.css_disable).removeClass(opt.css_select);
		
		//去掉原始状态
		
		var selectList=[];	//已经选中元素的数组
		for(var i in obj.selectVal){
			//设置选中的对像的状态
			if(obj.selectVal[i]!=""){
				selectList.push(obj.selectVal[i]);
				attrs.filter("[attrValue='"+obj.selectVal[i]+"']").filter("[attrName='"+i+"']").addClass(opt.css_select);
				attrs.filter("[attrValue='"+obj.selectVal[i]+"']").filter("[attrName='"+i+"']").find("a").addClass("current");
			}
			//循环判断0库存map中当前属性中库存为空的值，灰掉
			if(!obj.zeroMap[i]){continue;}
			for(var j=0;j<obj.zeroMap[i].length;j++){
				if(!checkSelectHasStock(obj,i,obj.zeroMap[i][j])){
					attrs.filter("[attrName='"+i+"']").filter("[attrValue='"+obj.zeroMap[i][j]+"']").addClass(opt.css_disable);
					attrs.filter("[attrName='"+i+"']").filter("[attrValue='"+obj.zeroMap[i][j]+"']").find("a").addClass(opt.css_disable);
				}
			}
		}
		//返回选择的属性列表
		opt.checkedItems=(selectList.length>0)?selectList:[];
		//触发选择选择变更事件
		if(!opt.onSelectChange(opt)){return false;}
		//如果选择了全部则修改当前库存数信息
		if(selectList.length==obj.attrNum){
			//构造选择对象的串
			var ids=[];
			for(var i in obj.selectVal){
				ids.push(i+":"+obj.selectVal[i]);
			}
			opt.checkedStr=ids.join("|");
			//触发属性选择完整事件
			if(!opt.onSelectReady(opt)){return false;}
		}else{
			//触发属性未选择完整事件
			if(!opt.onSelectNotReady(opt)){return false;	}
		}
	}
	//获取未选择属性的名称
	function getUnselectList(opt){
		var t=[];
		for(var i in opt.stock.selectVal){
			if(opt.stock.selectVal[i]==""){
				t.push(i);
			}
		}
		return t;
	}
}
(function(){
//校验用到的正则
var stockInputReg = /[^\u4e00-\u9fa5\w-\/\.]/g;
var stockKeyReg = /(\d+#)?([^|:]+):([^|:]+)/g;
//模板
var tableHTML={
	items:{
		headtr:"<tr>{#stockTH#}<th>库存编码</th>\
			    <th><label><input type='checkbox' />价格</label></th>\
			    <th><label><input type='checkbox' />数量</label></th>\
			    <th>备注</th></tr>",
		
		cols:"{#stockCOL#}<col width='160'></col>\
			  <col width='85'></col>\
			  <col width='85'></col>\
			  <col width='160'></col>",
		
		bodytr:"<tr id='{#id#}' style='{#style#}'>{#stockTD#}\
				<td class='col1'><input type='text' dtype='string' value='{#value#}' width='140' maxlength='20' onblur='$stockTable.delegateEvent(this)' /></td>\
				<td class='col2'><input type='text' dtype='price' value='{#value#}' width='50' maxlength='10' onblur='$stockTable.delegateEvent(this)' /></td>\
				<td class='col3'><input type='text' dtype='number' value='{#value#}' width='50' maxlength='6' onblur='$stockTable.delegateEvent(this)' /></td>\
				<td class='col4'><input type='text' dtype='string' value='{#value#}' width='140' maxlength='20' onblur='$stockTable.delegateEvent(this)' /></td></tr>"
	},
	template:{
		table:"<table id='{#id#}'>{#colgroup#}{#thead#}{#tbody#}</table>",
		colgroup:"<colgroup>{#cols#}</colgroup>",
		thead:"<thead>{#headtr#}</thead>",
		tboby:"<tbody>{#bodytr#}</tbody>",
		col:"<col></col>",
		th:"<th>{#text#}</th>",
		td:"<td>{#value#}</td>"
	}
}

//方法主体
$stockTable=function(option){
	var opt = {
		areaId:"",
		tableId:"myStockTable",
		stockStr:"",
		idPrefix:"stockTR",
		tipsColor:{
			zero:"red",
			blank:"yellow"
		}
	}
	
	for(var i in option){
		opt[i] = option[i];
	}
	
	//库存值信息
	var ndata=[];
	var vdata=[];
	
	//存在填充区域
	if($id(opt.areaId)){
		$id(opt.areaId).innerHTML = $xss(getHTML(),"none");
		getStockStr();
		bindEvent();
	}else{
		opt.getHTML = getHTML;
		opt.bindEvent = bindEvent;
	}
	opt.getTableDom=getTableDom;
	opt.getStockStr=getStockStr;
	return opt;
	
	//private获取table的html
	function getHTML(){
		var stockStr = opt.stockStr;
		if(!stockStr){
			return "";
		}
		var dataAr = stockStr.split(";");
		
		//获取属性名列表
		if(dataAr.length>0){
			ndata = dataAr[0].split("~")[0].replace(stockKeyReg,"$2").split("|");
		}else{
			return "";
		}
		
		//获取属性值
		for(var i=0,l=dataAr.length;i<l;i++){
			//结构符合
			var info = dataAr[i].split("~");
			var item = {
				id:info[0],
				values:info[0].replace(stockKeyReg,"$3").split("|").concat(info[1].split(","))
			}
			vdata[vdata.length] = item;
		}
		
		//校验：+4因为有（库存、价格、数量、备注）四列
		if(ndata.length && vdata.length && (ndata.length+4)==vdata[0].values.length){
			//初始化模板列
			var items = {},oItems=tableHTML.items;
			var temp = tableHTML.template;
			//用于格式化的对象
			var fobj = {stockTH:[],stockCOL:[],stockTD:[]};
			for(var i=0,l=ndata.length;i<l;i++){
				fobj.stockTH.push(temp.th.replace(/{#text#}/,ndata[i]));
				fobj.stockCOL.push(temp.col);
				fobj.stockTD.push(temp.td);
			}
			//数组转换为字符串
			for(var i in fobj){
				fobj[i] = fobj[i].join("");
			}
			//替换得到完整模板
			items.headtr = oItems.headtr.replace(/{#stockTH#}/,fobj.stockTH);
			items.cols = oItems.cols.replace(/{#stockCOL#}/,fobj.stockCOL);
			items.bodytr = oItems.bodytr.replace(/{#stockTD#}/,fobj.stockTD);
			
			//重新声明格式化对象
			fobj = {
				id:opt.tableId,
				colgroup:$formatStr(temp.colgroup,items),
				thead:$formatStr(temp.thead,items),
				tbody:[]
			}
			
			//遍历vdata 填充tbody
			var stockNumIndex = ndata.length+2;
			for(var i=0,l=vdata.length;i<l;i++){
				var d = vdata[i].values,k=0;
				fobj.tbody[fobj.tbody.length] = 
				items.bodytr.replace(/{#value#}/g,function(){
					return d[k++];
				}).replace(/{#id#}/,opt.idPrefix+vdata[i].id).replace(/{#style#}/,d[stockNumIndex]=="0"?("background-color:"+opt.tipsColor.zero):"");
			}
			
			fobj.tbody = fobj.tbody.join("");
			return $formatStr(temp.table,fobj);
		}
		return "";
	}
	
	//获取table对象
	function getTableDom(){
		return $id(opt.tableId);
	}
	
	//事件绑定
	function bindEvent(){
		var dom = getTableDom();
		if(dom){
			//checkbox的点击事件
			$addEvent(dom,"click",function(e){
				var t = $getTarget(e);
				//价格和数量与第一个相同
				if(t && t.tagName.toLowerCase()=="input" && t.type=="checkbox" && t.checked){
					if(confirm("您确定把所选列全部设置一行中的内容吗？")){
						var index = t.parentNode.parentNode.cellIndex;
						var firstValue = dom.rows[1].cells[index].firstChild.value;
						var rows = dom.rows;
						//排除头部的那一行和第一行
						for(var i=2,l=rows.length;i<l;i++){
							rows[i].cells[index].firstChild.value = firstValue;
						}
					}else{
						t.checked=false;
					}
				}
			});	
			//出入框验证事件
			$addEvent(dom,"dblclick",function(e){
				var t = $getTarget(e);
				if(t && t.tagName.toLowerCase()=="input" && t.type=="text"){
					checkInput(t);
				}
			});
			
			//粘贴事件
			if(window.clipboardData){
				$addEvent(dom,"paste",function(e){
					var t = $getTarget(e);
					if(t && t.tagName.toLowerCase()=="input" && t.type=="text"){
						var txt = window.clipboardData.getData("text");
						if(txt && txt.length && /(.*\n.*){2,}/.test(txt)){
							//为excel格式的数据
							txt = txt.replace(/^\n|\n$/, "").split("\r\n");
							var crtIndex =0;
							var crtRow = t.parentNode.parentNode;
							var inputIndex = 0;
							
							//计算粘贴起始点
							(function(){
								var doms = crtRow.getElementsByTagName("input");
								for(var i=0,l=doms.length;i<l;i++){
									if(doms[i]==t){
										inputIndex = i;
										break;
									}
								}
							})();
							
							while(crtRow && txt[crtIndex]){
								var inputs = crtRow.getElementsByTagName("input");
								var values = txt[crtIndex].split("\t");
								for(var i=0,l=(inputs.length-inputIndex);i<l;i++){
									if(values[i]){
										inputs[i+inputIndex].value = values[i];
									}else{
										break;
									}
								}
								crtRow = crtRow.nextSibling;
								crtIndex++;
							}
							//阻止默认操作
							return false;
						}
						//返回默认操作
						return true;
					}
				});
			}
		}
	}
	
	//检查输入框
	function checkInput(t){
		var dtype = t.getAttribute("dtype"),v=$strTrim(t.value);
		switch(dtype){
			case "string":
				v = v.replace(stockInputReg,"");				
				break;
			case "price":
				if(isNaN(v) || !v){
					v = "";
				}else{
					//不能大于100W
					if(parseFloat(v,10)>=1000000){
						v = 1000000;
					}else{
						//有小数时，才有小数位
						if(parseInt(v,10)==parseFloat(v,10)){
							v = parseInt(v,10);
						}else{
							v = parseFloat(v,10).toFixed(2);
						}
						
						//不能为0
						if(parseFloat(v,10)==0){
							v = "";
						}
					}
				}
				
				break;
			case "number":
				if(isNaN(v) || !v){
					v="";
				}else{
					v = parseInt(v,10);
				}
				
				break;
			default:
				break;
		}
		//如果不相同，才改变输入框的值
		v+="";
		if(t.value !=v){
			t.value=v;
		}
	}
	
	//获取新的属性串
	function getStockStr(){
		var dom = getTableDom();
		if(dom){
			//这里需要边检验，边算值
			var retVal = [];
			var errRow = [];
			for(var i=0,l=vdata.length;i<l;i++){
				var tr = $id(opt.idPrefix+vdata[i].id);
				var inputs = tr.getElementsByTagName("input");
				//循环展开
				var inputsVal =[];
				for(var j=0,k=inputs.length;j<k;j++){
					checkInput(inputs[j]);
					inputsVal.push(inputs[j].value);
				}
				//=.=!
				
				//变色提醒
				if(inputs[1].value=="" || inputs[2].value==""){
					//不能为空进行变黄报错
					tr.style.backgroundColor = opt.tipsColor.blank;
					errRow.push(i+1);
				}else{
					if(inputs[2].value=="0"){
						//变红
						tr.style.backgroundColor = opt.tipsColor.zero;
					}else{
						//正常
						tr.style.backgroundColor = "";
					}
				}
				
				//打入列表
				retVal.push(vdata[i].id+"~"+inputsVal.join(","));
			}
			
			return {
				errCode:errRow.length?"1":"0",
				errRow:errRow,
				stockStr:retVal.join(";")
			};
			
			
		}else{
			return {
				errCode:"0",
				errRow:[],
				stockStr:opt.stockStr
			};
		}
	}
}

$stockTable.delegateEvent=function(dom){
	$fireEvent(dom,"dblclick");
}

})()
function $storage(o){
//本地存储组件，必须先定义声明PP全局变量
	PP.storage = {
		//helper页面，用来解决userdata同一域名下共享数据
		helperUrl : "http://www.paipai.com/storage_helper.html",
		//helper页面回调
		ifrCallback : null,
		instance : null,
		//获取建立好的实例
		getInstance : function(){
			var _ins = this["instance"];
			if(_ins){
				return _ins;
			}
			return null;
		}
	};
	PP.storage.create = function(cb, opt){
		if(typeof cb != "function"){
			return;
		}
		opt = opt || {};
		for (var n in opt){PP.storage[n] = opt[n];}
		var db 				= null,									//实例引用
			dbname 			= opt.dbname || "paipai_data",		//数据库名称
			defaultDomain 	= opt.domain || location.hostname,			//主域名
			helperUrl		= opt.helper || PP.storage.helperUrl,
			share			= opt.share || false,
			_clientStore = ["globalStorage", "localStorage", "userData"];//openDatabase跨域也可以使用。不安全。放弃
			//提供不使用so的选项
			if(!opt.noSO){
				_clientStore = ["so"].concat(_clientStore);
			}
			if (share){
				defaultDomain = document.domain;
			}
		var _cs = PP.storage;
		
		var createHelper = function(th,type){
			//需要helper页面的情况
			var i = document.createElement("iframe");
			i.id = "userData_iframe_" + dbname;
			i.style.display = "none";
			i.src = helperUrl;
			//给helper页面的回调
			PP.storage.ifrCallback = function(){
				db = i.contentWindow.create(dbname, type);
				if (db) {
					cb(th);
				}
				else {
					cb(false);
				}
			};
			document.body.appendChild(i);
		};
		//各浏览器实现方式
		var _backend = {};
		// IE 的userData internet域下，一个document最大128k， 一个domain最大1024kb
		_backend.userData = {
			isSupport:!!window.ActiveXObject,
			get: function(key, cb){
				var val = db.getAttribute(key);
				(typeof cb == "function") && cb(val);
				return val;
			},
			set: function(key, value){
				try {
					var val = db.getAttribute(key);
					db.setAttribute(key, value);
					db.save(dbname);
					return true;
				} 
				catch (ex) {
					return false;
				}
			},
			remove: function(key){
				db.removeAttribute(key);
				db.save(dbname);
			},
			init: function(){
				//不需要helper页面
				if (share) {
					createHelper(this, "userData");
					return;
				}
				var el = document.createElement("div");
				el.id = dbname + "_userData";
				el.style.display = "none";
				el.addBehavior("#default#userdata");
				document.body.appendChild(el);
				_this = this
				setTimeout(function(){
					el.load(dbname);
					db = el;
					cb(_this);
				},1000);
			},
			clear: function(){
				db.expires = new Date(1234567890000).toUTCString();
				db.save(dbname);
			}
		};
		//firefox2+ 5000kb
		_backend.globalStorage = {
			isSupport:!!window.globalStorage,
			get: function(key, cb){
				var v = (v=db.getItem(key)) && v.value ? v.value : v;
				(typeof cb == "function") && cb(v);
				return v;
			},
			set: function(key, value){
				try {
					db.setItem(key, value);
					return true;
				} 
				catch (ex) {
					return false;
				}
			},
			remove: function(key){
				db.removeItem(key);
			},
			init: function(){
				if (db = window.globalStorage[share?defaultDomain:location.hostname]) {
					cb(this);
				}
				else {
					cb(false);
				}
			},
			clear: function(){
				for (var k in db) {
					db.removeItem(k);
				}
			}
		};
		//ie8+ 10 000kb safari4+ chrome4+ firefox3.5+ opera10.5+ 5000kb
		_backend.localStorage = {
			isSupport:!!window.localStorage,
			get: _backend.globalStorage.get,
			set: _backend.globalStorage.set,
			remove: _backend.globalStorage.remove,
			init: function(){
				if (share) {
					createHelper(this, "localStorage");
					return;
				}
				if (db = window.localStorage) {
					cb(this);
				}
				else {
					cb(false);
				}
			},
			clear: function(){
				var len = db.length;
				while (len--) {
					db.removeItem(db.key(len));
				}
			}
		};
		//shareObject 10kb - 10mb
		_backend.so = {
			isSupport:!!(PP.shareObject && PP.shareObject.getValidSO()),
			get : function(key, cb){
				var val = db.get(key);
				(typeof cb == "function") && cb(val);
				return val;
				
			},
			set : function(key, value){
				try {
					db.set(key, value);
					return true;
				} 
				catch (ex) {
					return false;
				}
			},
			remove : function(key){
				db.del(key);
			},
			clear : function(){
				db.clear();
			},
			init : function(){
				if(db = PP.shareObject.getValidSO()){
					cb(this);
				}
				else{
					cb(null);
				}
			}
		};
		(function(){
			for (var i = 0, len = _clientStore.length; i < len; i++) {
				if (_backend[_clientStore[i]].isSupport) {//看看支持哪种
					(_cs["instance"] = _backend[_clientStore[i]]).init();//来个初始化
					return;
				}
			}
			//不支持客户端存储
			cb(false);
		})();
	};

	//封装成PP.Storage.get的形式
	(function(qs){
		qs.init = function(){
			var args = arguments;
			PP.storage.create(function(ins){
				if(ins){
					qs.get 		= ins.get;
					qs.set 		= ins.set;
					qs.remove 	= ins.remove;
					qs.clear 	= ins.clear;
					ins[args[0]].apply(null, args[1]);
				}else{
					//不支持的话给个回调告诉人家
					if(args[0] == "get"){
						args[1][2](null);
					}
				}
			},{share:o["share"]});
		};
		qs.get = function(){
			qs.init("get", arguments);
		};
		qs.set = function(){
			qs.init("set", arguments);
		};
		qs.remove = function(){
			qs.init("remove", arguments);
		};
		qs.clear = function(){
			qs.init("clear", arguments);
		};
	})(PP.storage);
}
function $submitToSearch(){
	/*
	//搜索表单提交
	//20100720 create by homerhuang 
	*/
	var frm = arguments[0],event = window.event,srcEls;
	if (typeof(frm) == "object" || !frm){
		if ($isBrowser("firefox")){event = frm}
		srcEls = event.target || event.srcElement;
		frm = srcEls.getAttribute("frm");
	}
	var objFrm = document.forms[frm];
	//如果存在表单，则进行提交逻辑判断
	if (objFrm){
		var t = objFrm.elements["searchType"].value,clsObj = objFrm.elements["sClassid"];
		var clsId = (!clsObj || clsObj.value == "")?0:clsObj.value;
		if(objFrm.elements['KeyWord'].value == '想找什么？输入商品名称试试'){
			objFrm.elements['KeyWord'].value = '';
		}
		
		if(objFrm.elements['KeyWord'].value == "" && clsId == "0"){
			window.location = "http://search.paipai.com/";
			return false;
		}else{
			if (t && t == "1"){
				objFrm.action="http://shopsearch.paipai.com/SearchShopAction.xhtml";
			}else{
				objFrm.action="http://search1.paipai.com/cgi-bin/comm_search1";
			}
			objFrm.submit();
			return false;
		}
	}
}
$swfImageUpload = function (opt) {
            //加载资源
            if (!window.SWFUpload) {
                //加载css
                $loadCss('http://ppms.paipaioa.com/css/swfupload.css');
                $loadScript('http://static.paipaiimg.com/js/swfupload.js?t=2011');
                $loadScript('http://static.paipaiimg.com/js/swf.imagehandlers.js?t=2011');
            }
            //校验资源下载情况
            (function checkJs() {
                if (!window.SWFUpload || !window.fileDialogComplete) {
                    checkJs.timeTag = setTimeout(function () { checkJs(); }, 200);
                } else {
                    initFlash();
                }
            })();

            function initFlash() {
                var _opt = {
                    id: '',
                    tmpl: '<div attrtag="flashBtn"></div><div attrtag="process"></div><div attrtag="uploadMsg"></div><a target="_blank"><img attrtag="preview" style="display:none;{#width#}{#height#}" /></a>',
                    prevWidth: '',
                    prevHeight: '',
                    flashConf: {
                        //上传图片url
                        upload_url: "http://boss.paipaioa.com/express/CpcActionupLoadPic.do",
                        //上传文件大小限制
                        file_size_limit: "900 KB",
                        //上传文件类型
                        file_types: "*.jpg;",
                        //文件类型描述
                        file_types_description: "只支持jpg格式的图片",
                        //文件上传数量限制，0表示不限制
                        file_upload_limit: "0",
                        //选中文件后触发事件
                        file_dialog_complete_handler: imgFileDialogComplete,
                        //上传成功事件
                        upload_success_handler: imgUploadSuccess,
                        file_queue_error_handler: fileQueueError,
                        upload_progress_handler: uploadProgress,
                        upload_error_handler: uploadError,
                        upload_complete_handler: uploadComplete,
                        //按钮背景图片
                        button_image_url: "http://static.paipaiimg.com/express/index_xpbuttonuploadimage_61x22.png",
                        //装载flash容器的dom元素id
                        button_placeholder_id: '',
                        //按钮宽度
                        button_width: 62,
                        //按钮高度
                        button_height: 22,
                        //swf文件路径
                        flash_url: "http://boss.paipaioa.com/express/js/swfupload/swfupload.swf"
                        //用户自定义属性
                        //                    custom_settings: {
                        //                        upload_target: "posImgProcess" //用于上传展示进度的dom元素id（可选）
                        //                    }
                    }
                }
                //合并配置项
                _opt.flashConf = $extend(_opt.flashConf, opt.flashConf);
                for (var key in opt) {
                    if (key != 'flashConf') {
                        _opt[key] = opt[key];
                    }
                }
                //设置预览图片大小
                _opt.tmpl = $strReplace(_opt.tmpl, {
                    '{#width#}': (_opt.prevWidth ? ('width:' + _opt.prevWidth + ';') : ''),
                    '{#height#}': (_opt.prevHeight ? ('height:' + _opt.prevHeight + ';') : '')
                });

                var pContent = $id(_opt.id);
                pContent.innerHTML = _opt.tmpl;
                var flashBtn = $attr('attrtag', 'flashBtn', pContent)[0];
                flashBtn.id = _opt.id + '_flashBtn';
                var process = $attr('attrtag', 'process', pContent)[0];
                process.id = _opt.id + '_process';
                _opt.flashConf.button_placeholder_id = flashBtn.id;

                new SWFUpload($extend({
                    custom_settings: {
                        upload_target: process.id,
                        preview: $attr('attrtag', 'preview', pContent)[0],
                        uploadMsg: $attr('attrtag', 'uploadMsg', pContent)[0]
                    }
                }, _opt.flashConf));
            }
        }
function $SWFUpload(option){
    //全局变量中查找
    if(window.SWFUpload){
        return new window.SWFUpload(option);
    }
    
    //以下为源代码
    /* ******************* */
    /* Constructor & Init  */
    /* ******************* */
    var SWFUpload;
    if (SWFUpload == undefined){
	    SWFUpload = function(settings){
		    this.initSWFUpload(settings);
	    };
    }
    
    
    SWFUpload.prototype.initSWFUpload = function (settings) {
	    try {
		    this.customSettings = {};	// A container where developers can place their own settings associated with this instance.
		    this.settings = settings;
		    this.eventQueue = [];
		    this.movieName = "SWFUpload_" + SWFUpload.movieCount++;
		    this.movieElement = null;


		    // Setup global control tracking
		    SWFUpload.instances[this.movieName] = this;

		    // Load the settings.  Load the Flash movie.
		    this.initSettings();
		    this.loadFlash();
		    this.displayDebugInfo();
	    } catch (ex) {
		    delete SWFUpload.instances[this.movieName];
		    throw ex;
	    }
    };

    /* *************** */
    /* Static Members  */
    /* *************** */
    SWFUpload.copyRight=
    ["SWFUpload: http://www.swfupload.org, http://swfupload.googlecode.com",
     "SWFUpload is (c) 2006-2007 Lars Huring, Olov Nilz? and Mammon Media and is released under the MIT License:",
     "http://www.opensource.org/licenses/mit-license.php",
     "SWFUpload is (c) 2006-2007 Lars Huring, Olov Nilz? and Mammon Media and is released under the MIT License:",
     "http://www.opensource.org/licenses/mit-license.php",
     "SWFUpload 2 is (c) 2007-2008 Jake Roberts and is released under the MIT License:",
     "http://www.opensource.org/licenses/mit-license.php"];
    SWFUpload.instances = {};
    SWFUpload.movieCount = 0;
    SWFUpload.version = "2.2.0 2009-03-25";
    SWFUpload.QUEUE_ERROR = {
	    QUEUE_LIMIT_EXCEEDED	  		: -100,
	    FILE_EXCEEDS_SIZE_LIMIT  		: -110,
	    ZERO_BYTE_FILE			  		: -120,
	    INVALID_FILETYPE		  		: -130
    };
    SWFUpload.UPLOAD_ERROR = {
	    HTTP_ERROR				  		: -200,
	    MISSING_UPLOAD_URL	      		: -210,
	    IO_ERROR				  		: -220,
	    SECURITY_ERROR			  		: -230,
	    UPLOAD_LIMIT_EXCEEDED	  		: -240,
	    UPLOAD_FAILED			  		: -250,
	    SPECIFIED_FILE_ID_NOT_FOUND		: -260,
	    FILE_VALIDATION_FAILED	  		: -270,
	    FILE_CANCELLED			  		: -280,
	    UPLOAD_STOPPED					: -290
    };
    SWFUpload.FILE_STATUS = {
	    QUEUED		 : -1,
	    IN_PROGRESS	 : -2,
	    ERROR		 : -3,
	    COMPLETE	 : -4,
	    CANCELLED	 : -5
    };
    SWFUpload.BUTTON_ACTION = {
	    SELECT_FILE  : -100,
	    SELECT_FILES : -110,
	    START_UPLOAD : -120
    };
    SWFUpload.CURSOR = {
	    ARROW : -1,
	    HAND : -2
    };
    SWFUpload.WINDOW_MODE = {
	    WINDOW : "window",
	    TRANSPARENT : "transparent",
	    OPAQUE : "opaque"
    };

    // Private: takes a URL, determines if it is relative and converts to an absolute URL
    // using the current site. Only processes the URL if it can, otherwise returns the URL untouched
    SWFUpload.completeURL = function(url) {
	    if (typeof(url) !== "string" || url.match(/^https?:\/\//i) || url.match(/^\//)) {
		    return url;
	    }
    	
	    var currentURL = window.location.protocol + "//" + window.location.hostname + (window.location.port ? ":" + window.location.port : "");
    	
	    var indexSlash = window.location.pathname.lastIndexOf("/");
	    if (indexSlash <= 0) {
		    path = "/";
	    } else {
		    path = window.location.pathname.substr(0, indexSlash) + "/";
	    }
    	
	    return /*currentURL +*/ path + url;
    	
    };


    /* ******************** */
    /* Instance Members  */
    /* ******************** */

    // Private: initSettings ensures that all the
    // settings are set, getting a default value if one was not assigned.
    SWFUpload.prototype.initSettings = function () {
	    this.ensureDefault = function (settingName, defaultValue) {
		    this.settings[settingName] = (this.settings[settingName] == undefined) ? defaultValue : this.settings[settingName];
	    };
    	
	    // Upload backend settings
	    this.ensureDefault("upload_url", "");
	    this.ensureDefault("preserve_relative_urls", false);
	    this.ensureDefault("file_post_name", "Filedata");
	    this.ensureDefault("post_params", {});
	    this.ensureDefault("use_query_string", false);
	    this.ensureDefault("requeue_on_error", false);
	    this.ensureDefault("http_success", []);
	    this.ensureDefault("assume_success_timeout", 0);
    	
	    // File Settings
	    this.ensureDefault("file_types", "*.*");
	    this.ensureDefault("file_types_description", "All Files");
	    this.ensureDefault("file_size_limit", 0);	// Default zero means "unlimited"
	    this.ensureDefault("file_upload_limit", 0);
	    this.ensureDefault("file_queue_limit", 0);

	    // Flash Settings
	    this.ensureDefault("flash_url", "swfupload.swf");
	    this.ensureDefault("prevent_swf_caching", true);
    	
	    // Button Settings
	    this.ensureDefault("button_image_url", "");
	    this.ensureDefault("button_width", 1);
	    this.ensureDefault("button_height", 1);
	    this.ensureDefault("button_text", "");
	    this.ensureDefault("button_text_style", "color: #000000; font-size: 16pt;");
	    this.ensureDefault("button_text_top_padding", 0);
	    this.ensureDefault("button_text_left_padding", 0);
	    this.ensureDefault("button_action", SWFUpload.BUTTON_ACTION.SELECT_FILES);
	    this.ensureDefault("button_disabled", false);
	    this.ensureDefault("button_placeholder_id", "");
	    this.ensureDefault("button_placeholder", null);
	    this.ensureDefault("button_cursor", SWFUpload.CURSOR.ARROW);
	    this.ensureDefault("button_window_mode", SWFUpload.WINDOW_MODE.WINDOW);
    	
	    // Debug Settings
	    this.ensureDefault("debug", false);
	    this.settings.debug_enabled = this.settings.debug;	// Here to maintain v2 API
    	
	    // Event Handlers
	    this.settings.return_upload_start_handler = this.returnUploadStart;
	    this.ensureDefault("swfupload_loaded_handler", null);
	    this.ensureDefault("file_dialog_start_handler", null);
	    this.ensureDefault("file_queued_handler", null);
	    this.ensureDefault("file_queue_error_handler", null);
	    this.ensureDefault("file_dialog_complete_handler", null);
    	
	    this.ensureDefault("upload_start_handler", null);
	    this.ensureDefault("upload_progress_handler", null);
	    this.ensureDefault("upload_error_handler", null);
	    this.ensureDefault("upload_success_handler", null);
	    this.ensureDefault("upload_complete_handler", null);
    	
	    this.ensureDefault("debug_handler", this.debugMessage);

	    this.ensureDefault("custom_settings", {});

	    // Other settings
	    this.customSettings = this.settings.custom_settings;
    	
	    // Update the flash url if needed
	    if (!!this.settings.prevent_swf_caching) {
		    this.settings.flash_url = this.settings.flash_url + (this.settings.flash_url.indexOf("?") < 0 ? "?" : "&") + "preventswfcaching=" + new Date().getTime();
	    }
    	
	    if (!this.settings.preserve_relative_urls) {
		    //this.settings.flash_url = SWFUpload.completeURL(this.settings.flash_url);	// Don't need to do this one since flash doesn't look at it
		    this.settings.upload_url = SWFUpload.completeURL(this.settings.upload_url);
		    this.settings.button_image_url = SWFUpload.completeURL(this.settings.button_image_url);
	    }
    	
	    delete this.ensureDefault;
    };

    // Private: loadFlash replaces the button_placeholder element with the flash movie.
    SWFUpload.prototype.loadFlash = function () {
	    var targetElement, tempParent;

	    // Make sure an element with the ID we are going to use doesn't already exist
	    if (document.getElementById(this.movieName) !== null) {
		    throw "ID " + this.movieName + " is already in use. The Flash Object could not be added";
	    }

	    // Get the element where we will be placing the flash movie
	    targetElement = document.getElementById(this.settings.button_placeholder_id) || this.settings.button_placeholder;

	    if (targetElement == undefined) {
		    throw "Could not find the placeholder element: " + this.settings.button_placeholder_id;
	    }

	    // Append the container and load the flash
	    tempParent = document.createElement("div");
	    tempParent.innerHTML = this.getFlashHTML();	// Using innerHTML is non-standard but the only sensible way to dynamically add Flash in IE (and maybe other browsers)
	    targetElement.parentNode.replaceChild(tempParent.firstChild, targetElement);

	    // Fix IE Flash/Form bug
	    if (window[this.movieName] == undefined) {
		    window[this.movieName] = this.getMovieElement();
	    }
    	
    };

    // Private: getFlashHTML generates the object tag needed to embed the flash in to the document
    SWFUpload.prototype.getFlashHTML = function () {
	    // Flash Satay object syntax: http://www.alistapart.com/articles/flashsatay
	    return ['<object id="', this.movieName, '" type="application/x-shockwave-flash" data="', this.settings.flash_url, '" width="', this.settings.button_width, '" height="', this.settings.button_height, '" class="swfupload">',
				    '<param name="wmode" value="', this.settings.button_window_mode, '" />',
				    '<param name="movie" value="', this.settings.flash_url, '" />',
				    '<param name="quality" value="high" />',
				    '<param name="menu" value="false" />',
				    '<param name="allowScriptAccess" value="always" />',
				    '<param name="flashvars" value="' + this.getFlashVars() + '" />',
				    '</object>'].join("");
    };

    // Private: getFlashVars builds the parameter string that will be passed
    // to flash in the flashvars param.
    SWFUpload.prototype.getFlashVars = function () {
	    // Build a string from the post param object
	    var paramString = this.buildParamString();
	    var httpSuccessString = this.settings.http_success.join(",");
    	
	    // Build the parameter string
	    return ["movieName=", encodeURIComponent(this.movieName),
			    "&amp;uploadURL=", encodeURIComponent(this.settings.upload_url),
			    "&amp;useQueryString=", encodeURIComponent(this.settings.use_query_string),
			    "&amp;requeueOnError=", encodeURIComponent(this.settings.requeue_on_error),
			    "&amp;httpSuccess=", encodeURIComponent(httpSuccessString),
			    "&amp;assumeSuccessTimeout=", encodeURIComponent(this.settings.assume_success_timeout),
			    "&amp;params=", encodeURIComponent(paramString),
			    "&amp;filePostName=", encodeURIComponent(this.settings.file_post_name),
			    "&amp;fileTypes=", encodeURIComponent(this.settings.file_types),
			    "&amp;fileTypesDescription=", encodeURIComponent(this.settings.file_types_description),
			    "&amp;fileSizeLimit=", encodeURIComponent(this.settings.file_size_limit),
			    "&amp;fileUploadLimit=", encodeURIComponent(this.settings.file_upload_limit),
			    "&amp;fileQueueLimit=", encodeURIComponent(this.settings.file_queue_limit),
			    "&amp;debugEnabled=", encodeURIComponent(this.settings.debug_enabled),
			    "&amp;buttonImageURL=", encodeURIComponent(this.settings.button_image_url),
			    "&amp;buttonWidth=", encodeURIComponent(this.settings.button_width),
			    "&amp;buttonHeight=", encodeURIComponent(this.settings.button_height),
			    "&amp;buttonText=", encodeURIComponent(this.settings.button_text),
			    "&amp;buttonTextTopPadding=", encodeURIComponent(this.settings.button_text_top_padding),
			    "&amp;buttonTextLeftPadding=", encodeURIComponent(this.settings.button_text_left_padding),
			    "&amp;buttonTextStyle=", encodeURIComponent(this.settings.button_text_style),
			    "&amp;buttonAction=", encodeURIComponent(this.settings.button_action),
			    "&amp;buttonDisabled=", encodeURIComponent(this.settings.button_disabled),
			    "&amp;buttonCursor=", encodeURIComponent(this.settings.button_cursor)
		    ].join("");
    };

    // Public: getMovieElement retrieves the DOM reference to the Flash element added by SWFUpload
    // The element is cached after the first lookup
    SWFUpload.prototype.getMovieElement = function () {
	    if (this.movieElement == undefined) {
		    this.movieElement = document.getElementById(this.movieName);
	    }

	    if (this.movieElement === null) {
		    throw "Could not find Flash element";
	    }
    	
	    return this.movieElement;
    };

    // Private: buildParamString takes the name/value pairs in the post_params setting object
    // and joins them up in to a string formatted "name=value&amp;name=value"
    SWFUpload.prototype.buildParamString = function () {
	    var postParams = this.settings.post_params; 
	    var paramStringPairs = [];

	    if (typeof(postParams) === "object") {
		    for (var name in postParams) {
			    if (postParams.hasOwnProperty(name)) {
				    paramStringPairs.push(encodeURIComponent(name.toString()) + "=" + encodeURIComponent(postParams[name].toString()));
			    }
		    }
	    }

	    return paramStringPairs.join("&amp;");
    };

    // Public: Used to remove a SWFUpload instance from the page. This method strives to remove
    // all references to the SWF, and other objects so memory is properly freed.
    // Returns true if everything was destroyed. Returns a false if a failure occurs leaving SWFUpload in an inconsistant state.
    // Credits: Major improvements provided by steffen
    SWFUpload.prototype.destroy = function () {
	    try {
		    // Make sure Flash is done before we try to remove it
		    this.cancelUpload(null, false);
    		

		    // Remove the SWFUpload DOM nodes
		    var movieElement = null;
		    movieElement = this.getMovieElement();
    		
		    if (movieElement && typeof(movieElement.CallFunction) === "unknown") { // We only want to do this in IE
			    // Loop through all the movie's properties and remove all function references (DOM/JS IE 6/7 memory leak workaround)
			    for (var i in movieElement) {
				    try {
					    if (typeof(movieElement[i]) === "function") {
						    movieElement[i] = null;
					    }
				    } catch (ex1) {}
			    }

			    // Remove the Movie Element from the page
			    try {
				    movieElement.parentNode.removeChild(movieElement);
			    } catch (ex) {}
		    }
    		
		    // Remove IE form fix reference
		    window[this.movieName] = null;

		    // Destroy other references
		    SWFUpload.instances[this.movieName] = null;
		    delete SWFUpload.instances[this.movieName];

		    this.movieElement = null;
		    this.settings = null;
		    this.customSettings = null;
		    this.eventQueue = null;
		    this.movieName = null;
    		
    		
		    return true;
	    } catch (ex2) {
		    return false;
	    }
    };


    // Public: displayDebugInfo prints out settings and configuration
    // information about this SWFUpload instance.
    // This function (and any references to it) can be deleted when placing
    // SWFUpload in production.
    SWFUpload.prototype.displayDebugInfo = function () {
	    this.debug(
		    [
			    "---SWFUpload Instance Info---\n",
			    "Version: ", SWFUpload.version, "\n",
			    "Movie Name: ", this.movieName, "\n",
			    "Settings:\n",
			    "\t", "upload_url:               ", this.settings.upload_url, "\n",
			    "\t", "flash_url:                ", this.settings.flash_url, "\n",
			    "\t", "use_query_string:         ", this.settings.use_query_string.toString(), "\n",
			    "\t", "requeue_on_error:         ", this.settings.requeue_on_error.toString(), "\n",
			    "\t", "http_success:             ", this.settings.http_success.join(", "), "\n",
			    "\t", "assume_success_timeout:   ", this.settings.assume_success_timeout, "\n",
			    "\t", "file_post_name:           ", this.settings.file_post_name, "\n",
			    "\t", "post_params:              ", this.settings.post_params.toString(), "\n",
			    "\t", "file_types:               ", this.settings.file_types, "\n",
			    "\t", "file_types_description:   ", this.settings.file_types_description, "\n",
			    "\t", "file_size_limit:          ", this.settings.file_size_limit, "\n",
			    "\t", "file_upload_limit:        ", this.settings.file_upload_limit, "\n",
			    "\t", "file_queue_limit:         ", this.settings.file_queue_limit, "\n",
			    "\t", "debug:                    ", this.settings.debug.toString(), "\n",

			    "\t", "prevent_swf_caching:      ", this.settings.prevent_swf_caching.toString(), "\n",

			    "\t", "button_placeholder_id:    ", this.settings.button_placeholder_id.toString(), "\n",
			    "\t", "button_placeholder:       ", (this.settings.button_placeholder ? "Set" : "Not Set"), "\n",
			    "\t", "button_image_url:         ", this.settings.button_image_url.toString(), "\n",
			    "\t", "button_width:             ", this.settings.button_width.toString(), "\n",
			    "\t", "button_height:            ", this.settings.button_height.toString(), "\n",
			    "\t", "button_text:              ", this.settings.button_text.toString(), "\n",
			    "\t", "button_text_style:        ", this.settings.button_text_style.toString(), "\n",
			    "\t", "button_text_top_padding:  ", this.settings.button_text_top_padding.toString(), "\n",
			    "\t", "button_text_left_padding: ", this.settings.button_text_left_padding.toString(), "\n",
			    "\t", "button_action:            ", this.settings.button_action.toString(), "\n",
			    "\t", "button_disabled:          ", this.settings.button_disabled.toString(), "\n",

			    "\t", "custom_settings:          ", this.settings.custom_settings.toString(), "\n",
			    "Event Handlers:\n",
			    "\t", "swfupload_loaded_handler assigned:  ", (typeof this.settings.swfupload_loaded_handler === "function").toString(), "\n",
			    "\t", "file_dialog_start_handler assigned: ", (typeof this.settings.file_dialog_start_handler === "function").toString(), "\n",
			    "\t", "file_queued_handler assigned:       ", (typeof this.settings.file_queued_handler === "function").toString(), "\n",
			    "\t", "file_queue_error_handler assigned:  ", (typeof this.settings.file_queue_error_handler === "function").toString(), "\n",
			    "\t", "upload_start_handler assigned:      ", (typeof this.settings.upload_start_handler === "function").toString(), "\n",
			    "\t", "upload_progress_handler assigned:   ", (typeof this.settings.upload_progress_handler === "function").toString(), "\n",
			    "\t", "upload_error_handler assigned:      ", (typeof this.settings.upload_error_handler === "function").toString(), "\n",
			    "\t", "upload_success_handler assigned:    ", (typeof this.settings.upload_success_handler === "function").toString(), "\n",
			    "\t", "upload_complete_handler assigned:   ", (typeof this.settings.upload_complete_handler === "function").toString(), "\n",
			    "\t", "debug_handler assigned:             ", (typeof this.settings.debug_handler === "function").toString(), "\n"
		    ].join("")
	    );
    };

    /* Note: addSetting and getSetting are no longer used by SWFUpload but are included
	    the maintain v2 API compatibility
    */
    // Public: (Deprecated) addSetting adds a setting value. If the value given is undefined or null then the default_value is used.
    SWFUpload.prototype.addSetting = function (name, value, default_value) {
        if (value == undefined) {
            return (this.settings[name] = default_value);
        } else {
            return (this.settings[name] = value);
	    }
    };

    // Public: (Deprecated) getSetting gets a setting. Returns an empty string if the setting was not found.
    SWFUpload.prototype.getSetting = function (name) {
        if (this.settings[name] != undefined) {
            return this.settings[name];
	    }

        return "";
    };



    // Private: callFlash handles function calls made to the Flash element.
    // Calls are made with a setTimeout for some functions to work around
    // bugs in the ExternalInterface library.
    SWFUpload.prototype.callFlash = function (functionName, argumentArray) {
	    argumentArray = argumentArray || [];
    	
	    var movieElement = this.getMovieElement();
	    var returnValue, returnString;

	    // Flash's method if calling ExternalInterface methods (code adapted from MooTools).
	    try {
		    returnString = movieElement.CallFunction('<invoke name="' + functionName + '" returntype="javascript">' + __flash__argumentsToXML(argumentArray, 0) + '</invoke>');
		    returnValue = eval(returnString);
	    } catch (ex) {
		    throw "Call to " + functionName + " failed";
	    }
    	
	    // Unescape file post param values
	    if (returnValue != undefined && typeof returnValue.post === "object") {
		    returnValue = this.unescapeFilePostParams(returnValue);
	    }

	    return returnValue;
    };

    /* *****************************
	    -- Flash control methods --
	    Your UI should use these
	    to operate SWFUpload
       ***************************** */

    // WARNING: this function does not work in Flash Player 10
    // Public: selectFile causes a File Selection Dialog window to appear.  This
    // dialog only allows 1 file to be selected.
    SWFUpload.prototype.selectFile = function () {
	    this.callFlash("SelectFile");
    };

    // WARNING: this function does not work in Flash Player 10
    // Public: selectFiles causes a File Selection Dialog window to appear/ This
    // dialog allows the user to select any number of files
    // Flash Bug Warning: Flash limits the number of selectable files based on the combined length of the file names.
    // If the selection name length is too long the dialog will fail in an unpredictable manner.  There is no work-around
    // for this bug.
    SWFUpload.prototype.selectFiles = function () {
	    this.callFlash("SelectFiles");
    };


    // Public: startUpload starts uploading the first file in the queue unless
    // the optional parameter 'fileID' specifies the ID 
    SWFUpload.prototype.startUpload = function (fileID) {
	    this.callFlash("StartUpload", [fileID]);
    };

    // Public: cancelUpload cancels any queued file.  The fileID parameter may be the file ID or index.
    // If you do not specify a fileID the current uploading file or first file in the queue is cancelled.
    // If you do not want the uploadError event to trigger you can specify false for the triggerErrorEvent parameter.
    SWFUpload.prototype.cancelUpload = function (fileID, triggerErrorEvent) {
	    if (triggerErrorEvent !== false) {
		    triggerErrorEvent = true;
	    }
	    this.callFlash("CancelUpload", [fileID, triggerErrorEvent]);
    };

    // Public: stopUpload stops the current upload and requeues the file at the beginning of the queue.
    // If nothing is currently uploading then nothing happens.
    SWFUpload.prototype.stopUpload = function () {
	    this.callFlash("StopUpload");
    };

    /* ************************
     * Settings methods
     *   These methods change the SWFUpload settings.
     *   SWFUpload settings should not be changed directly on the settings object
     *   since many of the settings need to be passed to Flash in order to take
     *   effect.
     * *********************** */

    // Public: getStats gets the file statistics object.
    SWFUpload.prototype.getStats = function () {
	    return this.callFlash("GetStats");
    };

    // Public: setStats changes the SWFUpload statistics.  You shouldn't need to 
    // change the statistics but you can.  Changing the statistics does not
    // affect SWFUpload accept for the successful_uploads count which is used
    // by the upload_limit setting to determine how many files the user may upload.
    SWFUpload.prototype.setStats = function (statsObject) {
	    this.callFlash("SetStats", [statsObject]);
    };

    // Public: getFile retrieves a File object by ID or Index.  If the file is
    // not found then 'null' is returned.
    SWFUpload.prototype.getFile = function (fileID) {
	    if (typeof(fileID) === "number") {
		    return this.callFlash("GetFileByIndex", [fileID]);
	    } else {
		    return this.callFlash("GetFile", [fileID]);
	    }
    };

    // Public: addFileParam sets a name/value pair that will be posted with the
    // file specified by the Files ID.  If the name already exists then the
    // exiting value will be overwritten.
    SWFUpload.prototype.addFileParam = function (fileID, name, value) {
	    return this.callFlash("AddFileParam", [fileID, name, value]);
    };

    // Public: removeFileParam removes a previously set (by addFileParam) name/value
    // pair from the specified file.
    SWFUpload.prototype.removeFileParam = function (fileID, name) {
	    this.callFlash("RemoveFileParam", [fileID, name]);
    };

    // Public: setUploadUrl changes the upload_url setting.
    SWFUpload.prototype.setUploadURL = function (url) {
	    this.settings.upload_url = url.toString();
	    this.callFlash("SetUploadURL", [url]);
    };

    // Public: setPostParams changes the post_params setting
    SWFUpload.prototype.setPostParams = function (paramsObject) {
	    this.settings.post_params = paramsObject;
	    this.callFlash("SetPostParams", [paramsObject]);
    };

    // Public: addPostParam adds post name/value pair.  Each name can have only one value.
    SWFUpload.prototype.addPostParam = function (name, value) {
	    this.settings.post_params[name] = value;
	    this.callFlash("SetPostParams", [this.settings.post_params]);
    };

    // Public: removePostParam deletes post name/value pair.
    SWFUpload.prototype.removePostParam = function (name) {
	    delete this.settings.post_params[name];
	    this.callFlash("SetPostParams", [this.settings.post_params]);
    };

    // Public: setFileTypes changes the file_types setting and the file_types_description setting
    SWFUpload.prototype.setFileTypes = function (types, description) {
	    this.settings.file_types = types;
	    this.settings.file_types_description = description;
	    this.callFlash("SetFileTypes", [types, description]);
    };

    // Public: setFileSizeLimit changes the file_size_limit setting
    SWFUpload.prototype.setFileSizeLimit = function (fileSizeLimit) {
	    this.settings.file_size_limit = fileSizeLimit;
	    this.callFlash("SetFileSizeLimit", [fileSizeLimit]);
    };

    // Public: setFileUploadLimit changes the file_upload_limit setting
    SWFUpload.prototype.setFileUploadLimit = function (fileUploadLimit) {
	    this.settings.file_upload_limit = fileUploadLimit;
	    this.callFlash("SetFileUploadLimit", [fileUploadLimit]);
    };

    // Public: setFileQueueLimit changes the file_queue_limit setting
    SWFUpload.prototype.setFileQueueLimit = function (fileQueueLimit) {
	    this.settings.file_queue_limit = fileQueueLimit;
	    this.callFlash("SetFileQueueLimit", [fileQueueLimit]);
    };

    // Public: setFilePostName changes the file_post_name setting
    SWFUpload.prototype.setFilePostName = function (filePostName) {
	    this.settings.file_post_name = filePostName;
	    this.callFlash("SetFilePostName", [filePostName]);
    };

    // Public: setUseQueryString changes the use_query_string setting
    SWFUpload.prototype.setUseQueryString = function (useQueryString) {
	    this.settings.use_query_string = useQueryString;
	    this.callFlash("SetUseQueryString", [useQueryString]);
    };

    // Public: setRequeueOnError changes the requeue_on_error setting
    SWFUpload.prototype.setRequeueOnError = function (requeueOnError) {
	    this.settings.requeue_on_error = requeueOnError;
	    this.callFlash("SetRequeueOnError", [requeueOnError]);
    };

    // Public: setHTTPSuccess changes the http_success setting
    SWFUpload.prototype.setHTTPSuccess = function (http_status_codes) {
	    if (typeof http_status_codes === "string") {
		    http_status_codes = http_status_codes.replace(" ", "").split(",");
	    }
    	
	    this.settings.http_success = http_status_codes;
	    this.callFlash("SetHTTPSuccess", [http_status_codes]);
    };

    // Public: setHTTPSuccess changes the http_success setting
    SWFUpload.prototype.setAssumeSuccessTimeout = function (timeout_seconds) {
	    this.settings.assume_success_timeout = timeout_seconds;
	    this.callFlash("SetAssumeSuccessTimeout", [timeout_seconds]);
    };

    // Public: setDebugEnabled changes the debug_enabled setting
    SWFUpload.prototype.setDebugEnabled = function (debugEnabled) {
	    this.settings.debug_enabled = debugEnabled;
	    this.callFlash("SetDebugEnabled", [debugEnabled]);
    };

    // Public: setButtonImageURL loads a button image sprite
    SWFUpload.prototype.setButtonImageURL = function (buttonImageURL) {
	    if (buttonImageURL == undefined) {
		    buttonImageURL = "";
	    }
    	
	    this.settings.button_image_url = buttonImageURL;
	    this.callFlash("SetButtonImageURL", [buttonImageURL]);
    };

    // Public: setButtonDimensions resizes the Flash Movie and button
    SWFUpload.prototype.setButtonDimensions = function (width, height) {
	    this.settings.button_width = width;
	    this.settings.button_height = height;
    	
	    var movie = this.getMovieElement();
	    if (movie != undefined) {
		    movie.style.width = width + "px";
		    movie.style.height = height + "px";
	    }
    	
	    this.callFlash("SetButtonDimensions", [width, height]);
    };
    // Public: setButtonText Changes the text overlaid on the button
    SWFUpload.prototype.setButtonText = function (html) {
	    this.settings.button_text = html;
	    this.callFlash("SetButtonText", [html]);
    };
    // Public: setButtonTextPadding changes the top and left padding of the text overlay
    SWFUpload.prototype.setButtonTextPadding = function (left, top) {
	    this.settings.button_text_top_padding = top;
	    this.settings.button_text_left_padding = left;
	    this.callFlash("SetButtonTextPadding", [left, top]);
    };

    // Public: setButtonTextStyle changes the CSS used to style the HTML/Text overlaid on the button
    SWFUpload.prototype.setButtonTextStyle = function (css) {
	    this.settings.button_text_style = css;
	    this.callFlash("SetButtonTextStyle", [css]);
    };
    // Public: setButtonDisabled disables/enables the button
    SWFUpload.prototype.setButtonDisabled = function (isDisabled) {
	    this.settings.button_disabled = isDisabled;
	    this.callFlash("SetButtonDisabled", [isDisabled]);
    };
    // Public: setButtonAction sets the action that occurs when the button is clicked
    SWFUpload.prototype.setButtonAction = function (buttonAction) {
	    this.settings.button_action = buttonAction;
	    this.callFlash("SetButtonAction", [buttonAction]);
    };

    // Public: setButtonCursor changes the mouse cursor displayed when hovering over the button
    SWFUpload.prototype.setButtonCursor = function (cursor) {
	    this.settings.button_cursor = cursor;
	    this.callFlash("SetButtonCursor", [cursor]);
    };

    /* *******************************
	    Flash Event Interfaces
	    These functions are used by Flash to trigger the various
	    events.
    	
	    All these functions a Private.
    	
	    Because the ExternalInterface library is buggy the event calls
	    are added to a queue and the queue then executed by a setTimeout.
	    This ensures that events are executed in a determinate order and that
	    the ExternalInterface bugs are avoided.
    ******************************* */

    SWFUpload.prototype.queueEvent = function (handlerName, argumentArray) {
	    // Warning: Don't call this.debug inside here or you'll create an infinite loop
    	
	    if (argumentArray == undefined) {
		    argumentArray = [];
	    } else if (!(argumentArray instanceof Array)) {
		    argumentArray = [argumentArray];
	    }
    	
	    var self = this;
	    if (typeof this.settings[handlerName] === "function") {
		    // Queue the event
		    this.eventQueue.push(function () {
			    this.settings[handlerName].apply(this, argumentArray);
		    });
    		
		    // Execute the next queued event
		    setTimeout(function () {
			    self.executeNextEvent();
		    }, 0);
    		
	    } else if (this.settings[handlerName] !== null) {
		    throw "Event handler " + handlerName + " is unknown or is not a function";
	    }
    };

    // Private: Causes the next event in the queue to be executed.  Since events are queued using a setTimeout
    // we must queue them in order to garentee that they are executed in order.
    SWFUpload.prototype.executeNextEvent = function () {
	    // Warning: Don't call this.debug inside here or you'll create an infinite loop

	    var  f = this.eventQueue ? this.eventQueue.shift() : null;
	    if (typeof(f) === "function") {
		    f.apply(this);
	    }
    };

    // Private: unescapeFileParams is part of a workaround for a flash bug where objects passed through ExternalInterface cannot have
    // properties that contain characters that are not valid for JavaScript identifiers. To work around this
    // the Flash Component escapes the parameter names and we must unescape again before passing them along.
    SWFUpload.prototype.unescapeFilePostParams = function (file) {
	    var reg = /[$]([0-9a-f]{4})/i;
	    var unescapedPost = {};
	    var uk;

	    if (file != undefined) {
		    for (var k in file.post) {
			    if (file.post.hasOwnProperty(k)) {
				    uk = k;
				    var match;
				    while ((match = reg.exec(uk)) !== null) {
					    uk = uk.replace(match[0], String.fromCharCode(parseInt("0x" + match[1], 16)));
				    }
				    unescapedPost[uk] = file.post[k];
			    }
		    }

		    file.post = unescapedPost;
	    }

	    return file;
    };

    // Private: Called by Flash to see if JS can call in to Flash (test if External Interface is working)
    SWFUpload.prototype.testExternalInterface = function () {
	    try {
		    return this.callFlash("TestExternalInterface");
	    } catch (ex) {
		    return false;
	    }
    };

    // Private: This event is called by Flash when it has finished loading. Don't modify this.
    // Use the swfupload_loaded_handler event setting to execute custom code when SWFUpload has loaded.
    SWFUpload.prototype.flashReady = function () {
	    // Check that the movie element is loaded correctly with its ExternalInterface methods defined
	    var movieElement = this.getMovieElement();

	    if (!movieElement) {
		    this.debug("Flash called back ready but the flash movie can't be found.");
		    return;
	    }

	    this.cleanUp(movieElement);
    	
	    this.queueEvent("swfupload_loaded_handler");
    };

    // Private: removes Flash added fuctions to the DOM node to prevent memory leaks in IE.
    // This function is called by Flash each time the ExternalInterface functions are created.
    SWFUpload.prototype.cleanUp = function (movieElement) {
	    // Pro-actively unhook all the Flash functions
	    try {
		    if (this.movieElement && typeof(movieElement.CallFunction) === "unknown") { // We only want to do this in IE
			    this.debug("Removing Flash functions hooks (this should only run in IE and should prevent memory leaks)");
			    for (var key in movieElement) {
				    try {
					    if (typeof(movieElement[key]) === "function") {
						    movieElement[key] = null;
					    }
				    } catch (ex) {
				    }
			    }
		    }
	    } catch (ex1) {
    	
	    }

	    // Fix Flashes own cleanup code so if the SWFMovie was removed from the page
	    // it doesn't display errors.
	    window["__flash__removeCallback"] = function (instance, name) {
		    try {
			    if (instance) {
				    instance[name] = null;
			    }
		    } catch (flashEx) {
    		
		    }
	    };

    };


    /* This is a chance to do something before the browse window opens */
    SWFUpload.prototype.fileDialogStart = function () {
	    this.queueEvent("file_dialog_start_handler");
    };


    /* Called when a file is successfully added to the queue. */
    SWFUpload.prototype.fileQueued = function (file) {
	    file = this.unescapeFilePostParams(file);
	    this.queueEvent("file_queued_handler", file);
    };


    /* Handle errors that occur when an attempt to queue a file fails. */
    SWFUpload.prototype.fileQueueError = function (file, errorCode, message) {
	    file = this.unescapeFilePostParams(file);
	    this.queueEvent("file_queue_error_handler", [file, errorCode, message]);
    };

    /* Called after the file dialog has closed and the selected files have been queued.
	    You could call startUpload here if you want the queued files to begin uploading immediately. */
    SWFUpload.prototype.fileDialogComplete = function (numFilesSelected, numFilesQueued, numFilesInQueue) {
	    this.queueEvent("file_dialog_complete_handler", [numFilesSelected, numFilesQueued, numFilesInQueue]);
    };

    SWFUpload.prototype.uploadStart = function (file) {
	    file = this.unescapeFilePostParams(file);
	    this.queueEvent("return_upload_start_handler", file);
    };

    SWFUpload.prototype.returnUploadStart = function (file) {
	    var returnValue;
	    if (typeof this.settings.upload_start_handler === "function") {
		    file = this.unescapeFilePostParams(file);
		    returnValue = this.settings.upload_start_handler.call(this, file);
	    } else if (this.settings.upload_start_handler != undefined) {
		    throw "upload_start_handler must be a function";
	    }

	    // Convert undefined to true so if nothing is returned from the upload_start_handler it is
	    // interpretted as 'true'.
	    if (returnValue === undefined) {
		    returnValue = true;
	    }
    	
	    returnValue = !!returnValue;
    	
	    this.callFlash("ReturnUploadStart", [returnValue]);
    };



    SWFUpload.prototype.uploadProgress = function (file, bytesComplete, bytesTotal) {
	    file = this.unescapeFilePostParams(file);
	    this.queueEvent("upload_progress_handler", [file, bytesComplete, bytesTotal]);
    };

    SWFUpload.prototype.uploadError = function (file, errorCode, message) {
	    file = this.unescapeFilePostParams(file);
	    this.queueEvent("upload_error_handler", [file, errorCode, message]);
    };

    SWFUpload.prototype.uploadSuccess = function (file, serverData, responseReceived) {
	    file = this.unescapeFilePostParams(file);
	    this.queueEvent("upload_success_handler", [file, serverData, responseReceived]);
    };

    SWFUpload.prototype.uploadComplete = function (file) {
	    file = this.unescapeFilePostParams(file);
	    this.queueEvent("upload_complete_handler", file);
    };

    /* Called by SWFUpload JavaScript and Flash functions when debug is enabled. By default it writes messages to the
       internal debug console.  You can override this event and have messages written where you want. */
    SWFUpload.prototype.debug = function (message) {
	    this.queueEvent("debug_handler", message);
    };


    /* **********************************
	    Debug Console
	    The debug console is a self contained, in page location
	    for debug message to be sent.  The Debug Console adds
	    itself to the body if necessary.

	    The console is automatically scrolled as messages appear.
    	
	    If you are using your own debug handler or when you deploy to production and
	    have debug disabled you can remove these functions to reduce the file size
	    and complexity.
    ********************************** */
       
    // Private: debugMessage is the default debug_handler.  If you want to print debug messages
    // call the debug() function.  When overriding the function your own function should
    // check to see if the debug setting is true before outputting debug information.
    SWFUpload.prototype.debugMessage = function (message) {
	    if (this.settings.debug) {
		    var exceptionMessage, exceptionValues = [];

		    // Check for an exception object and print it nicely
		    if (typeof message === "object" && typeof message.name === "string" && typeof message.message === "string") {
			    for (var key in message) {
				    if (message.hasOwnProperty(key)) {
					    exceptionValues.push(key + ": " + message[key]);
				    }
			    }
			    exceptionMessage = exceptionValues.join("\n") || "";
			    exceptionValues = exceptionMessage.split("\n");
			    exceptionMessage = "EXCEPTION: " + exceptionValues.join("\nEXCEPTION: ");
			    SWFUpload.Console.writeLine(exceptionMessage);
		    } else {
			    SWFUpload.Console.writeLine(message);
		    }
	    }
    };

    SWFUpload.Console = {};
    SWFUpload.Console.writeLine = function (message) {
	    var console, documentForm;

	    try {
		    console = document.getElementById("SWFUpload_Console");

		    if (!console) {
			    documentForm = document.createElement("form");
			    document.getElementsByTagName("body")[0].appendChild(documentForm);

			    console = document.createElement("textarea");
			    console.id = "SWFUpload_Console";
			    console.style.fontFamily = "monospace";
			    console.setAttribute("wrap", "off");
			    console.wrap = "off";
			    console.style.overflow = "auto";
			    console.style.width = "700px";
			    console.style.height = "350px";
			    console.style.margin = "5px";
			    documentForm.appendChild(console);
		    }

		    console.value += message + "\n";

		    console.scrollTop = console.scrollHeight - console.clientHeight;
	    } catch (ex) {
		    alert("Exception: " + ex.name + " Message: " + ex.message);
	    }
    };
    //源代码结束
    
    //保存在全局变量中
    window.SWFUpload= SWFUpload;
    return new window.SWFUpload(option);
 }
function $timeCountDown(obj){
//商品倒计时器，参数：输出时间字符串的dom，开始时间（单位毫秒）,结束时间,当前状态（默认为2才会计算）
	var option={
		dom:"",
		endTime:(new Date()).getTime(),
		startTime:(new Date()).getTime(),
		state:2		//默认在售
	};
	for(var i in obj){
		option[i]=obj[i];
	}
	switch(parseInt(option.state)){
		case 2:
			var str=$getTimeInterval(option.startTime,option.endTime);
			if(str){
				option.startTime+=1000;
				setTimeout(function(){$timeCountDown(option);},1000);
			}else{
				var str="成交结束";
			}
			break;
		case 4:
			var str="即将开始";
			break;
		default:
			var str="成交结束";
			break
	}
	option.dom.innerHTML=str;
}
function $timeStrToArr(str) {
        str = str ? str : '';
        //str = str.replace(/0*$/, '');
        var start = 0, end = 0;
        var hlist = [];
        for (var i = 0, len=7; i < len; i++) {
            hlist.push([]);
        };
    
        var curpos = 0;
        var hst = 0;
        var f = function(start, end) {
            start = ( (start - 1) % 48) / 2;
            end = ((end -1) % 48 + 1) / 2;
            var o = {'start': start, 'end': end};
            return o;
        }
        for(var i=0, len=str.length; i<len; i++) {
            var v = str.slice(i, i+1);
            if(v == 1 && start == 0 ) {
                start = end = i+1;
                continue;
            }
    
            if(v == 1 && start !=0 ) {
                end = i+1;
            }
             //终结一次: 遇到0 ， 最后一个数0, 逢48
            if((v == 0 && start !=0) || (i== (len-1) && start != 0) || ((i+1)%48 == 0 && start!=0) ) {
                //var pos = ((i+1)%48 == 0 && curpos<6) ? curpos - 1 : curpos;
                var pos = parseInt((start-1)/48);
                hlist[pos].push(f(start, end));
                start = 0, end=0;
                continue;
            }
        }
        // 最后一个数为1但是长度不为336的情况,
        if(start !=0) {
            var pos = parseInt((start-1)/48);
            hlist[pos].push(f(start, end));
        }
        return hlist;
    }
function $tips(obj){
	var option={
		title:"",
		html:"",
		left:"",
		top:"",
		fix:false,	//是否固定居中随屏幕滚动，如果为true则left和top无效
		style:"stand",	//stand\none\poptip
		cover:true,	//显示覆盖背景
		onClose:function(){return true;}	//关闭事件
	};
	for(var i in obj){
		option[i]=obj[i];
	}
	//关闭掉类似窗口
	if(window._tipsHandle){
		try{window._tipsHandle.close();window._tipsHandle="";}catch(e){}
	}
	//处理覆盖的半透明背景
	if(option.cover){
		var c=document.createElement("div");
		c.id="coverbg";
		c.style.display="none";
		c.style.width="0px";
		c.style.height="0px";
		c.style.backgroundColor ="#cccccc";
		c.style.filter="Alpha(Opacity=60)";
		c.style.opacity="0.40";
		c.style.zindex="3";
		c.style.position="absolute";
		c.style.left="0px";
		c.style.top="0px";
		document.body.appendChild(c);
		var slist=document.getElementsByTagName("select");
		for(var i=0;i<slist.length;i++){
			if(slist[i].style.display!="none"){
				slist[i].style.display="none";
				slist[i].setAttribute("hideForCover","1");
			}
		}
		(function(){
			var c=$id("coverbg");
			if(!c){
				return;
			}
			if(c.style.display=="none"){
				return;
			}else{
				var h=(document.body.scrollHeight>document.body.offsetHeight)?document.body.scrollHeight:document.body.clientHeight;
				var w=(document.body.scrollWidth>document.body.clientWidth)?document.body.scrollWidth:document.body.clientWidth;
				c.style.height=document.body.scrollHeight+"px";
				c.style.width=document.body.scrollWidth+"px";
				c.style.position="absolute";
				c.style.left="0px";
				c.style.top="0px";
			}
		}).runEach(50);
		c.style.display="block";
		option.coverbg=c;
	}
	//显示可用框架
	//根据样式输出不同模板，目前只支持stand,none
	if(option.style=="stand"){
		var c=document.createElement("div");
		c.id='float_box1';
		c.className='box1';
		c.style.position="absolute";
		c.style.left="0px";
		c.style.top="0px";
		c.innerHTML='<h4><a onclick="" href="#nolink" id="float_closer"></a><span>'+option.title+'<span></h4><div class="bcontent" id="float_content">'+option.html+'</div>';
		document.body.appendChild(c);
		//返回操作句柄
		option.frame=c;
		option.closer=$id("float_closer");
	}
	//根据样式输出不同模板，目前只支持stand,none
	if(option.style=="none"){
		var c=document.createElement("div");
		c.id='float_box2';
		c.className='box2';
		c.style.position="absolute";
		c.style.left="0px";
		c.style.top="0px";
		c.innerHTML=option.html;
		document.body.appendChild(c);
		//返回操作句柄
		option.frame=c;
	}
	//用于收藏提示的
	if(option.style=="poptip"){
		var c=document.createElement("div");
		c.id='float_box1';
		c.className='boxfavorites';
		c.style.position="absolute";
		c.style.left="0px";
		c.style.top="0px";
		c.innerHTML='<h4><a onclick="" href="#nolink" id="float_closer"></a><span>'+option.title+'<span></h4><div class="bcontent" id="float_content">'+option.html+'</div>';
		document.body.appendChild(c);
		//返回操作句柄
		option.frame=c;
		option.closer=$id("float_closer");
	}
	//窗口定位，如果没有指定坐标则居中
	if(option.left!="" && option.top!=""){
		option.frame.style.left=option.left+"px";
		option.frame.style.top=option.top+"px";
	}else{
		option.frame.style.left=Number(document.documentElement.scrollLeft)+(Number(document.documentElement.clientWidth)-Number(option.frame.scrollWidth))/2+"px";
		option.frame.style.top=Number(document.documentElement.scrollTop)+(Number(document.documentElement.clientHeight)-Number(option.frame.scrollHeight))/2+"px";
	}
	//如果是fix则随屏幕滚动
	if(option.fix){
		if(navigator.appVersion.split(";")[1].replace(/[ ]/g,"")=="MSIE6.0"){
			(function(){
				if(!option.frame){
					return;
				}
				option.frame.style.left=Number(document.documentElement.scrollLeft)+(Number(document.documentElement.clientWidth)-Number(option.frame.scrollWidth))/2+"px";
				option.frame.style.top=Number(document.documentElement.scrollTop)+(Number(document.documentElement.clientHeight)-Number(option.frame.scrollHeight))/2+"px";
			}).runEach(50);
		}else{
			option.frame.style.position="fixed";
			option.frame.style.zindex="300";
			option.frame.style.left=(Number(document.documentElement.clientWidth)-Number(option.frame.scrollWidth))/2+"px";
			option.frame.style.top=(Number(document.documentElement.clientHeight)-Number(option.frame.scrollHeight))/2+"px";
		}
	}
	//绑定关闭按钮的事件
	if(option.closer){
		option.closer.onclick=function(){
			try{
				if(!option.onClose()){
					return;
				}
			}catch(e){}
			option.close();
		};
	}
	//关闭方法
	option.close=function(){
		option.frame.parentNode.removeChild(option.frame);
		if(option.cover){
			option.coverbg.parentNode.removeChild($id("coverbg"));
			var slist=document.getElementsByTagName("select");
			for(var i=0;i<slist.length;i++){
				if(slist[i].getAttribute("hideForCover")=="1"){
					slist[i].style.display="";
				}
			}
		}
		delete option;
	};
	window._tipsHandle=option;
	return option;
}
//显示黄色浮动提示条
function $titleTip(opt){
	//写入默认参数
	var option = $extend({
		title:'',
		content:'',
		height:200,
		width:50,
		left:'0',
		top:'0',
		autoShow:false,//是否立即展示，默认不展示。
		hover:true,//是否针对页面上指定的元素(hoverDom参数)绑定hover效果，滑过显示，滑离消失（指定hoverDom时有效）
		hoverDom: null,//hover效果绑定的事件源
		type:'0',
		zIndex:20
	}, opt);
	//黄条对象
	var Handler = window._showTipHandle;
	if(!Handler){
		Handler = {};
		var c=document.createElement("div");
		//样式处理：
		$extend(c.style, {
			display:"",
			opacity:1,
			position:"absolute",
			left:0,
			top:0,
			zIndex: option.zIndex
		});
		//元素的基本属性
		var cls = (option.type=="0")?"hover_tips_ztb":"hover_tips_zt";
		$extend(c, {
			className: "hover_tips",
			//id: "hoverTips",
			//innerHTML: '<span class="'+ cls +'" id="hover_tips_ztb" style="left:25px"></span><div class="hover_tips_cont"><strong id="hoverTips_title"></strong><div id="hoverTips_content" style="display:block;overflow:hidden;"></div></div>'
			innerHTML: '<span class="'+ cls +'" tag="hover_tips_ztb" style="left:25px"></span><div class="hover_tips_cont"><strong tag="hoverTips_title"></strong><div tag="hoverTips_content" style="display:block;overflow:hidden;"></div></div>'
		});
		//加到文档树中
		document.body.appendChild(c);
		//Handler.dom = document.getElementById("hoverTips");
		$extend(Handler, {
			dom:c,
			ztb:$find("[tag=hover_tips_ztb]", c)[0],
			content:$find("[tag=hoverTips_content]", c)[0],
			title: $find("[tag=hoverTips_title]", c)[0]
		});
		if(option.hover && option.hoverDom){
			option.hoverDom.onmouseover = function(e){
				ShowFn();
				return false;
			}
			option.hoverDom.onmouseout = function(){
				CloseFn();
				return false;
			}
		}
	}
	//重设各个元素的innerHTML和样式等
	Handler.title.innerHTML = option.title;
	Handler.content.innerHTML = option.content;
	(option.height!=0) && (Handler.content.style.height=option.height+"px");
	Handler.content.style.width=option.width+"px";
	Handler.dom.style.display=option.autoShow?"":"none";
	Handler.dom.style.opacity=1;
	Handler.dom.style.left=(option.left)+"px";
	Handler.dom.style.top=(option.top)+"px";
	Handler.ztb.style.left="25px";
	
	//防止溢出
	var pos = {
		x: parseInt(option.left, 10),
		y: parseInt(option.top, 10)
	};
	//超出右侧
	//leftOut = (pos.x + Handler.dom.scrollWidth - $getPageScrollWidth() - $getWindowWidth());
	//if(leftOut>0){
		//Handler.dom.style.left=(1024-option.width)+"px";
		//Handler.ztb.style.left=(25+leftOut)+"px";
	//}
	//抛出来的方法和属性
	var s = Handler.dom.style;
	return {
		"close": CloseFn,
		"show" : ShowFn,
		"dom" : Handler.dom
	};
	
	//显示tips:
	function ShowFn(){
		if(Handler.timer){
			window.clearInterval(Handler.timer);
		}
		s.opacity=1;
		s.display="";
	}
	//关闭tips：
	function CloseFn(){
		if(Handler.timer){
			window.clearInterval(Handler.timer);
		}
		Handler.timer=setInterval(function(){
			if(s.opacity>0){	
				if((s.opacity-=0.1)<0.1){
					s.opacity=0;
				}
			}else{
				window.clearInterval(Handler.timer);
				s.opacity=0;
				s.display="none";
			}
		},30);
	}
}
function $transmit(config){
  var opt={
    cname:"",//商品名|店铺名|活动名
    cid:"",//商品id|店铺id|活动id（多条用","间隔）
    uid:"",//转发人的QQ号码
    left:0,
    top:0,
    stype:1,//纯文本1|商品2|店铺3|活动4
    ptype:1,//类型 1：原创 2：转发 3：点评
    sreason:'',
    price:"0",//商品价格信息
    color:'blue', //blue|red|yel|gray
    defaultNote:'我也来写几句…',
    isClearDefault:0, //是否清除默认文字
    src:"1",//发起地点
    srcshareid:'',//源分享id
    srcuin:'',//源分享发表人
    srcposttime:'',//源分享发表时间
	srcnickname:'',//源分享人昵称
	srcmsg:'',//源分享信息
    title:"转发到我的分享",
    imgInfo:[],//图片信息{id:"",src:"",alt:"",href:"#",itemPrice:""}
	tranCallBack:null,  //转发后回调：function(shareinfo);
    rd:{
      "btnCloseRd":"1057.2.1",//关闭按钮
      "btnCancelRd":"1057.2.4",//取消按钮
      "btnShareRd":"1057.2.3",//分享按钮
      "btnSynWb":"",//同步到微博
      "btnSynQz":""//同步到qzone
    },//统计rd
    errormsg:null,//错误信息
	cover:false,//是否生成覆盖层
	dragble:false//所有浮层是否可拖动
  };
  for(var i in config){
      if(typeof(config[i])=="object"){
        for(var ch in config[i]){
          opt[i][ch]=config[i][ch];
        }
      }else{
        opt[i]=config[i];
      }
    }
  if(!opt.uid || opt.uid == ""){
	opt.uid = $getUin();
  }
  //样式载入
  window.setTimeout(function(){
	$loadCss("http://static.paipaiimg.com/module/layout_transmit.css?t=20110505");
  },0);
  //$loadCss("http://static.paipaiimg.com/module/msg_tips.css");
  var path = "http://ext.paipai.com/qzone/IsLogin?comid="+opt.cid+"&t="+Math.random();
  //返回码统计对象_retCoder
  var _retCoder0=$returnCode({url:path,frequence:2});
    //期待回调LoginInfoCallBack
  $loadScript(path,"sharelogin");
  
  window.LoginInfoCallBack = function(conf){
    //返回码上报
    _retCoder0.report((conf.retcode=="0"?true:false),conf.retcode);
    if(conf.retcode == "1"){
		//如果未登陆
		$loginFrame({
			type:'func',
			check:false,
			model:false,
			action:function(){
				if(!opt.uid || opt.uid == ""){
					opt.uid = $getUin();
				}
				$transmit(opt);
			},
			"x":opt.left,
			"y":opt.top
		});
      return;
    };
  
    var html = $strReplace('<div class="layout_share layout_share_{#color#}"><div class="title">{#title#}<a href="javascript:" title="关闭" id="closeShare">关闭</a></div><div class="main_area"><div class="photo_area"><p class="photo">{#nickLogo#}</p><p class="name">{#nick#}</p></div><div class="details"><textarea id="shareCont" class="text_roll"><\/textarea><p class="num_count" id="shareNote">{#len#}/140</p><div class="goods" id="viewGoods"><p class="gs_comit" id="gsContent"></p><div class="gs_img_list"><ul id="itemImgsUl"></ul></div></div></div><div class="layout_bom"><button id="cancelShare">取消</button><button id="doshare">转发</button><div id="sync" class="tit_with" style="display:none"><p class="fx_qz_on" id="shareCoreQz" style="display:none">&nbsp;</p><p class="fx_t_on" id="shareCoreWb" style="display:none">&nbsp;</p><p class="tb">同步：</p></div></div></div></div>',
    {
      "{#color#}":opt.color,
      "{#title#}":opt.title,
      "{#nickLogo#}":$getUserPic(opt.uid,50),
      "{#nick#}":$strSubGB($getNick() || opt.uid,0,6,"…")
    });
   
    var fs=$float({
      cover:opt.cover,
      style:"none",
      html:html,
      left:opt.left,
      top:opt.top,
	  dragble:opt.dragble
    });

    /* @interface:153;
     * 接口url：http://ext.paipai.com/uinfo/cooperateaccountstatus
     * 接口名称：取腾讯微博及QQ空间开通状态
     * 期待回调：shareCoreCallback
     * @interfaceEnd*/
    //调用接口前全复位 
    var isSyncQz=0,
      isSyncWb=0;
    if(opt.ptype==1){
      $loadScript("http://ext.paipai.com/uinfo/cooperateaccountstatus?callback=shareCoreCallback");
    
      window.shareCoreCallback=function(info){
        if(info.retCode*1 == 0){
          if(info.TWbOpen*1==1 || info.QzoneOpen*1==1){
            var oQz=$id("shareCoreQz"),
              oWb=$id("shareCoreWb");
            $display("shareCoreSync");
            if(info.QzoneOpen*1==1){
              isSyncQz = 1;
              $display(oQz);
              oQz.onclick=function(){
                if(opt.rd["btnSynQz"]){
                  $countRd(opt.rd["btnSynQz"]);
                }
                if(oQz.className=="fx_qz"){
                  isSyncQz = 1;
                  oQz.className = "fx_qz_on";
                }else{
                  isSyncQz = 0;
                  oQz.className = "fx_qz";
                }
              }
            };
            if(info.TWbOpen*1==1){
              isSyncWb = 1;
              $display(oWb);
              oWb.onclick=function(){
                if(opt.rd["btnSynWb"]){
                  $countRd(opt.rd["btnSynWb"]);
                }
                if(oWb.className=="fx_t"){
                  isSyncWb = 1;
                  oWb.className = "fx_t_on";
                }else{
                  isSyncWb = 0;
                  oWb.className = "fx_t";
                }
              }
            };                
          }
        }
      }
    };
    
    $id("closeShare").onclick=function(){
      $countRd(opt.rd["btnCloseRd"]);
      fs.close();     
    };
      
    $id("cancelShare").onclick=function(){
      $countRd(opt.rd["btnCancelRd"]);
      fs.close();             
    };
      
    var that=$id("shareCont"),
      oNote=$id("shareNote");
    
    if(opt.defaultNote && opt.sreason==""){
      that.value=opt.defaultNote;
      $focus(that,"");
    }else{
      that.value=opt.sreason;
      $focus(that,0);
    };

    oNote.innerHTML=that.value.length+"/140";
    that.onkeyup=function(){
      var len = $getContentLenWithUrl(this.value, 20);
      oNote.innerHTML=len+"/140";
      if(len <= 140){
        oNote.className="num_count";
      }else{
        oNote.className="num_count num_count_spill";
      }
    };
    if(opt.errormsg){
       oNote.innerHTML=$htmlEncode(opt.errormsg);
       oNote.className="num_count num_count_spill";
    }    

    var gsContent = $id("gsContent");
    if(opt.imgInfo && opt.imgInfo.length > 0){
      $display("viewGoods");
      var html=[];
      var len = opt.imgInfo.length;      
      var listr = '<li><a href="javascript:" title="{#title#} {#price#}"><img src="{#src#}"/></a></li>'
      for(var i = 0; i < len; ++i){
        var img = opt.imgInfo[i];
        var str = listr.replace(/{#title#}/,img["alt"]).replace(/{#src#}/,img["src"]);            
        if(img["itemPrice"]){
           str = str.replace(/{#price#}/,img["itemPrice"]);
        }else{
           str = str.replace(/{#price#}/,opt.price>"0"?opt.price:"");
        }
        html.push(str);
      }
      $id("itemImgsUl").innerHTML=html.join("");
    }else{
      gsContent.className = "gs_comit_only";
    }
    gsContent.innerHTML = $htmlEncode(opt.srcnickname) + ": " + $htmlEncode(opt.srcmsg);
      
    //提交事件
    $id("doshare").onclick=function(){  
      var val=that.value;
	  if(opt.isClearDefault == 1){
		val = val == opt.defaultNote ? "" : val;
	  }
      var len = $getContentLenWithUrl(val, 20);
      switch(true){
        case len>140:
          oNote.innerHTML="超出"+(len-140)+"字";
          oNote.className="num_count num_count_spill";
        return;
      };
      $countRd(opt.rd["btnShareRd"]);
      var ext = opt.tranCallBack ? "1" : "0";
      var path = "http://ext.paipai.com/share/addshare?callback=addShareCore&ext="+ext+"&posttype="+opt.ptype+"&synqzone="+isSyncQz+"&synwb="+isSyncWb+"&sharetype="+opt.stype+"&src="+opt.src+"&context="+encodeURIComponent(opt.srcmsg)+"&comment="+encodeURIComponent(val)+"&id="+$strTrim(opt.cid)+"&srcshareid="+opt.srcshareid+"&srcuin="+opt.srcuin+"&srcposttime="+opt.srcposttime;
      if(opt.stype + "" == "4" && opt.imgInfo && opt.imgInfo.length > 0){
		var tempSrc = opt.imgInfo[0]["src"] ? $strTrim(opt.imgInfo[0]["src"]) : "";
		var tempAlt = opt.imgInfo[0]["alt"] ? $strTrim(opt.imgInfo[0]["alt"]) : "";
		var tempHref = opt.imgInfo[0]["href"] ? $strTrim(opt.imgInfo[0]["href"]) : "";
        path += "&logo="+encodeURIComponent(tempSrc)+"&desc="+encodeURIComponent(tempAlt)+"&url="+encodeURIComponent(tempHref);
      }
      
      var _retCoder1=$returnCode({url:path,frequence:2});
      $loadScript(path);
      
      fs.close();
      
      var waitHtml = '<div class="class="share_to_friend"><img src="http://pics.paipai.com/common/icon/loading.gif" align="absmiddle"/>正在转发，请稍候<div>';
      var fw=$float({
        cover:opt.cover,
        style:"stand",
        title:opt.title,
        width:'420',
        html:waitHtml,
        left:opt.left,
        top:opt.top,
        height:137,
		dragble:opt.dragble
      });
      window.addShareCore=function(info){
        //返回码上报
        _retCoder1.report();
        fw.close();
        var msg="";
        switch(info.ret+""){
           case "-1":
            $loginFrame({
				type:'func',
				check:false,
				model:false,
				action:function(){
					if(!opt.uid || opt.uid == ""){
						opt.uid = $getUin();
					}
					$transmit(opt);
				},
				"x":opt.left,
				"y":opt.top
			});
            return;
           break;
           case "0":
            
            var finishHtml = '<div class="class="share_to_friend"><!-- S 通用提示 --> <div class="box_hint_normal"> <span class="{#classname#}"></span> <div class="hint_content"> <p class="hint_title"><strong>{#username#}（{#uin#}）{#shareresult#}！</strong></p> <p class="hint_title"><a href="http://t.paipai.com/'+opt.uid+'/mine?PTAG=1063.16.4" target="_blank">点击查看我所有的分享</a></p><div class="hint_op"> <button id="closeSaveShare">关闭窗口</button> </div> </div> </div> <!-- E 通用提示 --><div>';
            finishHtml=$strReplace(finishHtml,{
                "{#username#}":$getNick(),
                "{#uin#}":opt.uid,
                "{#shareresult#}":"转发成功",
                "{#classname#}":"icon msg2-icon-right"
            });
            var fh=$float({
              cover:opt.cover,
              style:"stand",
              title:opt.title,
              width:'420',
              html:finishHtml,
              left:opt.left,
              top:opt.top,
			  dragble:opt.dragble
            });     
            $id("closeSaveShare").onclick=function(){
              fh.close();         
            };
			opt.tranCallBack && opt.tranCallBack(info.shareinfo);
           break;
           case "16":
            opt.errormsg = "转发内容中含敏感词，请重新输入";
            opt.sreason = that.value;
            $transmit(opt);          
           break;
           case "18":
            opt.errormsg = "您信息中的链接存在安全隐患";
            opt.sreason = that.value;
            $transmit(opt);          
           break;
           default:
            alert("服务繁忙，请稍后再试");
           break;
        };
      };    
    };
  };
}
function $tuanSms(obj) {
	//团购商品的短信提醒功能
	var option = {
		sendtime: null, //定时发送的时间
		varkeyvalue: "", //团购商品名称
		left: 0, //当前位置离左边框的位移
		top: 0,	//当前位置离顶部的位移
		currentFloatWindow: null, //保存当前浮动窗体的引用
		openSmsUrl: "http://my.paipai.com/user/subscribe_phone.shtml?src=1", //开通手机短息服务页面地址
		templete: {}, //浮层模板（自定义接口）
		onsuccess: $empty()
	}
	//默认模板
	var templete = {
		openSms:	'<div class="box_content"><div class="box_hint_normal"> <span class="icon msg3-icon-info"></span><div class="hint_content  phone_hint_content"><p class="hint_title"><strong>对不起，你未开通<span>拍拍手机短信服务</span>，暂时无法设置短信提醒。</strong></p><div class="hint_op  pmarginbottom"><p>开通拍拍手机短信服务，您可以：</p><p>1.<span class="fontBold"><span>免费设置</span>短信提醒功能</span></p><p>2.<span class="fontBold"><span>免费订阅</span>短信内容</span></p><p class="textindent">发货提醒、投诉处理提醒、中差评处理反馈、规则变更...</p><p class="ppaddingtop"><button id="btnOpenSms">立即开通</button><span class="hint_op_tiips1">开通后返回本页面设置短信提醒</span></p></div></div></div></div>',
		confirmSms:	'<div class="box_content"><div class="box_hint_normal"> <span class="icon msg3-icon-info"></span><div class="hint_content  phone_hint_content"><p class="hint_title"><strong>请在新打开的<span>拍拍手机短信服务</span>网页中完成开通。</strong></p><div class="hint_op"><p class="ppaddingtop"><button class="phone_hint_content_btn_long" id="btnSetSms">已开通，设置短信提醒</button><button class="phone_hint_content_btn_long" id="btnReopenSms">未开通，返回重新开通</button></p></div></div></div></div>',
		successSms:	'<div class="box_content"><div class="box_hint_normal"> <span class="icon msg3-icon-right"></span><div class="hint_content phone_hint_content"><p class="hint_title"><strong>您已成功设置短信提醒！</strong></p><p>短信提醒将于团购开始时发送至您绑定的手机。</p><div class="hint_op"><button id="btnCloseWindow">关闭窗口</button></div></div></div></div>',
		colorInfo:	'<div class="box_content"><div class="box_hint_normal"> <span class="icon msg3-icon-info"></span><div class="hint_content  phone_hint_content"><p class="hint_title"><strong>对不起，您的彩钻等级<span>未达到LV3</span>或者<span>已熄灭</span>，不能设置短信提醒。</strong></p><div class="hint_op "><p class="ppaddingtop"><button id="btnShowColorInfo">查看彩钻等级</button><button id="btnCloseColor">关闭</button></p></div></div></div></div>',
		errorInfo:	'<div class="box_content"><div class="box_hint_normal"> <span class="icon msg3-icon-info"></span><div class="hint_content  phone_hint_content"><p class="hint_title"><strong>当前系统繁忙，请稍候再重新设置短信提醒。</strong></p><div class="hint_op "><p class="ppaddingtop"><button id="btnCloseError">关闭</button></p></div></div></div></div>'
	}

	$extend(option, obj);
	$extend(templete, option.templete);
	option.left = (option.left == 0 ? ($getPageScrollWidth() + $getWindowWidth()/ 2 - 200): option.left);
	option.top = (option.top == 0 ? ($getPageScrollHeight() + $getWindowHeight()/2 - 200): option.top);
	window["remindSmsOption"] = option;
	//加载提醒浮层样式表
	$loadCss("http://static.paipaiimg.com/css/my/v1/subscibe_phone.css");

	//事件处理函数映射表
	var handleMap = {
		"btnShowColorInfo":function(){
			window.open("http://www.paipai.com/buyervip/my.shtml","_blank");	
		},
		"btnCloseColor":function(){
			window.remindSmsOption.currentFloatWindow && window.remindSmsOption.currentFloatWindow.close();	
		},
		"btnCloseError":function(){
			window.remindSmsOption.currentFloatWindow && window.remindSmsOption.currentFloatWindow.close();	
		},
		"btnCloseWindow":function(){
			window.remindSmsOption.currentFloatWindow && window.remindSmsOption.currentFloatWindow.close();	
		},
		"btnOpenSms": function (event) {
			//打开新页面，开通手机短信服务
			window.open(window.remindSmsOption.openSmsUrl);
			//关闭当前浮窗
			window.remindSmsOption.currentFloatWindow && window.remindSmsOption.currentFloatWindow.close();
			//打开新浮窗,用于确认用户已经开通短息服务
			var floatWindow = openFloatWindow(templete.confirmSms);	
			 //给确认短息服务模板中的“已开通，设置短信提醒”按钮添加事件处理
			bindEvent("btnSetSms",floatWindow);
			//给确认短息服务模板中的“未开通，返回重新开通”按钮添加事件处理  
			bindEvent("btnReopenSms",floatWindow);
		},
		"btnSetSms": function (event) {
			//关闭当前浮窗
			window.remindSmsOption.currentFloatWindow && window.remindSmsOption.currentFloatWindow.close();
			//打开新浮窗,提供用户设置短信提醒的功能
			//期待回调：timersms_callback
			$loadScript("http://service.paipai.com/cgi-bin/smssubscribe_timer?serviceid=107&sendtime=" + window.remindSmsOption.sendtime + "&varkeyvalue=" + window.remindSmsOption.varkeyvalue + "&t=" + Math.random());
		},
		"btnReopenSms": function (event) {
			//打开新页面，开通手机短信服务
			window.open(window.remindSmsOption.openSmsUrl);
		}
	}
	window.buyerVipCallBack = function(colorData){
		if(colorData.code == "401") {
			//未登录，显示登录框
			$loginFrame({
				type:'func',
				model:false,
				check:false,
				x:window.remindSmsOption.left,
				y:window.remindSmsOption.top,
				action: function () {
					//期待回调：buyerVipCallBack
					$loadScript("http://service.paipai.com/cgi-bin/buyervip_level?t=" + Math.random());
				}
			});
		} else if(colorData.code == "400" || parseInt(colorData.level, 10) < 3 || colorData.state == "0") {
			//展开浮窗,提示用户等级未达到LV3或者已熄灭
			var floatWindow = openFloatWindow(templete.colorInfo);
			//给提示用户开通短信服务模板中的"立即开通"按钮添加时间处理函数
			bindEvent("btnShowColorInfo",floatWindow);//"查看彩钻等级"按钮
			bindEvent("btnCloseColor",floatWindow);//"关闭窗体"按钮
		} else if(colorData.code == "200" && parseInt(colorData.level, 10) >= 3 && colorData.state == "1"){
			//期待回调：timersms_callback
			$loadScript("http://service.paipai.com/cgi-bin/smssubscribe_timer?serviceid=107&sendtime=" + window.remindSmsOption.sendtime + "&varkeyvalue=" + window.remindSmsOption.varkeyvalue + "&t=" + Math.random());
		}else{
			//错误提示浮层
			var floatWindow = openFloatWindow(templete.errorInfo);
			bindEvent("btnCloseError",floatWindow);//"关闭窗体"按钮
		}
	};
	window.errorBuyerVipCallBack = function(e) {
		//错误提示浮层
		var floatWindow = openFloatWindow(templete.errorInfo);
		bindEvent("btnCloseError",floatWindow);//"关闭窗体"按钮
	};
	window.timersms_callback = function(n){
		if(n == "1" || n == "2") {
			//展开浮窗,提示用户需要开通短信服务
			var floatWindow = openFloatWindow(templete.openSms);
			//给提示用户开通短信服务模板中的"立即开通"按钮添加时间处理函数
			bindEvent("btnOpenSms",floatWindow);
		} else if(n == "0") {
			//关闭浮窗
			//打开新浮窗,提示短信提醒设置成功
			var floatWindow = openFloatWindow(templete.successSms);
			window["remindSmsOption"].onsuccess();
			bindEvent("btnCloseWindow",floatWindow);
		} else {
			//错误提示浮层
			var floatWindow = openFloatWindow(templete.errorInfo);
			bindEvent("btnCloseError",floatWindow);//"关闭窗体"按钮
		}
	};
	//打开新浮窗
	function openFloatWindow(template) {
		return $floatTip({ width: "500", cover: false, style: 'stand', title: "设置短信提醒", html: template, left: window.remindSmsOption.left, top: window.remindSmsOption.top });
	};
	//绑定相关按钮的时间处理函数
	function bindEvent(id,floatWindow) {
		var e = $id(id);
		if (e) {
			window.remindSmsOption.currentFloatWindow = floatWindow;
			$addEvent(e, "click", handleMap[id]);
		}
	};

	$$(document).ready(function(){
		//显示登录框
		$loginFrame({
			type:'func',
			model:false,
			x:window.remindSmsOption.left,
			y:window.remindSmsOption.top,
			action: function () {
				//期待回调：buyerVipCallBack
				$loadScript("http://service.paipai.com/cgi-bin/buyervip_level?t=" + Math.random());
			}
		});
	});
}
/**
 * @author wubocao
 * 监测输入框内容变化函数
 * @require $getQuarz
 * @param {Object} dom 输入框元素
 * @param {Function} func 发生改变后回调函数
 * @param {Number} inteval检测间隔，默认为100毫秒
 */
function $valueMonitor(dom,func,inteval){
	var check=(function(option){
		var data=option;
		return function(){
			if(data.value!=data.dom.value){
				data.value=data.dom.value;
				data.func.apply(window,[data.value]);
			}
		}
	})({
		dom:dom,
		value:dom.value,
		func:func
	});
	return $getQuarz().addTimer({
		func:check,
		delay:inteval||100
	});
}
function $viewedGoods(showNum){
	var value=$getCookie("showView");
	var result="";
	if(value){
		var temp="";
		var goodsArr = value.split('{|}');
		var nowL = goodsArr.length;
		if(nowL > showNum) nowL = showNum;
		for (var i = 0; i < nowL; i++){
			if(i<4){
				temp = goodsArr[i].split('{:}'); 
				if(temp[1]){
					result += "<li><a target='_blank' href='http://auction1.paipai.com/"+temp[1]+"'><img src='http://img" + i + ".paipaiimg.com/7392e876/" + temp[3] + "' height='80' width='80' lg='11' alt='"+temp[0]+"' /></a><span><em>"+temp[4]+"</em></p></li>";
				}
			}
		}
	}
	return result;
}
function $weibo(opt) {
    //初始化参数配置
    var option = {
        //必选参数
        type: "",
        //调用类型:tAdd 发表微博;fAdd 一键收听;uCheck 检查是否微博用户;htTimeline 获取话题时间线;custom 自定义操作管道;userTimeline 获取用户时间线
        name: "",
        //要收听的用户帐号，可以传入数组批量收听
        content: "",
        //转播内容
        pic: "",
        //广播图片链接
        //非必选参数
        onsuccess: $empty(),
        confirm: false,
        //转播确认浮层，点转播时是否弹出微博内容编辑浮层
        fix:true,//转播确认浮层是否固定居中随屏幕滚动，如果为true则left和top无效
        left:"",//转播确认浮层的横坐标
        top:"",//转播确认浮层的纵坐标
        showSuccess: true,
        //程序成功执行后是否弹出提示浮层（可以在onsuccess里定义其它响应）
        op: "",
        //配合type传入的管道操作
        //内置参数
        config: {
            params: {}
        },
        //话题，如果获取话题时间线，必填
        httext: '',
        //分页标识 1 下一页 2 上一页 4 跳到最前一页
        pageflag: 1,
        //每次请求记录的条数（1-100条）
        reqnum: 20,
        //分页标识（第一页 填空，继续翻页：填上上次返回的 pageinfo）
        pageinfo: '',
        //用户时间线参数，第一页时填0,继续向下翻页，填上一次请求返回的最后一条记录id，翻页用,一般不用填
        lastid:0,
        //用户时间线参数，本页起始时间（第一页时填0，继续翻页：填上一次请求返回的最后一条记录时间,一般不用填
        pagetime:0,
        //放话题时间线的父元素
        container: null,
        appkey: "060743ad174843ad824bed3528ed608a",
        //appkey 默认为拍拍数码
        format: "json",
        //统计ptag
        ptag: "",
        //返回接口内容的格式
        cgi: "http://auction1.3c.paipai.com/microBlog.xhtml",
        css: "http://static.paipaiimg.com/module/tshare.css",
        templete: {
            "tAddConfirm": '<div class="tshare_mainc"><div class="tshare_main"><div class="tshare_note"><span class="tshare_ntit"><a target="_blank" href="{#url#}">{#name#}</a>转播给您的听众</span><span class="tshare_nnum" id="msgLen" >还剩<em >{#size#}</em>字</span></div><div class="tshare_textarea" ><textarea cols="" rows="" id="msgContent">{#msgcontent#}<\/textarea></div><div class="tshare_photos" style="{#showImg#}" id="tsharePhotos"><p><a id="hideImg" class="tshare_pac" href="#nolink" >取消图片</a></p><ul class="tshare_photos_list" id="twiterImg"><li class="s"><b></b><div class="i"><p><img height="80" src="{#pic#}" rel="{#pic#}"></p></div></li></ul></div><div class="tshare_action"><a href="#nolink" class="tshare_btn" id="sendMessage">转播</a></div></div></div>',
            "tAddSuccess": '<div class="tshare_suc"><h3><span class="msg2-icon-right"></span>转播成功！</h3><p><span id="closeTimer">3</span>秒后窗口自动关闭，<a href="#nolink" id="closeFl">立即关闭</a></p><a target="_blank" class="tshare_sucgo" href="{#url#}">去微博看看</a></div>',
            "tAddRepeat": '<div class="tshare_suc"><h3><span class="msg2-icon-warn"></span> 您已广播过相同内容的微博，不用重复发表。</h3><a target="_blank" class="tshare_sucgo" href="{#url#}">去微博看看</a></div>',
            "noRegister": '<div class="tshare_suc"><h3><span class="msg2-icon-warn"></span> 您的QQ号还没有注册微博！</h3><a class="tshare_sucgo" href="#nolink" id="closeFl">马上去注册</a></div>',
            "fAddSuccess": '<div class="tshare_suc"><h3><span class="msg3-icon-right"></span>收听成功！</h3><p><span id="closeTimer">3</span>秒后窗口自动关闭，<a href="#nolink" id="closeFl">立即关闭</a></p><a class="tshare_sucgo" href="{#url#}" target="_blank">去微博看看</a></div>',
            "htTimelineSuccess":"<li rel=\"{#timestamp#}\" id=\"{#id#}\"> <div class=\"userPic\"> <a rel=\"{#nick#}\" title=\"{#nick#}\" href=\"http:\/\/t.qq.com\/{#name#}\"> <img title=\"{#nick#}\" ctype=\"{#type#}\" card=\"1\" src=\"{#head#}\"> <\/a> <\/div> <div class=\"msgBox\"> <div rel=\"goalex\" class=\"userName\"> <strong> <a rel=\"{#nick#}\" ctype=\"2\" card=\"1\" title=\"{#nick#}\" href=\"http:\/\/t.qq.com\/{#name#}\">{#nick#}<\/a> <b title=\"\" class=\"ico_phone\">{#rebroadcast#}<\/b>: <\/strong> <\/div> <div class=\"msgCnt\">{#origtext#}<\/div> <div class=\"pubInfo\"> {#img#} <span class=\"left\"> {#date#}  {#from#} <\/span> <\/div> <\/div><\/li>",
            "userTimelineSuccess":"<li rel=\"{#timestamp#}\" id=\"{#id#}\"> <div class=\"userPic\"> <a rel=\"{#nick#}\" title=\"{#nick#}\" href=\"http:\/\/t.qq.com\/{#name#}\"> <img title=\"{#nick#}\" ctype=\"{#type#}\" card=\"1\" src=\"{#head#}\"> <\/a> <\/div> <div class=\"msgBox\"> <div rel=\"goalex\" class=\"userName\"> <strong> <a rel=\"{#nick#}\" ctype=\"2\" card=\"1\" title=\"{#nick#}\" href=\"http:\/\/t.qq.com\/{#name#}\">{#nick#}<\/a> <b title=\"\" class=\"ico_phone\">{#rebroadcast#}<\/b>: <\/strong> <\/div> <div class=\"msgCnt\">{#origtext#}<\/div> <div class=\"pubInfo\"> <span class=\"left\"> {#date#} {#from#} <\/span> <\/div> <\/div><\/li>"
        }
    }
    //合并参数
    if (opt.templete) { //如果有自定义模板，则更新内置模板
        for (var key in option.templete) {
            !opt.templete[key] && (opt.templete[key] = option.templete[key]);
        }
    }
    $extend(option, opt);
    //赋值全局变量
    window.PP_core_weibo_option = option;
    //加载样式
    option.css && $loadCss(option.css);
    //检查登录态并执行接口调用
    if (option.type) {
        //如果只是调用话题时间线则不弹出登录浮层
        (option.type == "htTimeline" || option.type == "userTimeline" || (option.type == "custiom" && option.op == "htTimeline")) ? controller() : checkLogin(controller);
    }
    //控制器，根据option.type配置管道，调用对应的模型进行队列操作
    function controller() {
        switch (option.type) {
        case "tAdd":
            model("uInfo|tAdd");
            break;
        case "fAdd":
            model("uInfo|fAdd");
            break;
            
case "htTimeline":
         model("htTimeline");
            break;
        case "userTimeline":
         model("userTimeline");
            break;    
            
        case "custom":
            model(option.op);
            break;
        }
    };
    //模型，处理操作数据，调用对应的视图进行显示
    function model(list) {
        //设置操作队列
        var queue = window.PP_core_weibo_option.queue;
        if (!queue || queue.length == 0) {
            queue = [];
            window.PP_core_weibo_option.queue = queue = list.split("|");
        }
        //操作函数对象
        if (!model.op) {
            model.op = {
                "uInfo": function () {
                    var uInfoCfg = {
                        path: 6,
                        params: {
                            appkey: option.appkey,
                            format: option.format
                        },
                        login: 1,
                        callBack: "uInfoHandler",
                        method: "get"
                    }
                    window[uInfoCfg.callBack] = function (d) {
                        var option = window.PP_core_weibo_option;
                        if (d.ret == 3) {
                            checkLogin(controller, false);
                        } else if (d.ret == 0) {
                            window.PP_core_weibo_option.uInfo = d.data;
                            //检查是否有后续操作，没有时表示$weibo执行完毕，调用onsuccess回调
                            option.queue.length > 0 ? model() : option.onsuccess();
                        } else {
                            alert("系统繁忙，请稍候重试");
                        }
                    }
                    loadCgi(uInfoCfg);
                },
                "tAdd": function () {
                    //如果用户帐户数据为空，则重置队列，设置优先获取用户数据
                    if (!window.PP_core_weibo_option.uInfo) {
                        window.PP_core_weibo_option.queue = null;
                        model("uInfo|" + option.op);
                        return;
                    }
                    if (option.confirm) {
                        view("tAddConfirm");
                    } else {
                        var tAddCfg = {
                            path: option.pic == "" ? 5 : 4,
                            params: {
                                appkey: option.appkey,
                                format: option.format,
                                content: option.content
                            },
                            login: 1,
                            callBack: "tAddHandler",
                            method: "post"
                        };
                        option.pic != "" && (tAddCfg.params.pic = option.pic);
                        window[tAddCfg.callBack] = function (d) {
                            var option = window.PP_core_weibo_option;
                            if (d.ret == 3) {
                                checkLogin(controller, false);
                            } else if (d.ret == 5 || (d.ret == 4 && d.errcode == 13)) {
                                view("tAddRepeat");
                            } else if (d.ret == 0) {
                                //检查是否有后续操作，没有时表示$weibo执行完毕，显示成功提示浮层并调用onsuccess回调
                                if (option.queue.length > 0) {
                                    model();
                                } else {
                                    option.showSuccess && view("tAddSuccess");
                                    option.ptag && $countRd(option.ptag);
                                    option.onsuccess();
                                }
                            } else if (d.ret == 1) {
                                $float({title: "操作失败", html: "广播到微博的内容不能为空。"});
                            } else {
                                alert("系统繁忙，请稍候重试");
                            }
                        }
                        loadCgi(tAddCfg);
                    }
                },
                "fAdd": function () {
                    //如果用户帐户数据为空，则重置队列，设置优先获取用户数据
                    if (!window.PP_core_weibo_option.uInfo) {
                        window.PP_core_weibo_option.queue = null;
                        model("uInfo|" + option.op);
                        return;
                    }
                    
                    window["empty"] = function(d){}
                    window["fAddHandler"] = function (d) {
                        var option = window.PP_core_weibo_option;
                        if (d.ret == 3) {
                            checkLogin(controller, false);
                        } else if (d.ret == 0) {
                            //检查是否有后续操作，没有时表示$weibo执行完毕，显示成功提示浮层并调用onsuccess回调
                            if (option.queue.length > 0) {
                                model();
                            } else {
                                option.showSuccess && view("fAddSuccess");
                                option.ptag && $countRd(option.ptag);
                                option.onsuccess();
                            }
                        } else {
                            alert("系统繁忙，请稍候重试");
                        }
                    }
                    if(option.name.constructor==Array) {
                        for(var i=0, len=option.name.length; i<len; i++) {
                            var fAddCfg = {
                                path: 2,
                                params: {
                                    appkey: option.appkey,
                                    format: option.format,
                                    name: option.name[i]
                                },
                                login: 1,
                                callBack: i == len -1 ? "fAddHandler" : "empty",
                                method: "post"
                            }
                            loadCgi(fAddCfg);
                        }
                    } else {
                        var fAddCfg = {
                            path: 2,
                            params: {
                                appkey: option.appkey,
                                format: option.format,
                                name: option.name
                            },
                            login: 1,
                            callBack: "fAddHandler",
                            method: "post"
                        }
                        loadCgi(fAddCfg);
                    }
                },
                "userTimeline":function(){//获取用户时间线
                    var names = option.name;
                    if(option.name.constructor==Array){//多个用户时以逗号分隔
                        names = ption.name.join(",");    
                    }
                    var userTimelineCfg = {
                        path: 9,
                        params: {
                            appkey: option.appkey,
                            format: option.format,
                            names: names,
                            pageflag: option.pageflag,
                            reqnum: option.reqnum,
                            pageinfo: option.pageinfo,
                            lastid:option.lastid,
                            pagetime:option.pagetime,
                            type:1,
                            contenttype:0,
                            accesslevel:0
                        },
                        login: 0,
                        callBack: "userTimelineHandler",
                        method: "get",
                        _t: Math.random()
                    }
                    $extend(userTimelineCfg.params, window.PP_core_weibo_option.config.params);
                    window[userTimelineCfg.callBack] = function (d) {
                        var option = window.PP_core_weibo_option;
                        var option = window.PP_core_weibo_option;
                        if (d.ret == 3) {
                            checkLogin(controller, false);
                        } else if (d.ret == 0) {
                            window.PP_core_weibo_option.tlData = d.data;
                            var lastItem = d.data.info[d.data.info.length-1];
                            window.PP_core_weibo_option.lastid = lastItem.id;
                            window.PP_core_weibo_option.pagetime = lastItem.timestamp;
                            //检查是否有后续操作，没有时表示$weibo执行完毕，显示成功提示浮层并调用onsuccess回调
                            if (option.queue.length > 0) {
                                model();
                            } else {
                                option.showSuccess && view("userTimelineSuccess", d.data);
                                option.onsuccess();
                            }
                        } else {
                            //alert("系统繁忙，请稍候重试");
                        }
                    }
                    loadCgi(userTimelineCfg);
                },
                "htTimeline": function(){ //获取话题时间线
                    var htTimelineCfg = {
                        path: 7,
                        params: {
                            appkey: option.appkey,
                            format: option.format,
                            httext: option.httext,
                            pageflag: option.pageflag,
                            reqnum: option.reqnum,
                            pageinfo: option.pageinfo
                        },
                        login: 0,
                        callBack: "htTimelineHandler",
                        method: "get",
                        _t: Math.random()
                    }
                    $extend(htTimelineCfg.params, window.PP_core_weibo_option.config.params);
                    window[htTimelineCfg.callBack] = function (d) {
                        var option = window.PP_core_weibo_option;
                        if (d.ret == 3) {
                            checkLogin(controller, false);
                        } else if (d.ret == 0) {
                            window.PP_core_weibo_option.tlData = d.data;
                            //检查是否有后续操作，没有时表示$weibo执行完毕，显示成功提示浮层并调用onsuccess回调
                            if (option.queue.length > 0) {
                                model();
                            } else {
                                option.showSuccess && view("htTimelineSuccess", d.data);
                                option.onsuccess();
                            }
                        } else {
                            //alert("系统繁忙，请稍候重试");
                        }
                    }
                    loadCgi(htTimelineCfg);
                }
            };
        }
        //执行队列操作
        queue.length > 0 && model.op[queue.shift()]();
        function loadCgi(config) {
            var hc = [],
                url = option.cgi;
            for (var i in config) {
                if (i == 'params') {
                    var phc = [];
                    for (var j in config[i]) {
                        phc.push(j + '=' + (j == 'content' ? encodeURIComponent(config[i][j]) : config[i][j]));
                    }
                    hc.push(i + '=' + encodeURIComponent(encodeURIComponent(phc.join('&'))));
                } else {
                    hc.push(i + '=' + config[i]);
                }
            }
            url = url + '?' + hc.join('&') + '&t=' + Math.random();
            $loadScript(url);
        };
    };
    //视图，显示UI内容
    function view(fl, data) {
        var tmpl = option.templete;
        if (!view.fl) {
            view.fl = {
                "tAddConfirm": function () {
                    var uInfo = window.PP_core_weibo_option.uInfo,
                        html = $strReplace(tmpl.tAddConfirm, {
                            "{#name#}": uInfo.name,
                            "{#url#}": "http://t.qq.com/" + uInfo.name,
                            "{#msgcontent#}": option.content,
                            "{#size#}": 140 - msgLength(option.content),
                            "{#pic#}": option.pic,
                            "{#showImg#}": option.pic == "" ? "display:none" : ""
                        }),
                        opt = {
                            title: '转播到腾讯微博',
                            html: html,
                            cName: 'module_box_normal tshare_box',
                            fix: option.fix,
                            top:option.top,
                            left:option.left,
                            width: '550'
                        };
                    
                 window.PP_core_weibo_option.fl = $float(opt);
                    //绑定按钮事件
                    option.confirm = false;
                    $id("hideImg") && ($id("hideImg").onclick = hideImg);
                    $id("msgContent") && ($id("msgContent").onkeyup = getMsgLength);
                    $id("sendMessage") && ($id("sendMessage").onclick = function () {
                        if(getMsgLength() === 0) {
                            option.content = $id("msgContent").value;
                            window.PP_core_weibo_option.fl.close();
                            model.op.tAdd();
                        } else {
                            var interval = count = index = 0, msg = "超出<em>" + (msgLength($id("msgContent").value) - 140) + "</em>字",
                            c = ['<span style="color:#FFF;">' + msg + '</span>', '<span style="color:#C00;">' + msg + '</span>'];
                            interval = setInterval(function() {
                                $id("msgLen").innerHTML = $xss(c[index = 1 - index], "none");
                                ++count == 5 && clearInterval(interval);
                            }, 100);
                        }
                    });
                },
                "tAddSuccess": function () {
                    var uInfo = window.PP_core_weibo_option.uInfo,
                        twiterClose, html = $strReplace(tmpl.tAddSuccess, {
                            "{#url#}": "http://t.qq.com/" + uInfo.name
                        }),
                        opt = {
                            title: '转播成功',
                            html: html,
                            cName: 'module_box_normal tshare_box',
                            fix: true,
                            onInit: function (o) {
                                var times = 3;
                                twiterClose = setInterval(function () {
                                    if (times == 0) {
                                        clearInterval(twiterClose);
                                        window.PP_core_weibo_option.fl.close();
                                        return;
                                    }
                                    $id("closeTimer") && ($id("closeTimer").innerHTML = times--);
                                }, 1000);
                            },
                            width: '350'
                        };
                    window.PP_core_weibo_option.fl = $float(opt);
                    //绑定按钮事件
                    $id("closeFl") && ($id("closeFl").onclick = function () {
                        clearInterval(twiterClose);
                        window.PP_core_weibo_option.fl.close();
                    });
                },
                "tAddRepeat": function () {
                    var uInfo = window.PP_core_weibo_option.uInfo,
                        twiterClose, html = $strReplace(tmpl.tAddRepeat, {
                            "{#url#}": "http://t.qq.com/" + uInfo.name
                        }),
                        opt = {
                            title: '转播到腾讯微博',
                            html: html,
                            cName: 'module_box_normal tshare_box',
                            fix: true,
                            onInit: function (o) {
                                var times = 3;
                                twiterClose = setInterval(function () {
                                    if (times == 0) {
                                        clearInterval(twiterClose);
                                        window.PP_core_weibo_option.fl.close();
                                        return;
                                    }
                                    $id("closeTimer") && ($id("closeTimer").innerHTML = times--);
                                }, 1000);
                            },
                            width: '350'
                        };
                    window.PP_core_weibo_option.fl = $float(opt);
                    //绑定按钮事件
                    $id("closeFl") && ($id("closeFl").onclick = function () {
                        clearInterval(twiterClose);
                        window.PP_core_weibo_option.fl.close();
                    });
                },
                "fAddSuccess": function () {
                    var twiterClose, html = $strReplace(tmpl.fAddSuccess, {
                        "{#url#}": "http://t.qq.com/" + option.name
                    }),
                        opt = {
                            title: '收听成功',
                            html: html,
                            cName: 'module_box_normal tshare_box',
                            fix: true,
                            onInit: function (o) {
                                var times = 3;
                                twiterClose = setInterval(function () {
                                    if (times == 0) {
                                        clearInterval(twiterClose);
                                        window.PP_core_weibo_option.fl.close();
                                        return;
                                    }
                                    $id("closeTimer") && ($id("closeTimer").innerHTML = times--);
                                }, 1000);
                            },
                            width: '350'
                        };
                    window.PP_core_weibo_option.fl = $float(opt);
                    //绑定按钮事件
                    $id("closeFl") && ($id("closeFl").onclick = function () {
                        window.PP_core_weibo_option.fl.close();
                    });
                },
                "noRegister": function () {
                    var opt = {
                        title: '转播到腾讯微博',
                        html: tmpl.noRegister,
                        cName: 'module_box_normal tshare_box',
                        fix: true,
                        leaver: 3,
                        width: '350'
                    };
                    window.PP_core_weibo_option.fl = $float(opt);
                    //绑定按钮事件
                    $id("closeFl") && ($id("closeFl").onclick = function () {
                        window.PP_core_weibo_option.fl.close();
                        window.open("http://t.qq.com/invite/?pref=qqcom.mininav", "_blank");
                    });
                },
                "userTimelineSuccess": function(data){ //显示话题
                 var template = tmpl.userTimelineSuccess;
                     var htmls=[],html,rebroadcast;
                     var infos = data.info, info, rebroadcase,time,content,now,commitDate,timeLabel,headPic;
                     for(var i = 0, a=infos.length; i < a; i++){
                     info = infos[i];
                         rebroadcast = info.type == 2 ? '转播' : '';
                         commitDate = new Date(info.timestamp*1000);
                         now = new Date();
                         time = $formatDate(commitDate, 'yyyy年m月d日 hh:ii');
                         content = $xss(info.origtext, 'html');
                         if(now.getMonth() == commitDate.getMonth()){
                         timeLabel = now.getDay() == commitDate.getDay() ? '今天 '+$formatDate(commitDate, 'hh:ii') :
                         now.getDay() - 1 == commitDate.getDay() ? '昨天 '+ $formatDate(commitDate, 'hh:ii') :
                         $formatDate(commitDate, 'm月 hh:ii');
                         }else{
                         timeLabel = time;
                         }
                         headPic = /app\.qlogo\.cn$/.test(info.head) ? 'http://mat1.gtimg.com/www/mb/images/head_50.jpg' : info.head.replace('app.qlogo.cn', 't1.qlogo.cn') + '/50';
                         html = template.replace(/{#timestamp#}/,info.timestamp)
                         .replace(/{#id#}/, info.id)
                             .replace(/{#nick#}/g, info.nick)
                             .replace(/{#name#}/g, info.name)
                             .replace(/{#type#}/, info.type)
                             .replace(/{#rebroadcast#}/, rebroadcast)
                             .replace(/{#origtext#}/, content)
                             .replace(/{#head#}/, headPic)
                             .replace(/{#time#}/, time)
                             .replace(/{#date#}/, timeLabel)
                             .replace(/{#from#}/, '来自'+info.from);
                             htmls.push(html);
                     }
                    
                     if(window.PP_core_weibo_option.container){
                     window.PP_core_weibo_option.container.innerHTML = $xss(htmls.join(''), 'none');
                     }else{
                     return htmls.join('');
                     }
                },
                "htTimelineSuccess": function(data){ //显示话题
                 var template = tmpl.htTimelineSuccess;
                     var htmls=[],html,rebroadcast;
                     var infos = data.info, info, rebroadcase,time,content,now,commitDate,timeLabel,headPic, img;
                     for(var i = 0, a=infos.length; i < a; i++){
                     info = infos[i]; img='';
                         rebroadcast = info.type == 2 ? '转播' : '';
                         commitDate = new Date(info.timestamp*1000);
                         now = new Date();
                         time = $formatDate(commitDate, 'yyyy年m月d日 hh:ii');
                         content = $xss(info.text, 'none');
                         if(now.getMonth() == commitDate.getMonth()){
                         timeLabel = now.getDay() == commitDate.getDay() ? '今天 '+$formatDate(commitDate, 'hh:ii') :
                         now.getDay() - 1 == commitDate.getDay() ? '昨天 '+ $formatDate(commitDate, 'hh:ii') :
                         $formatDate(commitDate, 'm月 hh:ii');
                         }else{
                         timeLabel = time;
                         }
                         if(info.image){
                             for(var m=0; m<info.image.length; m++){
                                 img += '<span onmouseover="this.firstChild.style.display=\'\'" onmouseout="this.children[0].style.display=\'none\'"><img style="z-index:1000;display:none;position:absolute;" src="'+info.image[m]+'/460"/><img  src='+info.image[m]+'/></span>';
                             }
                             img += '<br/>';
                         }
                         headPic = /app\.qlogo\.cn$/.test(info.head) ? 'http://mat1.gtimg.com/www/mb/images/head_50.jpg' : info.head.replace('app.qlogo.cn', 't1.qlogo.cn') + '/50';
                         html = template.replace(/{#timestamp#}/,info.timestamp)
                         .replace(/{#id#}/, info.id)
                             .replace(/{#nick#}/g, info.nick)
                             .replace(/{#name#}/g, info.name)
                             .replace(/{#type#}/, info.type)
                             .replace(/{#rebroadcast#}/, rebroadcast)
                             .replace(/{#origtext#}/, content)
                             .replace(/{#head#}/, headPic)
                             .replace(/{#time#}/, time)
                             .replace(/{#img#}/, img)
                             .replace(/{#date#}/, timeLabel)
                             .replace(/{#from#}/, '来自'+info.from);
                             htmls.push(html);
                     }
                    
                     if(window.PP_core_weibo_option.container){
                     window.PP_core_weibo_option.container.innerHTML = $xss(htmls.join(''), 'none');
                     }else{
                     return htmls.join('');
                     }
                }
            };
        }
        view.fl[fl] && view.fl[fl](data);
        function msgLength(str) {
            return parseInt($strTrim($decodeHtml(str)).length);
        };
        function hideImg() {
            if ($id("twiterImg").style.display == 'none') {
                $id("twiterImg").style.display = '';
                $id("hideImg").innerHTML = '取消图片';
            } else {
                $id("twiterImg").style.display = 'none';
                $id("hideImg").innerHTML = '附加图片';
            }
        };
        // 检测字数，微博的信息的字数不应超过140
        function getMsgLength() {
            obj = $id("msgContent");
            var length = msgLength(obj.value);
            if (length > 140) {
                $id("msgLen").innerHTML = "超出<em>" + (length - 140) + "</em>字";
                return -1;
            } else {
                $id("msgLen").innerHTML = "还剩<em>" + (140 - length) + "</em>字";
                return 0;
            }
        };
    };
    function checkLogin(callback, force) {
        $ready(function () {
            $loginFrame({
                type: 'func',
                model: false,
                check: force == undefined ? true : false,
                title: "请您登录后继续",
                action: callback
            });
        });
    };
}
